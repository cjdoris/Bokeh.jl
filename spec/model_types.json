[{"name": "AbstractButton", "bases": ["Widget"], "mro": ["AbstractButton", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A base class that defines common properties for all button types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class that defines common properties for all button types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "button_type", "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')", "desc": "A style for the button, signifying it's role. Possible values are one of the\nfollowing:\n\n.. bokeh-plot::\n    :source-position: none\n\n    from bokeh.core.enums import ButtonType\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import Button\n\n    show(column(\n        [Button(label=button_type, button_type=button_type) for button_type in ButtonType]\n        ))", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A style for the button, signifying it's role. Possible values are one of the\nfollowing:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot::\n    :source-position: none\n\n    from bokeh.core.enums import ButtonType\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import Button\n\n    show(column(\n        [Button(label=button_type, button_type=button_type) for button_type in ButtonType]\n        ))"]}]}]}, "default": "default"}, {"name": "icon", "type": "Nullable(Instance(Icon))", "desc": "An optional image appearing to the left of button's text. An instance of\n:class:`~bokeh.models.Icon` (such as :class:`~bokeh.models.BuiltinIcon`,\n:class:`~bokeh.models.SVGIcon`, or :class:`~bokeh.models.TablerIcon`).`", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional image appearing to the left of button's text. An instance of\n", {"type": "problematic", "children": [":class:`~bokeh.models.Icon`"]}, " (such as ", {"type": "problematic", "children": [":class:`~bokeh.models.BuiltinIcon`"]}, ",\n", {"type": "problematic", "children": [":class:`~bokeh.models.SVGIcon`"]}, ", or ", {"type": "problematic", "children": [":class:`~bokeh.models.TablerIcon`"]}, ").`"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": null}, {"name": "label", "type": "String", "desc": "The text label for the button to display.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text label for the button to display."]}]}, "default": "Button"}]}, {"name": "AbstractGroup", "bases": ["Widget"], "mro": ["AbstractGroup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Abstract base class for all kinds of groups.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for all kinds of groups."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "labels", "type": "List(String)", "desc": "List of text labels contained in this group.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["List of text labels contained in this group."]}]}, "default": []}]}, {"name": "AbstractSlider", "bases": ["Widget"], "mro": ["AbstractSlider", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "bar_color", "type": "Color", "desc": "Acceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ",\n", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}, ", or ", {"type": "literal", "children": ["'hsl(60deg 100% 50% / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\nand a is between 0 and 1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern"]}]}]}]}, "default": "#e6e6e6"}, {"name": "direction", "type": "Enum('ltr', 'rtl')", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": "ltr"}, {"name": "format", "type": "Either(String, Instance(TickFormatter))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": ""}, {"name": "orientation", "type": "Enum('horizontal', 'vertical')", "desc": "Orient the slider either horizontally (default) or vertically.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Orient the slider either horizontally (default) or vertically."]}]}, "default": "horizontal"}, {"name": "show_value", "type": "Bool", "desc": "Whether or not show slider's value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether or not show slider's value."]}]}, "default": true}, {"name": "title", "type": "Nullable(String)", "desc": "The slider's label (supports :ref:`math text <ug_styling_mathtext>`).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The slider's label (supports ", {"type": "problematic", "children": [":ref:`math text <ug_styling_mathtext>`"]}, ")."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "default": ""}, {"name": "tooltips", "type": "Bool", "desc": "Display the slider's current value in a tooltip.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Display the slider's current value in a tooltip."]}]}, "default": true}]}, {"name": "Action", "bases": ["MenuItem"], "mro": ["Action", "MenuItem", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "description", "type": "Nullable(String)", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "icon", "type": "Nullable(Instance(Icon))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "label", "type": "Required(String)", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": "<Undefined>"}, {"name": "menu", "type": "Nullable(Instance(Menu))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": null}]}, {"name": "ActionTool", "bases": ["Tool"], "mro": ["ActionTool", "Tool", "Model"], "desc": "A base class for tools that are buttons in the toolbar.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for tools that are buttons in the toolbar."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "AdaptiveTicker", "bases": ["ContinuousTicker"], "mro": ["AdaptiveTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate \"nice\" round ticks at any magnitude.\n\nCreates ticks that are \"base\" multiples of a set of given\nmantissas. For example, with ``base=10`` and\n``mantissas=[1, 2, 5]``, the ticker will generate the sequence::\n\n    ..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ...", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate \"nice\" round ticks at any magnitude."]}, {"type": "paragraph", "children": ["Creates ticks that are \"base\" multiples of a set of given\nmantissas. For example, with ", {"type": "literal", "children": ["base=10"]}, " and\n", {"type": "literal", "children": ["mantissas=[1, 2, 5]"]}, ", the ticker will generate the sequence:"]}, {"type": "literal_block", "children": ["..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ..."]}]}, "props": [{"name": "base", "type": "Float", "desc": "The multiplier to use for scaling mantissas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The multiplier to use for scaling mantissas."]}]}, "default": 10.0}, {"name": "mantissas", "type": "Seq(Float)", "desc": "The acceptable list numbers to generate multiples of.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The acceptable list numbers to generate multiples of."]}]}, "default": [1, 2, 5]}, {"name": "max_interval", "type": "Nullable(Float)", "desc": "The largest allowable interval between two adjacent ticks.\n\n.. note::\n    To specify an unbounded interval, set to ``None``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The largest allowable interval between two adjacent ticks."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["To specify an unbounded interval, set to ", {"type": "literal", "children": ["None"]}, "."]}]}]}, "default": null}, {"name": "min_interval", "type": "Float", "desc": "The smallest allowable interval between two adjacent ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The smallest allowable interval between two adjacent ticks."]}]}, "default": 0.0}]}, {"name": "AjaxDataSource", "bases": ["WebDataSource"], "mro": ["AjaxDataSource", "WebDataSource", "ColumnDataSource", "ColumnarDataSource", "DataSource", "Model"], "desc": "A data source that can populate columns by making Ajax calls to REST\nendpoints.\n\nThe ``AjaxDataSource`` can be especially useful if you want to make a\nstandalone document (i.e. not backed by the Bokeh server) that can still\ndynamically update using an existing REST API.\n\nThe response from the REST API should match the ``.data`` property of a\nstandard ``ColumnDataSource``, i.e. a JSON dict that maps names to arrays\nof values:\n\n.. code-block:: python\n\n    {\n        'x' : [1, 2, 3, ...],\n        'y' : [9, 3, 2, ...]\n    }\n\nAlternatively, if the REST API returns a different format, a ``CustomJS``\ncallback can be provided to convert the REST response into Bokeh format,\nvia the ``adapter`` property of this data source.\n\nInitial data can be set by specifying the ``data`` property directly.\nThis is necessary when used in conjunction with a ``FactorRange``, even\nif the columns in `data`` are empty.\n\nA full example can be seen at :bokeh-tree:`examples/basic/data/ajax_source.py`", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A data source that can populate columns by making Ajax calls to REST\nendpoints."]}, {"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["AjaxDataSource"]}, " can be especially useful if you want to make a\nstandalone document (i.e. not backed by the Bokeh server) that can still\ndynamically update using an existing REST API."]}, {"type": "paragraph", "children": ["The response from the REST API should match the ", {"type": "literal", "children": [".data"]}, " property of a\nstandard ", {"type": "literal", "children": ["ColumnDataSource"]}, ", i.e. a JSON dict that maps names to arrays\nof values:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["{"]}, "\n    ", {"type": "inline", "children": ["'x'"]}, " ", {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["3"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["..."]}, {"type": "inline", "children": ["],"]}, "\n    ", {"type": "inline", "children": ["'y'"]}, " ", {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["9"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["3"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["..."]}, {"type": "inline", "children": ["]"]}, "\n", {"type": "inline", "children": ["}"]}]}, {"type": "paragraph", "children": ["Alternatively, if the REST API returns a different format, a ", {"type": "literal", "children": ["CustomJS"]}, "\ncallback can be provided to convert the REST response into Bokeh format,\nvia the ", {"type": "literal", "children": ["adapter"]}, " property of this data source."]}, {"type": "paragraph", "children": ["Initial data can be set by specifying the ", {"type": "literal", "children": ["data"]}, " property directly.\nThis is necessary when used in conjunction with a ", {"type": "literal", "children": ["FactorRange"]}, ", even\nif the columns in ", {"type": "title_reference", "children": ["data`"]}, " are empty."]}, {"type": "paragraph", "children": ["A full example can be seen at ", {"type": "problematic", "children": [":bokeh-tree:`examples/basic/data/ajax_source.py`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"bokeh-tree\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-tree\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"bokeh-tree\"."]}]}]}, "props": [{"name": "content_type", "type": "String", "desc": "Set the \"contentType\" parameter for the Ajax request.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Set the \"contentType\" parameter for the Ajax request."]}]}, "default": "application/json"}, {"name": "http_headers", "type": "Dict(String, String)", "desc": "Specify HTTP headers to set for the Ajax request.\n\nExample:\n\n.. code-block:: python\n\n    ajax_source.headers = { 'x-my-custom-header': 'some value' }", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify HTTP headers to set for the Ajax request."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["ajax_source"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["headers"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["{"]}, " ", {"type": "inline", "children": ["'x-my-custom-header'"]}, {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["'some value'"]}, " ", {"type": "inline", "children": ["}"]}]}]}, "default": {}}, {"name": "if_modified", "type": "Bool", "desc": "Whether to include an ``If-Modified-Since`` header in Ajax requests\nto the server. If this header is supported by the server, then only\nnew data since the last request will be returned.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to include an ", {"type": "literal", "children": ["If-Modified-Since"]}, " header in Ajax requests\nto the server. If this header is supported by the server, then only\nnew data since the last request will be returned."]}]}, "default": false}, {"name": "method", "type": "Enum('POST', 'GET')", "desc": "Specify the HTTP method to use for the Ajax request (GET or POST)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify the HTTP method to use for the Ajax request (GET or POST)"]}]}, "default": "POST"}, {"name": "polling_interval", "type": "Nullable(Int)", "desc": "A polling interval (in milliseconds) for updating data source.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A polling interval (in milliseconds) for updating data source."]}]}, "default": null}]}, {"name": "AllIndices", "bases": ["Filter"], "mro": ["AllIndices", "Filter", "Model"], "desc": "Trivial filter that includes all indices in a dataset. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Trivial filter that includes all indices in a dataset."]}]}, "props": []}, {"name": "AllLabels", "bases": ["LabelingPolicy"], "mro": ["AllLabels", "LabelingPolicy", "Model"], "desc": "Select all labels even if they overlap. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Select all labels even if they overlap."]}]}, "props": []}, {"name": "Annotation", "bases": ["Renderer"], "mro": ["Annotation", "Renderer", "Model"], "desc": "Base class for all annotation models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for all annotation models."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "AnnularWedge", "bases": ["XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["AnnularWedge", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render annular wedges.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/AnnularWedge.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render annular wedges."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/AnnularWedge.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "direction", "type": "Enum('clock', 'anticlock')", "desc": "Which direction to stroke between the start and end angles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which direction to stroke between the start and end angles."]}]}, "default": "anticlock"}, {"name": "end_angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to end the annular wedges, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to end the annular wedges, as measured from the horizontal."]}]}, "default": {"type": "field", "field": "end_angle"}}, {"name": "end_angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the annular wedges."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the annular wedges."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the annular wedges."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the annular wedges."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the annular wedges."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the annular wedges."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the annular wedges."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the annular wedges."]}]}, "default": 1.0}, {"name": "inner_radius", "type": "DistanceSpec(units_default='data')", "desc": "The inner radii of the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The inner radii of the annular wedges."]}]}, "default": {"type": "field", "field": "inner_radius"}}, {"name": "inner_radius_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the annular wedges."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the annular wedges."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the annular wedges."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the annular wedges."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the annular wedges."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the annular wedges."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the annular wedges."]}]}, "default": 1}, {"name": "outer_radius", "type": "DistanceSpec(units_default='data')", "desc": "The outer radii of the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The outer radii of the annular wedges."]}]}, "default": {"type": "field", "field": "outer_radius"}}, {"name": "outer_radius_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "start_angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to start the annular wedges, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to start the annular wedges, as measured from the horizontal."]}]}, "default": {"type": "field", "field": "start_angle"}}, {"name": "start_angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the center of the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the center of the annular wedges."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the center of the annular wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the center of the annular wedges."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "Annulus", "bases": ["XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Annulus", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render annuli.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Annulus.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render annuli."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Annulus.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the annuli."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the annuli."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the annuli."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the annuli."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the annuli."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the annuli."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the annuli."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the annuli."]}]}, "default": 1.0}, {"name": "inner_radius", "type": "DistanceSpec(units_default='data')", "desc": "The inner radii of the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The inner radii of the annuli."]}]}, "default": {"type": "field", "field": "inner_radius"}}, {"name": "inner_radius_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the annuli."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the annuli."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the annuli."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the annuli."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the annuli."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the annuli."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the annuli."]}]}, "default": 1}, {"name": "outer_radius", "type": "DistanceSpec(units_default='data')", "desc": "The outer radii of the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The outer radii of the annuli."]}]}, "default": {"type": "field", "field": "outer_radius"}}, {"name": "outer_radius_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the center of the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the center of the annuli."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the center of the annuli.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the center of the annuli."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "Arc", "bases": ["XYGlyph", "LineGlyph"], "mro": ["Arc", "XYGlyph", "LineGlyph", "Glyph", "Model"], "desc": "Render arcs.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Arc.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render arcs."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Arc.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "direction", "type": "Enum('clock', 'anticlock')", "desc": "Which direction to stroke between the start and end angles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which direction to stroke between the start and end angles."]}]}, "default": "anticlock"}, {"name": "end_angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to end the arcs, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to end the arcs, as measured from the horizontal."]}]}, "default": {"type": "field", "field": "end_angle"}}, {"name": "end_angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the arcs."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the arcs."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the arcs."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the arcs."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the arcs."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the arcs."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the arcs."]}]}, "default": 1}, {"name": "radius", "type": "DistanceSpec(units_default='data')", "desc": "Radius of the arc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Radius of the arc."]}]}, "default": {"type": "field", "field": "radius"}}, {"name": "radius_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "start_angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to start the arcs, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to start the arcs, as measured from the horizontal."]}]}, "default": {"type": "field", "field": "start_angle"}}, {"name": "start_angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the center of the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the center of the arcs."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the center of the arcs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the center of the arcs."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "Arrow", "bases": ["DataAnnotation"], "mro": ["Arrow", "DataAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render arrows as an annotation.\n\nSee :ref:`ug_basic_annotations_arrows` for information on plotting arrows.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render arrows as an annotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_arrows`"]}, " for information on plotting arrows."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "end", "type": "Nullable(Instance(ArrowHead))", "desc": "Instance of ``ArrowHead``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Instance of ", {"type": "literal", "children": ["ArrowHead"]}, "."]}]}, "default": "{\"__type__\": \"OpenHead\", \"name\": \"OpenHead\", \"type\": \"object\"}"}, {"name": "end_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the end_x and end_y attributes. Interpreted as \"data\nspace\" units by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the end_x and end_y attributes. Interpreted as \"data\nspace\" units by default."]}]}, "default": "data"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the arrow body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the arrow body."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the arrow body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the arrow body."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the arrow body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the arrow body."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the arrow body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the arrow body."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the arrow body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the arrow body."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the arrow body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the arrow body."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the arrow body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the arrow body."]}]}, "default": 1}, {"name": "start", "type": "Nullable(Instance(ArrowHead))", "desc": "Instance of ``ArrowHead``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Instance of ", {"type": "literal", "children": ["ArrowHead"]}, "."]}]}, "default": null}, {"name": "start_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the start_x and start_y attributes. Interpreted as \"data\nspace\" units by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the start_x and start_y attributes. Interpreted as \"data\nspace\" units by default."]}]}, "default": "data"}, {"name": "x_end", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to locate the end of the arrows.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to locate the end of the arrows."]}]}, "default": {"type": "field", "field": "x_end"}}, {"name": "x_start", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to locate the start of the arrows.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to locate the start of the arrows."]}]}, "default": {"type": "field", "field": "x_start"}}, {"name": "y_end", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to locate the end of the arrows.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to locate the end of the arrows."]}]}, "default": {"type": "field", "field": "y_end"}}, {"name": "y_start", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to locate the start of the arrows.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to locate the start of the arrows."]}]}, "default": {"type": "field", "field": "y_start"}}]}, {"name": "ArrowHead", "bases": ["Marking"], "mro": ["ArrowHead", "Marking", "Model"], "desc": "Base class for arrow heads.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for arrow heads."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "size", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The size, in pixels, of the arrow head.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The size, in pixels, of the arrow head."]}]}, "default": 25}]}, {"name": "Ascii", "bases": ["MathText"], "mro": ["Ascii", "MathText", "BaseText", "Model"], "desc": "Render mathematical content using `AsciiMath <http://asciimath.org/>`_\nnotation.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render mathematical content using ", {"type": "reference", "children": ["AsciiMath"]}, {"type": "target", "children": []}, "\nnotation."]}]}, "props": []}, {"name": "AutocompleteInput", "bases": ["TextInput"], "mro": ["AutocompleteInput", "TextInput", "TextLikeInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Single-line input widget with auto-completion.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Single-line input widget with auto-completion."]}]}, "props": [{"name": "case_sensitive", "type": "Bool", "desc": "Enable or disable case sensitivity.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Enable or disable case sensitivity."]}]}, "default": true}, {"name": "completions", "type": "List(String)", "desc": "A list of completion strings. This will be used to guide the\nuser upon typing the beginning of a desired value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of completion strings. This will be used to guide the\nuser upon typing the beginning of a desired value."]}]}, "default": []}, {"name": "max_completions", "type": "Nullable(Positive(Int))", "desc": "Optional maximum number of completions displayed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Optional maximum number of completions displayed."]}]}, "default": null}, {"name": "min_characters", "type": "NonNegative(Int)", "desc": "The number of characters a user must type before completions are presented.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number of characters a user must type before completions are presented."]}]}, "default": 2}, {"name": "restrict", "type": "Bool", "desc": "Set to False in order to allow users to enter text that is not present in the list of completion strings.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Set to False in order to allow users to enter text that is not present in the list of completion strings."]}]}, "default": true}]}, {"name": "AvgAggregator", "bases": ["RowAggregator"], "mro": ["AvgAggregator", "RowAggregator", "Model"], "desc": "Simple average across multiple rows.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Simple average across multiple rows."]}]}, "props": []}, {"name": "Axis", "bases": ["GuideRenderer"], "mro": ["Axis", "GuideRenderer", "Renderer", "Model"], "desc": "A base class that defines common properties for all axis types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class that defines common properties for all axis types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "axis_label", "type": "Nullable(TextLike(MathString, Instance(BaseText)))", "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A text or LaTeX notation label for the axis, displayed parallel to the axis rule."]}]}, "default": null}, {"name": "axis_label_standoff", "type": "Int", "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance in pixels that the axis labels should be offset\nfrom the tick labels."]}]}, "default": 5}, {"name": "axis_label_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align of the axis label."]}]}, "default": "left"}, {"name": "axis_label_text_alpha", "type": "Alpha", "desc": "The text alpha of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha of the axis label."]}]}, "default": 1.0}, {"name": "axis_label_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline of the axis label."]}]}, "default": "bottom"}, {"name": "axis_label_text_color", "type": "Nullable(Color)", "desc": "The text color of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color of the axis label."]}]}, "default": "#444444"}, {"name": "axis_label_text_font", "type": "String", "desc": "The text font of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font of the axis label."]}]}, "default": "helvetica"}, {"name": "axis_label_text_font_size", "type": "FontSize", "desc": "The text font size of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size of the axis label."]}]}, "default": "13px"}, {"name": "axis_label_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style of the axis label."]}]}, "default": "italic"}, {"name": "axis_label_text_line_height", "type": "Float", "desc": "The text line height of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height of the axis label."]}]}, "default": 1.2}, {"name": "axis_label_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color of the axis label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color of the axis label."]}]}, "default": null}, {"name": "axis_line_alpha", "type": "Alpha", "desc": "The line alpha of the axis line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the axis line."]}]}, "default": 1.0}, {"name": "axis_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the axis line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the axis line."]}]}, "default": "butt"}, {"name": "axis_line_color", "type": "Nullable(Color)", "desc": "The line color of the axis line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the axis line."]}]}, "default": "black"}, {"name": "axis_line_dash", "type": "DashPattern", "desc": "The line dash of the axis line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the axis line."]}]}, "default": []}, {"name": "axis_line_dash_offset", "type": "Int", "desc": "The line dash offset of the axis line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the axis line."]}]}, "default": 0}, {"name": "axis_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the axis line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the axis line."]}]}, "default": "bevel"}, {"name": "axis_line_width", "type": "Float", "desc": "The line width of the axis line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the axis line."]}]}, "default": 1}, {"name": "bounds", "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))", "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension."]}]}, "default": "auto"}, {"name": "fixed_location", "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))", "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Axes labels are suppressed when axes are positioned at fixed locations\ninside the central plot area."]}]}]}, "default": null}, {"name": "formatter", "type": "Instance(TickFormatter)", "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["TickFormatter"]}, " to use for formatting the visual appearance\nof ticks."]}]}, "default": "<Undefined>"}, {"name": "major_label_orientation", "type": "Either(Enum('horizontal', 'vertical'), Float)", "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal."]}]}, "default": "horizontal"}, {"name": "major_label_overrides", "type": "Dict(Either(Float, String), TextLike(MathString, Instance(BaseText)))", "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Provide explicit tick label values for specific tick locations that\noverride normal formatting."]}]}, "default": {}}, {"name": "major_label_policy", "type": "Instance(LabelingPolicy)", "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to filter out labels, e.g. declutter labels to avoid overlap."]}]}, "default": "{\"__type__\": \"AllLabels\", \"name\": \"AllLabels\", \"type\": \"object\"}"}, {"name": "major_label_standoff", "type": "Int", "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance in pixels that the major tick labels should be\noffset from the associated ticks."]}]}, "default": 5}, {"name": "major_label_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align of the major tick labels."]}]}, "default": "center"}, {"name": "major_label_text_alpha", "type": "Alpha", "desc": "The text alpha of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha of the major tick labels."]}]}, "default": 1.0}, {"name": "major_label_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline of the major tick labels."]}]}, "default": "alphabetic"}, {"name": "major_label_text_color", "type": "Nullable(Color)", "desc": "The text color of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color of the major tick labels."]}]}, "default": "#444444"}, {"name": "major_label_text_font", "type": "String", "desc": "The text font of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font of the major tick labels."]}]}, "default": "helvetica"}, {"name": "major_label_text_font_size", "type": "FontSize", "desc": "The text font size of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size of the major tick labels."]}]}, "default": "11px"}, {"name": "major_label_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style of the major tick labels."]}]}, "default": "normal"}, {"name": "major_label_text_line_height", "type": "Float", "desc": "The text line height of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height of the major tick labels."]}]}, "default": 1.2}, {"name": "major_label_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color of the major tick labels."]}]}, "default": null}, {"name": "major_tick_in", "type": "Int", "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance in pixels that major ticks should extend into the\nmain plot area."]}]}, "default": 2}, {"name": "major_tick_line_alpha", "type": "Alpha", "desc": "The line alpha of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the major ticks."]}]}, "default": 1.0}, {"name": "major_tick_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the major ticks."]}]}, "default": "butt"}, {"name": "major_tick_line_color", "type": "Nullable(Color)", "desc": "The line color of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the major ticks."]}]}, "default": "black"}, {"name": "major_tick_line_dash", "type": "DashPattern", "desc": "The line dash of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the major ticks."]}]}, "default": []}, {"name": "major_tick_line_dash_offset", "type": "Int", "desc": "The line dash offset of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the major ticks."]}]}, "default": 0}, {"name": "major_tick_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the major ticks."]}]}, "default": "bevel"}, {"name": "major_tick_line_width", "type": "Float", "desc": "The line width of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the major ticks."]}]}, "default": 1}, {"name": "major_tick_out", "type": "Int", "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance in pixels that major ticks should extend out of the\nmain plot area."]}]}, "default": 6}, {"name": "minor_tick_in", "type": "Int", "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance in pixels that minor ticks should extend into the\nmain plot area."]}]}, "default": 0}, {"name": "minor_tick_line_alpha", "type": "Alpha", "desc": "The line alpha of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the minor ticks."]}]}, "default": 1.0}, {"name": "minor_tick_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the minor ticks."]}]}, "default": "butt"}, {"name": "minor_tick_line_color", "type": "Nullable(Color)", "desc": "The line color of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the minor ticks."]}]}, "default": "black"}, {"name": "minor_tick_line_dash", "type": "DashPattern", "desc": "The line dash of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the minor ticks."]}]}, "default": []}, {"name": "minor_tick_line_dash_offset", "type": "Int", "desc": "The line dash offset of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the minor ticks."]}]}, "default": 0}, {"name": "minor_tick_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the minor ticks."]}]}, "default": "bevel"}, {"name": "minor_tick_line_width", "type": "Float", "desc": "The line width of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the minor ticks."]}]}, "default": 1}, {"name": "minor_tick_out", "type": "Int", "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance in pixels that major ticks should extend out of the\nmain plot area."]}]}, "default": 4}, {"name": "ticker", "type": "Instance(Ticker)", "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Ticker to use for computing locations of axis components."]}, {"type": "paragraph", "children": ["The property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ", {"type": "literal", "children": ["FixedTicker"]}, ", e.g. the\nfollowing code"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["from"]}, " ", {"type": "inline", "children": ["bokeh.plotting"]}, " ", {"type": "inline", "children": ["import"]}, " ", {"type": "inline", "children": ["figure"]}, "\n\n", {"type": "inline", "children": ["p"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["figure"]}, {"type": "inline", "children": ["()"]}, "\n", {"type": "inline", "children": ["p"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["xaxis"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["ticker"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["10"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["20"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["37.4"]}, {"type": "inline", "children": ["]"]}]}, {"type": "paragraph", "children": ["is equivalent to:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["from"]}, " ", {"type": "inline", "children": ["bokeh.plotting"]}, " ", {"type": "inline", "children": ["import"]}, " ", {"type": "inline", "children": ["figure"]}, "\n", {"type": "inline", "children": ["from"]}, " ", {"type": "inline", "children": ["bokeh.models"]}, " ", {"type": "inline", "children": ["import"]}, " ", {"type": "inline", "children": ["FixedTicker"]}, "\n\n", {"type": "inline", "children": ["p"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["figure"]}, {"type": "inline", "children": ["()"]}, "\n", {"type": "inline", "children": ["p"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["xaxis"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["ticker"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["FixedTicker"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["ticks"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["10"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["20"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["37.4"]}, {"type": "inline", "children": ["])"]}]}]}, "default": "<Undefined>"}]}, {"name": "BBoxTileSource", "bases": ["MercatorTileSource"], "mro": ["BBoxTileSource", "MercatorTileSource", "TileSource", "Model"], "desc": "Has the same default tile origin as the ``WMTSTileSource`` but requested\ntiles use a ``{XMIN}``, ``{YMIN}``, ``{XMAX}``, ``{YMAX}`` e.g.\n``http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Has the same default tile origin as the ", {"type": "literal", "children": ["WMTSTileSource"]}, " but requested\ntiles use a ", {"type": "literal", "children": ["{XMIN}"]}, ", ", {"type": "literal", "children": ["{YMIN}"]}, ", ", {"type": "literal", "children": ["{XMAX}"]}, ", ", {"type": "literal", "children": ["{YMAX}"]}, " e.g.\n", {"type": "literal", "children": ["http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}"]}, "."]}]}, "props": [{"name": "use_latlon", "type": "Bool", "desc": "Flag which indicates option to output ``{XMIN}``, ``{YMIN}``, ``{XMAX}``, ``{YMAX}`` in meters or latitude and longitude.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Flag which indicates option to output ", {"type": "literal", "children": ["{XMIN}"]}, ", ", {"type": "literal", "children": ["{YMIN}"]}, ", ", {"type": "literal", "children": ["{XMAX}"]}, ", ", {"type": "literal", "children": ["{YMAX}"]}, " in meters or latitude and longitude."]}]}, "default": false}]}, {"name": "Band", "bases": ["DataAnnotation"], "mro": ["Band", "DataAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a filled area band along a dimension.\n\nSee :ref:`ug_basic_annotations_bands` for information on plotting bands.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a filled area band along a dimension."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_bands`"]}, " for information on plotting bands."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "base", "type": "UnitsSpec(units_default='data')", "desc": "The orthogonal coordinates of the upper and lower values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The orthogonal coordinates of the upper and lower values."]}]}, "default": {"type": "field", "field": "base"}}, {"name": "base_units", "type": "NotSerialized(Enum('canvas', 'screen', 'data'))", "desc": "Units to use for the associated property: canvas, screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: canvas, screen or data"]}]}, "default": "data"}, {"name": "dimension", "type": "Enum('width', 'height')", "desc": "The direction of the band can be specified by setting this property\nto \"height\" (``y`` direction) or \"width\" (``x`` direction).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The direction of the band can be specified by setting this property\nto \"height\" (", {"type": "literal", "children": ["y"]}, " direction) or \"width\" (", {"type": "literal", "children": ["x"]}, " direction)."]}]}, "default": "height"}, {"name": "fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the band."]}]}, "default": 0.4}, {"name": "fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the band."]}]}, "default": "#fff9ba"}, {"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the band."]}]}, "default": 0.3}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the band."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the band."]}]}, "default": "#cccccc"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the band."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the band."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the band."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the band."]}]}, "default": 1}, {"name": "lower", "type": "UnitsSpec(units_default='data')", "desc": "The coordinates of the lower portion of the filled area band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The coordinates of the lower portion of the filled area band."]}]}, "default": {"type": "field", "field": "lower"}}, {"name": "lower_units", "type": "NotSerialized(Enum('canvas', 'screen', 'data'))", "desc": "Units to use for the associated property: canvas, screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: canvas, screen or data"]}]}, "default": "data"}, {"name": "upper", "type": "UnitsSpec(units_default='data')", "desc": "The coordinates of the upper portion of the filled area band.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The coordinates of the upper portion of the filled area band."]}]}, "default": {"type": "field", "field": "upper"}}, {"name": "upper_units", "type": "NotSerialized(Enum('canvas', 'screen', 'data'))", "desc": "Units to use for the associated property: canvas, screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: canvas, screen or data"]}]}, "default": "data"}]}, {"name": "BaseColorBar", "bases": ["Annotation"], "mro": ["BaseColorBar", "Annotation", "Renderer", "Model"], "desc": "Abstract base class for color bars.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for color bars."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "background_fill_alpha", "type": "Alpha", "desc": "The fill alpha for the color bar background style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha for the color bar background style."]}]}, "default": 0.95}, {"name": "background_fill_color", "type": "Nullable(Color)", "desc": "The fill color for the color bar background style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color for the color bar background style."]}]}, "default": "#ffffff"}, {"name": "bar_line_alpha", "type": "Alpha", "desc": "The line alpha for the color scale bar outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha for the color scale bar outline."]}]}, "default": 1.0}, {"name": "bar_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap for the color scale bar outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap for the color scale bar outline."]}]}, "default": "butt"}, {"name": "bar_line_color", "type": "Nullable(Color)", "desc": "The line color for the color scale bar outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color for the color scale bar outline."]}]}, "default": null}, {"name": "bar_line_dash", "type": "DashPattern", "desc": "The line dash for the color scale bar outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash for the color scale bar outline."]}]}, "default": []}, {"name": "bar_line_dash_offset", "type": "Int", "desc": "The line dash offset for the color scale bar outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset for the color scale bar outline."]}]}, "default": 0}, {"name": "bar_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join for the color scale bar outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join for the color scale bar outline."]}]}, "default": "bevel"}, {"name": "bar_line_width", "type": "Float", "desc": "The line width for the color scale bar outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width for the color scale bar outline."]}]}, "default": 1}, {"name": "border_line_alpha", "type": "Alpha", "desc": "The line alpha for the color bar border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha for the color bar border outline."]}]}, "default": 1.0}, {"name": "border_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap for the color bar border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap for the color bar border outline."]}]}, "default": "butt"}, {"name": "border_line_color", "type": "Nullable(Color)", "desc": "The line color for the color bar border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color for the color bar border outline."]}]}, "default": null}, {"name": "border_line_dash", "type": "DashPattern", "desc": "The line dash for the color bar border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash for the color bar border outline."]}]}, "default": []}, {"name": "border_line_dash_offset", "type": "Int", "desc": "The line dash offset for the color bar border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset for the color bar border outline."]}]}, "default": 0}, {"name": "border_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join for the color bar border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join for the color bar border outline."]}]}, "default": "bevel"}, {"name": "border_line_width", "type": "Float", "desc": "The line width for the color bar border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width for the color bar border outline."]}]}, "default": 1}, {"name": "formatter", "type": "Either(Instance(TickFormatter), Auto)", "desc": "A ``TickFormatter`` to use for formatting the visual appearance of ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["TickFormatter"]}, " to use for formatting the visual appearance of ticks."]}]}, "default": "auto"}, {"name": "height", "type": "Either(Auto, Int)", "desc": "The height (in pixels) that the color scale should occupy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The height (in pixels) that the color scale should occupy."]}]}, "default": "auto"}, {"name": "label_standoff", "type": "Int", "desc": "The distance (in pixels) to separate the tick labels from the color bar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) to separate the tick labels from the color bar."]}]}, "default": 5}, {"name": "location", "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Float, Float))", "desc": "The location where the color bar should draw itself. It's either one of\n``bokeh.core.enums.Anchor``'s enumerated values, or a ``(x, y)``\ntuple indicating an absolute location absolute location in screen\ncoordinates (pixels from the bottom-left corner).\n\n.. warning::\n    If the color bar is placed in a side panel, the location will likely\n    have to be set to `(0,0)`.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The location where the color bar should draw itself. It's either one of\n", {"type": "literal", "children": ["bokeh.core.enums.Anchor"]}, "'s enumerated values, or a ", {"type": "literal", "children": ["(x, y)"]}, "\ntuple indicating an absolute location absolute location in screen\ncoordinates (pixels from the bottom-left corner)."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["If the color bar is placed in a side panel, the location will likely\nhave to be set to ", {"type": "title_reference", "children": ["(0,0)"]}, "."]}]}]}, "default": "top_right"}, {"name": "major_label_overrides", "type": "Dict(Either(Float, String), TextLike(MathString, Instance(BaseText)))", "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Provide explicit tick label values for specific tick locations that\noverride normal formatting."]}]}, "default": {}}, {"name": "major_label_policy", "type": "Instance(LabelingPolicy)", "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to filter out labels, e.g. declutter labels to avoid overlap."]}]}, "default": "{\"__type__\": \"NoOverlap\", \"name\": \"NoOverlap\", \"type\": \"object\"}"}, {"name": "major_label_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align of the major tick labels."]}]}, "default": "left"}, {"name": "major_label_text_alpha", "type": "Alpha", "desc": "The text alpha of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha of the major tick labels."]}]}, "default": 1.0}, {"name": "major_label_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline of the major tick labels."]}]}, "default": "bottom"}, {"name": "major_label_text_color", "type": "Nullable(Color)", "desc": "The text color of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color of the major tick labels."]}]}, "default": "#444444"}, {"name": "major_label_text_font", "type": "String", "desc": "The text font of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font of the major tick labels."]}]}, "default": "helvetica"}, {"name": "major_label_text_font_size", "type": "FontSize", "desc": "The text font size of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size of the major tick labels."]}]}, "default": "11px"}, {"name": "major_label_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style of the major tick labels."]}]}, "default": "normal"}, {"name": "major_label_text_line_height", "type": "Float", "desc": "The text line height of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height of the major tick labels."]}]}, "default": 1.2}, {"name": "major_label_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color of the major tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color of the major tick labels."]}]}, "default": null}, {"name": "major_tick_in", "type": "Int", "desc": "The distance (in pixels) that major ticks should extend into the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) that major ticks should extend into the\nmain plot area."]}]}, "default": 5}, {"name": "major_tick_line_alpha", "type": "Alpha", "desc": "The line alpha of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the major ticks."]}]}, "default": 1.0}, {"name": "major_tick_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the major ticks."]}]}, "default": "butt"}, {"name": "major_tick_line_color", "type": "Nullable(Color)", "desc": "The line color of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the major ticks."]}]}, "default": "#ffffff"}, {"name": "major_tick_line_dash", "type": "DashPattern", "desc": "The line dash of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the major ticks."]}]}, "default": []}, {"name": "major_tick_line_dash_offset", "type": "Int", "desc": "The line dash offset of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the major ticks."]}]}, "default": 0}, {"name": "major_tick_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the major ticks."]}]}, "default": "bevel"}, {"name": "major_tick_line_width", "type": "Float", "desc": "The line width of the major ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the major ticks."]}]}, "default": 1}, {"name": "major_tick_out", "type": "Int", "desc": "The distance (in pixels) that major ticks should extend out of the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) that major ticks should extend out of the\nmain plot area."]}]}, "default": 0}, {"name": "margin", "type": "Int", "desc": "Amount of margin (in pixels) around the outside of the color bar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Amount of margin (in pixels) around the outside of the color bar."]}]}, "default": 30}, {"name": "minor_tick_in", "type": "Int", "desc": "The distance (in pixels) that minor ticks should extend into the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) that minor ticks should extend into the\nmain plot area."]}]}, "default": 0}, {"name": "minor_tick_line_alpha", "type": "Alpha", "desc": "The line alpha of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the minor ticks."]}]}, "default": 1.0}, {"name": "minor_tick_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the minor ticks."]}]}, "default": "butt"}, {"name": "minor_tick_line_color", "type": "Nullable(Color)", "desc": "The line color of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the minor ticks."]}]}, "default": null}, {"name": "minor_tick_line_dash", "type": "DashPattern", "desc": "The line dash of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the minor ticks."]}]}, "default": []}, {"name": "minor_tick_line_dash_offset", "type": "Int", "desc": "The line dash offset of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the minor ticks."]}]}, "default": 0}, {"name": "minor_tick_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the minor ticks."]}]}, "default": "bevel"}, {"name": "minor_tick_line_width", "type": "Float", "desc": "The line width of the minor ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the minor ticks."]}]}, "default": 1}, {"name": "minor_tick_out", "type": "Int", "desc": "The distance (in pixels) that major ticks should extend out of the\nmain plot area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) that major ticks should extend out of the\nmain plot area."]}]}, "default": 0}, {"name": "orientation", "type": "Either(Enum('horizontal', 'vertical'), Auto)", "desc": "Whether the color bar should be oriented vertically or horizontally.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the color bar should be oriented vertically or horizontally."]}]}, "default": "auto"}, {"name": "padding", "type": "Int", "desc": "Amount of padding (in pixels) between the color scale and color bar border.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Amount of padding (in pixels) between the color scale and color bar border."]}]}, "default": 10}, {"name": "scale_alpha", "type": "Float", "desc": "The alpha with which to render the color scale.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The alpha with which to render the color scale."]}]}, "default": 1.0}, {"name": "ticker", "type": "Either(Instance(Ticker), Auto)", "desc": "A Ticker to use for computing locations of axis components.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Ticker to use for computing locations of axis components."]}]}, "default": "auto"}, {"name": "title", "type": "Nullable(String)", "desc": "The title text to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The title text to render."]}]}, "default": null}, {"name": "title_standoff", "type": "Int", "desc": "The distance (in pixels) to separate the title from the color bar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) to separate the title from the color bar."]}]}, "default": 2}, {"name": "title_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align values for the title text."]}]}, "default": "left"}, {"name": "title_text_alpha", "type": "Alpha", "desc": "The text alpha values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha values for the title text."]}]}, "default": 1.0}, {"name": "title_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline values for the title text."]}]}, "default": "bottom"}, {"name": "title_text_color", "type": "Nullable(Color)", "desc": "The text color values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color values for the title text."]}]}, "default": "#444444"}, {"name": "title_text_font", "type": "String", "desc": "The text font values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font values for the title text."]}]}, "default": "helvetica"}, {"name": "title_text_font_size", "type": "FontSize", "desc": "The text font size values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size values for the title text."]}]}, "default": "13px"}, {"name": "title_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style values for the title text."]}]}, "default": "italic"}, {"name": "title_text_line_height", "type": "Float", "desc": "The text line height values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height values for the title text."]}]}, "default": 1.2}, {"name": "title_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color values for the title text."]}]}, "default": null}, {"name": "width", "type": "Either(Auto, Int)", "desc": "The width (in pixels) that the color scale should occupy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width (in pixels) that the color scale should occupy."]}]}, "default": "auto"}]}, {"name": "BaseText", "bases": ["Model"], "mro": ["BaseText", "Model"], "desc": "Base class for renderers of text content of various kinds.\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for renderers of text content of various kinds."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "text", "type": "Required(String)", "desc": "The text value to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text value to render."]}]}, "default": "<Undefined>"}]}, {"name": "BasicTickFormatter", "bases": ["TickFormatter"], "mro": ["BasicTickFormatter", "TickFormatter", "Model"], "desc": "Display tick values from continuous ranges as \"basic numbers\",\nusing scientific notation when appropriate by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Display tick values from continuous ranges as \"basic numbers\",\nusing scientific notation when appropriate by default."]}]}, "props": [{"name": "power_limit_high", "type": "Int", "desc": "Limit the use of scientific notation to when::\n\n    log(x) >= power_limit_high", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Limit the use of scientific notation to when:"]}, {"type": "literal_block", "children": ["log(x) >= power_limit_high"]}]}, "default": 5}, {"name": "power_limit_low", "type": "Int", "desc": "Limit the use of scientific notation to when::\n\n    log(x) <= power_limit_low", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Limit the use of scientific notation to when:"]}, {"type": "literal_block", "children": ["log(x) <= power_limit_low"]}]}, "default": -3}, {"name": "precision", "type": "Either(Auto, Int)", "desc": "How many digits of precision to display in tick labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How many digits of precision to display in tick labels."]}]}, "default": "auto"}, {"name": "use_scientific", "type": "Bool", "desc": "Whether to ever display scientific notation. If ``True``, then\nwhen to use scientific notation is controlled by ``power_limit_low``\nand ``power_limit_high``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to ever display scientific notation. If ", {"type": "literal", "children": ["True"]}, ", then\nwhen to use scientific notation is controlled by ", {"type": "literal", "children": ["power_limit_low"]}, "\nand ", {"type": "literal", "children": ["power_limit_high"]}, "."]}]}, "default": true}]}, {"name": "BasicTicker", "bases": ["AdaptiveTicker"], "mro": ["BasicTicker", "AdaptiveTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate ticks on a linear scale.\n\n.. note::\n    This class may be renamed to ``LinearTicker`` in the future.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate ticks on a linear scale."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This class may be renamed to ", {"type": "literal", "children": ["LinearTicker"]}, " in the future."]}]}]}, "props": []}, {"name": "Bezier", "bases": ["LineGlyph"], "mro": ["Bezier", "LineGlyph", "Glyph", "Model"], "desc": "Render Bezier curves.\n\nFor more information consult the `Wikipedia article for Bezier curve`_.\n\n.. _Wikipedia article for Bezier curve: http://en.wikipedia.org/wiki/Bezier_curve\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Bezier.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render Bezier curves."]}, {"type": "paragraph", "children": ["For more information consult the ", {"type": "reference", "children": ["Wikipedia article for Bezier curve"]}, "."]}, {"type": "target", "children": []}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Bezier.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "cx0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of first control points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of first control points."]}]}, "default": {"type": "field", "field": "cx0"}}, {"name": "cx1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of second control points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of second control points."]}]}, "default": {"type": "field", "field": "cx1"}}, {"name": "cy0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of first control points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of first control points."]}]}, "default": {"type": "field", "field": "cy0"}}, {"name": "cy1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of second control points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of second control points."]}]}, "default": {"type": "field", "field": "cy1"}}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the Bezier curves.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the Bezier curves."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the Bezier curves.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the Bezier curves."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the Bezier curves.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the Bezier curves."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the Bezier curves.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the Bezier curves."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the Bezier curves.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the Bezier curves."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the Bezier curves.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the Bezier curves."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the Bezier curves.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the Bezier curves."]}]}, "default": 1}, {"name": "x0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the starting points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the starting points."]}]}, "default": {"type": "field", "field": "x0"}}, {"name": "x1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the ending points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the ending points."]}]}, "default": {"type": "field", "field": "x1"}}, {"name": "y0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the starting points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the starting points."]}]}, "default": {"type": "field", "field": "y0"}}, {"name": "y1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the ending points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the ending points."]}]}, "default": {"type": "field", "field": "y1"}}]}, {"name": "BinnedTicker", "bases": ["Ticker"], "mro": ["BinnedTicker", "Ticker", "Model"], "desc": "Ticker that aligns ticks exactly at bin boundaries of a scanning color mapper.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Ticker that aligns ticks exactly at bin boundaries of a scanning color mapper."]}]}, "props": [{"name": "mapper", "type": "Instance(ScanningColorMapper)", "desc": "A scanning color mapper (e.g. ``EqHistColorMapper``) to use.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A scanning color mapper (e.g. ", {"type": "literal", "children": ["EqHistColorMapper"]}, ") to use."]}]}, "default": "<Undefined>"}, {"name": "num_major_ticks", "type": "Either(Int, Auto)", "desc": "The number of major tick positions to show or \"auto\" to use the\nnumber of bins provided by the mapper.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number of major tick positions to show or \"auto\" to use the\nnumber of bins provided by the mapper."]}]}, "default": 8}]}, {"name": "Block", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Block", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render rectangular regions, given a corner coordinate, width, and height.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Block.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render rectangular regions, given a corner coordinate, width, and height."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Block.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the blocks."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the blocks."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the blocks."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the blocks."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the blocks."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the blocks."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the blocks."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the blocks."]}]}, "default": 1.0}, {"name": "height", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The heights of the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The heights of the blocks."]}]}, "default": 1}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the blocks."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the blocks."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the blocks."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the blocks."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the blocks."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the blocks."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the blocks."]}]}, "default": 1}, {"name": "width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The widths of the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The widths of the blocks."]}]}, "default": 1}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the centers of the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the centers of the blocks."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the centers of the blocks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the centers of the blocks."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "BooleanFilter", "bases": ["Filter"], "mro": ["BooleanFilter", "Filter", "Model"], "desc": "A ``BooleanFilter`` filters data by returning the subset of data corresponding to indices\nwhere the values of the booleans array is True.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["BooleanFilter"]}, " filters data by returning the subset of data corresponding to indices\nwhere the values of the booleans array is True."]}]}, "props": [{"name": "booleans", "type": "Nullable(Seq(Bool))", "desc": "A list of booleans indicating which rows of data to select.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of booleans indicating which rows of data to select."]}]}, "default": null}]}, {"name": "BooleanFormatter", "bases": ["CellFormatter"], "mro": ["BooleanFormatter", "CellFormatter", "Model"], "desc": "Boolean (check mark) cell formatter.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Boolean (check mark) cell formatter."]}]}, "props": [{"name": "icon", "type": "Enum('check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o')", "desc": "The icon visualizing the check mark.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The icon visualizing the check mark."]}]}, "default": "check"}]}, {"name": "BoxAnnotation", "bases": ["Annotation"], "mro": ["BoxAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a shaded rectangular region as an annotation.\n\nSee :ref:`ug_basic_annotations_box_annotations` for information on plotting box annotations.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a shaded rectangular region as an annotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_box_annotations`"]}, " for information on plotting box annotations."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "bottom", "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))", "desc": "The y-coordinates of the bottom edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the bottom edge of the box annotation."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": null}, {"name": "bottom_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the bottom attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the bottom attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the box."]}]}, "default": 0.4}, {"name": "fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the box."]}]}, "default": "#fff9ba"}, {"name": "hatch_alpha", "type": "Alpha", "desc": "The hatch alpha values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the box."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "Nullable(Color)", "desc": "The hatch color values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the box."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the box."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "Nullable(String)", "desc": "The hatch pattern values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the box."]}]}, "default": null}, {"name": "hatch_scale", "type": "Size", "desc": "The hatch scale values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the box."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "Size", "desc": "The hatch weight values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the box."]}]}, "default": 1.0}, {"name": "left", "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))", "desc": "The x-coordinates of the left edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the left edge of the box annotation."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": null}, {"name": "left_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the left attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the left attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the box."]}]}, "default": 0.3}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the box."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the box."]}]}, "default": "#cccccc"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the box."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the box."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the box."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the box."]}]}, "default": 1}, {"name": "right", "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))", "desc": "The x-coordinates of the right edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the right edge of the box annotation."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": null}, {"name": "right_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the right attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the right attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "top", "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))", "desc": "The y-coordinates of the top edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the top edge of the box annotation."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": null}, {"name": "top_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the top attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the top attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}]}, {"name": "BoxEditTool", "bases": ["EditTool", "Drag", "Tap"], "mro": ["BoxEditTool", "EditTool", "Drag", "Tap", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |box_edit_icon|\n\nAllows drawing, dragging and deleting ``Rect`` glyphs on one or more\nrenderers by editing the underlying ``ColumnDataSource`` data. Like other\ndrawing tools, the renderers that are to be edited must be supplied\nexplicitly as a list. When drawing a new box the data will always be added\nto the ``ColumnDataSource`` on the first supplied renderer.\n\nThe tool will modify the columns on the data source corresponding to the\n``x``, ``y``, ``width`` and ``height`` values of the glyph. Any additional\ncolumns in the data source will be padded with ``empty_value``, when adding\na new box.\n\nThe supported actions include:\n\n* Add box: Hold shift then click and drag anywhere on the plot or double\n  tap once to start drawing, move the mouse and double tap again to finish\n  drawing.\n\n* Move box: Click and drag an existing box, the box will be dropped once\n  you let go of the mouse button.\n\n* Delete box: Tap a box to select it then press <<backspace>> key while the\n  mouse is within the plot area.\n\nTo **Move** or **Delete** multiple boxes at once:\n\n* Move selection: Select box(es) with <<shift>>+tap (or another selection\n  tool) then drag anywhere on the plot. Selecting and then dragging on a\n  specific box will move both.\n\n* Delete selection: Select box(es) with <<shift>>+tap (or another selection\n  tool) then press <<backspace>> while the mouse is within the plot area.\n\n.. |box_edit_icon| image:: /_images/icons/BoxEdit.png\n    :height: 24px\n    :alt: Icon of a solid line box with a plus sign in the lower right representing the box-edit tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["box_edit_icon"]}]}, {"type": "paragraph", "children": ["Allows drawing, dragging and deleting ", {"type": "literal", "children": ["Rect"]}, " glyphs on one or more\nrenderers by editing the underlying ", {"type": "literal", "children": ["ColumnDataSource"]}, " data. Like other\ndrawing tools, the renderers that are to be edited must be supplied\nexplicitly as a list. When drawing a new box the data will always be added\nto the ", {"type": "literal", "children": ["ColumnDataSource"]}, " on the first supplied renderer."]}, {"type": "paragraph", "children": ["The tool will modify the columns on the data source corresponding to the\n", {"type": "literal", "children": ["x"]}, ", ", {"type": "literal", "children": ["y"]}, ", ", {"type": "literal", "children": ["width"]}, " and ", {"type": "literal", "children": ["height"]}, " values of the glyph. Any additional\ncolumns in the data source will be padded with ", {"type": "literal", "children": ["empty_value"]}, ", when adding\na new box."]}, {"type": "paragraph", "children": ["The supported actions include:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Add box: Hold shift then click and drag anywhere on the plot or double\ntap once to start drawing, move the mouse and double tap again to finish\ndrawing."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Move box: Click and drag an existing box, the box will be dropped once\nyou let go of the mouse button."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Delete box: Tap a box to select it then press <<backspace>> key while the\nmouse is within the plot area."]}]}]}, {"type": "paragraph", "children": ["To ", {"type": "strong", "children": ["Move"]}, " or ", {"type": "strong", "children": ["Delete"]}, " multiple boxes at once:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Move selection: Select box(es) with <<shift>>+tap (or another selection\ntool) then drag anywhere on the plot. Selecting and then dragging on a\nspecific box will move both."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Delete selection: Select box(es) with <<shift>>+tap (or another selection\ntool) then press <<backspace>> while the mouse is within the plot area."]}]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions the box drawing is to be free in. By default, users may\nfreely draw boxes with any dimensions. If only \"width\" is set, the box will\nbe constrained to span the entire vertical space of the plot, only the\nhorizontal dimension can be controlled. If only \"height\" is set, the box\nwill be constrained to span the entire horizontal space of the plot, and the\nvertical dimension can be controlled.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the box drawing is to be free in. By default, users may\nfreely draw boxes with any dimensions. If only \"width\" is set, the box will\nbe constrained to span the entire vertical space of the plot, only the\nhorizontal dimension can be controlled. If only \"height\" is set, the box\nwill be constrained to span the entire horizontal space of the plot, and the\nvertical dimension can be controlled."]}]}, "default": "both"}, {"name": "num_objects", "type": "Int", "desc": "Defines a limit on the number of boxes that can be drawn. By default there\nis no limit on the number of objects, but if enabled the oldest drawn box\nwill be dropped to make space for the new box being added.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines a limit on the number of boxes that can be drawn. By default there\nis no limit on the number of objects, but if enabled the oldest drawn box\nwill be dropped to make space for the new box being added."]}]}, "default": 0}]}, {"name": "BoxSelectTool", "bases": ["Drag", "SelectTool"], "mro": ["BoxSelectTool", "Drag", "SelectTool", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |box_select_icon|\n\nThe box selection tool allows users to make selections on a Plot by showing\na rectangular region by dragging the mouse or a finger over the plot area.\nThe end of the drag event indicates the selection region is ready.\n\nSee :ref:`ug_styling_plots_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n\n.. |box_select_icon| image:: /_images/icons/BoxSelect.png\n    :height: 24px\n    :alt: Icon of a dashed box with a + in the lower right representing the box-selection tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["box_select_icon"]}]}, {"type": "paragraph", "children": ["The box selection tool allows users to make selections on a Plot by showing\na rectangular region by dragging the mouse or a finger over the plot area.\nThe end of the drag event indicates the selection region is ready."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_styling_plots_selected_unselected_glyphs`"]}, " for information\non styling selected and unselected glyphs."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions the box selection is to be free in. By default, users may\nfreely draw selections boxes with any dimensions. If only \"width\" is set,\nthe box will be constrained to span the entire vertical space of the plot,\nonly the horizontal dimension can be controlled. If only \"height\" is set,\nthe box will be constrained to span the entire horizontal space of the\nplot, and the vertical dimension can be controlled.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the box selection is to be free in. By default, users may\nfreely draw selections boxes with any dimensions. If only \"width\" is set,\nthe box will be constrained to span the entire vertical space of the plot,\nonly the horizontal dimension can be controlled. If only \"height\" is set,\nthe box will be constrained to span the entire horizontal space of the\nplot, and the vertical dimension can be controlled."]}]}, "default": "both"}, {"name": "origin", "type": "Enum('corner', 'center')", "desc": "Indicates whether the rectangular selection area should originate from a corner\n(top-left or bottom-right depending on direction) or the center of the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indicates whether the rectangular selection area should originate from a corner\n(top-left or bottom-right depending on direction) or the center of the box."]}]}, "default": "corner"}, {"name": "overlay", "type": "Instance(BoxAnnotation)", "desc": "A shaded annotation drawn to indicate the selection region.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A shaded annotation drawn to indicate the selection region."]}]}, "default": "{\"__type__\": \"BoxAnnotation\", \"attributes\": {\"bottom_units\": \"canvas\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"left_units\": \"canvas\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"right_units\": \"canvas\", \"syncable\": false, \"top_units\": \"canvas\", \"visible\": false}, \"name\": \"BoxAnnotation\", \"type\": \"object\"}"}, {"name": "select_every_mousemove", "type": "Bool", "desc": "Whether a selection computation should happen on every mouse event, or only\nonce, when the selection region is completed. Default: False", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether a selection computation should happen on every mouse event, or only\nonce, when the selection region is completed. Default: False"]}]}, "default": false}]}, {"name": "BoxZoomTool", "bases": ["Drag"], "mro": ["BoxZoomTool", "Drag", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |box_zoom_icon|\n\nThe box zoom tool allows users to define a rectangular egion of a Plot to\nzoom to by dragging he mouse or a finger over the plot region. The end of\nthe drag event indicates the selection region is ready.\n\n.. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n    :height: 24px\n    :alt: Icon of a dashed box with a magnifying glass in the upper right representing the box-zoom tool in the toolbar.\n\n.. note::\n    ``BoxZoomTool`` is incompatible with ``GMapPlot`` due to the manner in\n    which Google Maps exert explicit control over aspect ratios. Adding\n    this tool to a ``GMapPlot`` will have no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["box_zoom_icon"]}]}, {"type": "paragraph", "children": ["The box zoom tool allows users to define a rectangular egion of a Plot to\nzoom to by dragging he mouse or a finger over the plot region. The end of\nthe drag event indicates the selection region is ready."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}, {"type": "note", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["BoxZoomTool"]}, " is incompatible with ", {"type": "literal", "children": ["GMapPlot"]}, " due to the manner in\nwhich Google Maps exert explicit control over aspect ratios. Adding\nthis tool to a ", {"type": "literal", "children": ["GMapPlot"]}, " will have no effect."]}]}]}, "props": [{"name": "dimensions", "type": "Either(Enum('width', 'height', 'both'), Auto)", "desc": "Which dimensions the zoom box is to be free in. By default, users may\nfreely draw zoom boxes with any dimensions. If only \"width\" is supplied,\nthe box will be constrained to span the entire vertical space of the plot,\nonly the horizontal dimension can be controlled. If only \"height\" is\nsupplied, the box will be constrained to span the entire horizontal space\nof the plot, and the vertical dimension can be controlled.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the zoom box is to be free in. By default, users may\nfreely draw zoom boxes with any dimensions. If only \"width\" is supplied,\nthe box will be constrained to span the entire vertical space of the plot,\nonly the horizontal dimension can be controlled. If only \"height\" is\nsupplied, the box will be constrained to span the entire horizontal space\nof the plot, and the vertical dimension can be controlled."]}]}, "default": "both"}, {"name": "match_aspect", "type": "Bool", "desc": "Whether the box zoom region should be restricted to have the same\naspect ratio as the plot region.\n\n.. note::\n    If the tool is restricted to one dimension, this value has\n    no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the box zoom region should be restricted to have the same\naspect ratio as the plot region."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["If the tool is restricted to one dimension, this value has\nno effect."]}]}]}, "default": false}, {"name": "origin", "type": "Enum('corner', 'center')", "desc": "Indicates whether the rectangular zoom area should originate from a corner\n(top-left or bottom-right depending on direction) or the center of the box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indicates whether the rectangular zoom area should originate from a corner\n(top-left or bottom-right depending on direction) or the center of the box."]}]}, "default": "corner"}, {"name": "overlay", "type": "Instance(BoxAnnotation)", "desc": "A shaded annotation drawn to indicate the selection region.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A shaded annotation drawn to indicate the selection region."]}]}, "default": "{\"__type__\": \"BoxAnnotation\", \"attributes\": {\"bottom_units\": \"canvas\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"left_units\": \"canvas\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"right_units\": \"canvas\", \"syncable\": false, \"top_units\": \"canvas\", \"visible\": false}, \"name\": \"BoxAnnotation\", \"type\": \"object\"}"}]}, {"name": "BuiltinIcon", "bases": ["Icon"], "mro": ["BuiltinIcon", "Icon", "Model"], "desc": "Built-in icons included with BokehJS. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Built-in icons included with BokehJS."]}]}, "props": [{"name": "color", "type": "Color", "desc": "Color to use for the icon.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Color to use for the icon."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ",\n", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}, ", or ", {"type": "literal", "children": ["'hsl(60deg 100% 50% / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\nand a is between 0 and 1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern"]}]}]}]}, "default": "gray"}, {"name": "icon_name", "type": "Required(Either(Enum('append_mode', 'box_edit', 'box_select', 'box_zoom', 'clear_selection', 'copy', 'crosshair', 'freehand_draw', 'help', 'hover', 'intersect_mode', 'lasso_select', 'line_edit', 'pan', 'point_draw', 'poly_draw', 'poly_edit', 'polygon_select', 'range', 'redo', 'replace_mode', 'reset', 'save', 'subtract_mode', 'tap_select', 'undo', 'wheel_pan', 'wheel_zoom', 'xpan', 'ypan', 'zoom_in', 'zoom_out'), String))", "desc": "The name of a built-in icon to use. Currently, the following icon names are\nsupported: ``\"help\"``, ``\"question-mark\"``, ``\"settings\"``, ``\"x\"``\n\n.. bokeh-plot::\n    :source-position: none\n\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import BuiltinIcon, Button\n\n    builtin_icons = [\"help\", \"question-mark\", \"settings\", \"x\"]\n\n    icon_demo = []\n    for icon in builtin_icons:\n        icon_demo.append(Button(label=icon, button_type=\"light\", icon=BuiltinIcon(icon, size=\"1.2em\")))\n\n    show(column(icon_demo))", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The name of a built-in icon to use. Currently, the following icon names are\nsupported: ", {"type": "literal", "children": ["\"help\""]}, ", ", {"type": "literal", "children": ["\"question-mark\""]}, ", ", {"type": "literal", "children": ["\"settings\""]}, ", ", {"type": "literal", "children": ["\"x\""]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot::\n    :source-position: none\n\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import BuiltinIcon, Button\n\n    builtin_icons = [\"help\", \"question-mark\", \"settings\", \"x\"]\n\n    icon_demo = []\n    for icon in builtin_icons:\n        icon_demo.append(Button(label=icon, button_type=\"light\", icon=BuiltinIcon(icon, size=\"1.2em\")))\n\n    show(column(icon_demo))"]}]}]}, "default": "<Undefined>"}]}, {"name": "Button", "bases": ["AbstractButton"], "mro": ["Button", "AbstractButton", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A click button.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A click button."]}]}, "props": []}, {"name": "ButtonLike", "bases": [], "mro": [], "desc": "Shared properties for button-like widgets.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Shared properties for button-like widgets."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "button_type", "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')", "desc": "A style for the button, signifying it's role. Possible values are one of the\nfollowing:\n\n.. bokeh-plot::\n    :source-position: none\n\n    from bokeh.core.enums import ButtonType\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import Button\n\n    show(column(\n        [Button(label=button_type, button_type=button_type) for button_type in ButtonType]\n        ))", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A style for the button, signifying it's role. Possible values are one of the\nfollowing:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot::\n    :source-position: none\n\n    from bokeh.core.enums import ButtonType\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import Button\n\n    show(column(\n        [Button(label=button_type, button_type=button_type) for button_type in ButtonType]\n        ))"]}]}]}, "default": "default"}]}, {"name": "ByCSS", "bases": ["Selector"], "mro": ["ByCSS", "Selector", "Model"], "desc": "Represents a CSS selector query. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represents a CSS selector query."]}]}, "props": [{"name": "query", "type": "Required(String)", "desc": "CSS selector query (see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["CSS selector query (see ", {"type": "reference", "children": ["https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors"]}, ")."]}]}, "default": "<Undefined>"}]}, {"name": "ByClass", "bases": ["Selector"], "mro": ["ByClass", "Selector", "Model"], "desc": "Represents a CSS class selector query. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represents a CSS class selector query."]}]}, "props": [{"name": "query", "type": "Required(String)", "desc": "CSS class name without ``.`` prefix. Alternatively use ``ByCSS(\".class\")``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["CSS class name without ", {"type": "literal", "children": ["."]}, " prefix. Alternatively use ", {"type": "literal", "children": ["ByCSS(\".class\")"]}, "."]}]}, "default": "<Undefined>"}]}, {"name": "ByID", "bases": ["Selector"], "mro": ["ByID", "Selector", "Model"], "desc": "Represents a CSS ID selector query. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represents a CSS ID selector query."]}]}, "props": [{"name": "query", "type": "Required(String)", "desc": "Element CSS ID without ``#`` prefix. Alternatively use ``ByCSS(\"#id\")``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Element CSS ID without ", {"type": "literal", "children": ["#"]}, " prefix. Alternatively use ", {"type": "literal", "children": ["ByCSS(\"#id\")"]}, "."]}]}, "default": "<Undefined>"}]}, {"name": "ByXPath", "bases": ["Selector"], "mro": ["ByXPath", "Selector", "Model"], "desc": "Represents an XPath selector query. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represents an XPath selector query."]}]}, "props": [{"name": "query", "type": "Required(String)", "desc": "XPath selector query (see https://developer.mozilla.org/en-US/docs/Web/XPath).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["XPath selector query (see ", {"type": "reference", "children": ["https://developer.mozilla.org/en-US/docs/Web/XPath"]}, ")."]}]}, "default": "<Undefined>"}]}, {"name": "CDSView", "bases": ["Model"], "mro": ["CDSView", "Model"], "desc": "A view into a ``ColumnDataSource`` that represents a row-wise subset.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A view into a ", {"type": "literal", "children": ["ColumnDataSource"]}, " that represents a row-wise subset."]}]}, "props": [{"name": "filter", "type": "Instance(Filter)", "desc": "Defines the subset of indices to use from the data source this view applies to.\n\nBy default all indices are used (``AllIndices`` filter). This can be changed by\nusing specialized filters like ``IndexFilter``, ``BooleanFilter``, etc. Filters\ncan be composed using set operations to create non-trivial data masks. This can\nbe accomplished by directly using models like ``InversionFilter``, ``UnionFilter``,\netc., or by using set operators on filters, e.g.:\n\n.. code-block:: python\n\n    # filters everything but indexes 10 and 11\n    cds_view.filter &= ~IndexFilter(indices=[10, 11])", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines the subset of indices to use from the data source this view applies to."]}, {"type": "paragraph", "children": ["By default all indices are used (", {"type": "literal", "children": ["AllIndices"]}, " filter). This can be changed by\nusing specialized filters like ", {"type": "literal", "children": ["IndexFilter"]}, ", ", {"type": "literal", "children": ["BooleanFilter"]}, ", etc. Filters\ncan be composed using set operations to create non-trivial data masks. This can\nbe accomplished by directly using models like ", {"type": "literal", "children": ["InversionFilter"]}, ", ", {"type": "literal", "children": ["UnionFilter"]}, ",\netc., or by using set operators on filters, e.g.:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["# filters everything but indexes 10 and 11"]}, "\n", {"type": "inline", "children": ["cds_view"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["filter"]}, " ", {"type": "inline", "children": ["&="]}, " ", {"type": "inline", "children": ["~"]}, {"type": "inline", "children": ["IndexFilter"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["indices"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["10"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["11"]}, {"type": "inline", "children": ["])"]}]}]}, "default": "{\"__type__\": \"AllIndices\", \"name\": \"AllIndices\", \"type\": \"object\"}"}]}, {"name": "Callback", "bases": ["Model"], "mro": ["Callback", "Model"], "desc": "Base class for interactive callback.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for interactive callback."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Canvas", "bases": ["UIElement"], "mro": ["Canvas", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "hidpi", "type": "Bool", "desc": "Whether to use HiDPI mode when available.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to use HiDPI mode when available."]}]}, "default": true}, {"name": "output_backend", "type": "Enum('canvas', 'svg', 'webgl')", "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n.. note::\n    When set to ``webgl``, glyphs without a WebGL rendering implementation\n    will fall back to rendering onto 2D canvas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify the output backend for the plot area. Default is HTML5 Canvas."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["When set to ", {"type": "literal", "children": ["webgl"]}, ", glyphs without a WebGL rendering implementation\nwill fall back to rendering onto 2D canvas."]}]}]}, "default": "canvas"}]}, {"name": "CanvasTexture", "bases": ["Texture"], "mro": ["CanvasTexture", "Texture", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "code", "type": "Required(String)", "desc": "A snippet of JavaScript code to execute in the browser.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code to execute in the browser."]}]}, "default": "<Undefined>"}]}, {"name": "CategoricalAxis", "bases": ["Axis"], "mro": ["CategoricalAxis", "Axis", "GuideRenderer", "Renderer", "Model"], "desc": "An axis that displays ticks and labels for categorical ranges.\n\nThe ``CategoricalAxis`` can handle factor ranges with up to two levels of\nnesting, including drawing a separator line between top-level groups of\nfactors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An axis that displays ticks and labels for categorical ranges."]}, {"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["CategoricalAxis"]}, " can handle factor ranges with up to two levels of\nnesting, including drawing a separator line between top-level groups of\nfactors."]}]}, "props": [{"name": "group_label_orientation", "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)", "desc": "What direction the group label text should be oriented.\n\nIf a number is supplied, the angle of the text is measured from horizontal.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What direction the group label text should be oriented."]}, {"type": "paragraph", "children": ["If a number is supplied, the angle of the text is measured from horizontal."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": "parallel"}, {"name": "group_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": "left"}, {"name": "group_text_alpha", "type": "Alpha", "desc": "The text alpha of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": 1.0}, {"name": "group_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": "bottom"}, {"name": "group_text_color", "type": "Nullable(Color)", "desc": "The text color of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": "grey"}, {"name": "group_text_font", "type": "String", "desc": "The text font of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": "helvetica"}, {"name": "group_text_font_size", "type": "FontSize", "desc": "The text font size of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": "11px"}, {"name": "group_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": "bold"}, {"name": "group_text_line_height", "type": "Float", "desc": "The text line height of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": 1.2}, {"name": "group_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color of the group categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect."]}]}, "default": null}, {"name": "separator_line_alpha", "type": "Alpha", "desc": "The line alpha of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the separator line between top-level categorical groups."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting."]}]}, "default": 1.0}, {"name": "separator_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the separator line between top-level categorical groups."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting."]}]}, "default": "butt"}, {"name": "separator_line_color", "type": "Nullable(Color)", "desc": "The line color of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the separator line between top-level categorical groups."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting."]}]}, "default": "lightgrey"}, {"name": "separator_line_dash", "type": "DashPattern", "desc": "The line dash of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the separator line between top-level categorical groups."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting."]}]}, "default": []}, {"name": "separator_line_dash_offset", "type": "Int", "desc": "The line dash offset of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the separator line between top-level categorical groups."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting."]}]}, "default": 0}, {"name": "separator_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the separator line between top-level categorical groups."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting."]}]}, "default": "bevel"}, {"name": "separator_line_width", "type": "Float", "desc": "The line width of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the separator line between top-level categorical groups."]}, {"type": "paragraph", "children": ["This property always applies to factors in the outermost level of nesting."]}]}, "default": 2}, {"name": "subgroup_label_orientation", "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)", "desc": "What direction the subgroup label text should be oriented.\n\nIf a number is supplied, the angle of the text is measured from horizontal.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What direction the subgroup label text should be oriented."]}, {"type": "paragraph", "children": ["If a number is supplied, the angle of the text is measured from horizontal."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": "parallel"}, {"name": "subgroup_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": "left"}, {"name": "subgroup_text_alpha", "type": "Alpha", "desc": "The text alpha of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": 1.0}, {"name": "subgroup_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": "bottom"}, {"name": "subgroup_text_color", "type": "Nullable(Color)", "desc": "The text color of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": "#444444"}, {"name": "subgroup_text_font", "type": "String", "desc": "The text font of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": "helvetica"}, {"name": "subgroup_text_font_size", "type": "FontSize", "desc": "The text font size of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": "11px"}, {"name": "subgroup_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": "bold"}, {"name": "subgroup_text_line_height", "type": "Float", "desc": "The text line height of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": 1.2}, {"name": "subgroup_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color of the subgroup categorical labels."]}, {"type": "paragraph", "children": ["This property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect."]}]}, "default": null}]}, {"name": "CategoricalColorMapper", "bases": ["CategoricalMapper", "ColorMapper"], "mro": ["CategoricalColorMapper", "CategoricalMapper", "ColorMapper", "Mapper", "Transform", "Model"], "desc": "Map categorical factors to colors.\n\nValues that are passed to this mapper that are not in the factors list\nwill be mapped to ``nan_color``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Map categorical factors to colors."]}, {"type": "paragraph", "children": ["Values that are passed to this mapper that are not in the factors list\nwill be mapped to ", {"type": "literal", "children": ["nan_color"]}, "."]}]}, "props": []}, {"name": "CategoricalMapper", "bases": ["Mapper"], "mro": ["CategoricalMapper", "Mapper", "Transform", "Model"], "desc": "Base class for mappers that map categorical factors to other values.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for mappers that map categorical factors to other values."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "end", "type": "Nullable(Int)", "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n``end=1`` will perform color mapping only based on the first sub-factor\n(i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\nIf ``None`` then all sub-factors from ``start`` to the end of the\nfactor will be used for color mapping.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A start index to \"slice\" data factors with before mapping."]}, {"type": "paragraph", "children": ["For example, if the data to color map consists of 2-level factors such\nas ", {"type": "literal", "children": ["[\"2016\", \"sales\"]"]}, " and ", {"type": "literal", "children": ["[\"2017\", \"marketing\"]"]}, ", then setting\n", {"type": "literal", "children": ["end=1"]}, " will perform color mapping only based on the first sub-factor\n(i.e. in this case based on the year ", {"type": "literal", "children": ["\"2016\""]}, " or ", {"type": "literal", "children": ["\"2017\""]}, ")"]}, {"type": "paragraph", "children": ["If ", {"type": "literal", "children": ["None"]}, " then all sub-factors from ", {"type": "literal", "children": ["start"]}, " to the end of the\nfactor will be used for color mapping."]}]}, "default": null}, {"name": "factors", "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))", "desc": "A sequence of factors / categories that map to the some target range. For\nexample the following color mapper:\n\n.. code-block:: python\n\n    mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\nwill map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A sequence of factors / categories that map to the some target range. For\nexample the following color mapper:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["mapper"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["CategoricalColorMapper"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["palette"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["\"red\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"blue\""]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["factors"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["\"foo\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"bar\""]}, {"type": "inline", "children": ["])"]}]}, {"type": "paragraph", "children": ["will map the factor ", {"type": "literal", "children": ["\"foo\""]}, " to red and the factor ", {"type": "literal", "children": ["\"bar\""]}, " to blue."]}]}, "default": "<Undefined>"}, {"name": "start", "type": "Int", "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n``start=1`` will perform color mapping only based on the second sub-factor\n(i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A start index to \"slice\" data factors with before mapping."]}, {"type": "paragraph", "children": ["For example, if the data to color map consists of 2-level factors such\nas ", {"type": "literal", "children": ["[\"2016\", \"sales\"]"]}, " and ", {"type": "literal", "children": ["[\"2016\", \"marketing\"]"]}, ", then setting\n", {"type": "literal", "children": ["start=1"]}, " will perform color mapping only based on the second sub-factor\n(i.e. in this case based on the department ", {"type": "literal", "children": ["\"sales\""]}, " or ", {"type": "literal", "children": ["\"marketing\""]}, ")"]}]}, "default": 0}]}, {"name": "CategoricalMarkerMapper", "bases": ["CategoricalMapper"], "mro": ["CategoricalMarkerMapper", "CategoricalMapper", "Mapper", "Transform", "Model"], "desc": "Map categorical factors to marker types.\n\nValues that are passed to this mapper that are not in the factors list\nwill be mapped to ``default_value``.\n\n.. note::\n    This mappers is primarily only useful with the ``Scatter`` marker\n    glyph that be parameterized by marker type.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Map categorical factors to marker types."]}, {"type": "paragraph", "children": ["Values that are passed to this mapper that are not in the factors list\nwill be mapped to ", {"type": "literal", "children": ["default_value"]}, "."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This mappers is primarily only useful with the ", {"type": "literal", "children": ["Scatter"]}, " marker\nglyph that be parameterized by marker type."]}]}]}, "props": [{"name": "default_value", "type": "MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y')", "desc": "A marker type to use in case an unrecognized factor is passed in to be\nmapped.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A marker type to use in case an unrecognized factor is passed in to be\nmapped."]}]}, "default": "circle"}, {"name": "markers", "type": "Seq(MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'))", "desc": "A sequence of marker types to use as the target for mapping.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A sequence of marker types to use as the target for mapping."]}]}, "default": "<Undefined>"}]}, {"name": "CategoricalPatternMapper", "bases": ["CategoricalMapper"], "mro": ["CategoricalPatternMapper", "CategoricalMapper", "Mapper", "Transform", "Model"], "desc": "Map categorical factors to hatch fill patterns.\n\nValues that are passed to this mapper that are not in the factors list\nwill be mapped to ``default_value``.\n\nAdded in version 1.1.1", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Map categorical factors to hatch fill patterns."]}, {"type": "paragraph", "children": ["Values that are passed to this mapper that are not in the factors list\nwill be mapped to ", {"type": "literal", "children": ["default_value"]}, "."]}, {"type": "paragraph", "children": ["Added in version 1.1.1"]}]}, "props": [{"name": "default_value", "type": "HatchPatternType", "desc": "A hatch pattern to use in case an unrecognized factor is passed in to be\nmapped.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A hatch pattern to use in case an unrecognized factor is passed in to be\nmapped."]}]}, "default": " "}, {"name": "patterns", "type": "Seq(HatchPatternType)", "desc": "A sequence of marker types to use as the target for mapping.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A sequence of marker types to use as the target for mapping."]}]}, "default": "<Undefined>"}]}, {"name": "CategoricalScale", "bases": ["Scale"], "mro": ["CategoricalScale", "Scale", "Transform", "Model"], "desc": "Represent a scale transformation between a categorical source range and\ncontinuous target range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represent a scale transformation between a categorical source range and\ncontinuous target range."]}]}, "props": []}, {"name": "CategoricalTickFormatter", "bases": ["TickFormatter"], "mro": ["CategoricalTickFormatter", "TickFormatter", "Model"], "desc": "Display tick values from categorical ranges as string\nvalues.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Display tick values from categorical ranges as string\nvalues."]}]}, "props": []}, {"name": "CategoricalTicker", "bases": ["Ticker"], "mro": ["CategoricalTicker", "Ticker", "Model"], "desc": "Generate ticks for categorical ranges.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate ticks for categorical ranges."]}]}, "props": []}, {"name": "CellEditor", "bases": ["Model"], "mro": ["CellEditor", "Model"], "desc": "Abstract base class for data table's cell editors.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for data table's cell editors."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "CellFormatter", "bases": ["Model"], "mro": ["CellFormatter", "Model"], "desc": "Abstract base class for data table's cell formatters.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for data table's cell formatters."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "CheckAction", "bases": ["Action"], "mro": ["CheckAction", "Action", "MenuItem", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "checked", "type": "Bool", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": false}]}, {"name": "Checkbox", "bases": ["ToggleInput"], "mro": ["Checkbox", "ToggleInput", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A checkbox widget. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A checkbox widget."]}]}, "props": [{"name": "label", "type": "String", "desc": "The label next to the checkbox.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The label next to the checkbox."]}]}, "default": ""}]}, {"name": "CheckboxButtonGroup", "bases": ["ToggleButtonGroup"], "mro": ["CheckboxButtonGroup", "ToggleButtonGroup", "AbstractGroup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A group of check boxes rendered as toggle buttons.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A group of check boxes rendered as toggle buttons."]}]}, "props": [{"name": "active", "type": "List(Int)", "desc": "The list of indices of selected check boxes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The list of indices of selected check boxes."]}]}, "default": []}]}, {"name": "CheckboxEditor", "bases": ["CellEditor"], "mro": ["CheckboxEditor", "CellEditor", "Model"], "desc": "Boolean value cell editor.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Boolean value cell editor."]}]}, "props": []}, {"name": "CheckboxGroup", "bases": ["ToggleInputGroup"], "mro": ["CheckboxGroup", "ToggleInputGroup", "AbstractGroup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A group of check boxes.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A group of check boxes."]}]}, "props": [{"name": "active", "type": "List(Int)", "desc": "The list of indices of selected check boxes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The list of indices of selected check boxes."]}]}, "default": []}]}, {"name": "Circle", "bases": ["Marker"], "mro": ["Circle", "Marker", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render circle markers. \n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Circle.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render circle markers."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Circle.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "radius", "type": "NullDistanceSpec(units_default='data')", "desc": "The radius values for circle markers (in |data units|, by default).\n\n.. note::\n    Circle markers are slightly unusual in that they support specifying\n    a radius in addition to a size. Only one of ``radius`` or ``size``\n    should be given.\n\n.. warning::\n    Note that ``Circle`` glyphs are always drawn as circles on the screen,\n    even in cases where the data space aspect ratio is not 1-1. In all\n    cases where radius values are specified, the \"distance\" for the radius\n    is measured along the dimension specified by ``radius_dimension``. If\n    the aspect ratio is very large or small, the drawn circles may appear\n    much larger or smaller than expected. See :bokeh-issue:`626` for more\n    information.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The radius values for circle markers (in ", {"type": "substitution_reference", "children": ["data units"]}, ", by default)."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Circle markers are slightly unusual in that they support specifying\na radius in addition to a size. Only one of ", {"type": "literal", "children": ["radius"]}, " or ", {"type": "literal", "children": ["size"]}, "\nshould be given."]}]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["Note that ", {"type": "literal", "children": ["Circle"]}, " glyphs are always drawn as circles on the screen,\neven in cases where the data space aspect ratio is not 1-1. In all\ncases where radius values are specified, the \"distance\" for the radius\nis measured along the dimension specified by ", {"type": "literal", "children": ["radius_dimension"]}, ". If\nthe aspect ratio is very large or small, the drawn circles may appear\nmuch larger or smaller than expected. See ", {"type": "problematic", "children": [":bokeh-issue:`626`"]}, " for more\ninformation."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"bokeh-issue\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-issue\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"bokeh-issue\"."]}]}]}]}, "default": null}, {"name": "radius_dimension", "type": "Enum('x', 'y', 'max', 'min')", "desc": "What dimension to measure circle radii along.\n\nWhen the data space aspect ratio is not 1-1, then the size of the drawn\ncircles depends on what direction is used to measure the \"distance\" of\nthe radius. This property allows that direction to be controlled.\n\nSetting this dimension to 'max' will calculate the radius on both the x\nand y dimensions and use the maximum of the two, 'min' selects the minimum.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What dimension to measure circle radii along."]}, {"type": "paragraph", "children": ["When the data space aspect ratio is not 1-1, then the size of the drawn\ncircles depends on what direction is used to measure the \"distance\" of\nthe radius. This property allows that direction to be controlled."]}, {"type": "paragraph", "children": ["Setting this dimension to 'max' will calculate the radius on both the x\nand y dimensions and use the maximum of the two, 'min' selects the minimum."]}]}, "default": "x"}, {"name": "radius_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}]}, {"name": "ColorBar", "bases": ["BaseColorBar"], "mro": ["ColorBar", "BaseColorBar", "Annotation", "Renderer", "Model"], "desc": "Render a color bar based on a color mapper.\n\nSee :ref:`ug_basic_annotations_color_bars` for information on plotting color bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a color bar based on a color mapper."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_color_bars`"]}, " for information on plotting color bars."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "color_mapper", "type": "Instance(ColorMapper)", "desc": "A color mapper containing a color palette to render.\n\n.. warning::\n    If the `low` and `high` attributes of the ``ColorMapper`` aren't set, ticks\n    and tick labels won't be rendered. Additionally, if a ``LogTicker`` is\n    passed to the `ticker` argument and either or both of the logarithms\n    of `low` and `high` values of the color_mapper are non-numeric\n    (i.e. `low=0`), the tick and tick labels won't be rendered.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color mapper containing a color palette to render."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["If the ", {"type": "title_reference", "children": ["low"]}, " and ", {"type": "title_reference", "children": ["high"]}, " attributes of the ", {"type": "literal", "children": ["ColorMapper"]}, " aren't set, ticks\nand tick labels won't be rendered. Additionally, if a ", {"type": "literal", "children": ["LogTicker"]}, " is\npassed to the ", {"type": "title_reference", "children": ["ticker"]}, " argument and either or both of the logarithms\nof ", {"type": "title_reference", "children": ["low"]}, " and ", {"type": "title_reference", "children": ["high"]}, " values of the color_mapper are non-numeric\n(i.e. ", {"type": "title_reference", "children": ["low=0"]}, "), the tick and tick labels won't be rendered."]}]}]}, "default": "<Undefined>"}, {"name": "display_high", "type": "Nullable(Float)", "desc": "The highest value to display in the color bar. The whole of the color entry\ncontaining this value is shown.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The highest value to display in the color bar. The whole of the color entry\ncontaining this value is shown."]}]}, "default": null}, {"name": "display_low", "type": "Nullable(Float)", "desc": "The lowest value to display in the color bar. The whole of the color entry\ncontaining this value is shown.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The lowest value to display in the color bar. The whole of the color entry\ncontaining this value is shown."]}]}, "default": null}]}, {"name": "ColorMapper", "bases": ["Mapper"], "mro": ["ColorMapper", "Mapper", "Transform", "Model"], "desc": "Base class for color mapper types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for color mapper types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "nan_color", "type": "Color", "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Color to be used if data is NaN or otherwise not mappable."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ",\n", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}, ", or ", {"type": "literal", "children": ["'hsl(60deg 100% 50% / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\nand a is between 0 and 1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern"]}]}]}]}, "default": "gray"}, {"name": "palette", "type": "Seq(Color)", "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A sequence of colors to use as the target palette for mapping."]}, {"type": "paragraph", "children": ["This property can also be set as a ", {"type": "literal", "children": ["String"]}, ", to the name of any of the\npalettes shown in ", {"type": "problematic", "children": [":ref:`bokeh.palettes`"]}, "."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "default": "<Undefined>"}]}, {"name": "ColorPicker", "bases": ["InputWidget"], "mro": ["ColorPicker", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Color picker widget\n\n.. warning::\n    This widget as a limited support on *Internet Explorer* (it will be displayed\n    as a simple text input).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Color picker widget"]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["This widget as a limited support on ", {"type": "emphasis", "children": ["Internet Explorer"]}, " (it will be displayed\nas a simple text input)."]}]}]}, "props": [{"name": "color", "type": "ColorHex", "desc": "The initial color of the picked color (named or hexadecimal)\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The initial color of the picked color (named or hexadecimal)"]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ",\n", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}, ", or ", {"type": "literal", "children": ["'hsl(60deg 100% 50% / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\nand a is between 0 and 1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern"]}]}]}]}, "default": "#000000"}]}, {"name": "Column", "bases": ["FlexBox"], "mro": ["Column", "FlexBox", "LayoutDOM", "UIElement", "Model"], "desc": "Lay out child components in a single vertical row.\n\nChildren can be specified as positional arguments, as a single argument\nthat is a sequence, or using the ``children`` keyword argument.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Lay out child components in a single vertical row."]}, {"type": "paragraph", "children": ["Children can be specified as positional arguments, as a single argument\nthat is a sequence, or using the ", {"type": "literal", "children": ["children"]}, " keyword argument."]}]}, "props": []}, {"name": "ColumnDataSource", "bases": ["ColumnarDataSource"], "mro": ["ColumnDataSource", "ColumnarDataSource", "DataSource", "Model"], "desc": "Maps names of columns to sequences or arrays.\n\nThe ``ColumnDataSource`` is a fundamental data structure of Bokeh. Most\nplots, data tables, etc. will be driven by a ``ColumnDataSource``.\n\nIf the ``ColumnDataSource`` initializer is called with a single argument that\ncan be any of the following:\n\n* A Python ``dict`` that maps string names to sequences of values, e.g.\n  lists, arrays, etc.\n\n  .. code-block:: python\n\n      data = {'x': [1,2,3,4], 'y': np.array([10.0, 20.0, 30.0, 40.0])}\n\n      source = ColumnDataSource(data)\n\n.. note::\n    ``ColumnDataSource`` only creates a shallow copy of ``data``. Use e.g.\n    ``ColumnDataSource(copy.deepcopy(data))`` if initializing from another\n    ``ColumnDataSource.data`` object that you want to keep independent.\n\n* A Pandas ``DataFrame`` object\n\n  .. code-block:: python\n\n      source = ColumnDataSource(df)\n\n  In this case the CDS will have columns corresponding to the columns of\n  the ``DataFrame``. If the ``DataFrame`` columns have multiple levels,\n  they will be flattened using an underscore (e.g. level_0_col_level_1_col).\n  The index of the ``DataFrame`` will be flattened to an ``Index`` of tuples\n  if it's a ``MultiIndex``, and then reset using ``reset_index``. The result\n  will be a column with the same name if the index was named, or\n  level_0_name_level_1_name if it was a named ``MultiIndex``. If the\n  ``Index`` did not have a name or the ``MultiIndex`` name could not be\n  flattened/determined, the ``reset_index`` function will name the index column\n  ``index``, or ``level_0`` if the name ``index`` is not available.\n\n* A Pandas ``GroupBy`` object\n\n  .. code-block:: python\n\n      group = df.groupby(('colA', 'ColB'))\n\n  In this case the CDS will have columns corresponding to the result of\n  calling ``group.describe()``. The ``describe`` method generates columns\n  for statistical measures such as ``mean`` and ``count`` for all the\n  non-grouped original columns. The CDS columns are formed by joining\n  original column names with the computed measure. For example, if a\n  ``DataFrame`` has columns ``'year'`` and ``'mpg'``. Then passing\n  ``df.groupby('year')`` to a CDS will result in columns such as\n  ``'mpg_mean'``\n\n  If the ``GroupBy.describe`` result has a named index column, then\n  CDS will also have a column with this name. However, if the index name\n  (or any subname of a ``MultiIndex``) is ``None``, then the CDS will have\n  a column generically named ``index`` for the index.\n\n  Note this capability to adapt ``GroupBy`` objects may only work with\n  Pandas ``>=0.20.0``.\n\n.. note::\n    There is an implicit assumption that all the columns in a given\n    ``ColumnDataSource`` all have the same length at all times. For this\n    reason, it is usually preferable to update the ``.data`` property\n    of a data source \"all at once\".", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Maps names of columns to sequences or arrays."]}, {"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["ColumnDataSource"]}, " is a fundamental data structure of Bokeh. Most\nplots, data tables, etc. will be driven by a ", {"type": "literal", "children": ["ColumnDataSource"]}, "."]}, {"type": "paragraph", "children": ["If the ", {"type": "literal", "children": ["ColumnDataSource"]}, " initializer is called with a single argument that\ncan be any of the following:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["A Python ", {"type": "literal", "children": ["dict"]}, " that maps string names to sequences of values, e.g.\nlists, arrays, etc."]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["data"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["{"]}, {"type": "inline", "children": ["'x'"]}, {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["3"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["4"]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["'y'"]}, {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["np"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["array"]}, {"type": "inline", "children": ["(["]}, {"type": "inline", "children": ["10.0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["20.0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["30.0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["40.0"]}, {"type": "inline", "children": ["])}"]}, "\n\n", {"type": "inline", "children": ["source"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["ColumnDataSource"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["data"]}, {"type": "inline", "children": [")"]}]}]}]}, {"type": "note", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["ColumnDataSource"]}, " only creates a shallow copy of ", {"type": "literal", "children": ["data"]}, ". Use e.g.\n", {"type": "literal", "children": ["ColumnDataSource(copy.deepcopy(data))"]}, " if initializing from another\n", {"type": "literal", "children": ["ColumnDataSource.data"]}, " object that you want to keep independent."]}]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["A Pandas ", {"type": "literal", "children": ["DataFrame"]}, " object"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["source"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["ColumnDataSource"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["df"]}, {"type": "inline", "children": [")"]}]}, {"type": "paragraph", "children": ["In this case the CDS will have columns corresponding to the columns of\nthe ", {"type": "literal", "children": ["DataFrame"]}, ". If the ", {"type": "literal", "children": ["DataFrame"]}, " columns have multiple levels,\nthey will be flattened using an underscore (e.g. level_0_col_level_1_col).\nThe index of the ", {"type": "literal", "children": ["DataFrame"]}, " will be flattened to an ", {"type": "literal", "children": ["Index"]}, " of tuples\nif it's a ", {"type": "literal", "children": ["MultiIndex"]}, ", and then reset using ", {"type": "literal", "children": ["reset_index"]}, ". The result\nwill be a column with the same name if the index was named, or\nlevel_0_name_level_1_name if it was a named ", {"type": "literal", "children": ["MultiIndex"]}, ". If the\n", {"type": "literal", "children": ["Index"]}, " did not have a name or the ", {"type": "literal", "children": ["MultiIndex"]}, " name could not be\nflattened/determined, the ", {"type": "literal", "children": ["reset_index"]}, " function will name the index column\n", {"type": "literal", "children": ["index"]}, ", or ", {"type": "literal", "children": ["level_0"]}, " if the name ", {"type": "literal", "children": ["index"]}, " is not available."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["A Pandas ", {"type": "literal", "children": ["GroupBy"]}, " object"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["group"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["df"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["groupby"]}, {"type": "inline", "children": ["(("]}, {"type": "inline", "children": ["'colA'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'ColB'"]}, {"type": "inline", "children": ["))"]}]}, {"type": "paragraph", "children": ["In this case the CDS will have columns corresponding to the result of\ncalling ", {"type": "literal", "children": ["group.describe()"]}, ". The ", {"type": "literal", "children": ["describe"]}, " method generates columns\nfor statistical measures such as ", {"type": "literal", "children": ["mean"]}, " and ", {"type": "literal", "children": ["count"]}, " for all the\nnon-grouped original columns. The CDS columns are formed by joining\noriginal column names with the computed measure. For example, if a\n", {"type": "literal", "children": ["DataFrame"]}, " has columns ", {"type": "literal", "children": ["'year'"]}, " and ", {"type": "literal", "children": ["'mpg'"]}, ". Then passing\n", {"type": "literal", "children": ["df.groupby('year')"]}, " to a CDS will result in columns such as\n", {"type": "literal", "children": ["'mpg_mean'"]}]}, {"type": "paragraph", "children": ["If the ", {"type": "literal", "children": ["GroupBy.describe"]}, " result has a named index column, then\nCDS will also have a column with this name. However, if the index name\n(or any subname of a ", {"type": "literal", "children": ["MultiIndex"]}, ") is ", {"type": "literal", "children": ["None"]}, ", then the CDS will have\na column generically named ", {"type": "literal", "children": ["index"]}, " for the index."]}, {"type": "paragraph", "children": ["Note this capability to adapt ", {"type": "literal", "children": ["GroupBy"]}, " objects may only work with\nPandas ", {"type": "literal", "children": [">=0.20.0"]}, "."]}]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["There is an implicit assumption that all the columns in a given\n", {"type": "literal", "children": ["ColumnDataSource"]}, " all have the same length at all times. For this\nreason, it is usually preferable to update the ", {"type": "literal", "children": [".data"]}, " property\nof a data source \"all at once\"."]}]}]}, "props": [{"name": "data", "type": "ColumnData(String, Seq(Any))", "desc": "Mapping of column names to sequences of data. The columns can be, e.g,\nPython lists or tuples, NumPy arrays, etc.\n\nThe .data attribute can also be set from Pandas DataFrames or GroupBy\nobjects. In these cases, the behaviour is identical to passing the objects\nto the ``ColumnDataSource`` initializer.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Mapping of column names to sequences of data. The columns can be, e.g,\nPython lists or tuples, NumPy arrays, etc."]}, {"type": "paragraph", "children": ["The .data attribute can also be set from Pandas DataFrames or GroupBy\nobjects. In these cases, the behaviour is identical to passing the objects\nto the ", {"type": "literal", "children": ["ColumnDataSource"]}, " initializer."]}]}, "default": {}}]}, {"name": "ColumnarDataSource", "bases": ["DataSource"], "mro": ["ColumnarDataSource", "DataSource", "Model"], "desc": "A base class for data source types, which can be mapped onto\na columnar format.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for data source types, which can be mapped onto\na columnar format."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "selection_policy", "type": "Instance(SelectionPolicy)", "desc": "An instance of a ``SelectionPolicy`` that determines how selections are set.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An instance of a ", {"type": "literal", "children": ["SelectionPolicy"]}, " that determines how selections are set."]}]}, "default": "{\"__type__\": \"UnionRenderers\", \"name\": \"UnionRenderers\", \"type\": \"object\"}"}]}, {"name": "CompositeTicker", "bases": ["ContinuousTicker"], "mro": ["CompositeTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Combine different tickers at different scales.\n\nUses the ``min_interval`` and ``max_interval`` interval attributes\nof the tickers to select the appropriate ticker at different\nscales.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Combine different tickers at different scales."]}, {"type": "paragraph", "children": ["Uses the ", {"type": "literal", "children": ["min_interval"]}, " and ", {"type": "literal", "children": ["max_interval"]}, " interval attributes\nof the tickers to select the appropriate ticker at different\nscales."]}]}, "props": [{"name": "tickers", "type": "Seq(Instance(Ticker))", "desc": "A list of Ticker objects to combine at different scales in order\nto generate tick values. The supplied tickers should be in order.\nSpecifically, if S comes before T, then it should be the case that::\n\n    S.get_max_interval() < T.get_min_interval()", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of Ticker objects to combine at different scales in order\nto generate tick values. The supplied tickers should be in order.\nSpecifically, if S comes before T, then it should be the case that:"]}, {"type": "literal_block", "children": ["S.get_max_interval() < T.get_min_interval()"]}]}, "default": []}]}, {"name": "ConnectedXYGlyph", "bases": ["XYGlyph"], "mro": ["ConnectedXYGlyph", "XYGlyph", "Glyph", "Model"], "desc": "Base class of glyphs with `x` and `y` coordinate attributes and\na connected topology.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class of glyphs with ", {"type": "title_reference", "children": ["x"]}, " and ", {"type": "title_reference", "children": ["y"]}, " coordinate attributes and\na connected topology."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "ContinuousAxis", "bases": ["Axis"], "mro": ["ContinuousAxis", "Axis", "GuideRenderer", "Renderer", "Model"], "desc": "A base class for all numeric, non-categorical axes types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all numeric, non-categorical axes types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "ContinuousColorMapper", "bases": ["ColorMapper"], "mro": ["ContinuousColorMapper", "ColorMapper", "Mapper", "Transform", "Model"], "desc": "Base class for continuous color mapper types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for continuous color mapper types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "domain", "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))", "desc": "A collection of glyph renderers to pool data from for establishing data metrics.\nIf empty, mapped data will be used instead.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A collection of glyph renderers to pool data from for establishing data metrics.\nIf empty, mapped data will be used instead."]}]}, "default": []}, {"name": "high", "type": "Nullable(Float)", "desc": "The maximum value of the range to map into the palette. Values above\nthis are clamped to ``high``. If ``None``, the value is inferred from data.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The maximum value of the range to map into the palette. Values above\nthis are clamped to ", {"type": "literal", "children": ["high"]}, ". If ", {"type": "literal", "children": ["None"]}, ", the value is inferred from data."]}]}, "default": null}, {"name": "high_color", "type": "Nullable(Color)", "desc": "Color to be used if data is higher than ``high`` value. If None,\nvalues higher than ``high`` are mapped to the last color in the palette.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Color to be used if data is higher than ", {"type": "literal", "children": ["high"]}, " value. If None,\nvalues higher than ", {"type": "literal", "children": ["high"]}, " are mapped to the last color in the palette."]}]}, "default": null}, {"name": "low", "type": "Nullable(Float)", "desc": "The minimum value of the range to map into the palette. Values below\nthis are clamped to ``low``. If ``None``, the value is inferred from data.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum value of the range to map into the palette. Values below\nthis are clamped to ", {"type": "literal", "children": ["low"]}, ". If ", {"type": "literal", "children": ["None"]}, ", the value is inferred from data."]}]}, "default": null}, {"name": "low_color", "type": "Nullable(Color)", "desc": "Color to be used if data is lower than ``low`` value. If None,\nvalues lower than ``low`` are mapped to the first color in the palette.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Color to be used if data is lower than ", {"type": "literal", "children": ["low"]}, " value. If None,\nvalues lower than ", {"type": "literal", "children": ["low"]}, " are mapped to the first color in the palette."]}]}, "default": null}]}, {"name": "ContinuousScale", "bases": ["Scale"], "mro": ["ContinuousScale", "Scale", "Transform", "Model"], "desc": "Represent a scale transformation between continuous ranges.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represent a scale transformation between continuous ranges."]}]}, "props": []}, {"name": "ContinuousTicker", "bases": ["Ticker"], "mro": ["ContinuousTicker", "Ticker", "Model"], "desc": "A base class for non-categorical ticker types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for non-categorical ticker types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "desired_num_ticks", "type": "Int", "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A desired target number of major tick positions to generate across\nthe plot range."]}, {"type": "comment", "children": ["note:\nThis value is a suggestion, and ticker subclasses may ignore\nit entirely, or use it only as an ideal goal to approach as well\nas can be, in the context of a specific ticking strategy."]}]}, "default": 6}, {"name": "num_minor_ticks", "type": "Int", "desc": "The number of minor tick positions to generate between\nadjacent major tick values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number of minor tick positions to generate between\nadjacent major tick values."]}]}, "default": 5}]}, {"name": "ContourColorBar", "bases": ["BaseColorBar"], "mro": ["ContourColorBar", "BaseColorBar", "Annotation", "Renderer", "Model"], "desc": "Color bar used for contours.\n\nSupports displaying hatch patterns and line styles that contour plots may\nhave as well as the usual fill styles.\n\nDo not create these objects manually, instead use ``ContourRenderer.color_bar``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Color bar used for contours."]}, {"type": "paragraph", "children": ["Supports displaying hatch patterns and line styles that contour plots may\nhave as well as the usual fill styles."]}, {"type": "paragraph", "children": ["Do not create these objects manually, instead use ", {"type": "literal", "children": ["ContourRenderer.color_bar"]}, "."]}]}, "props": [{"name": "fill_renderer", "type": "Instance(GlyphRenderer)", "desc": "Glyph renderer used for filled contour polygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyph renderer used for filled contour polygons."]}]}, "default": "<Undefined>"}, {"name": "levels", "type": "Seq(Float)", "desc": "Levels at which the contours are calculated.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Levels at which the contours are calculated."]}]}, "default": []}, {"name": "line_renderer", "type": "Instance(GlyphRenderer)", "desc": "Glyph renderer used for contour lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyph renderer used for contour lines."]}]}, "default": "<Undefined>"}]}, {"name": "ContourRenderer", "bases": ["DataRenderer"], "mro": ["ContourRenderer", "DataRenderer", "Renderer", "Model"], "desc": "Renderer for contour plots composed of filled polygons and/or lines.\n\nRather than create these manually it is usually better to use\n:func:`~bokeh.plotting.figure.contour` instead.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Renderer for contour plots composed of filled polygons and/or lines."]}, {"type": "paragraph", "children": ["Rather than create these manually it is usually better to use\n", {"type": "problematic", "children": [":func:`~bokeh.plotting.figure.contour`"]}, " instead."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}]}, "props": [{"name": "fill_renderer", "type": "Instance(GlyphRenderer)", "desc": "Glyph renderer used for filled contour polygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyph renderer used for filled contour polygons."]}]}, "default": "<Undefined>"}, {"name": "levels", "type": "Seq(Float)", "desc": "Levels at which the contours are calculated.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Levels at which the contours are calculated."]}]}, "default": []}, {"name": "line_renderer", "type": "Instance(GlyphRenderer)", "desc": "Glyph renderer used for contour lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyph renderer used for contour lines."]}]}, "default": "<Undefined>"}]}, {"name": "CoordinateMapping", "bases": ["Model"], "mro": ["CoordinateMapping", "Model"], "desc": "A mapping between two coordinate systems. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping between two coordinate systems."]}]}, "props": [{"name": "x_scale", "type": "Instance(Scale)", "desc": "What kind of scale to use to convert x-coordinates from the source (data)\nspace into x-coordinates in the target (possibly screen) coordinate space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What kind of scale to use to convert x-coordinates from the source (data)\nspace into x-coordinates in the target (possibly screen) coordinate space."]}]}, "default": "{\"__type__\": \"LinearScale\", \"name\": \"LinearScale\", \"type\": \"object\"}"}, {"name": "x_source", "type": "Instance(Range)", "desc": "The source range of the horizontal dimension of the new coordinate space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The source range of the horizontal dimension of the new coordinate space."]}]}, "default": "{\"__type__\": \"DataRange1d\", \"name\": \"DataRange1d\", \"type\": \"object\"}"}, {"name": "x_target", "type": "Instance(Range)", "desc": "The horizontal range to map x-coordinates in the target coordinate space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The horizontal range to map x-coordinates in the target coordinate space."]}]}, "default": "<Undefined>"}, {"name": "y_scale", "type": "Instance(Scale)", "desc": "What kind of scale to use to convert y-coordinates from the source (data)\nspace into y-coordinates in the target (possibly screen) coordinate space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What kind of scale to use to convert y-coordinates from the source (data)\nspace into y-coordinates in the target (possibly screen) coordinate space."]}]}, "default": "{\"__type__\": \"LinearScale\", \"name\": \"LinearScale\", \"type\": \"object\"}"}, {"name": "y_source", "type": "Instance(Range)", "desc": "The source range of the vertical dimension of the new coordinate space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The source range of the vertical dimension of the new coordinate space."]}]}, "default": "{\"__type__\": \"DataRange1d\", \"name\": \"DataRange1d\", \"type\": \"object\"}"}, {"name": "y_target", "type": "Instance(Range)", "desc": "The vertical range to map y-coordinates in the target coordinate space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The vertical range to map y-coordinates in the target coordinate space."]}]}, "default": "<Undefined>"}]}, {"name": "CoordinateTransform", "bases": ["Expression"], "mro": ["CoordinateTransform", "Expression", "Model"], "desc": "Base class for coordinate transforms. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for coordinate transforms.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": []}, {"name": "CopyTool", "bases": ["ActionTool"], "mro": ["CopyTool", "ActionTool", "Tool", "Model"], "desc": "*toolbar icon*: |copy_icon|\n\nThe copy tool is an action tool, that allows copying the rendererd contents of\na plot or a collection of plots to system's clipboard. This tools is browser\ndependent and may not function in certain browsers, or require additional\npermissions to be granted to the web page.\n\n.. |copy_icon| image:: /_images/icons/Copy.png\n    :height: 24px", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["copy_icon"]}]}, {"type": "paragraph", "children": ["The copy tool is an action tool, that allows copying the rendererd contents of\na plot or a collection of plots to system's clipboard. This tools is browser\ndependent and may not function in certain browsers, or require additional\npermissions to be granted to the web page."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": []}, {"name": "CrosshairTool", "bases": ["InspectTool"], "mro": ["CrosshairTool", "InspectTool", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |crosshair_icon|\n\nThe crosshair tool is a passive inspector tool. It is generally on at all\ntimes, but can be configured in the inspector's menu associated with the\n*toolbar icon* shown above.\n\nThe crosshair tool draws a crosshair annotation over the plot, centered on\nthe current mouse position. The crosshair tool may be configured to draw\nacross only one dimension by setting the ``dimension`` property to only\n``width`` or ``height``.\n\n.. |crosshair_icon| image:: /_images/icons/Crosshair.png\n    :height: 24px\n    :alt: Icon of circle with aiming reticle marks representing the crosshair tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["crosshair_icon"]}]}, {"type": "paragraph", "children": ["The crosshair tool is a passive inspector tool. It is generally on at all\ntimes, but can be configured in the inspector's menu associated with the\n", {"type": "emphasis", "children": ["toolbar icon"]}, " shown above."]}, {"type": "paragraph", "children": ["The crosshair tool draws a crosshair annotation over the plot, centered on\nthe current mouse position. The crosshair tool may be configured to draw\nacross only one dimension by setting the ", {"type": "literal", "children": ["dimension"]}, " property to only\n", {"type": "literal", "children": ["width"]}, " or ", {"type": "literal", "children": ["height"]}, "."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions the crosshair tool is to track. By default, both vertical\nand horizontal lines will be drawn. If only \"width\" is supplied, only a\nhorizontal line will be drawn. If only \"height\" is supplied, only a\nvertical line will be drawn.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the crosshair tool is to track. By default, both vertical\nand horizontal lines will be drawn. If only \"width\" is supplied, only a\nhorizontal line will be drawn. If only \"height\" is supplied, only a\nvertical line will be drawn."]}]}, "default": "both"}, {"name": "line_alpha", "type": "Alpha", "desc": "An alpha value to use to stroke paths with.\n\nAcceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to stroke paths with."]}, {"type": "paragraph", "children": ["Acceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque)."]}]}, "default": 1.0}, {"name": "line_color", "type": "Color", "desc": "A color to use to stroke paths with.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to stroke paths with."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ",\n", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}, ", or ", {"type": "literal", "children": ["'hsl(60deg 100% 50% / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\nand a is between 0 and 1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern"]}]}]}]}, "default": "black"}, {"name": "line_width", "type": "Float", "desc": "Stroke width in units of pixels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Stroke width in units of pixels."]}]}, "default": 1}, {"name": "overlay", "type": "Either(Auto, Instance(Span), Tuple(Instance(Span), Instance(Span)))", "desc": "An annotation drawn to indicate the crosshair.\n\nIf ``\"auto\"``, this will create spans depending on the ``dimensions``\nproperty, which based on its value, will result in either one span\n(horizontal or vertical) or two spans (horizontal and vertical).\n\nAlternatively the user can provide one ``Span`` instance, where the\ndimension is indicated by the ``dimension`` property of the ``Span``.\nAlso two ``Span`` instances can be provided. Providing explicit\n``Span`` instances allows for constructing linked crosshair, when\nthose instances are shared between crosshair tools of different plots.\n\n.. note::\n    This property is experimental and may change at any point. In\n    particular in future this will allow using other annotations\n    than ``Span`` and annotation groups.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An annotation drawn to indicate the crosshair."]}, {"type": "paragraph", "children": ["If ", {"type": "literal", "children": ["\"auto\""]}, ", this will create spans depending on the ", {"type": "literal", "children": ["dimensions"]}, "\nproperty, which based on its value, will result in either one span\n(horizontal or vertical) or two spans (horizontal and vertical)."]}, {"type": "paragraph", "children": ["Alternatively the user can provide one ", {"type": "literal", "children": ["Span"]}, " instance, where the\ndimension is indicated by the ", {"type": "literal", "children": ["dimension"]}, " property of the ", {"type": "literal", "children": ["Span"]}, ".\nAlso two ", {"type": "literal", "children": ["Span"]}, " instances can be provided. Providing explicit\n", {"type": "literal", "children": ["Span"]}, " instances allows for constructing linked crosshair, when\nthose instances are shared between crosshair tools of different plots."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This property is experimental and may change at any point. In\nparticular in future this will allow using other annotations\nthan ", {"type": "literal", "children": ["Span"]}, " and annotation groups."]}]}]}, "default": "auto"}]}, {"name": "CumSum", "bases": ["Expression"], "mro": ["CumSum", "Expression", "Model"], "desc": "An expression for generating arrays by cumulatively summing a single\ncolumn from a ``ColumnDataSource``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An expression for generating arrays by cumulatively summing a single\ncolumn from a ", {"type": "literal", "children": ["ColumnDataSource"]}, "."]}]}, "props": [{"name": "field", "type": "Required(String)", "desc": "The name of a ``ColumnDataSource`` column to cumulatively sum for new values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The name of a ", {"type": "literal", "children": ["ColumnDataSource"]}, " column to cumulatively sum for new values."]}]}, "default": "<Undefined>"}, {"name": "include_zero", "type": "Bool", "desc": "Whether to include zero at the start of the result. Note that the length\nof the result is always the same as the input column. Therefore if this\nproperty is True, then the last value of the column will not be included\nin the sum.\n\n.. code-block:: python\n\n    source = ColumnDataSource(data=dict(foo=[1, 2, 3, 4]))\n\n    CumSum(field='foo')\n    # -> [1, 3, 6, 10]\n\n    CumSum(field='foo', include_zero=True)\n    # -> [0, 1, 3, 6]", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to include zero at the start of the result. Note that the length\nof the result is always the same as the input column. Therefore if this\nproperty is True, then the last value of the column will not be included\nin the sum."]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["source"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["ColumnDataSource"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["data"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["dict"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["foo"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["3"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["4"]}, {"type": "inline", "children": ["]))"]}, "\n\n", {"type": "inline", "children": ["CumSum"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["field"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["'foo'"]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": ["# -> [1, 3, 6, 10]"]}, "\n\n", {"type": "inline", "children": ["CumSum"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["field"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["'foo'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["include_zero"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["True"]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": ["# -> [0, 1, 3, 6]"]}]}]}, "default": false}]}, {"name": "CustomAction", "bases": ["ActionTool"], "mro": ["CustomAction", "ActionTool", "Tool", "Model"], "desc": "Execute a custom action, e.g. ``CustomJS`` callback when a toolbar\nicon is activated.\n\nExample:\n\n    .. code-block:: python\n\n        tool = CustomAction(icon=\"icon.png\",\n                            callback=CustomJS(code='alert(\"foo\")'))\n\n        plot.add_tools(tool)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Execute a custom action, e.g. ", {"type": "literal", "children": ["CustomJS"]}, " callback when a toolbar\nicon is activated."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "literal_block", "children": [{"type": "inline", "children": ["tool"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["CustomAction"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["icon"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"icon.png\""]}, {"type": "inline", "children": [","]}, "\n                    ", {"type": "inline", "children": ["callback"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["CustomJS"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["code"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["'alert(\"foo\")'"]}, {"type": "inline", "children": ["))"]}, "\n\n", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["add_tools"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["tool"]}, {"type": "inline", "children": [")"]}]}]}]}, "props": [{"name": "callback", "type": "Nullable(Instance(Callback))", "desc": "A Bokeh callback to execute when the custom action icon is activated.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Bokeh callback to execute when the custom action icon is activated."]}]}, "default": null}]}, {"name": "CustomJS", "bases": ["Callback"], "mro": ["CustomJS", "Callback", "Model"], "desc": "Execute a JavaScript function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Execute a JavaScript function."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The explicit purpose of this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw JavaScript\ncode"]}, " for a browser to execute. If any part of the code is derived\nfrom untrusted user inputs, then you must take appropriate care to\nsanitize the user input prior to passing to Bokeh."]}]}]}, "props": [{"name": "args", "type": "Dict(String, AnyRef)", "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback."]}]}, "default": {}}, {"name": "code", "type": "String", "desc": "A snippet of JavaScript code to execute in the browser. The\ncode is made into the body of a function, and all of of the named objects in\n``args`` are available as parameters that the code can use. Additionally,\na ``cb_obj`` parameter contains the object that triggered the callback\nand an optional ``cb_data`` parameter that contains any tool-specific data\n(i.e. mouse coordinates and hovered glyph indices for the ``HoverTool``).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code to execute in the browser. The\ncode is made into the body of a function, and all of of the named objects in\n", {"type": "literal", "children": ["args"]}, " are available as parameters that the code can use. Additionally,\na ", {"type": "literal", "children": ["cb_obj"]}, " parameter contains the object that triggered the callback\nand an optional ", {"type": "literal", "children": ["cb_data"]}, " parameter that contains any tool-specific data\n(i.e. mouse coordinates and hovered glyph indices for the ", {"type": "literal", "children": ["HoverTool"]}, ")."]}]}, "default": ""}]}, {"name": "CustomJSExpr", "bases": ["Expression"], "mro": ["CustomJSExpr", "Expression", "Model"], "desc": "Evaluate a JavaScript function/generator.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Evaluate a JavaScript function/generator."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The explicit purpose of this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw JavaScript\ncode"]}, " for a browser to execute. If any part of the code is derived\nfrom untrusted user inputs, then you must take appropriate care to\nsanitize the user input prior to passing to Bokeh."]}]}]}, "props": [{"name": "args", "type": "Dict(String, AnyRef)", "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback. There is no need to manually include the data\nsource of the associated glyph renderer, as it is available within the scope of\nthe code via `this` keyword (e.g. `this.data` will give access to raw data).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback. There is no need to manually include the data\nsource of the associated glyph renderer, as it is available within the scope of\nthe code via ", {"type": "title_reference", "children": ["this"]}, " keyword (e.g. ", {"type": "title_reference", "children": ["this.data"]}, " will give access to raw data)."]}]}, "default": {}}, {"name": "code", "type": "String", "desc": "A snippet of JavaScript code to execute in the browser. The code is made into\nthe body of a generator function, and all of of the named objects in ``args``\nare available as parameters that the code can use. One can either return an\narray-like object (array, typed array, nd-array), an iterable (which will\nbe converted to an array) or a scalar value (which will be converted into\nan array of an appropriate length), or alternatively yield values that will\nbe collected into an array.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code to execute in the browser. The code is made into\nthe body of a generator function, and all of of the named objects in ", {"type": "literal", "children": ["args"]}, "\nare available as parameters that the code can use. One can either return an\narray-like object (array, typed array, nd-array), an iterable (which will\nbe converted to an array) or a scalar value (which will be converted into\nan array of an appropriate length), or alternatively yield values that will\nbe collected into an array."]}]}, "default": ""}]}, {"name": "CustomJSFilter", "bases": ["Filter"], "mro": ["CustomJSFilter", "Filter", "Model"], "desc": "Filter data sources with a custom defined JavaScript function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Filter data sources with a custom defined JavaScript function."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The explicit purpose of this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw JavaScript\ncode"]}, " for a browser to execute. If any part of the code is derived\nfrom untrusted user inputs, then you must take appropriate care to\nsanitize the user input prior to passing to Bokeh."]}]}]}, "props": [{"name": "args", "type": "RestrictedDict(String, AnyRef)", "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback."]}]}, "default": {}}, {"name": "code", "type": "String", "desc": "A snippet of JavaScript code to filter data contained in a columnar data source.\nThe code is made into the body of a function, and all of of the named objects in\n``args`` are available as parameters that the code can use. The variable\n``source`` will contain the data source that is associated with the ``CDSView`` this\nfilter is added to.\n\nThe code should either return the indices of the subset or an array of booleans\nto use to subset data source rows.\n\nExample:\n\n    .. code-block\n\n        code = '''\n        const indices = []\n        for (let i = 0; i <= source.data['some_column'].length; i++) {\n            if (source.data['some_column'][i] == 'some_value') {\n                indices.push(i)\n            }\n        }\n        return indices\n        '''", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code to filter data contained in a columnar data source.\nThe code is made into the body of a function, and all of of the named objects in\n", {"type": "literal", "children": ["args"]}, " are available as parameters that the code can use. The variable\n", {"type": "literal", "children": ["source"]}, " will contain the data source that is associated with the ", {"type": "literal", "children": ["CDSView"]}, " this\nfilter is added to."]}, {"type": "paragraph", "children": ["The code should either return the indices of the subset or an array of booleans\nto use to subset data source rows."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "comment", "children": ["code-block\n\ncode = '''\nconst indices = []\nfor (let i = 0; i <= source.data['some_column'].length; i++) {\n    if (source.data['some_column'][i] == 'some_value') {\n        indices.push(i)\n    }\n}\nreturn indices\n'''"]}]}]}, "default": ""}]}, {"name": "CustomJSHover", "bases": ["Model"], "mro": ["CustomJSHover", "Model"], "desc": "Define a custom formatter to apply to a hover tool field.\n\nThis model can be configured with JavaScript code to format hover tooltips.\nThe JavaScript code has access to the current value to format, some special\nvariables, and any format configured on the tooltip. The variable ``value``\nwill contain the untransformed value. The variable ``special_vars`` will\nprovide a dict with the following contents:\n\n* ``x`` data-space x-coordinate of the mouse\n* ``y`` data-space y-coordinate of the mouse\n* ``sx`` screen-space x-coordinate of the mouse\n* ``sy`` screen-space y-coordinate of the mouse\n* ``data_x`` data-space x-coordinate of the hovered glyph\n* ``data_y`` data-space y-coordinate of the hovered glyph\n* ``indices`` column indices of all currently hovered glyphs\n* ``name`` value of the ``name`` property of the hovered glyph renderer\n\nIf the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\nthen a ``segment_index`` key will also be present.\n\nFinally, the value of the format passed in the tooltip specification is\navailable as the ``format`` variable.\n\nExample:\n\n    As an example, the following code adds a custom formatter to format\n    WebMercator northing coordinates (in meters) as a latitude:\n\n    .. code-block:: python\n\n        lat_custom = CustomJSHover(code=\"\"\"\n            const projections = Bokeh.require(\"core/util/projections\");\n            const x = special_vars.x\n            const y = special_vars.y\n            const coords = projections.wgs84_mercator.invert(x, y)\n            return \"\" + coords[1]\n        \"\"\")\n\n        p.add_tools(HoverTool(\n            tooltips=[( 'lat','@y{custom}' )],\n            formatters={'@y':lat_custom}\n        ))\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Define a custom formatter to apply to a hover tool field."]}, {"type": "paragraph", "children": ["This model can be configured with JavaScript code to format hover tooltips.\nThe JavaScript code has access to the current value to format, some special\nvariables, and any format configured on the tooltip. The variable ", {"type": "literal", "children": ["value"]}, "\nwill contain the untransformed value. The variable ", {"type": "literal", "children": ["special_vars"]}, " will\nprovide a dict with the following contents:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["x"]}, " data-space x-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["y"]}, " data-space y-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["sx"]}, " screen-space x-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["sy"]}, " screen-space y-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["data_x"]}, " data-space x-coordinate of the hovered glyph"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["data_y"]}, " data-space y-coordinate of the hovered glyph"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["indices"]}, " column indices of all currently hovered glyphs"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["name"]}, " value of the ", {"type": "literal", "children": ["name"]}, " property of the hovered glyph renderer"]}]}]}, {"type": "paragraph", "children": ["If the hover is over a \"multi\" glyph such as ", {"type": "literal", "children": ["Patches"]}, " or ", {"type": "literal", "children": ["MultiLine"]}, "\nthen a ", {"type": "literal", "children": ["segment_index"]}, " key will also be present."]}, {"type": "paragraph", "children": ["Finally, the value of the format passed in the tooltip specification is\navailable as the ", {"type": "literal", "children": ["format"]}, " variable."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["As an example, the following code adds a custom formatter to format\nWebMercator northing coordinates (in meters) as a latitude:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["lat_custom"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["CustomJSHover"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["code"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"\"\"\n    const projections = Bokeh.require(\"core/util/projections\");\n    const x = special_vars.x\n    const y = special_vars.y\n    const coords = projections.wgs84_mercator.invert(x, y)\n    return \"\" + coords[1]\n\"\"\""]}, {"type": "inline", "children": [")"]}, "\n\n", {"type": "inline", "children": ["p"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["add_tools"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["HoverTool"]}, {"type": "inline", "children": ["("]}, "\n    ", {"type": "inline", "children": ["tooltips"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["[("]}, " ", {"type": "inline", "children": ["'lat'"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["'@y"]}, {"type": "inline", "children": ["{custom}"]}, {"type": "inline", "children": ["'"]}, " ", {"type": "inline", "children": [")],"]}, "\n    ", {"type": "inline", "children": ["formatters"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["{"]}, {"type": "inline", "children": ["'@y'"]}, {"type": "inline", "children": [":"]}, {"type": "inline", "children": ["lat_custom"]}, {"type": "inline", "children": ["}"]}, "\n", {"type": "inline", "children": ["))"]}]}]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The explicit purpose of this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw JavaScript\ncode"]}, " for a browser to execute. If any part of the code is derived\nfrom untrusted user inputs, then you must take appropriate care to\nsanitize the user input prior to passing to Bokeh."]}]}]}, "props": [{"name": "args", "type": "Dict(String, AnyRef)", "desc": "A mapping of names to Bokeh plot objects. These objects are made available\nto the callback code snippet as the values of named parameters to the\ncallback.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of names to Bokeh plot objects. These objects are made available\nto the callback code snippet as the values of named parameters to the\ncallback."]}]}, "default": {}}, {"name": "code", "type": "String", "desc": "A snippet of JavaScript code to transform a single value. The variable\n``value`` will contain the untransformed value and can be expected to be\npresent in the function namespace at render time. Additionally, the\nvariable ``special_vars`` will be available, and will provide a dict\nwith the following contents:\n\n* ``x`` data-space x-coordinate of the mouse\n* ``y`` data-space y-coordinate of the mouse\n* ``sx`` screen-space x-coordinate of the mouse\n* ``sy`` screen-space y-coordinate of the mouse\n* ``data_x`` data-space x-coordinate of the hovered glyph\n* ``data_y`` data-space y-coordinate of the hovered glyph\n* ``indices`` column indices of all currently hovered glyphs\n\nIf the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\nthen a ``segment_index`` key will also be present.\n\nFinally, the value of the format passed in the tooltip specification is\navailable as the ``format`` variable.\n\nThe snippet will be made into the body of a function and therefore requires\na return statement.\n\nExample:\n\n    .. code-block:: javascript\n\n        code = '''\n        return value + \" total\"\n        '''", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code to transform a single value. The variable\n", {"type": "literal", "children": ["value"]}, " will contain the untransformed value and can be expected to be\npresent in the function namespace at render time. Additionally, the\nvariable ", {"type": "literal", "children": ["special_vars"]}, " will be available, and will provide a dict\nwith the following contents:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["x"]}, " data-space x-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["y"]}, " data-space y-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["sx"]}, " screen-space x-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["sy"]}, " screen-space y-coordinate of the mouse"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["data_x"]}, " data-space x-coordinate of the hovered glyph"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["data_y"]}, " data-space y-coordinate of the hovered glyph"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["indices"]}, " column indices of all currently hovered glyphs"]}]}]}, {"type": "paragraph", "children": ["If the hover is over a \"multi\" glyph such as ", {"type": "literal", "children": ["Patches"]}, " or ", {"type": "literal", "children": ["MultiLine"]}, "\nthen a ", {"type": "literal", "children": ["segment_index"]}, " key will also be present."]}, {"type": "paragraph", "children": ["Finally, the value of the format passed in the tooltip specification is\navailable as the ", {"type": "literal", "children": ["format"]}, " variable."]}, {"type": "paragraph", "children": ["The snippet will be made into the body of a function and therefore requires\na return statement."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "literal_block", "children": [{"type": "inline", "children": ["code"]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["'''\nreturn value + \" total\"\n'''"]}]}]}]}, "default": ""}]}, {"name": "CustomJSTickFormatter", "bases": ["TickFormatter"], "mro": ["CustomJSTickFormatter", "TickFormatter", "Model"], "desc": "Display tick values that are formatted by a user-defined function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Display tick values that are formatted by a user-defined function."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The explicit purpose of this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw JavaScript\ncode"]}, " for a browser to execute. If any part of the code is derived\nfrom untrusted user inputs, then you must take appropriate care to\nsanitize the user input prior to passing to Bokeh."]}]}]}, "props": [{"name": "args", "type": "Dict(String, AnyRef)", "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the formatter's code snippet as the values of\nnamed parameters to the callback.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the formatter's code snippet as the values of\nnamed parameters to the callback."]}]}, "default": {}}, {"name": "code", "type": "String", "desc": "A snippet of JavaScript code that reformats a single tick to the desired\nformat. The variable ``tick`` will contain the unformatted tick value and\ncan be expected to be present in the code snippet namespace at render time.\n\nAdditionally available variables are:\n\n  * ``ticks``, an array of all axis ticks as positioned by the ticker,\n  * ``index``, the position of ``tick`` within ``ticks``, and\n  * the keys of ``args`` mapping, if any.\n\nFinding yourself needing to cache an expensive ``ticks``-dependent\ncomputation, you can store it on the ``this`` variable.\n\nExample:\n\n    .. code-block:: javascript\n\n        code = '''\n        this.precision = this.precision || (ticks.length > 5 ? 1 : 2);\n        return Math.floor(tick) + \" + \" + (tick % 1).toFixed(this.precision);\n        '''", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code that reformats a single tick to the desired\nformat. The variable ", {"type": "literal", "children": ["tick"]}, " will contain the unformatted tick value and\ncan be expected to be present in the code snippet namespace at render time."]}, {"type": "paragraph", "children": ["Additionally available variables are:"]}, {"type": "block_quote", "children": [{"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["ticks"]}, ", an array of all axis ticks as positioned by the ticker,"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["index"]}, ", the position of ", {"type": "literal", "children": ["tick"]}, " within ", {"type": "literal", "children": ["ticks"]}, ", and"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["the keys of ", {"type": "literal", "children": ["args"]}, " mapping, if any."]}]}]}]}, {"type": "paragraph", "children": ["Finding yourself needing to cache an expensive ", {"type": "literal", "children": ["ticks"]}, "-dependent\ncomputation, you can store it on the ", {"type": "literal", "children": ["this"]}, " variable."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "literal_block", "children": [{"type": "inline", "children": ["code"]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["'''\nthis.precision = this.precision || (ticks.length > 5 ? 1 : 2);\nreturn Math.floor(tick) + \" + \" + (tick % 1).toFixed(this.precision);\n'''"]}]}]}]}, "default": ""}]}, {"name": "CustomJSTransform", "bases": ["Transform"], "mro": ["CustomJSTransform", "Transform", "Model"], "desc": "Apply a custom defined transform to data.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Apply a custom defined transform to data."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The explicit purpose of this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw JavaScript\ncode"]}, " for a browser to execute. If any part of the code is derived\nfrom untrusted user inputs, then you must take appropriate care to\nsanitize the user input prior to passing to Bokeh."]}]}]}, "props": [{"name": "args", "type": "Dict(String, AnyRef)", "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the transform' code snippet as the values of\nnamed parameters to the callback.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the transform' code snippet as the values of\nnamed parameters to the callback."]}]}, "default": {}}, {"name": "func", "type": "String", "desc": "A snippet of JavaScript code to transform a single value. The variable\n``x`` will contain the untransformed value and can be expected to be\npresent in the function namespace at render time. The snippet will be\ninto the body of a function and therefore requires a return statement.\n\nExample:\n\n    .. code-block:: javascript\n\n        func = '''\n        return Math.floor(x) + 0.5\n        '''", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code to transform a single value. The variable\n", {"type": "literal", "children": ["x"]}, " will contain the untransformed value and can be expected to be\npresent in the function namespace at render time. The snippet will be\ninto the body of a function and therefore requires a return statement."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "literal_block", "children": [{"type": "inline", "children": ["func"]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["'''\nreturn Math.floor(x) + 0.5\n'''"]}]}]}]}, "default": ""}, {"name": "v_func", "type": "String", "desc": "A snippet of JavaScript code to transform an array of values. The variable\n``xs`` will contain the untransformed array and can be expected to be\npresent in the function namespace at render time. The snippet will be\ninto the body of a function and therefore requires a return statement.\n\nExample:\n\n    .. code-block:: javascript\n\n        v_func = '''\n        const new_xs = new Array(xs.length)\n        for(let i = 0; i < xs.length; i++) {\n            new_xs[i] = xs[i] + 0.5\n        }\n        return new_xs\n        '''\n\n.. warning::\n    The vectorized function, ``v_func``, must return an array of the\n    same length as the input ``xs`` array.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code to transform an array of values. The variable\n", {"type": "literal", "children": ["xs"]}, " will contain the untransformed array and can be expected to be\npresent in the function namespace at render time. The snippet will be\ninto the body of a function and therefore requires a return statement."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "literal_block", "children": [{"type": "inline", "children": ["v_func"]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["'''\nconst new_xs = new Array(xs.length)\nfor(let i = 0; i < xs.length; i++) {\n    new_xs[i] = xs[i] + 0.5\n}\nreturn new_xs\n'''"]}]}]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The vectorized function, ", {"type": "literal", "children": ["v_func"]}, ", must return an array of the\nsame length as the input ", {"type": "literal", "children": ["xs"]}, " array."]}]}]}, "default": ""}]}, {"name": "CustomLabelingPolicy", "bases": ["LabelingPolicy"], "mro": ["CustomLabelingPolicy", "LabelingPolicy", "Model"], "desc": "Select labels based on a user-defined policy function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing it to Bokeh.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Select labels based on a user-defined policy function."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The explicit purpose of this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw JavaScript\ncode"]}, " for a browser to execute. If any part of the code is derived\nfrom untrusted user inputs, then you must take appropriate care to\nsanitize the user input prior to passing it to Bokeh."]}]}]}, "props": [{"name": "args", "type": "Dict(String, AnyRef)", "desc": "A mapping of names to Python objects. In particular, those can be Bokeh's models.\nThese objects are made available to the labeling policy's code snippet as the\nvalues of named parameters to the callback.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of names to Python objects. In particular, those can be Bokeh's models.\nThese objects are made available to the labeling policy's code snippet as the\nvalues of named parameters to the callback."]}]}, "default": {}}, {"name": "code", "type": "String", "desc": "A snippet of JavaScript code that selects a subset of labels for display.\n\nThe following arguments a are available:\n\n  * ``indices``, a set-like object containing label indices to filter\n  * ``bboxes``, an array of bounding box objects per label\n  * ``distance(i, j)``, a function computing distance (in axis dimensions)\n      between labels. If labels i and j overlap, then ``distance(i, j) <= 0``.\n  * the keys of ``args`` mapping, if any\n\nExample:\n\n    Only display labels at even indices:\n\n    .. code-block:: javascript\n\n        code = '''\n        for (const i of indices)\n          if (i % 2 == 1)\n            indices.unset(i)\n        '''\n\n    Alternatively, as a generator:\n\n    .. code-block:: javascript\n\n        code = '''\n        for (const i of indices)\n          if (i % 2 == 0)\n            yield i\n        '''", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A snippet of JavaScript code that selects a subset of labels for display."]}, {"type": "paragraph", "children": ["The following arguments a are available:"]}, {"type": "block_quote", "children": [{"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["indices"]}, ", a set-like object containing label indices to filter"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["bboxes"]}, ", an array of bounding box objects per label"]}]}, {"type": "list_item", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["distance(i, j)"]}, ", a function computing distance (in axis dimensions)"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["between labels. If labels i and j overlap, then ", {"type": "literal", "children": ["distance(i, j) <= 0"]}, "."]}]}]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["the keys of ", {"type": "literal", "children": ["args"]}, " mapping, if any"]}]}]}]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Only display labels at even indices:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["code"]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["'''\nfor (const i of indices)\n  if (i % 2 == 1)\n    indices.unset(i)\n'''"]}]}, {"type": "paragraph", "children": ["Alternatively, as a generator:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["code"]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": [" "]}, {"type": "inline", "children": ["'''\nfor (const i of indices)\n  if (i % 2 == 0)\n    yield i\n'''"]}]}]}]}, "default": ""}]}, {"name": "DataAnnotation", "bases": ["Annotation"], "mro": ["DataAnnotation", "Annotation", "Renderer", "Model"], "desc": "Base class for annotations that utilize a data source.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for annotations that utilize a data source."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "source", "type": "Instance(DataSource)", "desc": "Local data source to use when rendering annotations on the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Local data source to use when rendering annotations on the plot."]}]}, "default": "{\"__type__\": \"ColumnDataSource\", \"attributes\": {\"data\": {\"type\": \"map\"}, \"selected\": {\"attributes\": {\"indices\": [], \"line_indices\": []}, \"id\": \"p1799\", \"name\": \"Selection\", \"type\": \"object\"}, \"selection_policy\": {\"id\": \"p1800\", \"name\": \"UnionRenderers\", \"type\": \"object\"}}, \"name\": \"ColumnDataSource\", \"type\": \"object\"}"}]}, {"name": "DataCube", "bases": ["DataTable"], "mro": ["DataCube", "DataTable", "TableWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Specialized DataTable with collapsing groups, totals, and sub-totals.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specialized DataTable with collapsing groups, totals, and sub-totals."]}]}, "props": [{"name": "grouping", "type": "List(Instance(GroupingInfo))", "desc": "Describe what aggregation operations used to define sub-totals and totals", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describe what aggregation operations used to define sub-totals and totals"]}]}, "default": []}, {"name": "target", "type": "Instance(DataSource)", "desc": "Two column datasource (row_indices & labels) describing which rows of the\ndata cubes are expanded or collapsed", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Two column datasource (row_indices & labels) describing which rows of the\ndata cubes are expanded or collapsed"]}]}, "default": "<Undefined>"}]}, {"name": "DataModel", "bases": ["Model"], "mro": ["DataModel", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "DataRange", "bases": ["Range"], "mro": ["DataRange", "Range", "Model"], "desc": "A base class for all data range types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all data range types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "renderers", "type": "Either(List(Instance(Model)), Auto)", "desc": "An explicit list of renderers to autorange against. If unset,\ndefaults to all renderers on a plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An explicit list of renderers to autorange against. If unset,\ndefaults to all renderers on a plot."]}]}, "default": []}]}, {"name": "DataRange1d", "bases": ["DataRange"], "mro": ["DataRange1d", "DataRange", "Range", "Model"], "desc": "An auto-fitting range in a continuous scalar dimension.\n\nBy default the ``start`` and ``end`` of the range automatically\nassume min and max values of the data for associated renderers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An auto-fitting range in a continuous scalar dimension."]}, {"type": "paragraph", "children": ["By default the ", {"type": "literal", "children": ["start"]}, " and ", {"type": "literal", "children": ["end"]}, " of the range automatically\nassume min and max values of the data for associated renderers."]}]}, "props": [{"name": "bounds", "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta)), Tuple(Datetime, Datetime), Tuple(Nullable(Datetime), Datetime), Tuple(Datetime, Nullable(Datetime))))", "desc": "The bounds that the range is allowed to go to. Typically used to prevent\nthe user from panning/zooming/etc away from the data.\n\nBy default, the bounds will be None, allowing your plot to pan/zoom as far\nas you want. If bounds are 'auto' they will be computed to be the same as\nthe start and end of the ``DataRange1d``.\n\nBounds are provided as a tuple of ``(min, max)`` so regardless of whether\nyour range is increasing or decreasing, the first item should be the\nminimum value of the range and the second item should be the maximum.\nSetting ``min > max`` will result in a ``ValueError``.\n\nIf you only want to constrain one end of the plot, you can set ``min`` or\n``max`` to ``None`` e.g. ``DataRange1d(bounds=(None, 12))``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The bounds that the range is allowed to go to. Typically used to prevent\nthe user from panning/zooming/etc away from the data."]}, {"type": "paragraph", "children": ["By default, the bounds will be None, allowing your plot to pan/zoom as far\nas you want. If bounds are 'auto' they will be computed to be the same as\nthe start and end of the ", {"type": "literal", "children": ["DataRange1d"]}, "."]}, {"type": "paragraph", "children": ["Bounds are provided as a tuple of ", {"type": "literal", "children": ["(min, max)"]}, " so regardless of whether\nyour range is increasing or decreasing, the first item should be the\nminimum value of the range and the second item should be the maximum.\nSetting ", {"type": "literal", "children": ["min > max"]}, " will result in a ", {"type": "literal", "children": ["ValueError"]}, "."]}, {"type": "paragraph", "children": ["If you only want to constrain one end of the plot, you can set ", {"type": "literal", "children": ["min"]}, " or\n", {"type": "literal", "children": ["max"]}, " to ", {"type": "literal", "children": ["None"]}, " e.g. ", {"type": "literal", "children": ["DataRange1d(bounds=(None, 12))"]}]}]}, "default": null}, {"name": "default_span", "type": "Either(Float, TimeDelta)", "desc": "A default width for the interval, in case ``start`` is equal to ``end``\n(if used with a log axis, default_span is in powers of 10).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A default width for the interval, in case ", {"type": "literal", "children": ["start"]}, " is equal to ", {"type": "literal", "children": ["end"]}, "\n(if used with a log axis, default_span is in powers of 10)."]}]}, "default": 2.0}, {"name": "end", "type": "Either(Float, Datetime, TimeDelta)", "desc": "An explicitly supplied range end. If provided, will override\nautomatically computed end value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An explicitly supplied range end. If provided, will override\nautomatically computed end value."]}]}, "default": NaN}, {"name": "flipped", "type": "Bool", "desc": "Whether the range should be \"flipped\" from its normal direction when\nauto-ranging.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the range should be \"flipped\" from its normal direction when\nauto-ranging."]}]}, "default": false}, {"name": "follow", "type": "Nullable(Enum('start', 'end'))", "desc": "Configure the data to follow one or the other data extreme, with a\nmaximum range size of ``follow_interval``.\n\nIf set to ``\"start\"`` then the range will adjust so that ``start`` always\ncorresponds to the minimum data value (or maximum, if ``flipped`` is\n``True``).\n\nIf set to ``\"end\"`` then the range will adjust so that ``end`` always\ncorresponds to the maximum data value (or minimum, if ``flipped`` is\n``True``).\n\nIf set to ``None`` (default), then auto-ranging does not follow, and\nthe range will encompass both the minimum and maximum data values.\n\n``follow`` cannot be used with bounds, and if set, bounds will be set to\n``None``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Configure the data to follow one or the other data extreme, with a\nmaximum range size of ", {"type": "literal", "children": ["follow_interval"]}, "."]}, {"type": "paragraph", "children": ["If set to ", {"type": "literal", "children": ["\"start\""]}, " then the range will adjust so that ", {"type": "literal", "children": ["start"]}, " always\ncorresponds to the minimum data value (or maximum, if ", {"type": "literal", "children": ["flipped"]}, " is\n", {"type": "literal", "children": ["True"]}, ")."]}, {"type": "paragraph", "children": ["If set to ", {"type": "literal", "children": ["\"end\""]}, " then the range will adjust so that ", {"type": "literal", "children": ["end"]}, " always\ncorresponds to the maximum data value (or minimum, if ", {"type": "literal", "children": ["flipped"]}, " is\n", {"type": "literal", "children": ["True"]}, ")."]}, {"type": "paragraph", "children": ["If set to ", {"type": "literal", "children": ["None"]}, " (default), then auto-ranging does not follow, and\nthe range will encompass both the minimum and maximum data values."]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["follow"]}, " cannot be used with bounds, and if set, bounds will be set to\n", {"type": "literal", "children": ["None"]}, "."]}]}, "default": null}, {"name": "follow_interval", "type": "Nullable(Either(Float, TimeDelta))", "desc": "If ``follow`` is set to ``\"start\"`` or ``\"end\"`` then the range will\nalways be constrained to that::\n\n     abs(r.start - r.end) <= follow_interval\n\nis maintained.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["If ", {"type": "literal", "children": ["follow"]}, " is set to ", {"type": "literal", "children": ["\"start\""]}, " or ", {"type": "literal", "children": ["\"end\""]}, " then the range will\nalways be constrained to that:"]}, {"type": "literal_block", "children": ["abs(r.start - r.end) <= follow_interval"]}, {"type": "paragraph", "children": ["is maintained."]}]}, "default": null}, {"name": "max_interval", "type": "Either(Null, Float, TimeDelta)", "desc": "The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval. Note that ``bounds`` can impose an\nimplicit constraint on the maximum interval as well.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval. Note that ", {"type": "literal", "children": ["bounds"]}, " can impose an\nimplicit constraint on the maximum interval as well."]}]}, "default": null}, {"name": "min_interval", "type": "Either(Null, Float, TimeDelta)", "desc": "The level that the range is allowed to zoom in, expressed as the\nminimum visible interval. If set to ``None`` (default), the minimum\ninterval is not bound.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The level that the range is allowed to zoom in, expressed as the\nminimum visible interval. If set to ", {"type": "literal", "children": ["None"]}, " (default), the minimum\ninterval is not bound."]}]}, "default": null}, {"name": "only_visible", "type": "Bool", "desc": "If True, renderers that that are not visible will be excluded from automatic\nbounds computations.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["If True, renderers that that are not visible will be excluded from automatic\nbounds computations."]}]}, "default": false}, {"name": "range_padding", "type": "Either(Float, TimeDelta)", "desc": "How much padding to add around the computed data bounds.\n\nWhen ``range_padding_units`` is set to ``\"percent\"``, the span of the\nrange span is expanded to make the range ``range_padding`` percent larger.\n\nWhen ``range_padding_units`` is set to ``\"absolute\"``, the start and end\nof the range span are extended by the amount ``range_padding``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How much padding to add around the computed data bounds."]}, {"type": "paragraph", "children": ["When ", {"type": "literal", "children": ["range_padding_units"]}, " is set to ", {"type": "literal", "children": ["\"percent\""]}, ", the span of the\nrange span is expanded to make the range ", {"type": "literal", "children": ["range_padding"]}, " percent larger."]}, {"type": "paragraph", "children": ["When ", {"type": "literal", "children": ["range_padding_units"]}, " is set to ", {"type": "literal", "children": ["\"absolute\""]}, ", the start and end\nof the range span are extended by the amount ", {"type": "literal", "children": ["range_padding"]}, "."]}]}, "default": 0.1}, {"name": "range_padding_units", "type": "Enum('percent', 'absolute')", "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\nas an absolute quantity. (default: ``\"percent\"``)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the ", {"type": "literal", "children": ["range_padding"]}, " should be interpreted as a percentage, or\nas an absolute quantity. (default: ", {"type": "literal", "children": ["\"percent\""]}, ")"]}]}, "default": "percent"}, {"name": "start", "type": "Either(Float, Datetime, TimeDelta)", "desc": "An explicitly supplied range start. If provided, will override\nautomatically computed start value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An explicitly supplied range start. If provided, will override\nautomatically computed start value."]}]}, "default": NaN}]}, {"name": "DataRenderer", "bases": ["Renderer"], "mro": ["DataRenderer", "Renderer", "Model"], "desc": "An abstract base class for data renderer types (e.g. ``GlyphRenderer``, ``GraphRenderer``).\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An abstract base class for data renderer types (e.g. ", {"type": "literal", "children": ["GlyphRenderer"]}, ", ", {"type": "literal", "children": ["GraphRenderer"]}, ")."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "DataSource", "bases": ["Model"], "mro": ["DataSource", "Model"], "desc": "A base class for data source types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for data source types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "selected", "type": "Readonly(Instance(Selection))", "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An instance of a ", {"type": "literal", "children": ["Selection"]}, " that indicates selected indices on this ", {"type": "literal", "children": ["DataSource"]}, ".\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ", {"type": "literal", "children": ["selected.indices"]}, ")."]}]}, "default": "{\"__type__\": \"Selection\", \"attributes\": {\"indices\": [], \"line_indices\": []}, \"name\": \"Selection\", \"type\": \"object\"}"}]}, {"name": "DataTable", "bases": ["TableWidget"], "mro": ["DataTable", "TableWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Two-dimensional grid for visualization and editing large amounts\nof data.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Two-dimensional grid for visualization and editing large amounts\nof data."]}]}, "props": [{"name": "auto_edit", "type": "Bool", "desc": "When enabled editing mode is enabled after a single click on a\ntable cell.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["When enabled editing mode is enabled after a single click on a\ntable cell."]}]}, "default": false}, {"name": "autosize_mode", "type": "Enum('fit_columns', 'fit_viewport', 'force_fit', 'none')", "desc": "Describes the column autosizing mode with one of the following options:\n\n``\"fit_columns\"``\n    Compute column widths based on cell contents but ensure the\n    table fits into the available viewport. This results in no\n    horizontal scrollbar showing up, but data can get unreadable\n    if there is not enough space available.\n\n``\"fit_viewport\"``\n    Adjust the viewport size after computing columns widths based\n    on cell contents.\n\n``\"force_fit\"``\n    Fit columns into available space dividing the table width across\n    the columns equally (equivalent to `fit_columns=True`).\n    This results in no horizontal scrollbar showing up, but data\n    can get unreadable if there is not enough space available.\n\n``\"none\"``\n    Do not automatically compute column widths.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes the column autosizing mode with one of the following options:"]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"fit_columns\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Compute column widths based on cell contents but ensure the\ntable fits into the available viewport. This results in no\nhorizontal scrollbar showing up, but data can get unreadable\nif there is not enough space available."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"fit_viewport\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Adjust the viewport size after computing columns widths based\non cell contents."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"force_fit\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Fit columns into available space dividing the table width across\nthe columns equally (equivalent to ", {"type": "title_reference", "children": ["fit_columns=True"]}, ").\nThis results in no horizontal scrollbar showing up, but data\ncan get unreadable if there is not enough space available."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"none\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Do not automatically compute column widths."]}]}]}]}]}, "default": "force_fit"}, {"name": "columns", "type": "List(Instance(TableColumn))", "desc": "The list of child column widgets.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The list of child column widgets."]}]}, "default": []}, {"name": "editable", "type": "Bool", "desc": "Allows to edit table's contents. Needs cell editors to be configured on\ncolumns that are required to be editable.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to edit table's contents. Needs cell editors to be configured on\ncolumns that are required to be editable."]}]}, "default": false}, {"name": "fit_columns", "type": "Nullable(Bool)", "desc": "**This is a legacy parameter.** For new development, use the\n``autosize_mode`` parameter.\n\nWhether columns should be fit to the available width. This results in\nno horizontal scrollbar showing up, but data can get unreadable if there\nis not enough space available. If set to ``True``, each column's width is\nunderstood as maximum width.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "strong", "children": ["This is a legacy parameter."]}, " For new development, use the\n", {"type": "literal", "children": ["autosize_mode"]}, " parameter."]}, {"type": "paragraph", "children": ["Whether columns should be fit to the available width. This results in\nno horizontal scrollbar showing up, but data can get unreadable if there\nis not enough space available. If set to ", {"type": "literal", "children": ["True"]}, ", each column's width is\nunderstood as maximum width."]}]}, "default": null}, {"name": "frozen_columns", "type": "Nullable(Int)", "desc": "Integer indicating the number of columns to freeze. If set the first N\ncolumns will be frozen which prevents them from scrolling out of frame.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Integer indicating the number of columns to freeze. If set the first N\ncolumns will be frozen which prevents them from scrolling out of frame."]}]}, "default": null}, {"name": "frozen_rows", "type": "Nullable(Int)", "desc": "Integer indicating the number of rows to freeze. If set the first N\nrows will be frozen which prevents them from scrolling out of frame,\nif set to a negative value last N rows will be frozen.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Integer indicating the number of rows to freeze. If set the first N\nrows will be frozen which prevents them from scrolling out of frame,\nif set to a negative value last N rows will be frozen."]}]}, "default": null}, {"name": "header_row", "type": "Bool", "desc": "Whether to show a header row with column names at the top of the table.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to show a header row with column names at the top of the table."]}]}, "default": true}, {"name": "index_header", "type": "String", "desc": "The column header to display for the index column, if it is present.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The column header to display for the index column, if it is present."]}]}, "default": "#"}, {"name": "index_position", "type": "Nullable(Int)", "desc": "Where among the list of columns to insert a column displaying the row\nindex. Negative indices are supported, and specify an index position\nfrom the end of the list of columns (i.e. standard Python behaviour).\n\nTo prevent the index column from being added, set to None.\n\nIf the absolute value of index_position  is larger than the length of\nthe columns, then the index will appear at the beginning or end, depending\non the sign.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Where among the list of columns to insert a column displaying the row\nindex. Negative indices are supported, and specify an index position\nfrom the end of the list of columns (i.e. standard Python behaviour)."]}, {"type": "paragraph", "children": ["To prevent the index column from being added, set to None."]}, {"type": "paragraph", "children": ["If the absolute value of index_position  is larger than the length of\nthe columns, then the index will appear at the beginning or end, depending\non the sign."]}]}, "default": 0}, {"name": "index_width", "type": "Int", "desc": "The width of the index column, if present.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width of the index column, if present."]}]}, "default": 40}, {"name": "reorderable", "type": "Bool", "desc": "Allows the reordering of a table's columns. To reorder a column,\nclick and drag a table's header to the desired location in the table.\nThe columns on either side will remain in their previous order.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows the reordering of a table's columns. To reorder a column,\nclick and drag a table's header to the desired location in the table.\nThe columns on either side will remain in their previous order."]}]}, "default": true}, {"name": "row_height", "type": "Int", "desc": "The height of each row in pixels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The height of each row in pixels."]}]}, "default": 25}, {"name": "scroll_to_selection", "type": "Bool", "desc": "Whenever a selection is made on the data source, scroll the selected\nrows into the table's viewport if none of the selected rows are already\nin the viewport.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whenever a selection is made on the data source, scroll the selected\nrows into the table's viewport if none of the selected rows are already\nin the viewport."]}]}, "default": true}, {"name": "selectable", "type": "Either(Bool, Enum('checkbox'))", "desc": "Whether a table's rows can be selected or not. Using ``checkbox`` is\nequivalent  to ``True``, but makes selection visible through a checkbox\nfor each row,  instead of highlighting rows. Multiple selection is\nallowed and can be achieved by either clicking multiple checkboxes (if\nenabled) or using Shift + click on rows.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether a table's rows can be selected or not. Using ", {"type": "literal", "children": ["checkbox"]}, " is\nequivalent  to ", {"type": "literal", "children": ["True"]}, ", but makes selection visible through a checkbox\nfor each row,  instead of highlighting rows. Multiple selection is\nallowed and can be achieved by either clicking multiple checkboxes (if\nenabled) or using Shift + click on rows."]}]}, "default": true}, {"name": "sortable", "type": "Bool", "desc": "Allows to sort table's contents. By default natural order is preserved.\nTo sort a column, click on it's header. Clicking one more time changes\nsort direction. Use Ctrl + click to return to natural order. Use\nShift + click to sort multiple columns simultaneously.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to sort table's contents. By default natural order is preserved.\nTo sort a column, click on it's header. Clicking one more time changes\nsort direction. Use Ctrl + click to return to natural order. Use\nShift + click to sort multiple columns simultaneously."]}]}, "default": true}]}, {"name": "DateEditor", "bases": ["CellEditor"], "mro": ["DateEditor", "CellEditor", "Model"], "desc": "Calendar-based date cell editor.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Calendar-based date cell editor."]}]}, "props": []}, {"name": "DateFormatter", "bases": ["StringFormatter"], "mro": ["DateFormatter", "StringFormatter", "CellFormatter", "Model"], "desc": "Date cell formatter.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Date cell formatter."]}]}, "props": [{"name": "format", "type": "Either(Enum('ATOM', 'W3C', 'RFC-3339', 'ISO-8601', 'COOKIE', 'RFC-822', 'RFC-850', 'RFC-1036', 'RFC-1123', 'RFC-2822', 'RSS', 'TIMESTAMP'), String)", "desc": "The date format can be any standard  `strftime`_ format string, as well\nas any of the following predefined format names:\n\n================================================ ================== ===================\nFormat name(s)                                   Format string      Example Output\n================================================ ================== ===================\n``ATOM`` / ``W3C`` / ``RFC-3339`` / ``ISO-8601`` ``\"%Y-%m-%d\"``     2014-03-01\n``COOKIE``                                       ``\"%a, %d %b %Y\"`` Sat, 01 Mar 2014\n``RFC-850``                                      ``\"%A, %d-%b-%y\"`` Saturday, 01-Mar-14\n``RFC-1123`` / ``RFC-2822``                      ``\"%a, %e %b %Y\"`` Sat, 1 Mar 2014\n``RSS`` / ``RFC-822`` / ``RFC-1036``             ``\"%a, %e %b %y\"`` Sat, 1 Mar 14\n``TIMESTAMP``                                    (ms since epoch)   1393632000000\n================================================ ================== ===================\n\nNote that in the table some of the format names are synonymous, with\nidentical format names separated by slashes.\n\nThis list of supported `strftime`_ format codes is reproduced below.\n\n%a\n    The abbreviated name of the day of the week according to the\n    current locale.\n\n%A\n    The full name of the day of the week according to the current\n    locale.\n\n%b\n    The abbreviated month name according to the current locale.\n\n%B\n    The full month name according to the current locale.\n\n%c\n    The preferred date and time representation for the current\n    locale.\n\n%C\n    The century number (year/100) as a 2-digit integer.\n\n%d\n    The day of the month as a decimal number (range 01 to 31).\n\n%D\n    Equivalent to %m/%d/%y.  (Americans should note that in many\n    other countries %d/%m/%y is rather common. This means that in\n    international context this format is ambiguous and should not\n    be used.)\n\n%e\n    Like %d, the day of the month as a decimal number, but a\n    leading zero is replaced by a space.\n\n%f\n    Microsecond as a decimal number, zero-padded on the left (range\n    000000-999999). This is an extension to the set of directives\n    available to `timezone`_.\n\n%F\n    Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n%G\n    The ISO 8601 week-based year with century as a decimal number.\n    The 4-digit year corresponding to the ISO week number (see %V).\n    This has the same format and value as %Y, except that if the\n    ISO week number belongs to the previous or next year, that year\n    is used instead.\n\n%g\n    Like %G, but without century, that is, with a 2-digit year (00-99).\n\n%h\n    Equivalent to %b.\n\n%H\n    The hour as a decimal number using a 24-hour clock (range 00\n    to 23).\n\n%I\n    The hour as a decimal number using a 12-hour clock (range 01\n    to 12).\n\n%j\n    The day of the year as a decimal number (range 001 to 366).\n\n%k\n    The hour (24-hour clock) as a decimal number (range 0 to 23).\n    Single digits are preceded by a blank.  (See also %H.)\n\n%l\n    The hour (12-hour clock) as a decimal number (range 1 to 12).\n    Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n%m\n    The month as a decimal number (range 01 to 12).\n\n%M\n    The minute as a decimal number (range 00 to 59).\n\n%n\n    A newline character. Bokeh text does not currently support\n    newline characters.\n\n%N\n    Nanosecond as a decimal number, zero-padded on the left (range\n    000000000-999999999). Supports a padding width specifier, i.e.\n    %3N displays 3 leftmost digits. However, this is only accurate\n    to the millisecond level of precision due to limitations of\n    `timezone`_.\n\n%p\n    Either \"AM\" or \"PM\" according to the given time value, or the\n    corresponding strings for the current locale.  Noon is treated\n    as \"PM\" and midnight as \"AM\".\n\n%P\n    Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n    string for the current locale.\n\n%r\n    The time in a.m. or p.m. notation.  In the POSIX locale this\n    is equivalent to %I:%M:%S %p.\n\n%R\n    The time in 24-hour notation (%H:%M). For a version including\n    the seconds, see %T below.\n\n%s\n    The number of seconds since the Epoch, 1970-01-01 00:00:00\n    +0000 (UTC).\n\n%S\n    The second as a decimal number (range 00 to 60).  (The range\n    is up to 60 to allow for occasional leap seconds.)\n\n%t\n    A tab character. Bokeh text does not currently support tab\n    characters.\n\n%T\n    The time in 24-hour notation (%H:%M:%S).\n\n%u\n    The day of the week as a decimal, range 1 to 7, Monday being 1.\n    See also %w.\n\n%U\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Sunday as the first day of\n    week 01.  See also %V and %W.\n\n%V\n    The ISO 8601 week number (see NOTES) of the current year as a\n    decimal number, range 01 to 53, where week 1 is the first week\n    that has at least 4 days in the new year.  See also %U and %W.\n\n%w\n    The day of the week as a decimal, range 0 to 6, Sunday being 0.\n    See also %u.\n\n%W\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Monday as the first day of\n    week 01.\n\n%x\n    The preferred date representation for the current locale\n    without the time.\n\n%X\n    The preferred time representation for the current locale\n    without the date.\n\n%y\n    The year as a decimal number without a century (range 00 to 99).\n\n%Y\n    The year as a decimal number including the century.\n\n%z\n    The +hhmm or -hhmm numeric timezone (that is, the hour and\n    minute offset from UTC).\n\n%Z\n    The timezone name or abbreviation.\n\n%%\n    A literal '%' character.\n\n.. warning::\n    The client library BokehJS uses the `timezone`_ library to\n    format datetimes. The inclusion of the list below is based on the\n    claim that `timezone`_ makes to support \"the full compliment\n    of GNU date format specifiers.\" However, this claim has not\n    been tested exhaustively against this list. If you find formats\n    that do not function as expected, please submit a `github issue`_,\n    so that the documentation can be updated appropriately.\n\n.. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n.. _timezone: http://bigeasy.github.io/timezone/\n.. _github issue: https://github.com/bokeh/bokeh/issues", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The date format can be any standard  ", {"type": "reference", "children": ["strftime"]}, " format string, as well\nas any of the following predefined format names:"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Format name(s)"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format string"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Example Output"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["ATOM"]}, " / ", {"type": "literal", "children": ["W3C"]}, " / ", {"type": "literal", "children": ["RFC-3339"]}, " / ", {"type": "literal", "children": ["ISO-8601"]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["\"%Y-%m-%d\""]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["2014-03-01"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["COOKIE"]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["\"%a, %d %b %Y\""]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Sat, 01 Mar 2014"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["RFC-850"]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["\"%A, %d-%b-%y\""]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Saturday, 01-Mar-14"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["RFC-1123"]}, " / ", {"type": "literal", "children": ["RFC-2822"]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["\"%a, %e %b %Y\""]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Sat, 1 Mar 2014"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["RSS"]}, " / ", {"type": "literal", "children": ["RFC-822"]}, " / ", {"type": "literal", "children": ["RFC-1036"]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["\"%a, %e %b %y\""]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Sat, 1 Mar 14"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["TIMESTAMP"]}]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["(ms since epoch)"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1393632000000"]}]}]}]}]}]}, {"type": "paragraph", "children": ["Note that in the table some of the format names are synonymous, with\nidentical format names separated by slashes."]}, {"type": "paragraph", "children": ["This list of supported ", {"type": "reference", "children": ["strftime"]}, " format codes is reproduced below."]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["%a"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The abbreviated name of the day of the week according to the\ncurrent locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%A"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The full name of the day of the week according to the current\nlocale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%b"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The abbreviated month name according to the current locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%B"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The full month name according to the current locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%c"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The preferred date and time representation for the current\nlocale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%C"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The century number (year/100) as a 2-digit integer."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%d"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the month as a decimal number (range 01 to 31)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%D"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Equivalent to %m/%d/%y.  (Americans should note that in many\nother countries %d/%m/%y is rather common. This means that in\ninternational context this format is ambiguous and should not\nbe used.)"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%e"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Like %d, the day of the month as a decimal number, but a\nleading zero is replaced by a space."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%f"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Microsecond as a decimal number, zero-padded on the left (range\n000000-999999). This is an extension to the set of directives\navailable to ", {"type": "reference", "children": ["timezone"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%F"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Equivalent to %Y-%m-%d (the ISO 8601 date format)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%G"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The ISO 8601 week-based year with century as a decimal number.\nThe 4-digit year corresponding to the ISO week number (see %V).\nThis has the same format and value as %Y, except that if the\nISO week number belongs to the previous or next year, that year\nis used instead."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%g"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Like %G, but without century, that is, with a 2-digit year (00-99)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%h"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Equivalent to %b."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%H"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour as a decimal number using a 24-hour clock (range 00\nto 23)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%I"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour as a decimal number using a 12-hour clock (range 01\nto 12)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%j"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the year as a decimal number (range 001 to 366)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%k"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour (24-hour clock) as a decimal number (range 0 to 23).\nSingle digits are preceded by a blank.  (See also %H.)"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%l"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour (12-hour clock) as a decimal number (range 1 to 12).\nSingle digits are preceded by a blank.  (See also %I.)  (TZ)"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%m"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The month as a decimal number (range 01 to 12)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%M"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The minute as a decimal number (range 00 to 59)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%n"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["A newline character. Bokeh text does not currently support\nnewline characters."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%N"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Nanosecond as a decimal number, zero-padded on the left (range\n000000000-999999999). Supports a padding width specifier, i.e.\n%3N displays 3 leftmost digits. However, this is only accurate\nto the millisecond level of precision due to limitations of\n", {"type": "reference", "children": ["timezone"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%p"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Either \"AM\" or \"PM\" according to the given time value, or the\ncorresponding strings for the current locale.  Noon is treated\nas \"PM\" and midnight as \"AM\"."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%P"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\nstring for the current locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%r"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The time in a.m. or p.m. notation.  In the POSIX locale this\nis equivalent to %I:%M:%S %p."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%R"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The time in 24-hour notation (%H:%M). For a version including\nthe seconds, see %T below."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%s"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The number of seconds since the Epoch, 1970-01-01 00:00:00\n+0000 (UTC)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%S"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The second as a decimal number (range 00 to 60).  (The range\nis up to 60 to allow for occasional leap seconds.)"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%t"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["A tab character. Bokeh text does not currently support tab\ncharacters."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%T"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The time in 24-hour notation (%H:%M:%S)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%u"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the week as a decimal, range 1 to 7, Monday being 1.\nSee also %w."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%U"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The week number of the current year as a decimal number, range\n00 to 53, starting with the first Sunday as the first day of\nweek 01.  See also %V and %W."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%V"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The ISO 8601 week number (see NOTES) of the current year as a\ndecimal number, range 01 to 53, where week 1 is the first week\nthat has at least 4 days in the new year.  See also %U and %W."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%w"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the week as a decimal, range 0 to 6, Sunday being 0.\nSee also %u."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%W"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The week number of the current year as a decimal number, range\n00 to 53, starting with the first Monday as the first day of\nweek 01."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%x"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The preferred date representation for the current locale\nwithout the time."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%X"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The preferred time representation for the current locale\nwithout the date."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%y"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The year as a decimal number without a century (range 00 to 99)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%Y"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The year as a decimal number including the century."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%z"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The +hhmm or -hhmm numeric timezone (that is, the hour and\nminute offset from UTC)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%Z"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The timezone name or abbreviation."]}]}]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Possible incomplete section title.\nTreating the overline as ordinary text because it's so short."]}]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["%%"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["A literal '%' character."]}]}]}]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The client library BokehJS uses the ", {"type": "reference", "children": ["timezone"]}, " library to\nformat datetimes. The inclusion of the list below is based on the\nclaim that ", {"type": "reference", "children": ["timezone"]}, " makes to support \"the full compliment\nof GNU date format specifiers.\" However, this claim has not\nbeen tested exhaustively against this list. If you find formats\nthat do not function as expected, please submit a ", {"type": "reference", "children": ["github issue"]}, ",\nso that the documentation can be updated appropriately."]}]}, {"type": "target", "children": []}, {"type": "target", "children": []}, {"type": "target", "children": []}]}, "default": "ISO-8601"}]}, {"name": "DatePicker", "bases": ["InputWidget"], "mro": ["DatePicker", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Calendar-based date picker widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Calendar-based date picker widget."]}]}, "props": [{"name": "disabled_dates", "type": "Nullable(List(Either(Date, Tuple(Date, Date))))", "desc": "A list of dates of ``(start, end)`` date ranges to make unavailable for\nselection. All other dates will be avalable.\n\n.. note::\n    Only one of ``disabled_dates`` and ``enabled_dates`` should be specified.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of dates of ", {"type": "literal", "children": ["(start, end)"]}, " date ranges to make unavailable for\nselection. All other dates will be avalable."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Only one of ", {"type": "literal", "children": ["disabled_dates"]}, " and ", {"type": "literal", "children": ["enabled_dates"]}, " should be specified."]}]}]}, "default": null}, {"name": "enabled_dates", "type": "Nullable(List(Either(Date, Tuple(Date, Date))))", "desc": "A list of dates of ``(start, end)`` date ranges to make available for\nselection. All other dates will be unavailable.\n\n.. note::\n    Only one of ``disabled_dates`` and ``enabled_dates`` should be specified.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of dates of ", {"type": "literal", "children": ["(start, end)"]}, " date ranges to make available for\nselection. All other dates will be unavailable."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Only one of ", {"type": "literal", "children": ["disabled_dates"]}, " and ", {"type": "literal", "children": ["enabled_dates"]}, " should be specified."]}]}]}, "default": null}, {"name": "inline", "type": "Bool", "desc": "Whether the calendar sholud be displayed inline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the calendar sholud be displayed inline."]}]}, "default": false}, {"name": "max_date", "type": "Nullable(Date)", "desc": "Optional latest allowable date.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Optional latest allowable date."]}]}, "default": null}, {"name": "min_date", "type": "Nullable(Date)", "desc": "Optional earliest allowable date.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Optional earliest allowable date."]}]}, "default": null}, {"name": "position", "type": "Enum('auto', 'above', 'below')", "desc": "Where the calendar is rendered relative to the input when ``inline`` is False.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Where the calendar is rendered relative to the input when ", {"type": "literal", "children": ["inline"]}, " is False."]}]}, "default": "auto"}, {"name": "value", "type": "Date", "desc": "The initial or picked date.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The initial or picked date."]}]}, "default": "<Undefined>"}]}, {"name": "DateRangeSlider", "bases": ["AbstractSlider"], "mro": ["DateRangeSlider", "AbstractSlider", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Slider-based date range selection widget. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Slider-based date range selection widget."]}]}, "props": [{"name": "end", "type": "Required(Datetime)", "desc": "The maximum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The maximum allowable value."]}]}, "default": "<Undefined>"}, {"name": "start", "type": "Required(Datetime)", "desc": "The minimum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum allowable value."]}]}, "default": "<Undefined>"}, {"name": "step", "type": "Int", "desc": "The step between consecutive values, in units of days.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The step between consecutive values, in units of days."]}]}, "default": 1}, {"name": "value", "type": "Required(Tuple(Datetime, Datetime))", "desc": "Initial or selected range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected range."]}]}, "default": "<Undefined>"}, {"name": "value_throttled", "type": "Readonly(Required(Tuple(Datetime, Datetime)))", "desc": "Initial or selected value, throttled to report only on mouseup.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value, throttled to report only on mouseup."]}]}, "default": "<Undefined>"}]}, {"name": "DateSlider", "bases": ["AbstractSlider"], "mro": ["DateSlider", "AbstractSlider", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Slider-based date selection widget. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Slider-based date selection widget."]}]}, "props": [{"name": "end", "type": "Required(Datetime)", "desc": "The maximum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The maximum allowable value."]}]}, "default": "<Undefined>"}, {"name": "start", "type": "Required(Datetime)", "desc": "The minimum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum allowable value."]}]}, "default": "<Undefined>"}, {"name": "step", "type": "Int", "desc": "The step between consecutive values, in units of days.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The step between consecutive values, in units of days."]}]}, "default": 1}, {"name": "value", "type": "Required(Datetime)", "desc": "Initial or selected value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value."]}]}, "default": "<Undefined>"}, {"name": "value_throttled", "type": "Readonly(Required(Datetime))", "desc": "Initial or selected value, throttled to report only on mouseup.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value, throttled to report only on mouseup."]}]}, "default": "<Undefined>"}]}, {"name": "DatetimeAxis", "bases": ["LinearAxis"], "mro": ["DatetimeAxis", "LinearAxis", "ContinuousAxis", "Axis", "GuideRenderer", "Renderer", "Model"], "desc": "A ``LinearAxis`` that picks nice numbers for tick locations on\na datetime scale. Configured with a ``DatetimeTickFormatter`` by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["LinearAxis"]}, " that picks nice numbers for tick locations on\na datetime scale. Configured with a ", {"type": "literal", "children": ["DatetimeTickFormatter"]}, " by\ndefault."]}]}, "props": []}, {"name": "DatetimeRangeSlider", "bases": ["AbstractSlider"], "mro": ["DatetimeRangeSlider", "AbstractSlider", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Slider-based datetime range selection widget. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Slider-based datetime range selection widget."]}]}, "props": [{"name": "end", "type": "Required(Datetime)", "desc": "The maximum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The maximum allowable value."]}]}, "default": "<Undefined>"}, {"name": "start", "type": "Required(Datetime)", "desc": "The minimum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum allowable value."]}]}, "default": "<Undefined>"}, {"name": "step", "type": "Int", "desc": "The step between consecutive values, in units of milliseconds.\nDefault is one hour.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The step between consecutive values, in units of milliseconds.\nDefault is one hour."]}]}, "default": 3600000}, {"name": "value", "type": "Required(Tuple(Datetime, Datetime))", "desc": "Initial or selected range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected range."]}]}, "default": "<Undefined>"}, {"name": "value_throttled", "type": "Readonly(Required(Tuple(Datetime, Datetime)))", "desc": "Initial or selected value, throttled to report only on mouseup.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value, throttled to report only on mouseup."]}]}, "default": "<Undefined>"}]}, {"name": "DatetimeTickFormatter", "bases": ["TickFormatter"], "mro": ["DatetimeTickFormatter", "TickFormatter", "Model"], "desc": "A ``TickFormatter`` for displaying datetime values nicely across a\nrange of scales.\n\n``DatetimeTickFormatter`` has the following properties (listed together\nwith their default values) that can be used to control the formatting\nof axis ticks at different scales scales:\n\n.. code-block:: python\n\n    microseconds = '%fus'\n\n    milliseconds = '%3Nms'\n\n    seconds = '%Ss'\n\n    minsec = ':%M:%S'\n\n    minutes = ':%M'\n\n    hourmin = '%H:%M'\n\n    hours = '%Hh'\n\n    days = '%m/%d'\n\n    months = '%m/%Y'\n\n    years = '%Y'\n\nEach scale property can be set to format or list of formats to use for\nformatting datetime tick values that fall in in that \"time scale\".\nBy default, only the first format string passed for each time scale\nwill be used. By default, all leading zeros are stripped away from\nthe formatted labels.\n\nThis list of supported `strftime`_ formats is reproduced below.\n\n%a\n    The abbreviated name of the day of the week according to the\n    current locale.\n\n%A\n    The full name of the day of the week according to the current\n    locale.\n\n%b\n    The abbreviated month name according to the current locale.\n\n%B\n    The full month name according to the current locale.\n\n%c\n    The preferred date and time representation for the current\n    locale.\n\n%C\n    The century number (year/100) as a 2-digit integer.\n\n%d\n    The day of the month as a decimal number (range 01 to 31).\n\n%D\n    Equivalent to **%m/%d/%y**.  (Americans should note that in many\n    other countries **%d/%m/%y** is rather common. This means that in\n    international context this format is ambiguous and should not\n    be used.)\n\n%e\n    Like %d, the day of the month as a decimal number, but a\n    leading zero is replaced by a space.\n\n%f\n    Microsecond as a decimal number, zero-padded on the left (range\n    000000-999999). This is an extension to the set of directives\n    available to `timezone`_.\n\n%F\n    Equivalent to **%Y-%m-%d** (the ISO 8601 date format).\n\n%G\n    The ISO 8601 week-based year with century as a decimal number.\n    The 4-digit year corresponding to the ISO week number (see %V).\n    This has the same format and value as %Y, except that if the\n    ISO week number belongs to the previous or next year, that year\n    is used instead.\n\n%g\n    Like **%G**, but without century, that is, with a 2-digit year (00-99).\n\n%h\n    Equivalent to **%b**.\n\n%H\n    The hour as a decimal number using a 24-hour clock (range 00\n    to 23).\n\n%I\n    The hour as a decimal number using a 12-hour clock (range 01\n    to 12).\n\n%j\n    The day of the year as a decimal number (range 001 to 366).\n\n%k\n    The hour (24-hour clock) as a decimal number (range 0 to 23).\n    Single digits are preceded by a blank. See also **%H**.\n\n%l\n    The hour (12-hour clock) as a decimal number (range 1 to 12).\n    Single digits are preceded by a blank. See also **%I**.\n\n%m\n    The month as a decimal number (range 01 to 12).\n\n%M\n    The minute as a decimal number (range 00 to 59).\n\n%n\n    A newline character. Bokeh text does not currently support\n    newline characters.\n\n%N\n    Nanosecond as a decimal number, zero-padded on the left (range\n    000000000-999999999). Supports a padding width specifier, i.e.\n    %3N displays 3 leftmost digits. However, this is only accurate\n    to the millisecond level of precision due to limitations of\n    `timezone`_.\n\n%p\n    Either \"AM\" or \"PM\" according to the given time value, or the\n    corresponding strings for the current locale.  Noon is treated\n    as \"PM\" and midnight as \"AM\".\n\n%P\n    Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n    string for the current locale.\n\n%r\n    The time in a.m. or p.m. notation.  In the POSIX locale this\n    is equivalent to **%I:%M:%S %p**.\n\n%R\n    The time in 24-hour notation (**%H:%M**). For a version including\n    the seconds, see **%T** below.\n\n%s\n    The number of seconds since the Epoch, 1970-01-01 00:00:00\n    +0000 (UTC).\n\n%S\n    The second as a decimal number (range 00 to 60).  (The range\n    is up to 60 to allow for occasional leap seconds.)\n\n%t\n    A tab character. Bokeh text does not currently support tab\n    characters.\n\n%T\n    The time in 24-hour notation (**%H:%M:%S**).\n\n%u\n    The day of the week as a decimal, range 1 to 7, Monday being 1.\n    See also %w.\n\n%U\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Sunday as the first day of\n    week 01.  See also **%V** and **%W**.\n\n%V\n    The ISO 8601 week number (see NOTES) of the current year as a\n    decimal number, range 01 to 53, where week 1 is the first week\n    that has at least 4 days in the new year.  See also %U and %W.\n\n%w\n    The day of the week as a decimal, range 0 to 6, Sunday being 0.\n    See also %u.\n\n%W\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Monday as the first day of\n    week 01.\n\n%x\n    The preferred date representation for the current locale\n    without the time.\n\n%X\n    The preferred time representation for the current locale\n    without the date.\n\n%y\n    The year as a decimal number without a century (range 00 to 99).\n\n%Y\n    The year as a decimal number including the century.\n\n%z\n    The +hhmm or -hhmm numeric timezone (that is, the hour and\n    minute offset from UTC).\n\n%Z\n    The timezone name or abbreviation.\n\n%%\n    A literal '%' character.\n\n.. warning::\n    The client library BokehJS uses the `timezone`_ library to\n    format datetimes. The inclusion of the list below is based on the\n    claim that `timezone`_ makes to support \"the full compliment\n    of GNU date format specifiers.\" However, this claim has not\n    been tested exhaustively against this list. If you find formats\n    that do not function as expected, please submit a `github issue`_,\n    so that the documentation can be updated appropriately.\n\n.. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n.. _timezone: http://bigeasy.github.io/timezone/\n.. _github issue: https://github.com/bokeh/bokeh/issues", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["TickFormatter"]}, " for displaying datetime values nicely across a\nrange of scales."]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["DatetimeTickFormatter"]}, " has the following properties (listed together\nwith their default values) that can be used to control the formatting\nof axis ticks at different scales scales:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["microseconds"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'"]}, {"type": "inline", "children": ["%f"]}, {"type": "inline", "children": ["us'"]}, "\n\n", {"type": "inline", "children": ["milliseconds"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'%3Nms'"]}, "\n\n", {"type": "inline", "children": ["seconds"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'%Ss'"]}, "\n\n", {"type": "inline", "children": ["minsec"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["':%M:%S'"]}, "\n\n", {"type": "inline", "children": ["minutes"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["':%M'"]}, "\n\n", {"type": "inline", "children": ["hourmin"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'%H:%M'"]}, "\n\n", {"type": "inline", "children": ["hours"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'%Hh'"]}, "\n\n", {"type": "inline", "children": ["days"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'%m/"]}, {"type": "inline", "children": ["%d"]}, {"type": "inline", "children": ["'"]}, "\n\n", {"type": "inline", "children": ["months"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'%m/%Y'"]}, "\n\n", {"type": "inline", "children": ["years"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["'%Y'"]}]}, {"type": "paragraph", "children": ["Each scale property can be set to format or list of formats to use for\nformatting datetime tick values that fall in in that \"time scale\".\nBy default, only the first format string passed for each time scale\nwill be used. By default, all leading zeros are stripped away from\nthe formatted labels."]}, {"type": "paragraph", "children": ["This list of supported ", {"type": "reference", "children": ["strftime"]}, " formats is reproduced below."]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["%a"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The abbreviated name of the day of the week according to the\ncurrent locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%A"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The full name of the day of the week according to the current\nlocale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%b"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The abbreviated month name according to the current locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%B"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The full month name according to the current locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%c"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The preferred date and time representation for the current\nlocale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%C"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The century number (year/100) as a 2-digit integer."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%d"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the month as a decimal number (range 01 to 31)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%D"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Equivalent to ", {"type": "strong", "children": ["%m/%d/%y"]}, ".  (Americans should note that in many\nother countries ", {"type": "strong", "children": ["%d/%m/%y"]}, " is rather common. This means that in\ninternational context this format is ambiguous and should not\nbe used.)"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%e"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Like %d, the day of the month as a decimal number, but a\nleading zero is replaced by a space."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%f"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Microsecond as a decimal number, zero-padded on the left (range\n000000-999999). This is an extension to the set of directives\navailable to ", {"type": "reference", "children": ["timezone"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%F"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Equivalent to ", {"type": "strong", "children": ["%Y-%m-%d"]}, " (the ISO 8601 date format)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%G"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The ISO 8601 week-based year with century as a decimal number.\nThe 4-digit year corresponding to the ISO week number (see %V).\nThis has the same format and value as %Y, except that if the\nISO week number belongs to the previous or next year, that year\nis used instead."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%g"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Like ", {"type": "strong", "children": ["%G"]}, ", but without century, that is, with a 2-digit year (00-99)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%h"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Equivalent to ", {"type": "strong", "children": ["%b"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%H"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour as a decimal number using a 24-hour clock (range 00\nto 23)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%I"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour as a decimal number using a 12-hour clock (range 01\nto 12)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%j"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the year as a decimal number (range 001 to 366)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%k"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour (24-hour clock) as a decimal number (range 0 to 23).\nSingle digits are preceded by a blank. See also ", {"type": "strong", "children": ["%H"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%l"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The hour (12-hour clock) as a decimal number (range 1 to 12).\nSingle digits are preceded by a blank. See also ", {"type": "strong", "children": ["%I"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%m"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The month as a decimal number (range 01 to 12)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%M"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The minute as a decimal number (range 00 to 59)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%n"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["A newline character. Bokeh text does not currently support\nnewline characters."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%N"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Nanosecond as a decimal number, zero-padded on the left (range\n000000000-999999999). Supports a padding width specifier, i.e.\n%3N displays 3 leftmost digits. However, this is only accurate\nto the millisecond level of precision due to limitations of\n", {"type": "reference", "children": ["timezone"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%p"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Either \"AM\" or \"PM\" according to the given time value, or the\ncorresponding strings for the current locale.  Noon is treated\nas \"PM\" and midnight as \"AM\"."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%P"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\nstring for the current locale."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%r"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The time in a.m. or p.m. notation.  In the POSIX locale this\nis equivalent to ", {"type": "strong", "children": ["%I:%M:%S %p"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%R"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The time in 24-hour notation (", {"type": "strong", "children": ["%H:%M"]}, "). For a version including\nthe seconds, see ", {"type": "strong", "children": ["%T"]}, " below."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%s"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The number of seconds since the Epoch, 1970-01-01 00:00:00\n+0000 (UTC)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%S"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The second as a decimal number (range 00 to 60).  (The range\nis up to 60 to allow for occasional leap seconds.)"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%t"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["A tab character. Bokeh text does not currently support tab\ncharacters."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%T"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The time in 24-hour notation (", {"type": "strong", "children": ["%H:%M:%S"]}, ")."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%u"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the week as a decimal, range 1 to 7, Monday being 1.\nSee also %w."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%U"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The week number of the current year as a decimal number, range\n00 to 53, starting with the first Sunday as the first day of\nweek 01.  See also ", {"type": "strong", "children": ["%V"]}, " and ", {"type": "strong", "children": ["%W"]}, "."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%V"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The ISO 8601 week number (see NOTES) of the current year as a\ndecimal number, range 01 to 53, where week 1 is the first week\nthat has at least 4 days in the new year.  See also %U and %W."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%w"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The day of the week as a decimal, range 0 to 6, Sunday being 0.\nSee also %u."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%W"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The week number of the current year as a decimal number, range\n00 to 53, starting with the first Monday as the first day of\nweek 01."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%x"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The preferred date representation for the current locale\nwithout the time."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%X"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The preferred time representation for the current locale\nwithout the date."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%y"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The year as a decimal number without a century (range 00 to 99)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%Y"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The year as a decimal number including the century."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%z"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The +hhmm or -hhmm numeric timezone (that is, the hour and\nminute offset from UTC)."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["%Z"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The timezone name or abbreviation."]}]}]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Possible incomplete section title.\nTreating the overline as ordinary text because it's so short."]}]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["%%"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["A literal '%' character."]}]}]}]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The client library BokehJS uses the ", {"type": "reference", "children": ["timezone"]}, " library to\nformat datetimes. The inclusion of the list below is based on the\nclaim that ", {"type": "reference", "children": ["timezone"]}, " makes to support \"the full compliment\nof GNU date format specifiers.\" However, this claim has not\nbeen tested exhaustively against this list. If you find formats\nthat do not function as expected, please submit a ", {"type": "reference", "children": ["github issue"]}, ",\nso that the documentation can be updated appropriately."]}]}, {"type": "target", "children": []}, {"type": "target", "children": []}, {"type": "target", "children": []}]}, "props": [{"name": "context", "type": "Nullable(Either(String, Instance(DatetimeTickFormatter)))", "desc": "A format for adding context to the tick or ticks specified by ``context_which``.\nValid values are:\n\n* None, no context is added\n* A standard :class:`~bokeh.models.DatetimeTickFormatter` format string, the single format is\n  used across all scales\n* Another :class:`~bokeh.models.DatetimeTickFormatter` instance, to have scale-dependent\n  context", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A format for adding context to the tick or ticks specified by ", {"type": "literal", "children": ["context_which"]}, ".\nValid values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["None, no context is added"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["A standard ", {"type": "problematic", "children": [":class:`~bokeh.models.DatetimeTickFormatter`"]}, " format string, the single format is\nused across all scales"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Another ", {"type": "problematic", "children": [":class:`~bokeh.models.DatetimeTickFormatter`"]}, " instance, to have scale-dependent\ncontext"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}]}]}, "default": null}, {"name": "context_location", "type": "Enum('above', 'below', 'left', 'right')", "desc": "Relative to the tick label text baseline, where the context should be\nrendered. Valid values are: `\"below\"`, `\"above\"`, `\"left\"`, and `\"right\"`.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Relative to the tick label text baseline, where the context should be\nrendered. Valid values are: ", {"type": "title_reference", "children": ["\"below\""]}, ", ", {"type": "title_reference", "children": ["\"above\""]}, ", ", {"type": "title_reference", "children": ["\"left\""]}, ", and ", {"type": "title_reference", "children": ["\"right\""]}, "."]}]}, "default": "below"}, {"name": "context_which", "type": "Enum('start', 'center', 'end', 'all')", "desc": "Which tick or ticks to add a formatted context string to. Valid values are:\n`\"start\"`, `\"end\"`, `\"center\"`, and  `\"all\"`.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which tick or ticks to add a formatted context string to. Valid values are:\n", {"type": "title_reference", "children": ["\"start\""]}, ", ", {"type": "title_reference", "children": ["\"end\""]}, ", ", {"type": "title_reference", "children": ["\"center\""]}, ", and  ", {"type": "title_reference", "children": ["\"all\""]}, "."]}]}, "default": "start"}, {"name": "days", "type": "String", "desc": "Formats for displaying datetime values in the ``days`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["days"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%m/%d"}, {"name": "hourmin", "type": "String", "desc": "Formats for displaying datetime values in the ``hourmin`` (for combined hours and minutes) range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["hourmin"]}, " (for combined hours and minutes) range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%H:%M"}, {"name": "hours", "type": "String", "desc": "Formats for displaying datetime values in the ``hours`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["hours"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%Hh"}, {"name": "microseconds", "type": "String", "desc": "Formats for displaying datetime values in the ``microseconds`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["microseconds"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%fus"}, {"name": "milliseconds", "type": "String", "desc": "Formats for displaying datetime values in the ``milliseconds`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["milliseconds"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%3Nms"}, {"name": "minsec", "type": "String", "desc": "Formats for displaying datetime values in the ``minsec`` (for combined minutes and seconds) range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["minsec"]}, " (for combined minutes and seconds) range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": ":%M:%S"}, {"name": "minutes", "type": "String", "desc": "Formats for displaying datetime values in the ``minutes`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["minutes"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": ":%M"}, {"name": "months", "type": "String", "desc": "Formats for displaying datetime values in the ``months`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["months"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%m/%Y"}, {"name": "seconds", "type": "String", "desc": "Formats for displaying datetime values in the ``seconds`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["seconds"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%Ss"}, {"name": "strip_leading_zeros", "type": "Bool", "desc": "Whether to strip any leading zeros in the formatted ticks", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to strip any leading zeros in the formatted ticks"]}]}, "default": true}, {"name": "years", "type": "String", "desc": "Formats for displaying datetime values in the ``years`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formats for displaying datetime values in the ", {"type": "literal", "children": ["years"]}, " range."]}, {"type": "paragraph", "children": ["See the ", {"type": "problematic", "children": [":class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, " help for a list of all supported formats."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "%Y"}]}, {"name": "DatetimeTicker", "bases": ["CompositeTicker"], "mro": ["DatetimeTicker", "CompositeTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate nice ticks across different date and time scales.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate nice ticks across different date and time scales."]}]}, "props": []}, {"name": "DaysTicker", "bases": ["SingleIntervalTicker"], "mro": ["DaysTicker", "SingleIntervalTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate ticks spaced apart by specific, even multiples of days.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate ticks spaced apart by specific, even multiples of days."]}]}, "props": [{"name": "days", "type": "Seq(Int)", "desc": "The intervals of days to use.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The intervals of days to use."]}]}, "default": []}]}, {"name": "Decoration", "bases": ["Model"], "mro": ["Decoration", "Model"], "desc": "Indicates a positioned marker, e.g. at a node of a glyph.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indicates a positioned marker, e.g. at a node of a glyph."]}]}, "props": [{"name": "marking", "type": "Instance(Marking)", "desc": "The graphical marking associated with this decoration, e.g. an arrow head.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The graphical marking associated with this decoration, e.g. an arrow head."]}]}, "default": "<Undefined>"}, {"name": "node", "type": "Required(Enum('start', 'middle', 'end'))", "desc": "The placement of the marking on the parent graphical object.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The placement of the marking on the parent graphical object."]}]}, "default": "<Undefined>"}]}, {"name": "Dialog", "bases": ["UIElement"], "mro": ["Dialog", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "buttons", "type": "List(Instance(UIElement))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": []}, {"name": "closable", "type": "Bool", "desc": "Whether to show close (x) button in the title bar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to show close (x) button in the title bar."]}]}, "default": true}, {"name": "content", "type": "Required(Either(String, Instance(DOMNode), Instance(UIElement)))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": "<Undefined>"}, {"name": "draggable", "type": "Bool", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": true}, {"name": "modal", "type": "Bool", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": false}, {"name": "title", "type": "Nullable(Either(String, Instance(DOMNode)))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": null}]}, {"name": "DifferenceFilter", "bases": ["Filter"], "mro": ["DifferenceFilter", "Filter", "Model"], "desc": "Computes union of indices resulting from other filters. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Computes union of indices resulting from other filters."]}]}, "props": [{"name": "operands", "type": "Required(NonEmpty(Seq(Instance(Filter))))", "desc": "Indices produced by a collection of these filters will be subtracted.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indices produced by a collection of these filters will be subtracted."]}]}, "default": "<Undefined>"}]}, {"name": "Div", "bases": ["Markup"], "mro": ["Div", "Markup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A block (div) of text.\n\nThis Bokeh model corresponds to an HTML ``<div>`` element.\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/interaction/widgets/div.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A block (div) of text."]}, {"type": "paragraph", "children": ["This Bokeh model corresponds to an HTML ", {"type": "literal", "children": ["<div>"]}, " element."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/interaction/widgets/div.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "render_as_text", "type": "Bool", "desc": "Whether the contents should be rendered as raw text or as interpreted HTML.\nThe default value is False, meaning contents are rendered as HTML.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the contents should be rendered as raw text or as interpreted HTML.\nThe default value is False, meaning contents are rendered as HTML."]}]}, "default": false}]}, {"name": "Divider", "bases": ["MenuItem"], "mro": ["Divider", "MenuItem", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "Dodge", "bases": ["Transform"], "mro": ["Dodge", "Transform", "Model"], "desc": "Apply either fixed dodge amount to data.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Apply either fixed dodge amount to data."]}]}, "props": [{"name": "range", "type": "Nullable(Instance(Range))", "desc": "When applying ``Dodge`` to categorical data values, the corresponding\n``FactorRange`` must be supplied as the ``range`` property.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["When applying ", {"type": "literal", "children": ["Dodge"]}, " to categorical data values, the corresponding\n", {"type": "literal", "children": ["FactorRange"]}, " must be supplied as the ", {"type": "literal", "children": ["range"]}, " property."]}]}, "default": null}, {"name": "value", "type": "Float", "desc": "The amount to dodge the input data.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The amount to dodge the input data."]}]}, "default": 0}]}, {"name": "Drag", "bases": ["GestureTool"], "mro": ["Drag", "GestureTool", "Tool", "Model"], "desc": "A base class for tools that respond to drag events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for tools that respond to drag events."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Dropdown", "bases": ["AbstractButton"], "mro": ["Dropdown", "AbstractButton", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A dropdown button.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A dropdown button."]}]}, "props": [{"name": "menu", "type": "List(Nullable(Either(String, Tuple(String, Either(String, Instance(Callback))))))", "desc": "Button's dropdown menu consisting of entries containing item's text and\nvalue name. Use ``None`` as a menu separator.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Button's dropdown menu consisting of entries containing item's text and\nvalue name. Use ", {"type": "literal", "children": ["None"]}, " as a menu separator."]}]}, "default": []}, {"name": "split", "type": "Bool", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": false}]}, {"name": "EdgeCoordinates", "bases": ["GraphCoordinates"], "mro": ["EdgeCoordinates", "GraphCoordinates", "CoordinateTransform", "Expression", "Model"], "desc": "Node coordinate expression obtained from ``LayoutProvider``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Node coordinate expression obtained from ", {"type": "literal", "children": ["LayoutProvider"]}]}]}, "props": []}, {"name": "EdgesAndLinkedNodes", "bases": ["GraphHitTestPolicy"], "mro": ["EdgesAndLinkedNodes", "GraphHitTestPolicy", "Model"], "desc": "With the ``EdgesAndLinkedNodes`` policy, inspection or selection of graph\nedges will result in the inspection or selection of the edge and of the\nlinked graph nodes. There is no direct selection or inspection of graph\nnodes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["With the ", {"type": "literal", "children": ["EdgesAndLinkedNodes"]}, " policy, inspection or selection of graph\nedges will result in the inspection or selection of the edge and of the\nlinked graph nodes. There is no direct selection or inspection of graph\nnodes."]}]}, "props": []}, {"name": "EdgesOnly", "bases": ["GraphHitTestPolicy"], "mro": ["EdgesOnly", "GraphHitTestPolicy", "Model"], "desc": "With the ``EdgesOnly`` policy, only graph edges are able to be selected and\ninspected. There is no selection or inspection of graph nodes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["With the ", {"type": "literal", "children": ["EdgesOnly"]}, " policy, only graph edges are able to be selected and\ninspected. There is no selection or inspection of graph nodes."]}]}, "props": []}, {"name": "EditTool", "bases": ["GestureTool"], "mro": ["EditTool", "GestureTool", "Tool", "Model"], "desc": "A base class for all interactive draw tool types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all interactive draw tool types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "empty_value", "type": "Required(Either(Bool, Int, Float, Date, Datetime, Color, String))", "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ", {"type": "literal", "children": ["ColumnDataSource"]}, " columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value."]}]}, "default": "<Undefined>"}, {"name": "renderers", "type": "List(Instance(GlyphRenderer))", "desc": "An explicit list of renderers corresponding to glyphs that may be edited.\n\n.. note::\n    The kind of renderer will typically depend on the specific type of the\n    edit tool subclass. For instance, ``PointDrawTool`` expects renderers\n    for ``Scatter`` glyphs, while ``BoxEditTool`` expects renderers for\n    ``Rect`` glyphs, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An explicit list of renderers corresponding to glyphs that may be edited."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["The kind of renderer will typically depend on the specific type of the\nedit tool subclass. For instance, ", {"type": "literal", "children": ["PointDrawTool"]}, " expects renderers\nfor ", {"type": "literal", "children": ["Scatter"]}, " glyphs, while ", {"type": "literal", "children": ["BoxEditTool"]}, " expects renderers for\n", {"type": "literal", "children": ["Rect"]}, " glyphs, etc."]}]}]}, "default": []}]}, {"name": "Ellipse", "bases": ["XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Ellipse", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render ellipses.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Ellipse.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render ellipses."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Ellipse.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angle the ellipses are rotated from horizontal. [rad]", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angle the ellipses are rotated from horizontal. [rad]"]}]}, "default": 0.0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the ellipses."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the ellipses."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the ellipses."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the ellipses."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the ellipses."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the ellipses."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the ellipses."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the ellipses."]}]}, "default": 1.0}, {"name": "height", "type": "DistanceSpec(units_default='data')", "desc": "The heights of each ellipse.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The heights of each ellipse."]}]}, "default": {"type": "field", "field": "height"}}, {"name": "height_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the ellipses."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the ellipses."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the ellipses."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the ellipses."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the ellipses."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the ellipses."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the ellipses."]}]}, "default": 1}, {"name": "width", "type": "DistanceSpec(units_default='data')", "desc": "The widths of each ellipse.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The widths of each ellipse."]}]}, "default": {"type": "field", "field": "width"}}, {"name": "width_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the centers of the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the centers of the ellipses."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the centers of the ellipses.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the centers of the ellipses."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "EqHistColorMapper", "bases": ["ScanningColorMapper"], "mro": ["EqHistColorMapper", "ScanningColorMapper", "ContinuousColorMapper", "ColorMapper", "Mapper", "Transform", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "bins", "type": "Int", "desc": "Number of histogram bins", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Number of histogram bins"]}]}, "default": 65536}, {"name": "rescale_discrete_levels", "type": "Bool", "desc": "If there are only a few discrete levels in the values that are color\nmapped then ``rescale_discrete_levels=True`` decreases the lower limit of\nthe span so that the values are rendered towards the top end of the\npalette.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["If there are only a few discrete levels in the values that are color\nmapped then ", {"type": "literal", "children": ["rescale_discrete_levels=True"]}, " decreases the lower limit of\nthe span so that the values are rendered towards the top end of the\npalette."]}]}, "default": false}]}, {"name": "ExamineTool", "bases": ["ActionTool"], "mro": ["ExamineTool", "ActionTool", "Tool", "Model"], "desc": "A tool that allows to inspect and configure a model. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A tool that allows to inspect and configure a model."]}]}, "props": []}, {"name": "Examiner", "bases": ["UIElement"], "mro": ["Examiner", "UIElement", "Model"], "desc": "A diagnostic tool for examining documents, models, properties, etc. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A diagnostic tool for examining documents, models, properties, etc."]}]}, "props": [{"name": "target", "type": "Nullable(Instance(HasProps))", "desc": "The model and its references to inspect. If not specified, then all models\nin the document the inpector model belongs to will be inspected.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The model and its references to inspect. If not specified, then all models\nin the document the inpector model belongs to will be inspected."]}]}, "default": null}]}, {"name": "Expression", "bases": ["Model"], "mro": ["Expression", "Model"], "desc": "Base class for ``Expression`` models that represent a computation\nto be carried out on the client-side.\n\nJavaScript implementations should implement the following methods:\n\n.. code-block\n\n    v_compute(source: ColumnarDataSource): Arrayable {\n        # compute and return array of values\n    }\n\n.. note::\n    If you wish for results to be cached per source and updated only if\n    the source changes, implement ``_v_compute: (source)`` instead.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for ", {"type": "literal", "children": ["Expression"]}, " models that represent a computation\nto be carried out on the client-side."]}, {"type": "paragraph", "children": ["JavaScript implementations should implement the following methods:"]}, {"type": "comment", "children": ["code-block\n\nv_compute(source: ColumnarDataSource): Arrayable {\n    # compute and return array of values\n}"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["If you wish for results to be cached per source and updated only if\nthe source changes, implement ", {"type": "literal", "children": ["_v_compute: (source)"]}, " instead."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "FactorRange", "bases": ["Range"], "mro": ["FactorRange", "Range", "Model"], "desc": "A Range of values for a categorical dimension.\n\nIn addition to supplying ``factors`` as a keyword argument to the\n``FactorRange`` initializer, you may also instantiate with a sequence of\npositional arguments:\n\n.. code-block:: python\n\n    FactorRange(\"foo\", \"bar\") # equivalent to FactorRange(factors=[\"foo\", \"bar\"])\n\nUsers will normally supply categorical values directly:\n\n.. code-block:: python\n\n    p.circle(x=[\"foo\", \"bar\"], ...)\n\nBokehJS will create a mapping from ``\"foo\"`` and ``\"bar\"`` to a numerical\ncoordinate system called *synthetic coordinates*. In the simplest cases,\nfactors are separated by a distance of 1.0 in synthetic coordinates,\nhowever the exact mapping from factors to synthetic coordinates is\naffected by he padding properties as well as whether the number of levels\nthe factors have.\n\nUsers typically do not need to worry about the details of this mapping,\nhowever it can be useful to fine tune positions by adding offsets. When\nsupplying factors as coordinates or values, it is possible to add an\noffset in the synthetic coordinate space by adding a final number value\nto a factor tuple. For example:\n\n.. code-block:: python\n\n    p.circle(x=[(\"foo\", 0.3), ...], ...)\n\nwill position the first circle at an ``x`` position that is offset by\nadding 0.3 to the synthetic coordinate for ``\"foo\"``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Range of values for a categorical dimension."]}, {"type": "paragraph", "children": ["In addition to supplying ", {"type": "literal", "children": ["factors"]}, " as a keyword argument to the\n", {"type": "literal", "children": ["FactorRange"]}, " initializer, you may also instantiate with a sequence of\npositional arguments:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["FactorRange"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["\"foo\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"bar\""]}, {"type": "inline", "children": [")"]}, " ", {"type": "inline", "children": ["# equivalent to FactorRange(factors=[\"foo\", \"bar\"])"]}]}, {"type": "paragraph", "children": ["Users will normally supply categorical values directly:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["p"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["circle"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["x"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["\"foo\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"bar\""]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["..."]}, {"type": "inline", "children": [")"]}]}, {"type": "paragraph", "children": ["BokehJS will create a mapping from ", {"type": "literal", "children": ["\"foo\""]}, " and ", {"type": "literal", "children": ["\"bar\""]}, " to a numerical\ncoordinate system called ", {"type": "emphasis", "children": ["synthetic coordinates"]}, ". In the simplest cases,\nfactors are separated by a distance of 1.0 in synthetic coordinates,\nhowever the exact mapping from factors to synthetic coordinates is\naffected by he padding properties as well as whether the number of levels\nthe factors have."]}, {"type": "paragraph", "children": ["Users typically do not need to worry about the details of this mapping,\nhowever it can be useful to fine tune positions by adding offsets. When\nsupplying factors as coordinates or values, it is possible to add an\noffset in the synthetic coordinate space by adding a final number value\nto a factor tuple. For example:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["p"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["circle"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["x"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["[("]}, {"type": "inline", "children": ["\"foo\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["0.3"]}, {"type": "inline", "children": ["),"]}, " ", {"type": "inline", "children": ["..."]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["..."]}, {"type": "inline", "children": [")"]}]}, {"type": "paragraph", "children": ["will position the first circle at an ", {"type": "literal", "children": ["x"]}, " position that is offset by\nadding 0.3 to the synthetic coordinate for ", {"type": "literal", "children": ["\"foo\""]}, "."]}]}, "props": [{"name": "bounds", "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta))))", "desc": "The bounds (in synthetic coordinates) that the range is allowed to go to.\nTypically used to prevent the user from panning/zooming/etc away from the\ndata.\n\n.. note::\n    Synthetic coordinates are only computed in the browser, based on the\n    factors and various padding properties. Some experimentation may be\n    required to arrive at bounds suitable for specific situations.\n\nBy default, the bounds will be None, allowing your plot to pan/zoom as far\nas you want. If bounds are 'auto' they will be computed to be the same as\nthe start and end of the ``FactorRange``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The bounds (in synthetic coordinates) that the range is allowed to go to.\nTypically used to prevent the user from panning/zooming/etc away from the\ndata."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Synthetic coordinates are only computed in the browser, based on the\nfactors and various padding properties. Some experimentation may be\nrequired to arrive at bounds suitable for specific situations."]}]}, {"type": "paragraph", "children": ["By default, the bounds will be None, allowing your plot to pan/zoom as far\nas you want. If bounds are 'auto' they will be computed to be the same as\nthe start and end of the ", {"type": "literal", "children": ["FactorRange"]}, "."]}]}, "default": null}, {"name": "end", "type": "Readonly(Float)", "desc": "The end of the range, in synthetic coordinates.\n\n.. note::\n    Synthetic coordinates are only computed in the browser, based on the\n    factors and various padding properties. The value of ``end`` will only\n    be available in situations where bidirectional communication is\n    available (e.g. server, notebook).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The end of the range, in synthetic coordinates."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Synthetic coordinates are only computed in the browser, based on the\nfactors and various padding properties. The value of ", {"type": "literal", "children": ["end"]}, " will only\nbe available in situations where bidirectional communication is\navailable (e.g. server, notebook)."]}]}]}, "default": 0.0}, {"name": "factor_padding", "type": "Float", "desc": "How much padding to add in between all lowest-level factors. When\n``factor_padding`` is non-zero, every factor in every group will have the\npadding value applied.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How much padding to add in between all lowest-level factors. When\n", {"type": "literal", "children": ["factor_padding"]}, " is non-zero, every factor in every group will have the\npadding value applied."]}]}, "default": 0.0}, {"name": "factors", "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))", "desc": "A sequence of factors to define this categorical range.\n\nFactors may have 1, 2, or 3 levels. For 1-level factors, each factor is\nsimply a string. For example:\n\n.. code-block:: python\n\n    FactorRange(factors=[\"sales\", \"marketing\", \"engineering\"])\n\ndefines a range with three simple factors that might represent different\nunits of a business.\n\nFor 2- and 3- level factors, each factor is a tuple of strings:\n\n.. code-block:: python\n\n    FactorRange(factors=[\n        [\"2016\", \"sales'], [\"2016\", \"marketing'], [\"2016\", \"engineering\"],\n        [\"2017\", \"sales'], [\"2017\", \"marketing'], [\"2017\", \"engineering\"],\n    ])\n\ndefines a range with six 2-level factors that might represent the three\nbusiness units, grouped by year.\n\nNote that factors and sub-factors *may only be strings*.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A sequence of factors to define this categorical range."]}, {"type": "paragraph", "children": ["Factors may have 1, 2, or 3 levels. For 1-level factors, each factor is\nsimply a string. For example:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["FactorRange"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["factors"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["\"sales\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"marketing\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"engineering\""]}, {"type": "inline", "children": ["])"]}]}, {"type": "paragraph", "children": ["defines a range with three simple factors that might represent different\nunits of a business."]}, {"type": "paragraph", "children": ["For 2- and 3- level factors, each factor is a tuple of strings:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["FactorRange"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["factors"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, "\n    ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["\"2016\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"sales'], [\""]}, {"type": "inline", "children": ["2016"]}, {"type": "inline", "children": ["\", \""]}, {"type": "inline", "children": ["marketing"]}, {"type": "inline", "children": ["'], [\"2016\", \"engineering\"],"]}, "\n    ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["\"2017\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"sales'], [\""]}, {"type": "inline", "children": ["2017"]}, {"type": "inline", "children": ["\", \""]}, {"type": "inline", "children": ["marketing"]}, {"type": "inline", "children": ["'], [\"2017\", \"engineering\"],"]}, "\n", {"type": "inline", "children": ["])"]}]}, {"type": "paragraph", "children": ["defines a range with six 2-level factors that might represent the three\nbusiness units, grouped by year."]}, {"type": "paragraph", "children": ["Note that factors and sub-factors ", {"type": "emphasis", "children": ["may only be strings"]}, "."]}]}, "default": []}, {"name": "group_padding", "type": "Float", "desc": "How much padding to add in between top-level groups of factors. This\nproperty only applies when the overall range factors have either two or\nthree levels. For example, with:\n\n.. code-block:: python\n\n    FactorRange(factors=[[\"foo\", \"1'], [\"foo\", \"2'], [\"bar\", \"1\"]])\n\nThe top level groups correspond to ``\"foo\"` and ``\"bar\"``, and the\ngroup padding will be applied between the factors ``[\"foo\", \"2']`` and\n``[\"bar\", \"1\"]``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How much padding to add in between top-level groups of factors. This\nproperty only applies when the overall range factors have either two or\nthree levels. For example, with:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["FactorRange"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["factors"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["[["]}, {"type": "inline", "children": ["\"foo\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["\"1'], [\""]}, {"type": "inline", "children": ["foo"]}, {"type": "inline", "children": ["\", \""]}, {"type": "inline", "children": ["2"]}, {"type": "inline", "children": ["'], [\"bar\", \"1\"]])"]}]}, {"type": "paragraph", "children": ["The top level groups correspond to ", {"type": "literal", "children": ["\"foo\"` and ``\"bar\""]}, ", and the\ngroup padding will be applied between the factors ", {"type": "literal", "children": ["[\"foo\", \"2']"]}, " and\n", {"type": "literal", "children": ["[\"bar\", \"1\"]"]}]}]}, "default": 1.4}, {"name": "max_interval", "type": "Nullable(Float)", "desc": "The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval in synthetic coordinates.. Note that ``bounds``\ncan impose an implicit constraint on the maximum interval as well.\n\nThe default \"width\" of a category is 1.0 in synthetic coordinates.\nHowever, the distance between factors is affected by the various\npadding properties and whether or not factors are grouped.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval in synthetic coordinates.. Note that ", {"type": "literal", "children": ["bounds"]}, "\ncan impose an implicit constraint on the maximum interval as well."]}, {"type": "paragraph", "children": ["The default \"width\" of a category is 1.0 in synthetic coordinates.\nHowever, the distance between factors is affected by the various\npadding properties and whether or not factors are grouped."]}]}, "default": null}, {"name": "min_interval", "type": "Nullable(Float)", "desc": "The level that the range is allowed to zoom in, expressed as the\nminimum visible interval in synthetic coordinates. If set to ``None``\n(default), the minimum interval is not bounded.\n\nThe default \"width\" of a category is 1.0 in synthetic coordinates.\nHowever, the distance between factors is affected by the various\npadding properties and whether or not factors are grouped.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The level that the range is allowed to zoom in, expressed as the\nminimum visible interval in synthetic coordinates. If set to ", {"type": "literal", "children": ["None"]}, "\n(default), the minimum interval is not bounded."]}, {"type": "paragraph", "children": ["The default \"width\" of a category is 1.0 in synthetic coordinates.\nHowever, the distance between factors is affected by the various\npadding properties and whether or not factors are grouped."]}]}, "default": null}, {"name": "range_padding", "type": "Float", "desc": "How much padding to add around the outside of computed range bounds.\n\nWhen ``range_padding_units`` is set to ``\"percent\"``, the span of the\nrange span is expanded to make the range ``range_padding`` percent larger.\n\nWhen ``range_padding_units`` is set to ``\"absolute\"``, the start and end\nof the range span are extended by the amount ``range_padding``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How much padding to add around the outside of computed range bounds."]}, {"type": "paragraph", "children": ["When ", {"type": "literal", "children": ["range_padding_units"]}, " is set to ", {"type": "literal", "children": ["\"percent\""]}, ", the span of the\nrange span is expanded to make the range ", {"type": "literal", "children": ["range_padding"]}, " percent larger."]}, {"type": "paragraph", "children": ["When ", {"type": "literal", "children": ["range_padding_units"]}, " is set to ", {"type": "literal", "children": ["\"absolute\""]}, ", the start and end\nof the range span are extended by the amount ", {"type": "literal", "children": ["range_padding"]}, "."]}]}, "default": 0}, {"name": "range_padding_units", "type": "Enum('percent', 'absolute')", "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\nas an absolute quantity. (default: ``\"percent\"``)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the ", {"type": "literal", "children": ["range_padding"]}, " should be interpreted as a percentage, or\nas an absolute quantity. (default: ", {"type": "literal", "children": ["\"percent\""]}, ")"]}]}, "default": "percent"}, {"name": "start", "type": "Readonly(Float)", "desc": "The start of the range, in synthetic coordinates.\n\n.. note::\n    Synthetic coordinates are only computed in the browser, based on the\n    factors and various padding properties. The value of ``start`` will only\n    be available in situations where bidirectional communication is\n    available (e.g. server, notebook).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The start of the range, in synthetic coordinates."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Synthetic coordinates are only computed in the browser, based on the\nfactors and various padding properties. The value of ", {"type": "literal", "children": ["start"]}, " will only\nbe available in situations where bidirectional communication is\navailable (e.g. server, notebook)."]}]}]}, "default": 0.0}, {"name": "subgroup_padding", "type": "Float", "desc": "How much padding to add in between mid-level groups of factors. This\nproperty only applies when the overall factors have three levels. For\nexample with:\n\n.. code-block:: python\n\n    FactorRange(factors=[\n        ['foo', 'A', '1'],  ['foo', 'A', '2'], ['foo', 'A', '3'],\n        ['foo', 'B', '2'],\n        ['bar', 'A', '1'],  ['bar', 'A', '2']\n    ])\n\nThis property dictates how much padding to add between the three factors\nin the `['foo', 'A']` group, and between the two factors in the the\n[`bar`]", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How much padding to add in between mid-level groups of factors. This\nproperty only applies when the overall factors have three levels. For\nexample with:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["FactorRange"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["factors"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, "\n    ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'foo'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'A'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'1'"]}, {"type": "inline", "children": ["],"]}, "  ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'foo'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'A'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'2'"]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'foo'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'A'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'3'"]}, {"type": "inline", "children": ["],"]}, "\n    ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'foo'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'B'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'2'"]}, {"type": "inline", "children": ["],"]}, "\n    ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'bar'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'A'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'1'"]}, {"type": "inline", "children": ["],"]}, "  ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'bar'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'A'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'2'"]}, {"type": "inline", "children": ["]"]}, "\n", {"type": "inline", "children": ["])"]}]}, {"type": "paragraph", "children": ["This property dictates how much padding to add between the three factors\nin the ", {"type": "title_reference", "children": ["['foo', 'A']"]}, " group, and between the two factors in the the\n[", {"type": "title_reference", "children": ["bar"]}, "]"]}]}, "default": 0.8}]}, {"name": "Figure", "bases": ["Plot"], "mro": ["Figure", "Plot", "LayoutDOM", "UIElement", "Model"], "desc": "Create a new figure for plotting.\n\nA subclass of |Plot| that simplifies plot creation with default axes, grids,\ntools, etc.\n\nFigure objects have many glyph methods that can be used to draw\nvectorized graphical glyphs:\n\n.. hlist::\n    :columns: 3\n\n    * :func:`~bokeh.plotting.figure.annular_wedge`\n    * :func:`~bokeh.plotting.figure.annulus`\n    * :func:`~bokeh.plotting.figure.arc`\n    * :func:`~bokeh.plotting.figure.asterisk`\n    * :func:`~bokeh.plotting.figure.bezier`\n    * :func:`~bokeh.plotting.figure.circle`\n    * :func:`~bokeh.plotting.figure.circle_cross`\n    * :func:`~bokeh.plotting.figure.circle_dot`\n    * :func:`~bokeh.plotting.figure.circle_x`\n    * :func:`~bokeh.plotting.figure.circle_y`\n    * :func:`~bokeh.plotting.figure.cross`\n    * :func:`~bokeh.plotting.figure.dash`\n    * :func:`~bokeh.plotting.figure.diamond`\n    * :func:`~bokeh.plotting.figure.diamond_cross`\n    * :func:`~bokeh.plotting.figure.diamond_dot`\n    * :func:`~bokeh.plotting.figure.dot`\n    * :func:`~bokeh.plotting.figure.ellipse`\n    * :func:`~bokeh.plotting.figure.harea`\n    * :func:`~bokeh.plotting.figure.hbar`\n    * :func:`~bokeh.plotting.figure.hex`\n    * :func:`~bokeh.plotting.figure.hex_tile`\n    * :func:`~bokeh.plotting.figure.image`\n    * :func:`~bokeh.plotting.figure.image_rgba`\n    * :func:`~bokeh.plotting.figure.image_url`\n    * :func:`~bokeh.plotting.figure.inverted_triangle`\n    * :func:`~bokeh.plotting.figure.line`\n    * :func:`~bokeh.plotting.figure.multi_line`\n    * :func:`~bokeh.plotting.figure.multi_polygons`\n    * :func:`~bokeh.plotting.figure.oval`\n    * :func:`~bokeh.plotting.figure.patch`\n    * :func:`~bokeh.plotting.figure.patches`\n    * :func:`~bokeh.plotting.figure.plus`\n    * :func:`~bokeh.plotting.figure.quad`\n    * :func:`~bokeh.plotting.figure.quadratic`\n    * :func:`~bokeh.plotting.figure.ray`\n    * :func:`~bokeh.plotting.figure.rect`\n    * :func:`~bokeh.plotting.figure.segment`\n    * :func:`~bokeh.plotting.figure.square`\n    * :func:`~bokeh.plotting.figure.square_cross`\n    * :func:`~bokeh.plotting.figure.square_dot`\n    * :func:`~bokeh.plotting.figure.square_pin`\n    * :func:`~bokeh.plotting.figure.square_x`\n    * :func:`~bokeh.plotting.figure.star`\n    * :func:`~bokeh.plotting.figure.star_dot`\n    * :func:`~bokeh.plotting.figure.step`\n    * :func:`~bokeh.plotting.figure.text`\n    * :func:`~bokeh.plotting.figure.triangle`\n    * :func:`~bokeh.plotting.figure.triangle_dot`\n    * :func:`~bokeh.plotting.figure.triangle_pin`\n    * :func:`~bokeh.plotting.figure.varea`\n    * :func:`~bokeh.plotting.figure.vbar`\n    * :func:`~bokeh.plotting.figure.wedge`\n    * :func:`~bokeh.plotting.figure.x`\n    * :func:`~bokeh.plotting.figure.y`\n\nThere is a scatter function that can be parameterized by marker type:\n\n* :func:`~bokeh.plotting.figure.scatter`\n\nThere are also specialized methods for stacking bars:\n\n* bars: :func:`~bokeh.plotting.figure.hbar_stack`, :func:`~bokeh.plotting.figure.vbar_stack`\n* lines: :func:`~bokeh.plotting.figure.hline_stack`, :func:`~bokeh.plotting.figure.vline_stack`\n* areas: :func:`~bokeh.plotting.figure.harea_stack`, :func:`~bokeh.plotting.figure.varea_stack`\n\nAs well as one specialized method for making simple hexbin plots:\n\n* :func:`~bokeh.plotting.figure.hexbin`\n\nIn addition to all the ``figure`` property attributes, the following\noptions are also accepted:\n\n.. bokeh-options:: FigureOptions\n    :module: bokeh.plotting._figure", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Create a new figure for plotting."]}, {"type": "paragraph", "children": ["A subclass of ", {"type": "substitution_reference", "children": ["Plot"]}, " that simplifies plot creation with default axes, grids,\ntools, etc."]}, {"type": "paragraph", "children": ["Figure objects have many glyph methods that can be used to draw\nvectorized graphical glyphs:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"hlist\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"hlist\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"hlist\"."]}, {"type": "literal_block", "children": [".. hlist::\n    :columns: 3\n\n    * :func:`~bokeh.plotting.figure.annular_wedge`\n    * :func:`~bokeh.plotting.figure.annulus`\n    * :func:`~bokeh.plotting.figure.arc`\n    * :func:`~bokeh.plotting.figure.asterisk`\n    * :func:`~bokeh.plotting.figure.bezier`\n    * :func:`~bokeh.plotting.figure.circle`\n    * :func:`~bokeh.plotting.figure.circle_cross`\n    * :func:`~bokeh.plotting.figure.circle_dot`\n    * :func:`~bokeh.plotting.figure.circle_x`\n    * :func:`~bokeh.plotting.figure.circle_y`\n    * :func:`~bokeh.plotting.figure.cross`\n    * :func:`~bokeh.plotting.figure.dash`\n    * :func:`~bokeh.plotting.figure.diamond`\n    * :func:`~bokeh.plotting.figure.diamond_cross`\n    * :func:`~bokeh.plotting.figure.diamond_dot`\n    * :func:`~bokeh.plotting.figure.dot`\n    * :func:`~bokeh.plotting.figure.ellipse`\n    * :func:`~bokeh.plotting.figure.harea`\n    * :func:`~bokeh.plotting.figure.hbar`\n    * :func:`~bokeh.plotting.figure.hex`\n    * :func:`~bokeh.plotting.figure.hex_tile`\n    * :func:`~bokeh.plotting.figure.image`\n    * :func:`~bokeh.plotting.figure.image_rgba`\n    * :func:`~bokeh.plotting.figure.image_url`\n    * :func:`~bokeh.plotting.figure.inverted_triangle`\n    * :func:`~bokeh.plotting.figure.line`\n    * :func:`~bokeh.plotting.figure.multi_line`\n    * :func:`~bokeh.plotting.figure.multi_polygons`\n    * :func:`~bokeh.plotting.figure.oval`\n    * :func:`~bokeh.plotting.figure.patch`\n    * :func:`~bokeh.plotting.figure.patches`\n    * :func:`~bokeh.plotting.figure.plus`\n    * :func:`~bokeh.plotting.figure.quad`\n    * :func:`~bokeh.plotting.figure.quadratic`\n    * :func:`~bokeh.plotting.figure.ray`\n    * :func:`~bokeh.plotting.figure.rect`\n    * :func:`~bokeh.plotting.figure.segment`\n    * :func:`~bokeh.plotting.figure.square`\n    * :func:`~bokeh.plotting.figure.square_cross`\n    * :func:`~bokeh.plotting.figure.square_dot`\n    * :func:`~bokeh.plotting.figure.square_pin`\n    * :func:`~bokeh.plotting.figure.square_x`\n    * :func:`~bokeh.plotting.figure.star`\n    * :func:`~bokeh.plotting.figure.star_dot`\n    * :func:`~bokeh.plotting.figure.step`\n    * :func:`~bokeh.plotting.figure.text`\n    * :func:`~bokeh.plotting.figure.triangle`\n    * :func:`~bokeh.plotting.figure.triangle_dot`\n    * :func:`~bokeh.plotting.figure.triangle_pin`\n    * :func:`~bokeh.plotting.figure.varea`\n    * :func:`~bokeh.plotting.figure.vbar`\n    * :func:`~bokeh.plotting.figure.wedge`\n    * :func:`~bokeh.plotting.figure.x`\n    * :func:`~bokeh.plotting.figure.y`\n"]}]}, {"type": "paragraph", "children": ["There is a scatter function that can be parameterized by marker type:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "problematic", "children": [":func:`~bokeh.plotting.figure.scatter`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}]}]}, {"type": "paragraph", "children": ["There are also specialized methods for stacking bars:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["bars: ", {"type": "problematic", "children": [":func:`~bokeh.plotting.figure.hbar_stack`"]}, ", ", {"type": "problematic", "children": [":func:`~bokeh.plotting.figure.vbar_stack`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["lines: ", {"type": "problematic", "children": [":func:`~bokeh.plotting.figure.hline_stack`"]}, ", ", {"type": "problematic", "children": [":func:`~bokeh.plotting.figure.vline_stack`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["areas: ", {"type": "problematic", "children": [":func:`~bokeh.plotting.figure.harea_stack`"]}, ", ", {"type": "problematic", "children": [":func:`~bokeh.plotting.figure.varea_stack`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}]}]}, {"type": "paragraph", "children": ["As well as one specialized method for making simple hexbin plots:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "problematic", "children": [":func:`~bokeh.plotting.figure.hexbin`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"func\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"func\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"func\"."]}]}]}]}, {"type": "paragraph", "children": ["In addition to all the ", {"type": "literal", "children": ["figure"]}, " property attributes, the following\noptions are also accepted:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-options\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-options\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-options\"."]}, {"type": "literal_block", "children": [".. bokeh-options:: FigureOptions\n    :module: bokeh.plotting._figure"]}]}]}, "props": []}, {"name": "FileInput", "bases": ["InputWidget"], "mro": ["FileInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Present a file-chooser dialog to users and return the contents of the\nselected files.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Present a file-chooser dialog to users and return the contents of the\nselected files."]}]}, "props": [{"name": "accept", "type": "Either(String, List(String))", "desc": "Comma-separated list of standard HTML file input filters that restrict what\nfiles the user can pick from. Values can be:\n\n`<file extension>`:\n    Specific file extension(s) (e.g: .gif, .jpg, .png, .doc) are pickable\n\n`audio/*`:\n    all sound files are pickable\n\n`video/*`:\n    all video files are pickable\n\n`image/*`:\n    all image files are pickable\n\n`<media type>`:\n    A valid `IANA Media Type`_, with no parameters.\n\n.. _IANA Media Type: https://www.iana.org/assignments/media-types/media-types.xhtml\n\n.. note::\n    A bug in some versions of Chrome on macOS Big Sur may limit\n    how you can set a file input filter for those users. In those cases,\n    it is impossible to limit the user's selection to specific file\n    extensions - instead, the browser will limit users to predefined sets of\n    file types, such as ``Text/*`` or ``Image/*``. See :bokeh-issue:`10888`\n    for more information.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Comma-separated list of standard HTML file input filters that restrict what\nfiles the user can pick from. Values can be:"]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "title_reference", "children": ["<file extension>"]}, ":"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Specific file extension(s) (e.g: .gif, .jpg, .png, .doc) are pickable"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "title_reference", "children": ["audio/*"]}, ":"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["all sound files are pickable"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "title_reference", "children": ["video/*"]}, ":"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["all video files are pickable"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "title_reference", "children": ["image/*"]}, ":"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["all image files are pickable"]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "title_reference", "children": ["<media type>"]}, ":"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["A valid ", {"type": "reference", "children": ["IANA Media Type"]}, ", with no parameters."]}]}]}]}, {"type": "target", "children": []}, {"type": "note", "children": [{"type": "paragraph", "children": ["A bug in some versions of Chrome on macOS Big Sur may limit\nhow you can set a file input filter for those users. In those cases,\nit is impossible to limit the user's selection to specific file\nextensions - instead, the browser will limit users to predefined sets of\nfile types, such as ", {"type": "literal", "children": ["Text/*"]}, " or ", {"type": "literal", "children": ["Image/*"]}, ". See ", {"type": "problematic", "children": [":bokeh-issue:`10888`"]}, "\nfor more information."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"bokeh-issue\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-issue\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"bokeh-issue\"."]}]}]}]}, "default": ""}, {"name": "filename", "type": "Readonly(Either(String, List(String)))", "desc": "The name(s) of the file or files that were loaded.\n\nIf `mulitiple` is set to False (default), this value is a single string with the\nname of the single file that was chosen.\n\nIf `multiple` is True, this value is a list of strings, each containing the\nname of one of the multiple files that were chosen.\n\nThis list provides the sequence of files for the respective lists in value and mime-type\n\n.. note::\n    The full file path is not included since browsers will not provide\n    access to that information for security reasons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The name(s) of the file or files that were loaded."]}, {"type": "paragraph", "children": ["If ", {"type": "title_reference", "children": ["mulitiple"]}, " is set to False (default), this value is a single string with the\nname of the single file that was chosen."]}, {"type": "paragraph", "children": ["If ", {"type": "title_reference", "children": ["multiple"]}, " is True, this value is a list of strings, each containing the\nname of one of the multiple files that were chosen."]}, {"type": "paragraph", "children": ["This list provides the sequence of files for the respective lists in value and mime-type"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["The full file path is not included since browsers will not provide\naccess to that information for security reasons."]}]}]}, "default": ""}, {"name": "mime_type", "type": "Readonly(Either(String, List(String)))", "desc": "The mime-type of the file or files that were loaded.\n\nIf `mulitiple` is set to False (default), this value is a single string with the\nmime-type of the single file that was chosen.\n\nIf `multiple` is True, this value is a list of strings, each containing the\nmime-type of one of the multiple files that were chosen.\n\nThe sequence of files is given by the list of filename (see below)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The mime-type of the file or files that were loaded."]}, {"type": "paragraph", "children": ["If ", {"type": "title_reference", "children": ["mulitiple"]}, " is set to False (default), this value is a single string with the\nmime-type of the single file that was chosen."]}, {"type": "paragraph", "children": ["If ", {"type": "title_reference", "children": ["multiple"]}, " is True, this value is a list of strings, each containing the\nmime-type of one of the multiple files that were chosen."]}, {"type": "paragraph", "children": ["The sequence of files is given by the list of filename (see below)"]}]}, "default": ""}, {"name": "multiple", "type": "Bool", "desc": "set multiple=False (default) for single file selection, set multiple=True if\nselection of more than one file at a time should be possible.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["set multiple=False (default) for single file selection, set multiple=True if\nselection of more than one file at a time should be possible."]}]}, "default": false}, {"name": "value", "type": "Readonly(Either(String, List(String)))", "desc": "The base64-enconded contents of the file or files that were loaded.\n\nIf `mulitiple` is set to False (default), this value is a single string with the contents\nof the single file that was chosen.\n\nIf `multiple` is True, this value is a list of strings, each containing the contents of\none of the multiple files that were chosen.\n\nThe sequence of files is given by the list of filenames (see below)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The base64-enconded contents of the file or files that were loaded."]}, {"type": "paragraph", "children": ["If ", {"type": "title_reference", "children": ["mulitiple"]}, " is set to False (default), this value is a single string with the contents\nof the single file that was chosen."]}, {"type": "paragraph", "children": ["If ", {"type": "title_reference", "children": ["multiple"]}, " is True, this value is a list of strings, each containing the contents of\none of the multiple files that were chosen."]}, {"type": "paragraph", "children": ["The sequence of files is given by the list of filenames (see below)"]}]}, "default": ""}]}, {"name": "FillGlyph", "bases": ["Glyph"], "mro": ["FillGlyph", "Glyph", "Model"], "desc": "Glyphs with fill properties\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyphs with fill properties"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "FillProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering fill regions.\n\nMirrors the BokehJS ``properties.FillVector`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering fill regions."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.FillVector"]}, " class."]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "An alpha value to use to fill paths with.\n\n    Acceptable values are numbers in 0..1 range (transparent..opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to fill paths with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are numbers in 0..1 range (transparent..opaque)."]}]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A color to use to fill paths with.\n\n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``, ``'rgb(0 127 0 / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1\n    - a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to fill paths with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ", ", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern"]}]}]}]}]}, "default": "gray"}]}, {"name": "Filter", "bases": ["Model"], "mro": ["Filter", "Model"], "desc": "A Filter model represents a filtering operation that returns a row-wise subset of\ndata when applied to a ``ColumnDataSource``.\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Filter model represents a filtering operation that returns a row-wise subset of\ndata when applied to a ", {"type": "literal", "children": ["ColumnDataSource"]}, "."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "FixedTicker", "bases": ["ContinuousTicker"], "mro": ["FixedTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate ticks at fixed, explicitly supplied locations.\n\n.. note::\n    The ``desired_num_ticks`` property is ignored by this Ticker.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate ticks at fixed, explicitly supplied locations."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["desired_num_ticks"]}, " property is ignored by this Ticker."]}]}]}, "props": [{"name": "minor_ticks", "type": "Seq(Float)", "desc": "List of minor tick locations.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["List of minor tick locations."]}]}, "default": []}, {"name": "ticks", "type": "Seq(Float)", "desc": "List of major tick locations.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["List of major tick locations."]}]}, "default": []}]}, {"name": "FlexBox", "bases": ["LayoutDOM"], "mro": ["FlexBox", "LayoutDOM", "UIElement", "Model"], "desc": "Abstract base class for Row and Column. Do not use directly.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for Row and Column. Do not use directly."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "children", "type": "List(Instance(UIElement))", "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The list of children, which can be other components including plots, rows, columns, and widgets."]}]}, "default": []}, {"name": "spacing", "type": "Int", "desc": "The gap between children (in pixels).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The gap between children (in pixels)."]}]}, "default": 0}]}, {"name": "FreehandDrawTool", "bases": ["EditTool", "Drag", "Tap"], "mro": ["FreehandDrawTool", "EditTool", "Drag", "Tap", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |freehand_draw_icon|\n\nAllows freehand drawing of ``Patches`` and ``MultiLine`` glyphs. The glyph\nto draw may be defined via the ``renderers`` property.\n\nThe tool will modify the columns on the data source corresponding to the\n``xs`` and ``ys`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared ``empty_value``, when adding a new\npoint.\n\nThe supported actions include:\n\n* Draw vertices: Click and drag to draw a line\n\n* Delete patch/multi-line: Tap a patch/multi-line to select it then press\n  <<backspace>> key while the mouse is within the plot area.\n\n.. |freehand_draw_icon| image:: /_images/icons/FreehandDraw.png\n    :height: 24px\n    :alt: Icon of a pen drawing a wavy line representing the freehand-draw tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["freehand_draw_icon"]}]}, {"type": "paragraph", "children": ["Allows freehand drawing of ", {"type": "literal", "children": ["Patches"]}, " and ", {"type": "literal", "children": ["MultiLine"]}, " glyphs. The glyph\nto draw may be defined via the ", {"type": "literal", "children": ["renderers"]}, " property."]}, {"type": "paragraph", "children": ["The tool will modify the columns on the data source corresponding to the\n", {"type": "literal", "children": ["xs"]}, " and ", {"type": "literal", "children": ["ys"]}, " values of the glyph. Any additional columns in the data\nsource will be padded with the declared ", {"type": "literal", "children": ["empty_value"]}, ", when adding a new\npoint."]}, {"type": "paragraph", "children": ["The supported actions include:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Draw vertices: Click and drag to draw a line"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Delete patch/multi-line: Tap a patch/multi-line to select it then press\n<<backspace>> key while the mouse is within the plot area."]}]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "num_objects", "type": "Int", "desc": "Defines a limit on the number of patches or multi-lines that can be drawn.\nBy default there is no limit on the number of objects, but if enabled the\noldest drawn patch or multi-line will be overwritten when the limit is\nreached.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines a limit on the number of patches or multi-lines that can be drawn.\nBy default there is no limit on the number of objects, but if enabled the\noldest drawn patch or multi-line will be overwritten when the limit is\nreached."]}]}, "default": 0}]}, {"name": "FullscreenTool", "bases": ["ActionTool"], "mro": ["FullscreenTool", "ActionTool", "Tool", "Model"], "desc": "A tool that allows to enlarge a UI element to fullscreen. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A tool that allows to enlarge a UI element to fullscreen."]}]}, "props": []}, {"name": "GMap", "bases": ["GMapPlot"], "mro": ["GMap", "GMapPlot", "MapPlot", "Plot", "LayoutDOM", "UIElement", "Model"], "desc": "A subclass of |Plot| that simplifies plot creation with default axes,\ngrids, tools, etc.\n\nArgs:\n    google_api_key (str):\n        Google requires an API key be supplied for maps to function. See:\n\n        https://developers.google.com/maps/documentation/javascript/get-api-key\n\n    map_options: (:class:`~bokeh.models.map_plots.GMapOptions`)\n        Configuration specific to a Google Map\n\nIn addition to all the Bokeh model property attributes documented below,\nthe ``Figure`` initializer also accepts the following options, which can\nhelp simplify configuration:\n\n.. bokeh-options:: GMapFigureOptions\n    :module: bokeh.plotting.gmap", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A subclass of ", {"type": "substitution_reference", "children": ["Plot"]}, " that simplifies plot creation with default axes,\ngrids, tools, etc."]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["Args:"]}, {"type": "definition", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["google_api_key (str):"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Google requires an API key be supplied for maps to function. See:"]}, {"type": "paragraph", "children": [{"type": "reference", "children": ["https://developers.google.com/maps/documentation/javascript/get-api-key"]}]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": ["map_options: (", {"type": "problematic", "children": [":class:`~bokeh.models.map_plots.GMapOptions`"]}, ")"]}, {"type": "definition", "children": [{"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "paragraph", "children": ["Configuration specific to a Google Map"]}]}]}]}]}]}]}, {"type": "paragraph", "children": ["In addition to all the Bokeh model property attributes documented below,\nthe ", {"type": "literal", "children": ["Figure"]}, " initializer also accepts the following options, which can\nhelp simplify configuration:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-options\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-options\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-options\"."]}, {"type": "literal_block", "children": [".. bokeh-options:: GMapFigureOptions\n    :module: bokeh.plotting.gmap"]}]}]}, "props": []}, {"name": "GMapOptions", "bases": ["MapOptions"], "mro": ["GMapOptions", "MapOptions", "Model"], "desc": "Options for ``GMapPlot`` objects.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Options for ", {"type": "literal", "children": ["GMapPlot"]}, " objects."]}]}, "props": [{"name": "map_type", "type": "Enum('satellite', 'roadmap', 'terrain', 'hybrid')", "desc": "The `map type`_ to use for the ``GMapPlot``.\n\n.. _map type: https://developers.google.com/maps/documentation/javascript/reference#MapTypeId", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The ", {"type": "reference", "children": ["map type"]}, " to use for the ", {"type": "literal", "children": ["GMapPlot"]}, "."]}, {"type": "target", "children": []}]}, "default": "roadmap"}, {"name": "scale_control", "type": "Bool", "desc": "Whether the Google map should display its distance scale control.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the Google map should display its distance scale control."]}]}, "default": false}, {"name": "styles", "type": "Nullable(JSON)", "desc": "A JSON array of `map styles`_ to use for the ``GMapPlot``. Many example styles can\n`be found here`_.\n\n.. _map styles: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n.. _be found here: https://snazzymaps.com", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A JSON array of ", {"type": "reference", "children": ["map styles"]}, " to use for the ", {"type": "literal", "children": ["GMapPlot"]}, ". Many example styles can\n", {"type": "reference", "children": ["be found here"]}, "."]}, {"type": "target", "children": []}, {"type": "target", "children": []}]}, "default": null}, {"name": "tilt", "type": "Int", "desc": "`Tilt`_ angle of the map. The only allowed values are 0 and 45.\nOnly has an effect on 'satellite' and 'hybrid' map types.\nA value of 0 causes the map to always use a 0 degree overhead view.\nA value of 45 causes the tilt angle to switch to 45 imagery if available.\n\n.. _Tilt: https://developers.google.com/maps/documentation/javascript/reference/3/map#MapOptions.tilt", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "reference", "children": ["Tilt"]}, " angle of the map. The only allowed values are 0 and 45.\nOnly has an effect on 'satellite' and 'hybrid' map types.\nA value of 0 causes the map to always use a 0 degree overhead view.\nA value of 45 causes the tilt angle to switch to 45 imagery if available."]}, {"type": "target", "children": []}]}, "default": 45}]}, {"name": "GMapPlot", "bases": ["MapPlot"], "mro": ["GMapPlot", "MapPlot", "Plot", "LayoutDOM", "UIElement", "Model"], "desc": "A Bokeh Plot with a `Google Map`_ displayed underneath.\n\nData placed on this plot should be specified in decimal lat/lon coordinates\ne.g. ``(37.123, -122.404)``. It will be automatically converted into the\nweb mercator projection to display properly over google maps tiles.\n\nThe ``api_key`` property must be configured with a Google API Key in order\nfor ``GMapPlot`` to function. The key will be stored in the Bokeh Document\nJSON.\n\nNote that Google Maps exert explicit control over aspect ratios at all\ntimes, which imposes some limitations on ``GMapPlot``:\n\n* Only ``Range1d`` ranges are supported. Attempting to use other range\n  types will result in an error.\n\n* Usage of ``BoxZoomTool`` is incompatible with ``GMapPlot``. Adding a\n  ``BoxZoomTool`` will have no effect.\n\n.. _Google Map: https://www.google.com/maps/", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Bokeh Plot with a ", {"type": "reference", "children": ["Google Map"]}, " displayed underneath."]}, {"type": "paragraph", "children": ["Data placed on this plot should be specified in decimal lat/lon coordinates\ne.g. ", {"type": "literal", "children": ["(37.123, -122.404)"]}, ". It will be automatically converted into the\nweb mercator projection to display properly over google maps tiles."]}, {"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["api_key"]}, " property must be configured with a Google API Key in order\nfor ", {"type": "literal", "children": ["GMapPlot"]}, " to function. The key will be stored in the Bokeh Document\nJSON."]}, {"type": "paragraph", "children": ["Note that Google Maps exert explicit control over aspect ratios at all\ntimes, which imposes some limitations on ", {"type": "literal", "children": ["GMapPlot"]}, ":"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Only ", {"type": "literal", "children": ["Range1d"]}, " ranges are supported. Attempting to use other range\ntypes will result in an error."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Usage of ", {"type": "literal", "children": ["BoxZoomTool"]}, " is incompatible with ", {"type": "literal", "children": ["GMapPlot"]}, ". Adding a\n", {"type": "literal", "children": ["BoxZoomTool"]}, " will have no effect."]}]}]}, {"type": "target", "children": []}]}, "props": [{"name": "api_key", "type": "Required(Bytes)", "desc": "Google Maps API requires an API key. See https://developers.google.com/maps/documentation/javascript/get-api-key\nfor more information on how to obtain your own.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Google Maps API requires an API key. See ", {"type": "reference", "children": ["https://developers.google.com/maps/documentation/javascript/get-api-key"]}, "\nfor more information on how to obtain your own."]}]}, "default": "<Undefined>"}, {"name": "api_version", "type": "String", "desc": "The version of Google Maps API to use. See https://developers.google.com/maps/documentation/javascript/versions\nfor more information.\n\n.. note::\n    Changing this value may result in broken map rendering.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The version of Google Maps API to use. See ", {"type": "reference", "children": ["https://developers.google.com/maps/documentation/javascript/versions"]}, "\nfor more information."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Changing this value may result in broken map rendering."]}]}]}, "default": "weekly"}, {"name": "map_options", "type": "Instance(GMapOptions)", "desc": "Options for displaying the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Options for displaying the plot."]}]}, "default": "<Undefined>"}]}, {"name": "GeoJSONDataSource", "bases": ["ColumnarDataSource"], "mro": ["GeoJSONDataSource", "ColumnarDataSource", "DataSource", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "geojson", "type": "Required(JSON)", "desc": "GeoJSON that contains features for plotting. Currently\n``GeoJSONDataSource`` can only process a ``FeatureCollection`` or\n``GeometryCollection``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["GeoJSON that contains features for plotting. Currently\n", {"type": "literal", "children": ["GeoJSONDataSource"]}, " can only process a ", {"type": "literal", "children": ["FeatureCollection"]}, " or\n", {"type": "literal", "children": ["GeometryCollection"]}, "."]}]}, "default": "<Undefined>"}]}, {"name": "GestureTool", "bases": ["Tool"], "mro": ["GestureTool", "Tool", "Model"], "desc": "A base class for tools that respond to drag events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for tools that respond to drag events."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Glyph", "bases": ["Model"], "mro": ["Glyph", "Model"], "desc": "Base class for all glyph models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for all glyph models."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "decorations", "type": "List(Instance(Decoration))", "desc": "A collection of glyph decorations, e.g. arrow heads.\n\nUse ``GlyphRenderer.add_decoration()`` for easy setup for all glyphs\nof a glyph renderer. Use this property when finer control is needed.\n\n.. note::\n\n    Decorations are only for aiding visual appearance of a glyph,\n    but they don't participate in hit testing, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A collection of glyph decorations, e.g. arrow heads."]}, {"type": "paragraph", "children": ["Use ", {"type": "literal", "children": ["GlyphRenderer.add_decoration()"]}, " for easy setup for all glyphs\nof a glyph renderer. Use this property when finer control is needed."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Decorations are only for aiding visual appearance of a glyph,\nbut they don't participate in hit testing, etc."]}]}]}, "default": []}]}, {"name": "GlyphRenderer", "bases": ["DataRenderer"], "mro": ["GlyphRenderer", "DataRenderer", "Renderer", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "data_source", "type": "Instance(DataSource)", "desc": "Local data source to use when rendering glyphs on the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Local data source to use when rendering glyphs on the plot."]}]}, "default": "<Undefined>"}, {"name": "glyph", "type": "Instance(Glyph)", "desc": "The glyph to render, in conjunction with the supplied data source\nand ranges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The glyph to render, in conjunction with the supplied data source\nand ranges."]}]}, "default": "<Undefined>"}, {"name": "hover_glyph", "type": "Nullable(Instance(Glyph))", "desc": "An optional glyph used for inspected points, e.g., those that are\nbeing hovered over by a ``HoverTool``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional glyph used for inspected points, e.g., those that are\nbeing hovered over by a ", {"type": "literal", "children": ["HoverTool"]}, "."]}]}, "default": null}, {"name": "muted", "type": "Bool", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": false}, {"name": "muted_glyph", "type": "Nullable(Either(Auto, Instance(Glyph)))", "desc": "\"\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["\""]}]}, "default": "auto"}, {"name": "nonselection_glyph", "type": "Nullable(Either(Auto, Instance(Glyph)))", "desc": "\"\nAn optional glyph used for explicitly non-selected points\n(i.e., non-selected when there are other points that are selected,\nbut not when no points at all are selected.)\n\nIf set to \"auto\" then a glyph with a low alpha value (0.1) will\nbe used for non-selected points.", "richdesc": {"type": "document", "children": [{"type": "system_message", "children": [{"type": "paragraph", "children": ["Possible incomplete section title.\nTreating the overline as ordinary text because it's so short."]}]}, {"type": "paragraph", "children": ["\"\nAn optional glyph used for explicitly non-selected points\n(i.e., non-selected when there are other points that are selected,\nbut not when no points at all are selected.)"]}, {"type": "paragraph", "children": ["If set to \"auto\" then a glyph with a low alpha value (0.1) will\nbe used for non-selected points."]}]}, "default": "auto"}, {"name": "selection_glyph", "type": "Nullable(Either(Auto, Instance(Glyph)))", "desc": "\"\nAn optional glyph used for selected points.\n\nIf set to \"auto\" then the standard glyph will be used for selected\npoints.", "richdesc": {"type": "document", "children": [{"type": "system_message", "children": [{"type": "paragraph", "children": ["Possible incomplete section title.\nTreating the overline as ordinary text because it's so short."]}]}, {"type": "paragraph", "children": ["\"\nAn optional glyph used for selected points."]}, {"type": "paragraph", "children": ["If set to \"auto\" then the standard glyph will be used for selected\npoints."]}]}, "default": "auto"}, {"name": "view", "type": "Instance(CDSView)", "desc": "A view into the data source to use when rendering glyphs. A default view\nof the entire data source is created when a view is not passed in during\ninitialization.\n\n.. note:\n    Only the default (filterless) CDSView is compatible with glyphs that\n    have connected topology, such as Line and Patch. Setting filters on\n    views for these glyphs will result in a warning and undefined behavior.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A view into the data source to use when rendering glyphs. A default view\nof the entire data source is created when a view is not passed in during\ninitialization."]}, {"type": "comment", "children": ["note:\nOnly the default (filterless) CDSView is compatible with glyphs that\nhave connected topology, such as Line and Patch. Setting filters on\nviews for these glyphs will result in a warning and undefined behavior."]}]}, "default": "{\"__type__\": \"CDSView\", \"attributes\": {\"filter\": {\"id\": \"p2064\", \"name\": \"AllIndices\", \"type\": \"object\"}}, \"name\": \"CDSView\", \"type\": \"object\"}"}]}, {"name": "GraphCoordinates", "bases": ["CoordinateTransform"], "mro": ["GraphCoordinates", "CoordinateTransform", "Expression", "Model"], "desc": "Abstract class for coordinate transform expression obtained from ``LayoutProvider``\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract class for coordinate transform expression obtained from ", {"type": "literal", "children": ["LayoutProvider"]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "layout", "type": "Instance(LayoutProvider)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": "<Undefined>"}]}, {"name": "GraphHitTestPolicy", "bases": ["Model"], "mro": ["GraphHitTestPolicy", "Model"], "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "GraphRenderer", "bases": ["DataRenderer"], "mro": ["GraphRenderer", "DataRenderer", "Renderer", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "edge_renderer", "type": "Instance(GlyphRenderer)", "desc": "Instance of a ``GlyphRenderer`` containing an ``MultiLine`` Glyph that will be\nrendered as the graph edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Instance of a ", {"type": "literal", "children": ["GlyphRenderer"]}, " containing an ", {"type": "literal", "children": ["MultiLine"]}, " Glyph that will be\nrendered as the graph edges."]}]}, "default": "{\"__type__\": \"GlyphRenderer\", \"attributes\": {\"data_source\": {\"attributes\": {\"data\": {\"entries\": [[\"start\", []], [\"end\", []]], \"type\": \"map\"}, \"selected\": {\"attributes\": {\"indices\": [], \"line_indices\": []}, \"id\": \"p2150\", \"name\": \"Selection\", \"type\": \"object\"}, \"selection_policy\": {\"id\": \"p2151\", \"name\": \"UnionRenderers\", \"type\": \"object\"}}, \"id\": \"p2149\", \"name\": \"ColumnDataSource\", \"type\": \"object\"}, \"glyph\": {\"id\": \"p2148\", \"name\": \"MultiLine\", \"type\": \"object\"}, \"view\": {\"attributes\": {\"filter\": {\"id\": \"p2154\", \"name\": \"AllIndices\", \"type\": \"object\"}}, \"id\": \"p2153\", \"name\": \"CDSView\", \"type\": \"object\"}}, \"name\": \"GlyphRenderer\", \"type\": \"object\"}"}, {"name": "inspection_policy", "type": "Instance(GraphHitTestPolicy)", "desc": "An instance of a ``GraphHitTestPolicy`` that provides the logic for inspection\nof graph components.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An instance of a ", {"type": "literal", "children": ["GraphHitTestPolicy"]}, " that provides the logic for inspection\nof graph components."]}]}, "default": "{\"__type__\": \"NodesOnly\", \"name\": \"NodesOnly\", \"type\": \"object\"}"}, {"name": "layout_provider", "type": "Instance(LayoutProvider)", "desc": "An instance of a ``LayoutProvider`` that supplies the layout of the network\ngraph in cartesian space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An instance of a ", {"type": "literal", "children": ["LayoutProvider"]}, " that supplies the layout of the network\ngraph in cartesian space."]}]}, "default": "<Undefined>"}, {"name": "node_renderer", "type": "Instance(GlyphRenderer)", "desc": "Instance of a ``GlyphRenderer`` containing an ``XYGlyph`` that will be rendered\nas the graph nodes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Instance of a ", {"type": "literal", "children": ["GlyphRenderer"]}, " containing an ", {"type": "literal", "children": ["XYGlyph"]}, " that will be rendered\nas the graph nodes."]}]}, "default": "{\"__type__\": \"GlyphRenderer\", \"attributes\": {\"data_source\": {\"attributes\": {\"data\": {\"entries\": [[\"index\", []]], \"type\": \"map\"}, \"selected\": {\"attributes\": {\"indices\": [], \"line_indices\": []}, \"id\": \"p2121\", \"name\": \"Selection\", \"type\": \"object\"}, \"selection_policy\": {\"id\": \"p2122\", \"name\": \"UnionRenderers\", \"type\": \"object\"}}, \"id\": \"p2120\", \"name\": \"ColumnDataSource\", \"type\": \"object\"}, \"glyph\": {\"id\": \"p2119\", \"name\": \"Circle\", \"type\": \"object\"}, \"view\": {\"attributes\": {\"filter\": {\"id\": \"p2125\", \"name\": \"AllIndices\", \"type\": \"object\"}}, \"id\": \"p2124\", \"name\": \"CDSView\", \"type\": \"object\"}}, \"name\": \"GlyphRenderer\", \"type\": \"object\"}"}, {"name": "selection_policy", "type": "Instance(GraphHitTestPolicy)", "desc": "An instance of a ``GraphHitTestPolicy`` that provides the logic for selection\nof graph components.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An instance of a ", {"type": "literal", "children": ["GraphHitTestPolicy"]}, " that provides the logic for selection\nof graph components."]}]}, "default": "{\"__type__\": \"NodesOnly\", \"name\": \"NodesOnly\", \"type\": \"object\"}"}]}, {"name": "Grid", "bases": ["GuideRenderer"], "mro": ["Grid", "GuideRenderer", "Renderer", "Model"], "desc": "Display horizontal or vertical grid lines at locations\ngiven by a supplied ``Ticker``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Display horizontal or vertical grid lines at locations\ngiven by a supplied ", {"type": "literal", "children": ["Ticker"]}, "."]}]}, "props": [{"name": "axis", "type": "Nullable(Instance(Axis))", "desc": "An Axis to delegate ticking to. If the ticker property is None, then the\nGrid will use the ticker on the specified axis for computing where to draw\ngrid lines. Otherwise, it ticker is not None, it will take precedence over\nany Axis.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An Axis to delegate ticking to. If the ticker property is None, then the\nGrid will use the ticker on the specified axis for computing where to draw\ngrid lines. Otherwise, it ticker is not None, it will take precedence over\nany Axis."]}]}, "default": null}, {"name": "band_fill_alpha", "type": "Alpha", "desc": "The fill alpha of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha of alternating bands between Grid lines."]}]}, "default": 0}, {"name": "band_fill_color", "type": "Nullable(Color)", "desc": "The fill color of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color of alternating bands between Grid lines."]}]}, "default": null}, {"name": "band_hatch_alpha", "type": "Alpha", "desc": "The hatch alpha of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha of alternating bands between Grid lines."]}]}, "default": 1.0}, {"name": "band_hatch_color", "type": "Nullable(Color)", "desc": "The hatch color of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color of alternating bands between Grid lines."]}]}, "default": "black"}, {"name": "band_hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra of alternating bands between Grid lines."]}]}, "default": {}}, {"name": "band_hatch_pattern", "type": "Nullable(String)", "desc": "The hatch pattern of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern of alternating bands between Grid lines."]}]}, "default": null}, {"name": "band_hatch_scale", "type": "Size", "desc": "The hatch scale of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale of alternating bands between Grid lines."]}]}, "default": 12.0}, {"name": "band_hatch_weight", "type": "Size", "desc": "The hatch weight of alternating bands between Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight of alternating bands between Grid lines."]}]}, "default": 1.0}, {"name": "bounds", "type": "Either(Auto, Tuple(Float, Float))", "desc": "Bounds for the rendered grid lines. By default, a grid will look for a\ncorresponding axis to ask for bounds. If one cannot be found, the grid\nwill span the entire visible range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Bounds for the rendered grid lines. By default, a grid will look for a\ncorresponding axis to ask for bounds. If one cannot be found, the grid\nwill span the entire visible range."]}]}, "default": "auto"}, {"name": "cross_bounds", "type": "Either(Auto, Tuple(Float, Float))", "desc": "Bounds for the rendered grid lines in the orthogonal direction. By default,\na grid will span the entire visible range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Bounds for the rendered grid lines in the orthogonal direction. By default,\na grid will span the entire visible range."]}]}, "default": "auto"}, {"name": "dimension", "type": "Int", "desc": "Which dimension the Axis Grid lines will intersect. The\nx-axis is dimension 0 (vertical Grid lines) and the y-axis\nis dimension 1 (horizontal Grid lines).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimension the Axis Grid lines will intersect. The\nx-axis is dimension 0 (vertical Grid lines) and the y-axis\nis dimension 1 (horizontal Grid lines)."]}]}, "default": 0}, {"name": "grid_line_alpha", "type": "Alpha", "desc": "The line alpha of the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the Grid lines."]}]}, "default": 1.0}, {"name": "grid_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the Grid lines."]}]}, "default": "butt"}, {"name": "grid_line_color", "type": "Nullable(Color)", "desc": "The line color of the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the Grid lines."]}]}, "default": "#e5e5e5"}, {"name": "grid_line_dash", "type": "DashPattern", "desc": "The line dash of the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the Grid lines."]}]}, "default": []}, {"name": "grid_line_dash_offset", "type": "Int", "desc": "The line dash offset of the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the Grid lines."]}]}, "default": 0}, {"name": "grid_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the Grid lines."]}]}, "default": "bevel"}, {"name": "grid_line_width", "type": "Float", "desc": "The line width of the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the Grid lines."]}]}, "default": 1}, {"name": "minor_grid_line_alpha", "type": "Alpha", "desc": "The line alpha of the minor Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha of the minor Grid lines."]}]}, "default": 1.0}, {"name": "minor_grid_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap of the minor Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap of the minor Grid lines."]}]}, "default": "butt"}, {"name": "minor_grid_line_color", "type": "Nullable(Color)", "desc": "The line color of the minor Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color of the minor Grid lines."]}]}, "default": null}, {"name": "minor_grid_line_dash", "type": "DashPattern", "desc": "The line dash of the minor Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash of the minor Grid lines."]}]}, "default": []}, {"name": "minor_grid_line_dash_offset", "type": "Int", "desc": "The line dash offset of the minor Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset of the minor Grid lines."]}]}, "default": 0}, {"name": "minor_grid_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join of the minor Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join of the minor Grid lines."]}]}, "default": "bevel"}, {"name": "minor_grid_line_width", "type": "Float", "desc": "The line width of the minor Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width of the minor Grid lines."]}]}, "default": 1}, {"name": "ticker", "type": "Nullable(Instance(Ticker))", "desc": "A Ticker to use for computing locations for the Grid lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Ticker to use for computing locations for the Grid lines."]}]}, "default": null}]}, {"name": "GridBox", "bases": ["LayoutDOM"], "mro": ["GridBox", "LayoutDOM", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "children", "type": "List(Either(Tuple(Instance(UIElement), Int, Int), Tuple(Instance(UIElement), Int, Int, Int, Int)))", "desc": "A list of children with their associated position in the grid (row, column).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of children with their associated position in the grid (row, column)."]}]}, "default": []}, {"name": "cols", "type": "Nullable(Any)", "desc": "Describes how the grid should maintain its columns' widths.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the grid should maintain its columns' widths."]}]}, "default": null}, {"name": "rows", "type": "Nullable(Any)", "desc": "Describes how the grid should maintain its rows' heights.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the grid should maintain its rows' heights."]}]}, "default": null}, {"name": "spacing", "type": "Either(Int, Tuple(Int, Int))", "desc": "The gap between children (in pixels).\n\nEither a number, if spacing is the same for both dimensions, or a pair\nof numbers indicating spacing in the vertical and horizontal dimensions\nrespectively.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The gap between children (in pixels)."]}, {"type": "paragraph", "children": ["Either a number, if spacing is the same for both dimensions, or a pair\nof numbers indicating spacing in the vertical and horizontal dimensions\nrespectively."]}]}, "default": 0}]}, {"name": "GridPlot", "bases": ["LayoutDOM"], "mro": ["GridPlot", "LayoutDOM", "UIElement", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "children", "type": "List(Either(Tuple(Instance(LayoutDOM), Int, Int), Tuple(Instance(LayoutDOM), Int, Int, Int, Int)))", "desc": "A list of subplots with their associated position in the grid, row and column\nindex and optional row and column spans (the defaul span is 1).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of subplots with their associated position in the grid, row and column\nindex and optional row and column spans (the defaul span is 1)."]}]}, "default": []}, {"name": "cols", "type": "Nullable(Any)", "desc": "Describes how the grid should maintain its columns' widths.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the grid should maintain its columns' widths."]}]}, "default": "max-content"}, {"name": "rows", "type": "Nullable(Any)", "desc": "Describes how the grid should maintain its rows' heights.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the grid should maintain its rows' heights."]}]}, "default": "max-content"}, {"name": "spacing", "type": "Either(Int, Tuple(Int, Int))", "desc": "The gap between children (in pixels).\n\nEither a number, if spacing is the same for both dimensions, or a pair\nof numbers indicating spacing in the vertical and horizontal dimensions\nrespectively.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The gap between children (in pixels)."]}, {"type": "paragraph", "children": ["Either a number, if spacing is the same for both dimensions, or a pair\nof numbers indicating spacing in the vertical and horizontal dimensions\nrespectively."]}]}, "default": 0}, {"name": "toolbar", "type": "Instance(Toolbar)", "desc": "The toolbar associated with this grid plot, which holds all the tools.\nIt is automatically created with the plot if necessary.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The toolbar associated with this grid plot, which holds all the tools.\nIt is automatically created with the plot if necessary."]}]}, "default": "{\"__type__\": \"Toolbar\", \"name\": \"Toolbar\", \"type\": \"object\"}"}, {"name": "toolbar_location", "type": "Nullable(Enum('above', 'below', 'left', 'right'))", "desc": "Indicates where the layout the toolbar will be located. If set to None,\nno toolbar will be attached to the grid plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indicates where the layout the toolbar will be located. If set to None,\nno toolbar will be attached to the grid plot."]}]}, "default": "above"}]}, {"name": "GroupBox", "bases": ["LayoutDOM"], "mro": ["GroupBox", "LayoutDOM", "UIElement", "Model"], "desc": "A panel that allows to group UI elements.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A panel that allows to group UI elements."]}]}, "props": [{"name": "checkable", "type": "Bool", "desc": "Whether to allow disabling this group (all its children) via a checkbox\nin the UI. This allows to broadcast ``disabled`` state across multiple\nUI controls that support that state.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to allow disabling this group (all its children) via a checkbox\nin the UI. This allows to broadcast ", {"type": "literal", "children": ["disabled"]}, " state across multiple\nUI controls that support that state."]}]}, "default": false}, {"name": "child", "type": "Instance(UIElement)", "desc": "The child UI element. This can be a single UI control, widget, etc., or\na container layout like ``Column`` or ``Row``, or a combitation of layouts.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The child UI element. This can be a single UI control, widget, etc., or\na container layout like ", {"type": "literal", "children": ["Column"]}, " or ", {"type": "literal", "children": ["Row"]}, ", or a combitation of layouts."]}]}, "default": "<Undefined>"}, {"name": "title", "type": "Nullable(String)", "desc": "The title text of the group. If not provided, only the frame will be showed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The title text of the group. If not provided, only the frame will be showed."]}]}, "default": null}]}, {"name": "GroupFilter", "bases": ["Filter"], "mro": ["GroupFilter", "Filter", "Model"], "desc": "A ``GroupFilter`` represents the rows of a ``ColumnDataSource`` where the values of the categorical\ncolumn column_name match the group variable.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["GroupFilter"]}, " represents the rows of a ", {"type": "literal", "children": ["ColumnDataSource"]}, " where the values of the categorical\ncolumn column_name match the group variable."]}]}, "props": [{"name": "column_name", "type": "Required(String)", "desc": "The name of the column to perform the group filtering operation on.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The name of the column to perform the group filtering operation on."]}]}, "default": "<Undefined>"}, {"name": "group", "type": "Required(String)", "desc": "The value of the column indicating the rows of data to keep.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The value of the column indicating the rows of data to keep."]}]}, "default": "<Undefined>"}]}, {"name": "GroupingInfo", "bases": ["Model"], "mro": ["GroupingInfo", "Model"], "desc": "Describes how to calculate totals and sub-totals\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how to calculate totals and sub-totals"]}]}, "props": [{"name": "aggregators", "type": "List(Instance(RowAggregator))", "desc": "Describes how to aggregate the columns which will populate this sub-total.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how to aggregate the columns which will populate this sub-total."]}]}, "default": []}, {"name": "collapsed", "type": "Bool", "desc": "Whether the corresponding sub-total is expanded or collapsed by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the corresponding sub-total is expanded or collapsed by default."]}]}, "default": false}, {"name": "getter", "type": "String", "desc": "References the column which generates the unique keys of this sub-total (groupby).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["References the column which generates the unique keys of this sub-total (groupby)."]}]}, "default": ""}]}, {"name": "GuideRenderer", "bases": ["Renderer"], "mro": ["GuideRenderer", "Renderer", "Model"], "desc": "A base class for all guide renderer types. ``GuideRenderer`` is\nnot generally useful to instantiate on its own.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all guide renderer types. ", {"type": "literal", "children": ["GuideRenderer"]}, " is\nnot generally useful to instantiate on its own."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "HArea", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["HArea", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render a horizontally directed area between two equal length sequences\nof x-coordinates with the same y-coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/HArea.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a horizontally directed area between two equal length sequences\nof x-coordinates with the same y-coordinates."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/HArea.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the horizontal directed area."]}]}, "default": 1.0}, {"name": "fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the horizontal directed area."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the horizontal directed area."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the horizontal directed area."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the horizontal directed area."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the horizontal directed area."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the horizontal directed area."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the horizontal directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the horizontal directed area."]}]}, "default": 1.0}, {"name": "x1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for the points of one side of the area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for the points of one side of the area."]}]}, "default": {"type": "field", "field": "x1"}}, {"name": "x2", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for the points of the other side of the area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for the points of the other side of the area."]}]}, "default": {"type": "field", "field": "x2"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for the points of the area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for the points of the area."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "HBar", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["HBar", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render horizontal bars, given a center coordinate, ``height`` and\n(``left``, ``right``) coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/HBar.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render horizontal bars, given a center coordinate, ", {"type": "literal", "children": ["height"]}, " and\n(", {"type": "literal", "children": ["left"]}, ", ", {"type": "literal", "children": ["right"]}, ") coordinates."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/HBar.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the horizontal bars."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the horizontal bars."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the horizontal bars."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the horizontal bars."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the horizontal bars."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the horizontal bars."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the horizontal bars."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the horizontal bars."]}]}, "default": 1.0}, {"name": "height", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The heights of the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The heights of the vertical bars."]}]}, "default": 1}, {"name": "left", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the left edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the left edges."]}]}, "default": 0}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the horizontal bars."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the horizontal bars."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the horizontal bars."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the horizontal bars."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the horizontal bars."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the horizontal bars."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the horizontal bars."]}]}, "default": 1}, {"name": "right", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the right edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the right edges."]}]}, "default": {"type": "field", "field": "right"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the centers of the horizontal bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the centers of the horizontal bars."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "HBox", "bases": ["LayoutDOM"], "mro": ["HBox", "LayoutDOM", "UIElement", "Model"], "desc": "A CSS grid-based horizontal box. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A CSS grid-based horizontal box."]}]}, "props": [{"name": "children", "type": "List(Struct(child=Instance(UIElement), col=Int, span=Int))", "desc": "A list of children with their associated position in the horizontal box (optional; column number, span).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of children with their associated position in the horizontal box (optional; column number, span)."]}]}, "default": []}, {"name": "cols", "type": "Nullable(Any)", "desc": "Describes how the grid should maintain its columns' widths.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the grid should maintain its columns' widths."]}]}, "default": null}, {"name": "spacing", "type": "Either(Int, Tuple(Int, Int))", "desc": "The gap between children (in pixels).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The gap between children (in pixels)."]}]}, "default": 0}]}, {"name": "HTMLAnnotation", "bases": ["Annotation"], "mro": ["HTMLAnnotation", "Annotation", "Renderer", "Model"], "desc": "Base class for HTML-based annotations.\n\n.. note::\n    All annotations that inherit from this base class can be attached to\n    a canvas, but are not rendered to it, thus they won't appear in saved\n    plots. Only ``export_png()`` function can preserve HTML annotations.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for HTML-based annotations."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["All annotations that inherit from this base class can be attached to\na canvas, but are not rendered to it, thus they won't appear in saved\nplots. Only ", {"type": "literal", "children": ["export_png()"]}, " function can preserve HTML annotations."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "HTMLLabel", "bases": ["HTMLAnnotation"], "mro": ["HTMLLabel", "HTMLAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a single HTML label as an annotation.\n\n``Label`` will render a single text label at given ``x`` and ``y``\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space.\n\nThe label can also be configured with a screen space offset from ``x`` and\n``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\nAdditionally, the label can be rotated with the ``angle`` property.\n\nThere are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border.\n\nSee :ref:`ug_basic_annotations_labels` for information on plotting labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a single HTML label as an annotation."]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["Label"]}, " will render a single text label at given ", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, "\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space."]}, {"type": "paragraph", "children": ["The label can also be configured with a screen space offset from ", {"type": "literal", "children": ["x"]}, " and\n", {"type": "literal", "children": ["y"]}, ", by using the ", {"type": "literal", "children": ["x_offset"]}, " and ", {"type": "literal", "children": ["y_offset"]}, " properties."]}, {"type": "paragraph", "children": ["Additionally, the label can be rotated with the ", {"type": "literal", "children": ["angle"]}, " property."]}, {"type": "paragraph", "children": ["There are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_labels`"]}, " for information on plotting labels."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "angle", "type": "Angle", "desc": "The angle to rotate the text, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angle to rotate the text, as measured from the horizontal."]}]}, "default": 0}, {"name": "angle_units", "type": "Enum('deg', 'rad', 'grad', 'turn')", "desc": "Acceptable values for units are ``\"rad\"`` and ``\"deg\"``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Acceptable values for units are ", {"type": "literal", "children": ["\"rad\""]}, " and ", {"type": "literal", "children": ["\"deg\""]}]}]}, "default": "rad"}, {"name": "background_fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "background_fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_alpha", "type": "Alpha", "desc": "The line alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "border_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the text bounding box."]}]}, "default": "butt"}, {"name": "border_line_color", "type": "Nullable(Color)", "desc": "The line color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_dash", "type": "DashPattern", "desc": "The line dash values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the text bounding box."]}]}, "default": []}, {"name": "border_line_dash_offset", "type": "Int", "desc": "The line dash offset values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the text bounding box."]}]}, "default": 0}, {"name": "border_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the text bounding box."]}]}, "default": "bevel"}, {"name": "border_line_width", "type": "Float", "desc": "The line width values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the text bounding box."]}]}, "default": 1}, {"name": "text", "type": "String", "desc": "The text value to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text value to render."]}]}, "default": ""}, {"name": "text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align values for the text."]}]}, "default": "left"}, {"name": "text_alpha", "type": "Alpha", "desc": "The text alpha values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha values for the text."]}]}, "default": 1.0}, {"name": "text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline values for the text."]}]}, "default": "bottom"}, {"name": "text_color", "type": "Nullable(Color)", "desc": "The text color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color values for the text."]}]}, "default": "#444444"}, {"name": "text_font", "type": "String", "desc": "The text font values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font values for the text."]}]}, "default": "helvetica"}, {"name": "text_font_size", "type": "FontSize", "desc": "The text font size values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size values for the text."]}]}, "default": "16px"}, {"name": "text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style values for the text."]}]}, "default": "normal"}, {"name": "text_line_height", "type": "Float", "desc": "The text line height values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height values for the text."]}]}, "default": 1.2}, {"name": "text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color values for the text."]}]}, "default": null}, {"name": "x", "type": "Required(Float)", "desc": "The x-coordinate in screen coordinates to locate the text anchors.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinate in screen coordinates to locate the text anchors."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": "<Undefined>"}, {"name": "x_offset", "type": "Float", "desc": "Offset value to apply to the x-coordinate.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset value to apply to the x-coordinate."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "x_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the x attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the x attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "y", "type": "Required(Float)", "desc": "The y-coordinate in screen coordinates to locate the text anchors.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinate in screen coordinates to locate the text anchors."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": "<Undefined>"}, {"name": "y_offset", "type": "Float", "desc": "Offset value to apply to the y-coordinate.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset value to apply to the y-coordinate."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "y_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the y attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the y attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}]}, {"name": "HTMLLabelSet", "bases": ["HTMLAnnotation", "DataAnnotation"], "mro": ["HTMLLabelSet", "HTMLAnnotation", "DataAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render multiple text labels as annotations.\n\n``LabelSet`` will render multiple text labels at given ``x`` and ``y``\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space. In this case (as opposed to the single ``Label`` model),\n``x`` and ``y`` can also be the name of a column from a\n:class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\nwill be \"vectorized\" using coordinate values from the specified columns.\n\nThe label can also be configured with a screen space offset from ``x`` and\n``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\nmay be vectorized by giving the name of a data source column.\n\nAdditionally, the label can be rotated with the ``angle`` property (which\nmay also be a column name.)\n\nThere are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border.\n\nThe data source is provided by setting the ``source`` property.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render multiple text labels as annotations."]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["LabelSet"]}, " will render multiple text labels at given ", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, "\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space. In this case (as opposed to the single ", {"type": "literal", "children": ["Label"]}, " model),\n", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, " can also be the name of a column from a\n", {"type": "problematic", "children": [":class:`~bokeh.models.sources.ColumnDataSource`"]}, ", in which case the labels\nwill be \"vectorized\" using coordinate values from the specified columns."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "paragraph", "children": ["The label can also be configured with a screen space offset from ", {"type": "literal", "children": ["x"]}, " and\n", {"type": "literal", "children": ["y"]}, ", by using the ", {"type": "literal", "children": ["x_offset"]}, " and ", {"type": "literal", "children": ["y_offset"]}, " properties. These offsets\nmay be vectorized by giving the name of a data source column."]}, {"type": "paragraph", "children": ["Additionally, the label can be rotated with the ", {"type": "literal", "children": ["angle"]}, " property (which\nmay also be a column name.)"]}, {"type": "paragraph", "children": ["There are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border."]}, {"type": "paragraph", "children": ["The data source is provided by setting the ", {"type": "literal", "children": ["source"]}, " property."]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to rotate the text, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to rotate the text, as measured from the horizontal."]}]}, "default": 0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "background_fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "background_fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "border_line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the text bounding box."]}]}, "default": "butt"}, {"name": "border_line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the text bounding box."]}]}, "default": []}, {"name": "border_line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the text bounding box."]}]}, "default": 0}, {"name": "border_line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the text bounding box."]}]}, "default": "bevel"}, {"name": "border_line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the text bounding box."]}]}, "default": 1}, {"name": "text", "type": "NullStringSpec(String, Nullable(String), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(String), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text values to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text values to render."]}]}, "default": {"type": "field", "field": "text"}}, {"name": "text_align", "type": "TextAlignSpec(String, Enum('left', 'right', 'center'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('left', 'right', 'center'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text align values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align values for the text."]}]}, "default": "left"}, {"name": "text_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text alpha values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha values for the text."]}]}, "default": 1.0}, {"name": "text_baseline", "type": "TextBaselineSpec(String, Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text baseline values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline values for the text."]}]}, "default": "bottom"}, {"name": "text_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color values for the text."]}]}, "default": "#444444"}, {"name": "text_font", "type": "StringSpec(String, String, Instance(Value), Instance(Field), Instance(Expr), Struct(value=String, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font values for the text."]}]}, "default": {"type": "value", "value": "helvetica"}}, {"name": "text_font_size", "type": "FontSizeSpec(String, FontSize, Instance(Value), Instance(Field), Instance(Expr), Struct(value=FontSize, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font size values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size values for the text."]}]}, "default": {"type": "value", "value": "16px"}}, {"name": "text_font_style", "type": "FontStyleSpec(String, Enum('normal', 'italic', 'bold', 'bold italic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('normal', 'italic', 'bold', 'bold italic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font style values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style values for the text."]}]}, "default": "normal"}, {"name": "text_line_height", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text line height values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height values for the text."]}]}, "default": 1.2}, {"name": "text_outline_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text outline color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color values for the text."]}]}, "default": null}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to locate the text anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to locate the text anchors."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "x_offset", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Offset values to apply to the x-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset values to apply to the x-coordinates."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "x_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the ``xs`` attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the ", {"type": "literal", "children": ["xs"]}, " attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to locate the text anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to locate the text anchors."]}]}, "default": {"type": "field", "field": "y"}}, {"name": "y_offset", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Offset values to apply to the y-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset values to apply to the y-coordinates."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "y_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the ``ys`` attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the ", {"type": "literal", "children": ["ys"]}, " attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}]}, {"name": "HTMLTemplateFormatter", "bases": ["CellFormatter"], "mro": ["HTMLTemplateFormatter", "CellFormatter", "Model"], "desc": "HTML formatter using a template.\nThis uses Underscore's `template` method and syntax.  http://underscorejs.org/#template\nThe formatter has access other items in the row via the `dataContext` object passed to the formatter.\nSo, for example, if another column in the datasource was named `url`, the template could access it as:\n\n.. code-block:: jinja\n\n    <a href=\"<%= url %>\"><%= value %></a>\n\nTo use a different set of template delimiters, pass the appropriate values for `evaluate`, `interpolate',\nor `escape`.  See the Underscore `template` documentation for more information.  http://underscorejs.org/#template\n\nExample: Simple HTML template to format the column value as code.\n\n.. code-block:: python\n\n    HTMLTemplateFormatter(template='<code><%= value %></code>')\n\nExample: Use values from other columns (`manufacturer` and `model`) to build a hyperlink.\n\n.. code-block:: python\n\n    HTMLTemplateFormatter(template=\n        '<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>'\n    )", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["HTML formatter using a template.\nThis uses Underscore's ", {"type": "title_reference", "children": ["template"]}, " method and syntax.  ", {"type": "reference", "children": ["http://underscorejs.org/#template"]}, "\nThe formatter has access other items in the row via the ", {"type": "title_reference", "children": ["dataContext"]}, " object passed to the formatter.\nSo, for example, if another column in the datasource was named ", {"type": "title_reference", "children": ["url"]}, ", the template could access it as:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["<a href=\"<%= url %>\"><%= value %></a>"]}]}, {"type": "paragraph", "children": ["To use a different set of template delimiters, pass the appropriate values for ", {"type": "title_reference", "children": ["evaluate"]}, ", ", {"type": "title_reference", "children": ["interpolate',\nor `escape"]}, ".  See the Underscore ", {"type": "title_reference", "children": ["template"]}, " documentation for more information.  ", {"type": "reference", "children": ["http://underscorejs.org/#template"]}]}, {"type": "paragraph", "children": ["Example: Simple HTML template to format the column value as code."]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["HTMLTemplateFormatter"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["template"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["'<code><%= value %></code>'"]}, {"type": "inline", "children": [")"]}]}, {"type": "paragraph", "children": ["Example: Use values from other columns (", {"type": "title_reference", "children": ["manufacturer"]}, " and ", {"type": "title_reference", "children": ["model"]}, ") to build a hyperlink."]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["HTMLTemplateFormatter"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["template"]}, {"type": "inline", "children": ["="]}, "\n    ", {"type": "inline", "children": ["'<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>'"]}, "\n", {"type": "inline", "children": [")"]}]}]}, "props": [{"name": "template", "type": "String", "desc": "Template string to be used by Underscore's template method.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Template string to be used by Underscore's template method."]}]}, "default": "<%= value %>"}]}, {"name": "HTMLTitle", "bases": ["HTMLAnnotation"], "mro": ["HTMLTitle", "HTMLAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a single title box as an annotation.\n\nSee :ref:`ug_basic_annotations_titles` for information on plotting titles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a single title box as an annotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_titles`"]}, " for information on plotting titles."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "align", "type": "Enum('left', 'right', 'center')", "desc": "Alignment of the text in its enclosing space, *along* the direction of the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Alignment of the text in its enclosing space, ", {"type": "emphasis", "children": ["along"]}, " the direction of the text."]}]}, "default": "left"}, {"name": "background_fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "background_fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_alpha", "type": "Alpha", "desc": "The line alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "border_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the text bounding box."]}]}, "default": "butt"}, {"name": "border_line_color", "type": "Nullable(Color)", "desc": "The line color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_dash", "type": "DashPattern", "desc": "The line dash values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the text bounding box."]}]}, "default": []}, {"name": "border_line_dash_offset", "type": "Int", "desc": "The line dash offset values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the text bounding box."]}]}, "default": 0}, {"name": "border_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the text bounding box."]}]}, "default": "bevel"}, {"name": "border_line_width", "type": "Float", "desc": "The line width values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the text bounding box."]}]}, "default": 1}, {"name": "offset", "type": "Float", "desc": "Offset the text by a number of pixels (can be positive or negative). Shifts the text in\ndifferent directions based on the location of the title:\n\n    * above: shifts title right\n    * right: shifts title down\n    * below: shifts title right\n    * left: shifts title up", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset the text by a number of pixels (can be positive or negative). Shifts the text in\ndifferent directions based on the location of the title:"]}, {"type": "block_quote", "children": [{"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["above: shifts title right"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["right: shifts title down"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["below: shifts title right"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["left: shifts title up"]}]}]}]}]}, "default": 0}, {"name": "standoff", "type": "Float", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": 10}, {"name": "text", "type": "String", "desc": "The text value to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text value to render."]}]}, "default": ""}, {"name": "text_alpha", "type": "Alpha", "desc": "An alpha value to use to fill text with.\n\nAcceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to fill text with."]}, {"type": "paragraph", "children": ["Acceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque)."]}]}, "default": 1.0}, {"name": "text_color", "type": "Color", "desc": "A color to use to fill text with.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to fill text with."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ",\n", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}, ", or ", {"type": "literal", "children": ["'hsl(60deg 100% 50% / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\nand a is between 0 and 1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern"]}]}]}]}, "default": "#444444"}, {"name": "text_font", "type": "String", "desc": "Name of a font to use for rendering text, e.g., ``'times'``,\n``'helvetica'``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Name of a font to use for rendering text, e.g., ", {"type": "literal", "children": ["'times'"]}, ",\n", {"type": "literal", "children": ["'helvetica'"]}, "."]}]}, "default": "helvetica"}, {"name": "text_font_size", "type": "String", "desc": "", "richdesc": {"type": "document", "children": []}, "default": "13px"}, {"name": "text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "A style to use for rendering text.\n\nAcceptable values are:\n\n- ``'normal'`` normal text\n- ``'italic'`` *italic text*\n- ``'bold'`` **bold text**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A style to use for rendering text."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'normal'"]}, " normal text"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'italic'"]}, " ", {"type": "emphasis", "children": ["italic text"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'bold'"]}, " ", {"type": "strong", "children": ["bold text"]}]}]}]}]}, "default": "bold"}, {"name": "text_line_height", "type": "Float", "desc": "How much additional space should be allocated for the title. The value is provided\nas a number, but should be treated as a percentage of font size. The default is\n100%, which means no additional space will be used.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How much additional space should be allocated for the title. The value is provided\nas a number, but should be treated as a percentage of font size. The default is\n100%, which means no additional space will be used."]}]}, "default": 1.0}, {"name": "text_outline_color", "type": "Nullable(Color)", "desc": "A color to use to fill text with.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to fill text with."]}]}, "default": null}, {"name": "vertical_align", "type": "Enum('top', 'middle', 'bottom')", "desc": "Alignment of the text in its enclosing space, *across* the direction of the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Alignment of the text in its enclosing space, ", {"type": "emphasis", "children": ["across"]}, " the direction of the text."]}]}, "default": "bottom"}]}, {"name": "HatchGlyph", "bases": ["Glyph"], "mro": ["HatchGlyph", "Glyph", "Model"], "desc": "Glyphs with Hatch properties\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyphs with Hatch properties"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "HatchProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering fill regions.\n\nMirrors the BokehJS ``properties.HatchVector`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering fill regions."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.HatchVector"]}, " class."]}]}, "props": [{"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "An alpha value to use to hatching with.\n\n    Acceptable values are numbers in 0..1 range (transparent..opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to hatching with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are numbers in 0..1 range (transparent..opaque)."]}]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A color to use to hatching with.\n\n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``, ``'rgb(0 127 0 / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1\n    - a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to hatching with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ", ", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern"]}]}]}]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Built-in patterns are can either be specified as long names:\n\nblank, dot, ring, horizontal_line, vertical_line, cross, horizontal_dash, vertical_dash, spiral, right_diagonal_line, left_diagonal_line, diagonal_cross, right_diagonal_dash, left_diagonal_dash, horizontal_wave, vertical_wave, criss_cross\n\nor as one-letter abbreviations:\n\n' ', '.', 'o', '-', '|', '+', '\"', ':', '@', '/', '\\\\', 'x', ',', '`', 'v', '>', '*'", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Built-in patterns are can either be specified as long names:"]}, {"type": "paragraph", "children": ["blank, dot, ring, horizontal_line, vertical_line, cross, horizontal_dash, vertical_dash, spiral, right_diagonal_line, left_diagonal_line, diagonal_cross, right_diagonal_dash, left_diagonal_dash, horizontal_wave, vertical_wave, criss_cross"]}, {"type": "paragraph", "children": ["or as one-letter abbreviations:"]}, {"type": "paragraph", "children": ["' ', '.', 'o', '-', '|', '+', '\"', ':', '@', '/', '\u0000\\', 'x', ',', '`', 'v', '>', '*'"]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A rough measure of the 'size' of the hatching pattern. Generally speaking, the\nhigher the number, the more spread out the pattern will be.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A rough measure of the 'size' of the hatching pattern. Generally speaking, the\nhigher the number, the more spread out the pattern will be."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A width value for line-strokes used in hatching.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A width value for line-strokes used in hatching."]}]}, "default": 1.0}]}, {"name": "HelpButton", "bases": ["AbstractButton"], "mro": ["HelpButton", "AbstractButton", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A button with a help symbol that displays additional text when hovered\nover or clicked.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A button with a help symbol that displays additional text when hovered\nover or clicked."]}]}, "props": [{"name": "tooltip", "type": "Required(Instance(Tooltip))", "desc": "A tooltip with plain text or rich HTML contents, providing general help or\ndescription of a widget's or component's function.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A tooltip with plain text or rich HTML contents, providing general help or\ndescription of a widget's or component's function."]}]}, "default": "<Undefined>"}]}, {"name": "HelpTool", "bases": ["ActionTool"], "mro": ["HelpTool", "ActionTool", "Tool", "Model"], "desc": "A button tool to provide a \"help\" link to users.\n\nThe hover text can be customized through the ``help_tooltip`` attribute\nand the redirect site overridden as well.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A button tool to provide a \"help\" link to users."]}, {"type": "paragraph", "children": ["The hover text can be customized through the ", {"type": "literal", "children": ["help_tooltip"]}, " attribute\nand the redirect site overridden as well."]}]}, "props": [{"name": "redirect", "type": "String", "desc": "Site to be redirected through upon click.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Site to be redirected through upon click."]}]}, "default": "https://docs.bokeh.org/en/latest/docs/user_guide/tools.html"}]}, {"name": "HexTile", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["HexTile", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render horizontal tiles on a regular hexagonal grid.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/HexTile.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render horizontal tiles on a regular hexagonal grid."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/HexTile.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "aspect_scale", "type": "Float", "desc": "Match a plot's aspect ratio scaling.\n\nUse this parameter to match the aspect ratio scaling of a plot when using\n:class:`~bokeh.models.Plot.aspect_scale` with a value other than ``1.0``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Match a plot's aspect ratio scaling."]}, {"type": "paragraph", "children": ["Use this parameter to match the aspect ratio scaling of a plot when using\n", {"type": "problematic", "children": [":class:`~bokeh.models.Plot.aspect_scale`"]}, " with a value other than ", {"type": "literal", "children": ["1.0"]}, "."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": 1.0}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the hex tiles."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the hex tiles."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the hex tiles."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the hex tiles."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the hex tiles."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the hex tiles."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the hex tiles."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the hex tiles."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the hex tiles."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the hex tiles."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the hex tiles."]}]}, "default": null}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the hex tiles."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the hex tiles."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the hex tiles."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the hex tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the hex tiles."]}]}, "default": 1}, {"name": "orientation", "type": "String", "desc": "The orientation of the hex tiles.\n\nUse ``\"pointytop\"`` to orient the tile so that a pointed corner is at the top. Use\n``\"flattop\"`` to orient the tile so that a flat side is at the top.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The orientation of the hex tiles."]}, {"type": "paragraph", "children": ["Use ", {"type": "literal", "children": ["\"pointytop\""]}, " to orient the tile so that a pointed corner is at the top. Use\n", {"type": "literal", "children": ["\"flattop\""]}, " to orient the tile so that a flat side is at the top."]}]}, "default": "pointytop"}, {"name": "q", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The \"column\" axial coordinates of the tile centers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The \"column\" axial coordinates of the tile centers."]}]}, "default": {"type": "field", "field": "q"}}, {"name": "r", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The \"row\" axial coordinates of the tile centers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The \"row\" axial coordinates of the tile centers."]}]}, "default": {"type": "field", "field": "r"}}, {"name": "scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A scale factor for individual tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A scale factor for individual tiles."]}]}, "default": 1.0}, {"name": "size", "type": "Float", "desc": "The radius (in |data units|) of the hex tiling.\n\nThe radius is always measured along the cartesian y-axis for \"pointy_top\"\norientation, and along the cartesian x-axis for \"flat_top\" orientation. If\nthe aspect ratio of the underlying cartesian system is not 1-1, then the\ntiles may be \"squished\" in one direction. To ensure that the tiles are\nalways regular hexagons, consider setting the ``match_aspect`` property of\nthe plot to True.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The radius (in ", {"type": "substitution_reference", "children": ["data units"]}, ") of the hex tiling."]}, {"type": "paragraph", "children": ["The radius is always measured along the cartesian y-axis for \"pointy_top\"\norientation, and along the cartesian x-axis for \"flat_top\" orientation. If\nthe aspect ratio of the underlying cartesian system is not 1-1, then the\ntiles may be \"squished\" in one direction. To ensure that the tiles are\nalways regular hexagons, consider setting the ", {"type": "literal", "children": ["match_aspect"]}, " property of\nthe plot to True."]}]}, "default": 1.0}]}, {"name": "HoverTool", "bases": ["InspectTool"], "mro": ["HoverTool", "InspectTool", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |hover_icon|\n\nThe hover tool is a passive inspector tool. It is generally on at all\ntimes, but can be configured in the inspector's menu associated with the\n*toolbar icon* shown above.\n\nBy default, the hover tool displays informational tooltips whenever the\ncursor is directly over a glyph. The data to show comes from the glyph's\ndata source, and what to display is configurable with the ``tooltips``\nproperty that maps display names to columns in the data source, or to\nspecial known variables.\n\nHere is an example of how to configure and use the hover tool::\n\n    # Add tooltip (name, field) pairs to the tool. See below for a\n    # description of possible field values.\n    hover.tooltips = [\n        (\"index\", \"$index\"),\n        (\"(x,y)\", \"($x, $y)\"),\n        (\"radius\", \"@radius\"),\n        (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n        (\"fill color\", \"$color[hex]:fill_color\"),\n        (\"fill color\", \"$color:fill_color\"),\n        (\"fill color\", \"$swatch:fill_color\"),\n        (\"foo\", \"@foo\"),\n        (\"bar\", \"@bar\"),\n        (\"baz\", \"@baz{safe}\"),\n        (\"total\", \"@total{$0,0.00}\"\n    ]\n\nYou can also supply a ``Callback`` to the ``HoverTool``, to build custom\ninteractions on hover. In this case you may want to turn the tooltips\noff by setting ``tooltips=None``.\n\n.. warning::\n    When supplying a callback or custom template, the explicit intent\n    of this Bokeh Model is to embed *raw HTML and  JavaScript code* for\n    a browser to execute. If any part of the code is derived from untrusted\n    user inputs, then you must take appropriate care to sanitize the user\n    input prior to passing to Bokeh.\n\nHover tool does not currently work with the following glyphs:\n\n    .. hlist::\n        :columns: 3\n\n        * annulus\n        * arc\n        * bezier\n        * image_url\n        * oval\n        * patch\n        * quadratic\n        * ray\n        * step\n        * text\n\n.. |hover_icon| image:: /_images/icons/Hover.png\n    :height: 24px\n    :alt: Icon of a popup tooltip with abstract lines of text representing the hover tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["hover_icon"]}]}, {"type": "paragraph", "children": ["The hover tool is a passive inspector tool. It is generally on at all\ntimes, but can be configured in the inspector's menu associated with the\n", {"type": "emphasis", "children": ["toolbar icon"]}, " shown above."]}, {"type": "paragraph", "children": ["By default, the hover tool displays informational tooltips whenever the\ncursor is directly over a glyph. The data to show comes from the glyph's\ndata source, and what to display is configurable with the ", {"type": "literal", "children": ["tooltips"]}, "\nproperty that maps display names to columns in the data source, or to\nspecial known variables."]}, {"type": "paragraph", "children": ["Here is an example of how to configure and use the hover tool:"]}, {"type": "literal_block", "children": ["# Add tooltip (name, field) pairs to the tool. See below for a\n# description of possible field values.\nhover.tooltips = [\n    (\"index\", \"$index\"),\n    (\"(x,y)\", \"($x, $y)\"),\n    (\"radius\", \"@radius\"),\n    (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n    (\"fill color\", \"$color[hex]:fill_color\"),\n    (\"fill color\", \"$color:fill_color\"),\n    (\"fill color\", \"$swatch:fill_color\"),\n    (\"foo\", \"@foo\"),\n    (\"bar\", \"@bar\"),\n    (\"baz\", \"@baz{safe}\"),\n    (\"total\", \"@total{$0,0.00}\"\n]"]}, {"type": "paragraph", "children": ["You can also supply a ", {"type": "literal", "children": ["Callback"]}, " to the ", {"type": "literal", "children": ["HoverTool"]}, ", to build custom\ninteractions on hover. In this case you may want to turn the tooltips\noff by setting ", {"type": "literal", "children": ["tooltips=None"]}, "."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["When supplying a callback or custom template, the explicit intent\nof this Bokeh Model is to embed ", {"type": "emphasis", "children": ["raw HTML and  JavaScript code"]}, " for\na browser to execute. If any part of the code is derived from untrusted\nuser inputs, then you must take appropriate care to sanitize the user\ninput prior to passing to Bokeh."]}]}, {"type": "paragraph", "children": ["Hover tool does not currently work with the following glyphs:"]}, {"type": "block_quote", "children": [{"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"hlist\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"hlist\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"hlist\"."]}, {"type": "literal_block", "children": [".. hlist::\n    :columns: 3\n\n    * annulus\n    * arc\n    * bezier\n    * image_url\n    * oval\n    * patch\n    * quadratic\n    * ray\n    * step\n    * text\n"]}]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "anchor", "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom')", "desc": "If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\npoint of a tooltip. The default is to attach to the center of a glyph.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["If point policy is set to ", {"type": "title_reference", "children": ["\"snap_to_data\""]}, ", ", {"type": "title_reference", "children": ["anchor"]}, " defines the attachment\npoint of a tooltip. The default is to attach to the center of a glyph."]}]}, "default": "center"}, {"name": "attachment", "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')", "desc": "Whether the tooltip should be displayed to the left or right of the cursor\nposition or above or below it, or if it should be automatically placed\nin the horizontal or vertical dimension.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the tooltip should be displayed to the left or right of the cursor\nposition or above or below it, or if it should be automatically placed\nin the horizontal or vertical dimension."]}]}, "default": "horizontal"}, {"name": "callback", "type": "Nullable(Instance(Callback))", "desc": "A callback to run in the browser whenever the input's value changes. The\n``cb_data`` parameter that is available to the Callback code will contain two\n``HoverTool`` specific fields:\n\n:index: object containing the indices of the hovered points in the data source\n:geometry: object containing the coordinates of the hover cursor", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A callback to run in the browser whenever the input's value changes. The\n", {"type": "literal", "children": ["cb_data"]}, " parameter that is available to the Callback code will contain two\n", {"type": "literal", "children": ["HoverTool"]}, " specific fields:"]}, {"type": "field_list", "children": [{"type": "field", "children": [{"type": "field_name", "children": ["index"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["object containing the indices of the hovered points in the data source"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["geometry"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["object containing the coordinates of the hover cursor"]}]}]}]}]}, "default": null}, {"name": "formatters", "type": "Dict(String, Either(Enum('numeral', 'datetime', 'printf'), Instance(CustomJSHover)))", "desc": "Specify the formatting scheme for data source columns, e.g.\n\n.. code-block:: python\n\n    tool.formatters = {\"@date\": \"datetime\"}\n\nwill cause format specifications for the \"date\" column to be interpreted\naccording to the \"datetime\" formatting scheme. The following schemes are\navailable:\n\n:\"numeral\":\n    Provides a wide variety of formats for numbers, currency, bytes, times,\n    and percentages. The full set of formats can be found in the\n    |NumeralTickFormatter| reference documentation.\n\n:\"datetime\":\n    Provides formats for date and time values. The full set of formats is\n    listed in the |DatetimeTickFormatter| reference documentation.\n\n:\"printf\":\n    Provides formats similar to C-style \"printf\" type specifiers. See the\n    |PrintfTickFormatter| reference documentation for complete details.\n\nIf no formatter is specified for a column name, the default ``\"numeral\"``\nformatter is assumed.\n\n.. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`\n.. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`\n.. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify the formatting scheme for data source columns, e.g."]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["tool"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["formatters"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["{"]}, {"type": "inline", "children": ["\"@date\""]}, {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["\"datetime\""]}, {"type": "inline", "children": ["}"]}]}, {"type": "paragraph", "children": ["will cause format specifications for the \"date\" column to be interpreted\naccording to the \"datetime\" formatting scheme. The following schemes are\navailable:"]}, {"type": "field_list", "children": [{"type": "field", "children": [{"type": "field_name", "children": ["\"numeral\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["Provides a wide variety of formats for numbers, currency, bytes, times,\nand percentages. The full set of formats can be found in the\n", {"type": "substitution_reference", "children": ["NumeralTickFormatter"]}, " reference documentation."]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["\"datetime\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["Provides formats for date and time values. The full set of formats is\nlisted in the ", {"type": "substitution_reference", "children": ["DatetimeTickFormatter"]}, " reference documentation."]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["\"printf\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["Provides formats similar to C-style \"printf\" type specifiers. See the\n", {"type": "substitution_reference", "children": ["PrintfTickFormatter"]}, " reference documentation for complete details."]}]}]}]}, {"type": "paragraph", "children": ["If no formatter is specified for a column name, the default ", {"type": "literal", "children": ["\"numeral\""]}, "\nformatter is assumed."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Substitution definition contains illegal element <problematic>:"]}, {"type": "literal_block", "children": ["<problematic ids=\"problematic-1\" refid=\"system-message-1\">\n    :class:`~bokeh.models.formatters.NumeralTickFormatter`"]}, {"type": "literal_block", "children": [".. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Substitution definition contains illegal element <problematic>:"]}, {"type": "literal_block", "children": ["<problematic ids=\"problematic-2\" refid=\"system-message-2\">\n    :class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}, {"type": "literal_block", "children": [".. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`"]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Substitution definition contains illegal element <problematic>:"]}, {"type": "literal_block", "children": ["<problematic ids=\"problematic-3\" refid=\"system-message-3\">\n    :class:`~bokeh.models.formatters.PrintfTickFormatter`"]}, {"type": "literal_block", "children": [".. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`"]}]}]}, "default": {}}, {"name": "line_policy", "type": "Enum('prev', 'next', 'nearest', 'interp', 'none')", "desc": "Specifies where the tooltip will be positioned when hovering over line\nglyphs:\n\n:\"prev\": between the nearest two adjacent line points, positions the\n    tooltip at the point with the lower (\"previous\") index\n:\"next\": between the nearest two adjacent line points, positions the\n    tooltip at the point with the higher (\"next\") index\n:\"nearest\": between the nearest two adjacent line points, positions the\n    tooltip on the point that is nearest to the mouse cursor location\n:\"interp\": positions the tooltip at an interpolated point on the segment\n    joining the two nearest adjacent line points.\n:\"none\": positions the tooltip directly under the mouse cursor location", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specifies where the tooltip will be positioned when hovering over line\nglyphs:"]}, {"type": "field_list", "children": [{"type": "field", "children": [{"type": "field_name", "children": ["\"prev\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["between the nearest two adjacent line points, positions the\ntooltip at the point with the lower (\"previous\") index"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["\"next\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["between the nearest two adjacent line points, positions the\ntooltip at the point with the higher (\"next\") index"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["\"nearest\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["between the nearest two adjacent line points, positions the\ntooltip on the point that is nearest to the mouse cursor location"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["\"interp\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["positions the tooltip at an interpolated point on the segment\njoining the two nearest adjacent line points."]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["\"none\""]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["positions the tooltip directly under the mouse cursor location"]}]}]}]}]}, "default": "nearest"}, {"name": "mode", "type": "Enum('mouse', 'hline', 'vline')", "desc": "Whether to consider hover pointer as a point (x/y values), or a\nspan on h or v directions.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to consider hover pointer as a point (x/y values), or a\nspan on h or v directions."]}]}, "default": "mouse"}, {"name": "muted_policy", "type": "Enum('show', 'ignore')", "desc": "Whether to avoid showing tooltips on muted glyphs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to avoid showing tooltips on muted glyphs."]}]}, "default": "show"}, {"name": "point_policy", "type": "Enum('snap_to_data', 'follow_mouse', 'none')", "desc": "Whether the tooltip position should snap to the \"center\" (or other anchor)\nposition of the associated glyph, or always follow the current mouse cursor\nposition.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the tooltip position should snap to the \"center\" (or other anchor)\nposition of the associated glyph, or always follow the current mouse cursor\nposition."]}]}, "default": "snap_to_data"}, {"name": "renderers", "type": "Either(Auto, List(Instance(DataRenderer)))", "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot."]}]}, "default": "auto"}, {"name": "show_arrow", "type": "Bool", "desc": "Whether tooltip's arrow should be shown.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether tooltip's arrow should be shown."]}]}, "default": true}, {"name": "tooltips", "type": "Either(Null, Instance(Template), String, List(Tuple(String, String)))", "desc": "The (name, field) pairs describing what the hover tool should\ndisplay when there is a hit.\n\nField names starting with \"@\" are interpreted as columns on the\ndata source. For instance, \"@temp\" would look up values to display\nfrom the \"temp\" column of the data source.\n\nField names starting with \"$\" are special, known fields:\n\n:$index: index of hovered point in the data source\n:$name: value of the ``name`` property of the hovered glyph renderer\n:$x: x-coordinate under the cursor in data space\n:$y: y-coordinate under the cursor in data space\n:$sx: x-coordinate under the cursor in screen (canvas) space\n:$sy: y-coordinate under the cursor in screen (canvas) space\n:$color: color data from data source, with the syntax:\n    ``$color[options]:field_name``. The available options\n    are: ``hex`` (to display the color as a hex value), ``swatch``\n    (color data from data source displayed as a small color box)\n:$swatch: color data from data source displayed as a small color box\n\nField names that begin with ``@`` are associated with columns in a\n``ColumnDataSource``. For instance the field name ``\"@price\"`` will\ndisplay values from the ``\"price\"`` column whenever a hover is triggered.\nIf the hover is for the 17th glyph, then the hover tooltip will\ncorrespondingly display the 17th price value.\n\nNote that if a column name contains spaces, the it must be supplied by\nsurrounding it in curly braces, e.g. ``@{adjusted close}`` will display\nvalues from a column named ``\"adjusted close\"``.\n\nSometimes (especially with stacked charts) it is desirable to allow the\nname of the column be specified indirectly. The field name ``@$name`` is\ndistinguished in that it will look up the ``name`` field on the hovered\nglyph renderer, and use that value as the column name. For instance, if\na user hovers with the name ``\"US East\"``, then ``@$name`` is equivalent to\n``@{US East}``.\n\nBy default, values for fields (e.g. ``@foo``) are displayed in a basic\nnumeric format. However it is possible to control the formatting of values\nmore precisely. Fields can be modified by appending a format specified to\nthe end in curly braces. Some examples are below.\n\n.. code-block:: python\n\n    \"@foo{0,0.000}\"    # formats 10000.1234 as: 10,000.123\n\n    \"@foo{(.00)}\"      # formats -10000.1234 as: (10000.123)\n\n    \"@foo{($ 0.00 a)}\" # formats 1230974 as: $ 1.23 m\n\nSpecifying a format ``{safe}`` after a field name will override automatic\nescaping of the tooltip data source. Any HTML tags in the data tags will\nbe rendered as HTML in the resulting HoverTool output. See\n:ref:`custom_hover_tooltip` for a more detailed example.\n\n``None`` is also a valid value for tooltips. This turns off the\nrendering of tooltips. This is mostly useful when supplying other\nactions on hover via the callback property.\n\n.. note::\n    The tooltips attribute can also be configured with a mapping type,\n    e.g. ``dict`` or ``OrderedDict``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The (name, field) pairs describing what the hover tool should\ndisplay when there is a hit."]}, {"type": "paragraph", "children": ["Field names starting with \"@\" are interpreted as columns on the\ndata source. For instance, \"@temp\" would look up values to display\nfrom the \"temp\" column of the data source."]}, {"type": "paragraph", "children": ["Field names starting with \"$\" are special, known fields:"]}, {"type": "field_list", "children": [{"type": "field", "children": [{"type": "field_name", "children": ["$index"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["index of hovered point in the data source"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["$name"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["value of the ", {"type": "literal", "children": ["name"]}, " property of the hovered glyph renderer"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["$x"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["x-coordinate under the cursor in data space"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["$y"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["y-coordinate under the cursor in data space"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["$sx"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["x-coordinate under the cursor in screen (canvas) space"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["$sy"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["y-coordinate under the cursor in screen (canvas) space"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["$color"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["color data from data source, with the syntax:\n", {"type": "literal", "children": ["$color[options]:field_name"]}, ". The available options\nare: ", {"type": "literal", "children": ["hex"]}, " (to display the color as a hex value), ", {"type": "literal", "children": ["swatch"]}, "\n(color data from data source displayed as a small color box)"]}]}]}, {"type": "field", "children": [{"type": "field_name", "children": ["$swatch"]}, {"type": "field_body", "children": [{"type": "paragraph", "children": ["color data from data source displayed as a small color box"]}]}]}]}, {"type": "paragraph", "children": ["Field names that begin with ", {"type": "literal", "children": ["@"]}, " are associated with columns in a\n", {"type": "literal", "children": ["ColumnDataSource"]}, ". For instance the field name ", {"type": "literal", "children": ["\"@price\""]}, " will\ndisplay values from the ", {"type": "literal", "children": ["\"price\""]}, " column whenever a hover is triggered.\nIf the hover is for the 17th glyph, then the hover tooltip will\ncorrespondingly display the 17th price value."]}, {"type": "paragraph", "children": ["Note that if a column name contains spaces, the it must be supplied by\nsurrounding it in curly braces, e.g. ", {"type": "literal", "children": ["@{adjusted close}"]}, " will display\nvalues from a column named ", {"type": "literal", "children": ["\"adjusted close\""]}, "."]}, {"type": "paragraph", "children": ["Sometimes (especially with stacked charts) it is desirable to allow the\nname of the column be specified indirectly. The field name ", {"type": "literal", "children": ["@$name"]}, " is\ndistinguished in that it will look up the ", {"type": "literal", "children": ["name"]}, " field on the hovered\nglyph renderer, and use that value as the column name. For instance, if\na user hovers with the name ", {"type": "literal", "children": ["\"US East\""]}, ", then ", {"type": "literal", "children": ["@$name"]}, " is equivalent to\n", {"type": "literal", "children": ["@{US East}"]}, "."]}, {"type": "paragraph", "children": ["By default, values for fields (e.g. ", {"type": "literal", "children": ["@foo"]}, ") are displayed in a basic\nnumeric format. However it is possible to control the formatting of values\nmore precisely. Fields can be modified by appending a format specified to\nthe end in curly braces. Some examples are below."]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["\"@foo{0,0.000}\""]}, "    ", {"type": "inline", "children": ["# formats 10000.1234 as: 10,000.123"]}, "\n\n", {"type": "inline", "children": ["\"@foo{(.00)}\""]}, "      ", {"type": "inline", "children": ["# formats -10000.1234 as: (10000.123)"]}, "\n\n", {"type": "inline", "children": ["\"@foo{($ 0.00 a)}\""]}, " ", {"type": "inline", "children": ["# formats 1230974 as: $ 1.23 m"]}]}, {"type": "paragraph", "children": ["Specifying a format ", {"type": "literal", "children": ["{safe}"]}, " after a field name will override automatic\nescaping of the tooltip data source. Any HTML tags in the data tags will\nbe rendered as HTML in the resulting HoverTool output. See\n", {"type": "problematic", "children": [":ref:`custom_hover_tooltip`"]}, " for a more detailed example."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["None"]}, " is also a valid value for tooltips. This turns off the\nrendering of tooltips. This is mostly useful when supplying other\nactions on hover via the callback property."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["The tooltips attribute can also be configured with a mapping type,\ne.g. ", {"type": "literal", "children": ["dict"]}, " or ", {"type": "literal", "children": ["OrderedDict"]}, "."]}]}]}, "default": [["index", "$index"], ["data (x, y)", "($x, $y)"], ["screen (x, y)", "($sx, $sy)"]]}]}, {"name": "Icon", "bases": ["Model"], "mro": ["Icon", "Model"], "desc": "An abstract base class for icon elements.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An abstract base class for icon elements."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "size", "type": "Either(Int, FontSize)", "desc": "The size of the icon. This can be either a number of pixels, or a CSS\nlength string (see https://developer.mozilla.org/en-US/docs/Web/CSS/length).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The size of the icon. This can be either a number of pixels, or a CSS\nlength string (see ", {"type": "reference", "children": ["https://developer.mozilla.org/en-US/docs/Web/CSS/length"]}, ")."]}]}, "default": "1em"}]}, {"name": "Image", "bases": ["ImageBase"], "mro": ["Image", "ImageBase", "XYGlyph", "Glyph", "Model"], "desc": "Render images given as scalar data together with a color mapper.\n\nIn addition to the defined model properties, ``Image`` also can accept\na keyword argument ``palette`` in place of an explicit ``color_mapper``.\nThe value should be a list of colors, or the name of one of the built-in\npalettes in ``bokeh.palettes``. This palette will be used to automatically\nconstruct a ``ColorMapper`` model for the ``color_mapper`` property.\n\nIf both ``palette`` and ``color_mapper`` are passed, a ``ValueError``\nexception will be raised. If neither is passed, then the ``Greys9``\npalette will be used as a default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render images given as scalar data together with a color mapper."]}, {"type": "paragraph", "children": ["In addition to the defined model properties, ", {"type": "literal", "children": ["Image"]}, " also can accept\na keyword argument ", {"type": "literal", "children": ["palette"]}, " in place of an explicit ", {"type": "literal", "children": ["color_mapper"]}, ".\nThe value should be a list of colors, or the name of one of the built-in\npalettes in ", {"type": "literal", "children": ["bokeh.palettes"]}, ". This palette will be used to automatically\nconstruct a ", {"type": "literal", "children": ["ColorMapper"]}, " model for the ", {"type": "literal", "children": ["color_mapper"]}, " property."]}, {"type": "paragraph", "children": ["If both ", {"type": "literal", "children": ["palette"]}, " and ", {"type": "literal", "children": ["color_mapper"]}, " are passed, a ", {"type": "literal", "children": ["ValueError"]}, "\nexception will be raised. If neither is passed, then the ", {"type": "literal", "children": ["Greys9"]}, "\npalette will be used as a default."]}]}, "props": [{"name": "color_mapper", "type": "Instance(ColorMapper)", "desc": "A ``ColorMapper`` to use to map the scalar data from ``image``\ninto RGBA values for display.\n\nThe name of a palette from ``bokeh.palettes`` may also be set, in which\ncase a ``LinearColorMapper`` configured with the named palette wil be used.\n\n.. note::\n    The color mapping step happens on the client.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["ColorMapper"]}, " to use to map the scalar data from ", {"type": "literal", "children": ["image"]}, "\ninto RGBA values for display."]}, {"type": "paragraph", "children": ["The name of a palette from ", {"type": "literal", "children": ["bokeh.palettes"]}, " may also be set, in which\ncase a ", {"type": "literal", "children": ["LinearColorMapper"]}, " configured with the named palette wil be used."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["The color mapping step happens on the client."]}]}]}, "default": "{\"__type__\": \"LinearColorMapper\", \"attributes\": {\"palette\": [\"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#bdbdbd\", \"#d9d9d9\", \"#f0f0f0\", \"#ffffff\"]}, \"name\": \"LinearColorMapper\", \"type\": \"object\"}"}, {"name": "image", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The arrays of scalar data for the images to be colormapped.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The arrays of scalar data for the images to be colormapped."]}]}, "default": {"type": "field", "field": "image"}}]}, {"name": "ImageBase", "bases": ["XYGlyph"], "mro": ["ImageBase", "XYGlyph", "Glyph", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "anchor", "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Either(Enum('start', 'center', 'end'), Enum('top', 'center', 'bottom'), Percent), Either(Enum('start', 'center', 'end'), Enum('left', 'center', 'right'), Percent)))", "desc": "Position of the image should be anchored at the `x`, `y` coordinates.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Position of the image should be anchored at the ", {"type": "title_reference", "children": ["x"]}, ", ", {"type": "title_reference", "children": ["y"]}, " coordinates."]}]}, "default": "bottom_left"}, {"name": "dh", "type": "DistanceSpec(units_default='data')", "desc": "The height of the plot region that the image will occupy.\n\n.. note::\n    This is not the number of pixels that an image is tall.\n    That number is fixed by the image itself.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The height of the plot region that the image will occupy."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is not the number of pixels that an image is tall.\nThat number is fixed by the image itself."]}]}]}, "default": {"type": "field", "field": "dh"}}, {"name": "dh_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "dilate", "type": "Bool", "desc": "Whether to always round fractional pixel locations in such a way\nas to make the images bigger.\n\nThis setting may be useful if pixel rounding errors are causing\nimages to have a gap between them, when they should appear flush.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to always round fractional pixel locations in such a way\nas to make the images bigger."]}, {"type": "paragraph", "children": ["This setting may be useful if pixel rounding errors are causing\nimages to have a gap between them, when they should appear flush."]}]}, "default": false}, {"name": "dw", "type": "DistanceSpec(units_default='data')", "desc": "The widths of the plot regions that the images will occupy.\n\n.. note::\n    This is not the number of pixels that an image is wide.\n    That number is fixed by the image itself.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The widths of the plot regions that the images will occupy."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is not the number of pixels that an image is wide.\nThat number is fixed by the image itself."]}]}]}, "default": {"type": "field", "field": "dw"}}, {"name": "dw_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "global_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The global alpha values for the images.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The global alpha values for the images."]}]}, "default": 1.0}, {"name": "origin", "type": "Enum('bottom_left', 'top_left', 'bottom_right', 'top_right')", "desc": "Defines the coordinate space of an image.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines the coordinate space of an image."]}]}, "default": "bottom_left"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to locate the image anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to locate the image anchors."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to locate the image anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to locate the image anchors."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "ImageProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering images.\n\nMirrors the BokehJS ``properties.ImageVector`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering images."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.ImageVector"]}, " class."]}]}, "props": [{"name": "global_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "An alpha value to use to images with.\n\n    Acceptable values are numbers in 0..1 range (transparent..opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to images with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are numbers in 0..1 range (transparent..opaque)."]}]}]}, "default": 1.0}]}, {"name": "ImageRGBA", "bases": ["ImageBase"], "mro": ["ImageRGBA", "ImageBase", "XYGlyph", "Glyph", "Model"], "desc": "Render images given as RGBA data.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render images given as RGBA data."]}]}, "props": [{"name": "image", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The arrays of RGBA data for the images.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The arrays of RGBA data for the images."]}]}, "default": {"type": "field", "field": "image"}}]}, {"name": "ImageURL", "bases": ["XYGlyph"], "mro": ["ImageURL", "XYGlyph", "Glyph", "Model"], "desc": "Render images loaded from given URLs.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/ImageURL.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render images loaded from given URLs."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/ImageURL.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "anchor", "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom')", "desc": "Position of the image should be anchored at the `x`, `y` coordinates.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Position of the image should be anchored at the ", {"type": "title_reference", "children": ["x"]}, ", ", {"type": "title_reference", "children": ["y"]}, " coordinates."]}]}, "default": "top_left"}, {"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to rotate the images, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to rotate the images, as measured from the horizontal."]}]}, "default": 0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "dilate", "type": "Bool", "desc": "Whether to always round fractional pixel locations in such a way\nas to make the images bigger.\n\nThis setting may be useful if pixel rounding errors are causing\nimages to have a gap between them, when they should appear flush.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to always round fractional pixel locations in such a way\nas to make the images bigger."]}, {"type": "paragraph", "children": ["This setting may be useful if pixel rounding errors are causing\nimages to have a gap between them, when they should appear flush."]}]}, "default": false}, {"name": "global_alpha", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "An overall opacity that each image is rendered with (in addition\nto any inherent alpha values in the image itself).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An overall opacity that each image is rendered with (in addition\nto any inherent alpha values in the image itself)."]}]}, "default": 1.0}, {"name": "h", "type": "NullDistanceSpec(units_default='data')", "desc": "The height of the plot region that the image will occupy in data space.\n\nThe default value is ``None``, in which case the image will be displayed\nat its actual image size (regardless of the units specified here).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The height of the plot region that the image will occupy in data space."]}, {"type": "paragraph", "children": ["The default value is ", {"type": "literal", "children": ["None"]}, ", in which case the image will be displayed\nat its actual image size (regardless of the units specified here)."]}]}, "default": null}, {"name": "h_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "retry_attempts", "type": "Int", "desc": "Number of attempts to retry loading the images from the specified URL.\nDefault is zero.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Number of attempts to retry loading the images from the specified URL.\nDefault is zero."]}]}, "default": 0}, {"name": "retry_timeout", "type": "Int", "desc": "Timeout (in ms) between retry attempts to load the image from the\nspecified URL. Default is zero ms.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Timeout (in ms) between retry attempts to load the image from the\nspecified URL. Default is zero ms."]}]}, "default": 0}, {"name": "url", "type": "StringSpec(String, String, Instance(Value), Instance(Field), Instance(Expr), Struct(value=String, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The URLs to retrieve images from.\n\n.. note::\n    The actual retrieving and loading of the images happens on\n    the client.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The URLs to retrieve images from."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["The actual retrieving and loading of the images happens on\nthe client."]}]}]}, "default": {"type": "field", "field": "url"}}, {"name": "w", "type": "NullDistanceSpec(units_default='data')", "desc": "The width of the plot region that the image will occupy in data space.\n\nThe default value is ``None``, in which case the image will be displayed\nat its actual image size (regardless of the units specified here).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width of the plot region that the image will occupy in data space."]}, {"type": "paragraph", "children": ["The default value is ", {"type": "literal", "children": ["None"]}, ", in which case the image will be displayed\nat its actual image size (regardless of the units specified here)."]}]}, "default": null}, {"name": "w_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to locate the image anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to locate the image anchors."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to locate the image anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to locate the image anchors."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "ImageURLTexture", "bases": ["Texture"], "mro": ["ImageURLTexture", "Texture", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "url", "type": "Required(String)", "desc": "A URL to a drawable resource like image, video, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A URL to a drawable resource like image, video, etc."]}]}, "default": "<Undefined>"}]}, {"name": "IndexFilter", "bases": ["Filter"], "mro": ["IndexFilter", "Filter", "Model"], "desc": "An ``IndexFilter`` filters data by returning the subset of data at a given set of indices.\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An ", {"type": "literal", "children": ["IndexFilter"]}, " filters data by returning the subset of data at a given set of indices."]}]}, "props": [{"name": "indices", "type": "Nullable(Seq(Int))", "desc": "A list of integer indices representing the subset of data to select.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of integer indices representing the subset of data to select."]}]}, "default": null}]}, {"name": "InputWidget", "bases": ["Widget"], "mro": ["InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Abstract base class for input widgets.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for input widgets."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "description", "type": "Nullable(Either(String, Instance(Tooltip)))", "desc": "Either a plain text or a tooltip with a rich HTML description of the function of this widget.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Either a plain text or a tooltip with a rich HTML description of the function of this widget."]}]}, "default": null}, {"name": "title", "type": "String", "desc": "Widget's label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Widget's label."]}]}, "default": ""}]}, {"name": "InspectTool", "bases": ["GestureTool"], "mro": ["InspectTool", "GestureTool", "Tool", "Model"], "desc": "A base class for tools that perform \"inspections\", e.g. ``HoverTool``.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for tools that perform \"inspections\", e.g. ", {"type": "literal", "children": ["HoverTool"]}, "."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "toggleable", "type": "Bool", "desc": "Whether an on/off toggle button should appear in the toolbar for this\ninspection tool. If ``False``, the viewers of a plot will not be able to\ntoggle the inspector on or off using the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether an on/off toggle button should appear in the toolbar for this\ninspection tool. If ", {"type": "literal", "children": ["False"]}, ", the viewers of a plot will not be able to\ntoggle the inspector on or off using the toolbar."]}]}, "default": true}]}, {"name": "IntEditor", "bases": ["CellEditor"], "mro": ["IntEditor", "CellEditor", "Model"], "desc": "Spinner-based integer cell editor.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Spinner-based integer cell editor."]}]}, "props": [{"name": "step", "type": "Int", "desc": "The major step value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The major step value."]}]}, "default": 1}]}, {"name": "Interpolator", "bases": ["Transform"], "mro": ["Interpolator", "Transform", "Model"], "desc": "Base class for interpolator transforms.\n\nInterpolators return the value of a function which has been evaluated\nbetween specified (x, y) pairs of data.  As an example, if two control\npoint pairs were provided to the interpolator, a linear interpolaction\nat a specific value of 'x' would result in the value of 'y' which existed\non the line connecting the two control points.\n\nThe control point pairs for the interpolators can be specified through either\n\n* A literal sequence of values:\n\n.. code-block:: python\n\n    interp = Interpolator(x=[1, 2, 3, 4, 5], y=[2, 5, 10, 12, 16])\n\n* or a pair of columns defined in a ``ColumnDataSource`` object:\n\n.. code-block:: python\n\n    interp = Interpolator(x=\"year\", y=\"earnings\", data=jewlery_prices))\n\n\nThis is the base class and is not intended to end use.  Please see the\ndocumentation for the final derived classes (``Jitter``, ``LineraInterpolator``,\n``StepInterpolator``) for more information on their specific methods of\ninterpolation.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for interpolator transforms."]}, {"type": "paragraph", "children": ["Interpolators return the value of a function which has been evaluated\nbetween specified (x, y) pairs of data.  As an example, if two control\npoint pairs were provided to the interpolator, a linear interpolaction\nat a specific value of 'x' would result in the value of 'y' which existed\non the line connecting the two control points."]}, {"type": "paragraph", "children": ["The control point pairs for the interpolators can be specified through either"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["A literal sequence of values:"]}]}]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["interp"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["Interpolator"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["x"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["3"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["4"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["5"]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["y"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["5"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["10"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["12"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["16"]}, {"type": "inline", "children": ["])"]}]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["or a pair of columns defined in a ", {"type": "literal", "children": ["ColumnDataSource"]}, " object:"]}]}]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["interp"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["Interpolator"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["x"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"year\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["y"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"earnings\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["data"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["jewlery_prices"]}, {"type": "inline", "children": ["))"]}]}, {"type": "paragraph", "children": ["This is the base class and is not intended to end use.  Please see the\ndocumentation for the final derived classes (", {"type": "literal", "children": ["Jitter"]}, ", ", {"type": "literal", "children": ["LineraInterpolator"]}, ",\n", {"type": "literal", "children": ["StepInterpolator"]}, ") for more information on their specific methods of\ninterpolation."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "clip", "type": "Bool", "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\nIf this is set to False, it will return the most value of the closest point.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Determine if the interpolation should clip the result to include only values inside its predefined range.\nIf this is set to False, it will return the most value of the closest point."]}]}, "default": true}, {"name": "data", "type": "Nullable(Instance(ColumnarDataSource))", "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Data which defines the source for the named columns if a string is passed to either the ", {"type": "literal", "children": ["x"]}, " or ", {"type": "literal", "children": ["y"]}, " parameters."]}]}, "default": null}, {"name": "x", "type": "Required(Either(String, Seq(Float)))", "desc": "Independent coordinate denoting the location of a point.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Independent coordinate denoting the location of a point."]}]}, "default": "<Undefined>"}, {"name": "y", "type": "Required(Either(String, Seq(Float)))", "desc": "Dependant coordinate denoting the value of a point at a location.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Dependant coordinate denoting the value of a point at a location."]}]}, "default": "<Undefined>"}]}, {"name": "IntersectRenderers", "bases": ["SelectionPolicy"], "mro": ["IntersectRenderers", "SelectionPolicy", "Model"], "desc": "When a data source is shared between multiple renderers, a row in the data\nsource will only be selected if that point for each renderer is selected. The\nselection is made from the intersection of hit test results from all renderers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["When a data source is shared between multiple renderers, a row in the data\nsource will only be selected if that point for each renderer is selected. The\nselection is made from the intersection of hit test results from all renderers."]}]}, "props": []}, {"name": "IntersectionFilter", "bases": ["Filter"], "mro": ["IntersectionFilter", "Filter", "Model"], "desc": "Computes intersection of indices resulting from other filters. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Computes intersection of indices resulting from other filters."]}]}, "props": [{"name": "operands", "type": "Required(NonEmpty(Seq(Instance(Filter))))", "desc": "Indices produced by a collection of these filters will be intersected.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indices produced by a collection of these filters will be intersected."]}]}, "default": "<Undefined>"}]}, {"name": "InversionFilter", "bases": ["Filter"], "mro": ["InversionFilter", "Filter", "Model"], "desc": "Inverts indices resulting from another filter. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Inverts indices resulting from another filter."]}]}, "props": [{"name": "operand", "type": "Required(Instance(Filter))", "desc": "Indices produced by this filter will be inverted.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indices produced by this filter will be inverted."]}]}, "default": "<Undefined>"}]}, {"name": "Jitter", "bases": ["Transform"], "mro": ["Jitter", "Transform", "Model"], "desc": "Apply either a uniform or normally sampled random jitter to data.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Apply either a uniform or normally sampled random jitter to data."]}]}, "props": [{"name": "distribution", "type": "Enum('uniform', 'normal')", "desc": "The random distribution upon which to pull the random scatter", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The random distribution upon which to pull the random scatter"]}]}, "default": "uniform"}, {"name": "mean", "type": "Float", "desc": "The central value for the random sample", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The central value for the random sample"]}]}, "default": 0}, {"name": "range", "type": "Nullable(Instance(Range))", "desc": "When applying Jitter to Categorical data values, the corresponding\n``FactorRange`` must be supplied as the ``range`` property.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["When applying Jitter to Categorical data values, the corresponding\n", {"type": "literal", "children": ["FactorRange"]}, " must be supplied as the ", {"type": "literal", "children": ["range"]}, " property."]}]}, "default": null}, {"name": "width", "type": "Float", "desc": "The width (absolute for uniform distribution and sigma for the normal\ndistribution) of the random sample.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width (absolute for uniform distribution and sigma for the normal\ndistribution) of the random sample."]}]}, "default": 1}]}, {"name": "Label", "bases": ["TextAnnotation"], "mro": ["Label", "TextAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a single text label as an annotation.\n\n``Label`` will render a single text label at given ``x`` and ``y``\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space.\n\nThe label can also be configured with a screen space offset from ``x`` and\n``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\nAdditionally, the label can be rotated with the ``angle`` property.\n\nThere are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border.\n\nSee :ref:`ug_basic_annotations_labels` for information on plotting labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a single text label as an annotation."]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["Label"]}, " will render a single text label at given ", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, "\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space."]}, {"type": "paragraph", "children": ["The label can also be configured with a screen space offset from ", {"type": "literal", "children": ["x"]}, " and\n", {"type": "literal", "children": ["y"]}, ", by using the ", {"type": "literal", "children": ["x_offset"]}, " and ", {"type": "literal", "children": ["y_offset"]}, " properties."]}, {"type": "paragraph", "children": ["Additionally, the label can be rotated with the ", {"type": "literal", "children": ["angle"]}, " property."]}, {"type": "paragraph", "children": ["There are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_labels`"]}, " for information on plotting labels."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "angle", "type": "Angle", "desc": "The angle to rotate the text, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angle to rotate the text, as measured from the horizontal."]}]}, "default": 0}, {"name": "angle_units", "type": "Enum('deg', 'rad', 'grad', 'turn')", "desc": "Acceptable values for units are ``\"rad\"`` and ``\"deg\"``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Acceptable values for units are ", {"type": "literal", "children": ["\"rad\""]}, " and ", {"type": "literal", "children": ["\"deg\""]}]}]}, "default": "rad"}, {"name": "x", "type": "Required(Float)", "desc": "The x-coordinate in screen coordinates to locate the text anchors.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinate in screen coordinates to locate the text anchors."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": "<Undefined>"}, {"name": "x_offset", "type": "Float", "desc": "Offset value to apply to the x-coordinate.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset value to apply to the x-coordinate."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "x_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the x attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the x attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "y", "type": "Required(Float)", "desc": "The y-coordinate in screen coordinates to locate the text anchors.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinate in screen coordinates to locate the text anchors."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": "<Undefined>"}, {"name": "y_offset", "type": "Float", "desc": "Offset value to apply to the y-coordinate.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset value to apply to the y-coordinate."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "y_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the y attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the y attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}]}, {"name": "LabelSet", "bases": ["DataAnnotation"], "mro": ["LabelSet", "DataAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render multiple text labels as annotations.\n\n``LabelSet`` will render multiple text labels at given ``x`` and ``y``\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space. In this case (as opposed to the single ``Label`` model),\n``x`` and ``y`` can also be the name of a column from a\n:class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\nwill be \"vectorized\" using coordinate values from the specified columns.\n\nThe label can also be configured with a screen space offset from ``x`` and\n``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\nmay be vectorized by giving the name of a data source column.\n\nAdditionally, the label can be rotated with the ``angle`` property (which\nmay also be a column name.)\n\nThere are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border.\n\nThe data source is provided by setting the ``source`` property.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render multiple text labels as annotations."]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["LabelSet"]}, " will render multiple text labels at given ", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, "\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space. In this case (as opposed to the single ", {"type": "literal", "children": ["Label"]}, " model),\n", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, " can also be the name of a column from a\n", {"type": "problematic", "children": [":class:`~bokeh.models.sources.ColumnDataSource`"]}, ", in which case the labels\nwill be \"vectorized\" using coordinate values from the specified columns."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "paragraph", "children": ["The label can also be configured with a screen space offset from ", {"type": "literal", "children": ["x"]}, " and\n", {"type": "literal", "children": ["y"]}, ", by using the ", {"type": "literal", "children": ["x_offset"]}, " and ", {"type": "literal", "children": ["y_offset"]}, " properties. These offsets\nmay be vectorized by giving the name of a data source column."]}, {"type": "paragraph", "children": ["Additionally, the label can be rotated with the ", {"type": "literal", "children": ["angle"]}, " property (which\nmay also be a column name.)"]}, {"type": "paragraph", "children": ["There are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border."]}, {"type": "paragraph", "children": ["The data source is provided by setting the ", {"type": "literal", "children": ["source"]}, " property."]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to rotate the text, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to rotate the text, as measured from the horizontal."]}]}, "default": 0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "background_fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "background_fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "border_line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the text bounding box."]}]}, "default": "butt"}, {"name": "border_line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the text bounding box."]}]}, "default": []}, {"name": "border_line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the text bounding box."]}]}, "default": 0}, {"name": "border_line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the text bounding box."]}]}, "default": "bevel"}, {"name": "border_line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the text bounding box."]}]}, "default": 1}, {"name": "text", "type": "NullStringSpec(String, Nullable(String), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(String), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text values to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text values to render."]}]}, "default": {"type": "field", "field": "text"}}, {"name": "text_align", "type": "TextAlignSpec(String, Enum('left', 'right', 'center'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('left', 'right', 'center'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text align values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align values for the text."]}]}, "default": "left"}, {"name": "text_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text alpha values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha values for the text."]}]}, "default": 1.0}, {"name": "text_baseline", "type": "TextBaselineSpec(String, Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text baseline values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline values for the text."]}]}, "default": "bottom"}, {"name": "text_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color values for the text."]}]}, "default": "#444444"}, {"name": "text_font", "type": "StringSpec(String, String, Instance(Value), Instance(Field), Instance(Expr), Struct(value=String, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font values for the text."]}]}, "default": {"type": "value", "value": "helvetica"}}, {"name": "text_font_size", "type": "FontSizeSpec(String, FontSize, Instance(Value), Instance(Field), Instance(Expr), Struct(value=FontSize, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font size values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size values for the text."]}]}, "default": {"type": "value", "value": "16px"}}, {"name": "text_font_style", "type": "FontStyleSpec(String, Enum('normal', 'italic', 'bold', 'bold italic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('normal', 'italic', 'bold', 'bold italic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font style values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style values for the text."]}]}, "default": "normal"}, {"name": "text_line_height", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text line height values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height values for the text."]}]}, "default": 1.2}, {"name": "text_outline_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text outline color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color values for the text."]}]}, "default": null}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to locate the text anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to locate the text anchors."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "x_offset", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Offset values to apply to the x-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset values to apply to the x-coordinates."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "x_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the ``xs`` attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the ", {"type": "literal", "children": ["xs"]}, " attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to locate the text anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to locate the text anchors."]}]}, "default": {"type": "field", "field": "y"}}, {"name": "y_offset", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Offset values to apply to the y-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset values to apply to the y-coordinates."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "y_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the ``ys`` attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the ", {"type": "literal", "children": ["ys"]}, " attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}]}, {"name": "LabelingPolicy", "bases": ["Model"], "mro": ["LabelingPolicy", "Model"], "desc": "Base class for labeling policies. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for labeling policies.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": []}, {"name": "LassoSelectTool", "bases": ["Drag", "SelectTool"], "mro": ["LassoSelectTool", "Drag", "SelectTool", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |lasso_select_icon|\n\nThe lasso selection tool allows users to make selections on a Plot by\nindicating a free-drawn \"lasso\" region by dragging the mouse or a finger\nover the plot region. The end of the drag event indicates the selection\nregion is ready.\n\nSee :ref:`ug_styling_plots_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n.. note::\n    Selections can be comprised of multiple regions, even those made by\n    different selection tools. Hold down the <<shift>> key while making a\n    selection to append the new selection to any previous selection that\n    might exist.\n\n.. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n    :height: 24px\n    :alt:  Icon of a looped lasso shape representing the lasso-selection tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["lasso_select_icon"]}]}, {"type": "paragraph", "children": ["The lasso selection tool allows users to make selections on a Plot by\nindicating a free-drawn \"lasso\" region by dragging the mouse or a finger\nover the plot region. The end of the drag event indicates the selection\nregion is ready."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_styling_plots_selected_unselected_glyphs`"]}, " for information\non styling selected and unselected glyphs."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Selections can be comprised of multiple regions, even those made by\ndifferent selection tools. Hold down the <<shift>> key while making a\nselection to append the new selection to any previous selection that\nmight exist."]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "overlay", "type": "Instance(PolyAnnotation)", "desc": "A shaded annotation drawn to indicate the selection region.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A shaded annotation drawn to indicate the selection region."]}]}, "default": "{\"__type__\": \"PolyAnnotation\", \"attributes\": {\"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"syncable\": false, \"visible\": false, \"xs\": [], \"xs_units\": \"canvas\", \"ys\": [], \"ys_units\": \"canvas\"}, \"name\": \"PolyAnnotation\", \"type\": \"object\"}"}, {"name": "select_every_mousemove", "type": "Bool", "desc": "Whether a selection computation should happen on every mouse event, or only\nonce, when the selection region is completed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether a selection computation should happen on every mouse event, or only\nonce, when the selection region is completed."]}]}, "default": true}]}, {"name": "LayoutDOM", "bases": ["UIElement"], "mro": ["LayoutDOM", "UIElement", "Model"], "desc": "The base class for layoutable components.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The base class for layoutable components."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "align", "type": "Either(Auto, Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))", "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The alignment point within the parent container."]}, {"type": "paragraph", "children": ["This property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align)."]}]}, "default": "auto"}, {"name": "aspect_ratio", "type": "Either(Null, Auto, Float)", "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes the proportional relationship between component's width and height."]}, {"type": "paragraph", "children": ["This works if any of component's dimensions are flexible in size. If set to\na number, ", {"type": "literal", "children": ["width / height = aspect_ratio"]}, " relationship will be maintained.\nOtherwise, if set to ", {"type": "literal", "children": ["\"auto\""]}, ", component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved)."]}]}, "default": null}, {"name": "context_menu", "type": "Nullable(Instance(Menu))", "desc": "A menu to display when user right clicks on the component.\n\n.. note::\n    To display a native context menu, the viewer will need to right-click\n    twice. The second click closes the Bokeh context menu and falls back\n    back the native one.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A menu to display when user right clicks on the component."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["To display a native context menu, the viewer will need to right-click\ntwice. The second click closes the Bokeh context menu and falls back\nback the native one."]}]}]}, "default": null}, {"name": "css_classes", "type": "List(String)", "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided."]}, {"type": "paragraph", "children": ["It is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list."]}]}, "default": []}, {"name": "disabled", "type": "Bool", "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the widget will be disabled when rendered."]}, {"type": "paragraph", "children": ["If ", {"type": "literal", "children": ["True"]}, ", the widget will be greyed-out and not responsive to UI events."]}]}, "default": false}, {"name": "flow_mode", "type": "Enum('block', 'inline')", "desc": "Defines whether the layout will flow in the ``block`` or ``inline`` dimension.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines whether the layout will flow in the ", {"type": "literal", "children": ["block"]}, " or ", {"type": "literal", "children": ["inline"]}, " dimension."]}]}, "default": "block"}, {"name": "height", "type": "Nullable(NonNegative(Int))", "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The height of the component (in pixels)."]}, {"type": "paragraph", "children": ["This can be either fixed or preferred height, depending on height sizing policy."]}]}, "default": null}, {"name": "height_policy", "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))", "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the component should maintain its height."]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"auto\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use component's preferred sizing policy."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"fixed\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use exactly ", {"type": "literal", "children": ["height"]}, " pixels. Component will overflow if it can't fit in the\navailable vertical space."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"fit\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use component's preferred height (if set) and allow to fit into the available\nvertical space within the minimum and maximum height bounds (if set). Component's\nheight neither will be aggressively minimized nor maximized."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"min\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use as little vertical space as possible, not less than the minimum height (if set).\nThe starting point is the preferred height (if set). The height of the component may\nshrink or grow depending on the parent layout, aspect management and other factors."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"max\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use as much vertical space as possible, not more than the maximum height (if set).\nThe starting point is the preferred height (if set). The height of the component may\nshrink or grow depending on the parent layout, aspect management and other factors."]}]}]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an experimental feature and may change in future. Use it at your\nown discretion. Prefer using ", {"type": "literal", "children": ["sizing_mode"]}, " if this level of control isn't\nstrictly necessary."]}]}]}, "default": "auto"}, {"name": "margin", "type": "Nullable(Either(Int, Tuple(Int, Int), Tuple(Int, Int, Int, Int)))", "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction."]}]}, "default": null}, {"name": "max_height", "type": "Nullable(NonNegative(Int))", "desc": "Maximal height of the component (in pixels) if height is adjustable.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Maximal height of the component (in pixels) if height is adjustable."]}]}, "default": null}, {"name": "max_width", "type": "Nullable(NonNegative(Int))", "desc": "Maximal width of the component (in pixels) if width is adjustable.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Maximal width of the component (in pixels) if width is adjustable."]}]}, "default": null}, {"name": "min_height", "type": "Nullable(NonNegative(Int))", "desc": "Minimal height of the component (in pixels) if height is adjustable.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimal height of the component (in pixels) if height is adjustable."]}]}, "default": null}, {"name": "min_width", "type": "Nullable(NonNegative(Int))", "desc": "Minimal width of the component (in pixels) if width is adjustable.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimal width of the component (in pixels) if width is adjustable."]}]}, "default": null}, {"name": "resizable", "type": "Either(Bool, Enum('width', 'height', 'both'))", "desc": "Whether the layout is interactively resizable, and if so in which dimensions.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the layout is interactively resizable, and if so in which dimensions."]}]}, "default": false}, {"name": "sizing_mode", "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed', 'inherit'))", "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"inherit\"``\n    The sizing mode is inherited from the parent layout. If there is no parent\n    layout (or parent is not a layout), then this value is treated as if no\n    value for ``sizing_mode`` was provided.\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How the component should size itself."]}, {"type": "paragraph", "children": ["This is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ", {"type": "literal", "children": ["width_policy"]}, ", ", {"type": "literal", "children": ["height_policy"]}, "\nand ", {"type": "literal", "children": ["aspect_ratio"]}, " instead (those take precedence over ", {"type": "literal", "children": ["sizing_mode"]}, ")."]}, {"type": "paragraph", "children": ["Possible scenarios:"]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"inherit\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["The sizing mode is inherited from the parent layout. If there is no parent\nlayout (or parent is not a layout), then this value is treated as if no\nvalue for ", {"type": "literal", "children": ["sizing_mode"]}, " was provided."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"fixed\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Component is not responsive. It will retain its original width and height\nregardless of any subsequent browser window resize events."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"stretch_width\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Component will responsively resize to stretch to the available width, without\nmaintaining any aspect ratio. The height of the component depends on the type\nof the component and may be fixed or fit to component's contents."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"stretch_height\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Component will responsively resize to stretch to the available height, without\nmaintaining any aspect ratio. The width of the component depends on the type\nof the component and may be fixed or fit to component's contents."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"stretch_both\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Component is completely responsive, independently in width and height, and\nwill occupy all the available horizontal and vertical space, even if this\nchanges the aspect ratio of the component."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"scale_width\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Component will responsively resize to stretch to the available width, while\nmaintaining the original or provided aspect ratio."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"scale_height\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Component will responsively resize to stretch to the available height, while\nmaintaining the original or provided aspect ratio."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"scale_both\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Component will responsively resize to both the available width and height, while\nmaintaining the original or provided aspect ratio."]}]}]}]}]}, "default": null}, {"name": "width", "type": "Nullable(NonNegative(Int))", "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width of the component (in pixels)."]}, {"type": "paragraph", "children": ["This can be either fixed or preferred width, depending on width sizing policy."]}]}, "default": null}, {"name": "width_policy", "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))", "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the component should maintain its width."]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"auto\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use component's preferred sizing policy."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"fixed\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use exactly ", {"type": "literal", "children": ["width"]}, " pixels. Component will overflow if it can't fit in the\navailable horizontal space."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"fit\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use component's preferred width (if set) and allow it to fit into the available\nhorizontal space within the minimum and maximum width bounds (if set). Component's\nwidth neither will be aggressively minimized nor maximized."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"min\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use as little horizontal space as possible, not less than the minimum width (if set).\nThe starting point is the preferred width (if set). The width of the component may\nshrink or grow depending on the parent layout, aspect management and other factors."]}]}]}, {"type": "definition_list_item", "children": [{"type": "term", "children": [{"type": "literal", "children": ["\"max\""]}]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Use as much horizontal space as possible, not more than the maximum width (if set).\nThe starting point is the preferred width (if set). The width of the component may\nshrink or grow depending on the parent layout, aspect management and other factors."]}]}]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an experimental feature and may change in future. Use it at your\nown discretion. Prefer using ", {"type": "literal", "children": ["sizing_mode"]}, " if this level of control isn't\nstrictly necessary."]}]}]}, "default": "auto"}]}, {"name": "LayoutProvider", "bases": ["Model"], "mro": ["LayoutProvider", "Model"], "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Legend", "bases": ["Annotation"], "mro": ["Legend", "Annotation", "Renderer", "Model"], "desc": "Render informational legends for a plot.\n\nSee :ref:`ug_basic_annotations_legends` for information on plotting legends.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render informational legends for a plot."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_legends`"]}, " for information on plotting legends."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "background_fill_alpha", "type": "Alpha", "desc": "The fill alpha for the legend background style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha for the legend background style."]}]}, "default": 0.95}, {"name": "background_fill_color", "type": "Nullable(Color)", "desc": "The fill color for the legend background style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color for the legend background style."]}]}, "default": "#ffffff"}, {"name": "border_line_alpha", "type": "Alpha", "desc": "The line alpha for the legend border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha for the legend border outline."]}]}, "default": 0.5}, {"name": "border_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap for the legend border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap for the legend border outline."]}]}, "default": "butt"}, {"name": "border_line_color", "type": "Nullable(Color)", "desc": "The line color for the legend border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color for the legend border outline."]}]}, "default": "#e5e5e5"}, {"name": "border_line_dash", "type": "DashPattern", "desc": "The line dash for the legend border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash for the legend border outline."]}]}, "default": []}, {"name": "border_line_dash_offset", "type": "Int", "desc": "The line dash offset for the legend border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset for the legend border outline."]}]}, "default": 0}, {"name": "border_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join for the legend border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join for the legend border outline."]}]}, "default": "bevel"}, {"name": "border_line_width", "type": "Float", "desc": "The line width for the legend border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width for the legend border outline."]}]}, "default": 1}, {"name": "click_policy", "type": "Enum('none', 'hide', 'mute')", "desc": "Defines what happens when a lengend's item is clicked.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines what happens when a lengend's item is clicked."]}]}, "default": "none"}, {"name": "glyph_height", "type": "Int", "desc": "The height (in pixels) that the rendered legend glyph should occupy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The height (in pixels) that the rendered legend glyph should occupy."]}]}, "default": 20}, {"name": "glyph_width", "type": "Int", "desc": "The width (in pixels) that the rendered legend glyph should occupy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width (in pixels) that the rendered legend glyph should occupy."]}]}, "default": 20}, {"name": "inactive_fill_alpha", "type": "Alpha", "desc": "The fill alpha for the legend item style when inactive. These control an overlay\non the item that can be used to obscure it when the corresponding glyph\nis inactive (e.g. by making it semi-transparent).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha for the legend item style when inactive. These control an overlay\non the item that can be used to obscure it when the corresponding glyph\nis inactive (e.g. by making it semi-transparent)."]}]}, "default": 0.7}, {"name": "inactive_fill_color", "type": "Nullable(Color)", "desc": "The fill color for the legend item style when inactive. These control an overlay\non the item that can be used to obscure it when the corresponding glyph\nis inactive (e.g. by making it semi-transparent).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color for the legend item style when inactive. These control an overlay\non the item that can be used to obscure it when the corresponding glyph\nis inactive (e.g. by making it semi-transparent)."]}]}, "default": "white"}, {"name": "items", "type": "List(Instance(LegendItem))", "desc": "A list of :class:`~bokeh.model.annotations.LegendItem` instances to be\nrendered in the legend.\n\nThis can be specified explicitly, for instance:\n\n.. code-block:: python\n\n    legend = Legend(items=[\n        LegendItem(label=\"sin(x)\"   , renderers=[r0, r1]),\n        LegendItem(label=\"2*sin(x)\" , renderers=[r2]),\n        LegendItem(label=\"3*sin(x)\" , renderers=[r3, r4])\n    ])\n\nBut as a convenience, can also be given more compactly as a list of tuples:\n\n.. code-block:: python\n\n    legend = Legend(items=[\n        (\"sin(x)\"   , [r0, r1]),\n        (\"2*sin(x)\" , [r2]),\n        (\"3*sin(x)\" , [r3, r4])\n    ])\n\nwhere each tuple is of the form: *(label, renderers)*.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of ", {"type": "problematic", "children": [":class:`~bokeh.model.annotations.LegendItem`"]}, " instances to be\nrendered in the legend."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "paragraph", "children": ["This can be specified explicitly, for instance:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["legend"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["Legend"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["items"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, "\n    ", {"type": "inline", "children": ["LegendItem"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["label"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"sin(x)\""]}, "   ", {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["renderers"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["r0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["r1"]}, {"type": "inline", "children": ["]),"]}, "\n    ", {"type": "inline", "children": ["LegendItem"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["label"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"2*sin(x)\""]}, " ", {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["renderers"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["r2"]}, {"type": "inline", "children": ["]),"]}, "\n    ", {"type": "inline", "children": ["LegendItem"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["label"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"3*sin(x)\""]}, " ", {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["renderers"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["r3"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["r4"]}, {"type": "inline", "children": ["])"]}, "\n", {"type": "inline", "children": ["])"]}]}, {"type": "paragraph", "children": ["But as a convenience, can also be given more compactly as a list of tuples:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["legend"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["Legend"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["items"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, "\n    ", {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["\"sin(x)\""]}, "   ", {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["r0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["r1"]}, {"type": "inline", "children": ["]),"]}, "\n    ", {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["\"2*sin(x)\""]}, " ", {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["r2"]}, {"type": "inline", "children": ["]),"]}, "\n    ", {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["\"3*sin(x)\""]}, " ", {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["r3"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["r4"]}, {"type": "inline", "children": ["])"]}, "\n", {"type": "inline", "children": ["])"]}]}, {"type": "paragraph", "children": ["where each tuple is of the form: ", {"type": "emphasis", "children": ["(label, renderers)"]}, "."]}]}, "default": []}, {"name": "label_height", "type": "Int", "desc": "The minimum height (in pixels) of the area that legend labels should occupy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum height (in pixels) of the area that legend labels should occupy."]}]}, "default": 20}, {"name": "label_standoff", "type": "Int", "desc": "The distance (in pixels) to separate the label from its associated glyph.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) to separate the label from its associated glyph."]}]}, "default": 5}, {"name": "label_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align for the legend labels."]}]}, "default": "left"}, {"name": "label_text_alpha", "type": "Alpha", "desc": "The text alpha for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha for the legend labels."]}]}, "default": 1.0}, {"name": "label_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline for the legend labels."]}]}, "default": "middle"}, {"name": "label_text_color", "type": "Nullable(Color)", "desc": "The text color for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color for the legend labels."]}]}, "default": "#444444"}, {"name": "label_text_font", "type": "String", "desc": "The text font for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font for the legend labels."]}]}, "default": "helvetica"}, {"name": "label_text_font_size", "type": "FontSize", "desc": "The text font size for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size for the legend labels."]}]}, "default": "13px"}, {"name": "label_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style for the legend labels."]}]}, "default": "normal"}, {"name": "label_text_line_height", "type": "Float", "desc": "The text line height for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height for the legend labels."]}]}, "default": 1.2}, {"name": "label_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color for the legend labels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color for the legend labels."]}]}, "default": null}, {"name": "label_width", "type": "Int", "desc": "The minimum width (in pixels) of the area that legend labels should occupy.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum width (in pixels) of the area that legend labels should occupy."]}]}, "default": 20}, {"name": "location", "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Float, Float))", "desc": "The location where the legend should draw itself. It's either one of\n``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\ntuple indicating an absolute location absolute location in screen\ncoordinates (pixels from the bottom-left corner).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The location where the legend should draw itself. It's either one of\n", {"type": "literal", "children": ["bokeh.core.enums.LegendLocation"]}, "'s enumerated values, or a ", {"type": "literal", "children": ["(x, y)"]}, "\ntuple indicating an absolute location absolute location in screen\ncoordinates (pixels from the bottom-left corner)."]}]}, "default": "top_right"}, {"name": "margin", "type": "Int", "desc": "Amount of margin around the legend.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Amount of margin around the legend."]}]}, "default": 10}, {"name": "orientation", "type": "Enum('horizontal', 'vertical')", "desc": "Whether the legend entries should be placed vertically or horizontally\nwhen they are drawn.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the legend entries should be placed vertically or horizontally\nwhen they are drawn."]}]}, "default": "vertical"}, {"name": "padding", "type": "Int", "desc": "Amount of padding around the contents of the legend. Only applicable when\nborder is visible, otherwise collapses to 0.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Amount of padding around the contents of the legend. Only applicable when\nborder is visible, otherwise collapses to 0."]}]}, "default": 10}, {"name": "spacing", "type": "Int", "desc": "Amount of spacing (in pixels) between legend entries.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Amount of spacing (in pixels) between legend entries."]}]}, "default": 3}, {"name": "title", "type": "Nullable(String)", "desc": "The title text to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The title text to render."]}]}, "default": null}, {"name": "title_standoff", "type": "Int", "desc": "The distance (in pixels) to separate the title from the legend.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance (in pixels) to separate the title from the legend."]}]}, "default": 5}, {"name": "title_text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align values for the title text."]}]}, "default": "left"}, {"name": "title_text_alpha", "type": "Alpha", "desc": "The text alpha values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha values for the title text."]}]}, "default": 1.0}, {"name": "title_text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline values for the title text."]}]}, "default": "bottom"}, {"name": "title_text_color", "type": "Nullable(Color)", "desc": "The text color values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color values for the title text."]}]}, "default": "#444444"}, {"name": "title_text_font", "type": "String", "desc": "The text font values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font values for the title text."]}]}, "default": "helvetica"}, {"name": "title_text_font_size", "type": "FontSize", "desc": "The text font size values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size values for the title text."]}]}, "default": "13px"}, {"name": "title_text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style values for the title text."]}]}, "default": "italic"}, {"name": "title_text_line_height", "type": "Float", "desc": "The text line height values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height values for the title text."]}]}, "default": 1.2}, {"name": "title_text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color values for the title text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color values for the title text."]}]}, "default": null}]}, {"name": "LegendItem", "bases": ["Model"], "mro": ["LegendItem", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "index", "type": "Nullable(Int)", "desc": "The column data index to use for drawing the representative items.\n\nIf None (the default), then Bokeh will automatically choose an index to\nuse. If the label does not refer to a data column name, this is typically\nthe first data point in the data source. Otherwise, if the label does\nrefer to a column name, the legend will have \"groupby\" behavior, and will\nchoose and display representative points from every \"group\" in the column.\n\nIf set to a number, Bokeh will use that number as the index in all cases.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The column data index to use for drawing the representative items."]}, {"type": "paragraph", "children": ["If None (the default), then Bokeh will automatically choose an index to\nuse. If the label does not refer to a data column name, this is typically\nthe first data point in the data source. Otherwise, if the label does\nrefer to a column name, the legend will have \"groupby\" behavior, and will\nchoose and display representative points from every \"group\" in the column."]}, {"type": "paragraph", "children": ["If set to a number, Bokeh will use that number as the index in all cases."]}]}, "default": null}, {"name": "label", "type": "NullStringSpec(String, Nullable(String), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(String), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A label for this legend. Can be a string, or a column of a\nColumnDataSource. If ``label`` is a field, then it must\nbe in the renderers' data_source.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A label for this legend. Can be a string, or a column of a\nColumnDataSource. If ", {"type": "literal", "children": ["label"]}, " is a field, then it must\nbe in the renderers' data_source."]}]}, "default": null}, {"name": "renderers", "type": "List(Instance(GlyphRenderer))", "desc": "A list of the glyph renderers to draw in the legend. If ``label`` is a field,\nthen all data_sources of renderers must be the same.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of the glyph renderers to draw in the legend. If ", {"type": "literal", "children": ["label"]}, " is a field,\nthen all data_sources of renderers must be the same."]}]}, "default": []}, {"name": "visible", "type": "Bool", "desc": "Whether the legend item should be displayed. See\n:ref:`ug_basic_annotations_legends_item_visibility` in the user guide.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the legend item should be displayed. See\n", {"type": "problematic", "children": [":ref:`ug_basic_annotations_legends_item_visibility`"]}, " in the user guide."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "default": true}]}, {"name": "Line", "bases": ["ConnectedXYGlyph", "LineGlyph"], "mro": ["Line", "ConnectedXYGlyph", "XYGlyph", "LineGlyph", "Glyph", "Model"], "desc": "Render a single line.\n\nThe ``Line`` glyph is different from most other glyphs in that the vector\nof values only produces one glyph on the Plot.\n\n.. note::\n    Due to limitations in the underlying HTML canvas, it is possible that a\n    line is not drawn when one or more of its coordinates is very far outside\n    the viewport. This behavior is different for different browsers. See\n    :bokeh-issue:`11498` for more information.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Line.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a single line."]}, {"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["Line"]}, " glyph is different from most other glyphs in that the vector\nof values only produces one glyph on the Plot."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Due to limitations in the underlying HTML canvas, it is possible that a\nline is not drawn when one or more of its coordinates is very far outside\nthe viewport. This behavior is different for different browsers. See\n", {"type": "problematic", "children": [":bokeh-issue:`11498`"]}, " for more information."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"bokeh-issue\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-issue\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"bokeh-issue\"."]}]}]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Line.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the line."]}]}, "default": 1.0}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the line."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the line."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the line."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the line."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the line."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the line."]}]}, "default": 1}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for the points of the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for the points of the line."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for the points of the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for the points of the line."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "LineEditTool", "bases": ["EditTool", "Drag", "Tap"], "mro": ["LineEditTool", "EditTool", "Drag", "Tap", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |line_edit_icon|\n\nThe LineEditTool allows editing the intersection points of one or more ``Line`` glyphs.\nGlyphs to be edited are defined via the ``renderers``\nproperty and a renderer for the intersections is set via the ``intersection_renderer``\nproperty (must render a point-like Glyph (a subclass of ``XYGlyph``).\n\nThe tool will modify the columns on the data source corresponding to the\n``x`` and ``y`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared``empty_value``, when adding a new\npoint.\n\nThe supported actions include:\n\n* Show intersections: Double tap an existing line\n\n* Move point: Drag an existing point and let go of the mouse button to\n  release it.\n\n.. |line_edit_icon| image:: /_images/icons/LineEdit.png\n    :height: 24px\n    :alt: Icon of a line with a point on it with an arrow pointing at it representing the line-edit tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["line_edit_icon"]}]}, {"type": "paragraph", "children": ["The LineEditTool allows editing the intersection points of one or more ", {"type": "literal", "children": ["Line"]}, " glyphs.\nGlyphs to be edited are defined via the ", {"type": "literal", "children": ["renderers"]}, "\nproperty and a renderer for the intersections is set via the ", {"type": "literal", "children": ["intersection_renderer"]}, "\nproperty (must render a point-like Glyph (a subclass of ", {"type": "literal", "children": ["XYGlyph"]}, ")."]}, {"type": "paragraph", "children": ["The tool will modify the columns on the data source corresponding to the\n", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, " values of the glyph. Any additional columns in the data\nsource will be padded with the declared``empty_value``, when adding a new\npoint."]}, {"type": "paragraph", "children": ["The supported actions include:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Show intersections: Double tap an existing line"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Move point: Drag an existing point and let go of the mouse button to\nrelease it."]}]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions this edit tool is constrained to act in. By default\nthe line edit tool allows moving points in any dimension, but can be\nconfigured to only allow horizontal movement across the width of the\nplot, or vertical across the height of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions this edit tool is constrained to act in. By default\nthe line edit tool allows moving points in any dimension, but can be\nconfigured to only allow horizontal movement across the width of the\nplot, or vertical across the height of the plot."]}]}, "default": "both"}, {"name": "intersection_renderer", "type": "Instance(GlyphRenderer)", "desc": "The renderer used to render the intersections of a selected line", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The renderer used to render the intersections of a selected line"]}]}, "default": "<Undefined>"}]}, {"name": "LineGlyph", "bases": ["Glyph"], "mro": ["LineGlyph", "Glyph", "Model"], "desc": "Glyphs with line properties\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyphs with line properties"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "LineProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering path operations.\n\nMirrors the BokehJS ``properties.LineVector`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering path operations."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.LineVector"]}, " class."]}]}, "props": [{"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "An alpha value to use to stroke paths with.\n\n    Acceptable values are numbers in 0..1 range (transparent..opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to stroke paths with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are numbers in 0..1 range (transparent..opaque)."]}]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "How path segments should be terminated.\n\nAcceptable values are:\n\n- ``'butt'`` |butt_cap|\n- ``'round'`` |round_cap|\n- ``'square'`` |square_cap|", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How path segments should be terminated."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'butt'"]}, " ", {"type": "substitution_reference", "children": ["butt_cap"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'round'"]}, " ", {"type": "substitution_reference", "children": ["round_cap"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'square'"]}, " ", {"type": "substitution_reference", "children": ["square_cap"]}]}]}]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A color to use to stroke paths with.\n\n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``, ``'rgb(0 127 0 / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1\n    - a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to stroke paths with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ", ", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern"]}]}]}]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "How should the line be dashed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How should the line be dashed."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The distance into the ``line_dash`` (in pixels) that the pattern should start from.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance into the ", {"type": "literal", "children": ["line_dash"]}, " (in pixels) that the pattern should start from."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "How path segments should be joined together.\n\nAcceptable values are:\n\n- ``'miter'`` |miter_join|\n- ``'round'`` |round_join|\n- ``'bevel'`` |bevel_join|", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How path segments should be joined together."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'miter'"]}, " ", {"type": "substitution_reference", "children": ["miter_join"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'round'"]}, " ", {"type": "substitution_reference", "children": ["round_join"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'bevel'"]}, " ", {"type": "substitution_reference", "children": ["bevel_join"]}]}]}]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Stroke width in units of pixels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Stroke width in units of pixels."]}]}, "default": 1}]}, {"name": "LinearAxis", "bases": ["ContinuousAxis"], "mro": ["LinearAxis", "ContinuousAxis", "Axis", "GuideRenderer", "Renderer", "Model"], "desc": "An axis that picks nice numbers for tick locations on a\nlinear scale. Configured with a ``BasicTickFormatter`` by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An axis that picks nice numbers for tick locations on a\nlinear scale. Configured with a ", {"type": "literal", "children": ["BasicTickFormatter"]}, " by default."]}]}, "props": []}, {"name": "LinearColorMapper", "bases": ["ContinuousColorMapper"], "mro": ["LinearColorMapper", "ContinuousColorMapper", "ColorMapper", "Mapper", "Transform", "Model"], "desc": "Map numbers in a range [*low*, *high*] linearly into a sequence of\ncolors (a palette).\n\nFor example, if the range is [0, 99] and the palette is\n``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n         x < 0  : 'red'     # values < low are clamped\n    0 <= x < 33 : 'red'\n   33 <= x < 66 : 'green'\n   66 <= x < 99 : 'blue'\n   99 <= x      : 'blue'    # values > high are clamped", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Map numbers in a range [", {"type": "emphasis", "children": ["low"]}, ", ", {"type": "emphasis", "children": ["high"]}, "] linearly into a sequence of\ncolors (a palette)."]}, {"type": "paragraph", "children": ["For example, if the range is [0, 99] and the palette is\n", {"type": "literal", "children": ["['red', 'green', 'blue']"]}, ", the values would be mapped as follows:"]}, {"type": "literal_block", "children": ["      x < 0  : 'red'     # values < low are clamped\n 0 <= x < 33 : 'red'\n33 <= x < 66 : 'green'\n66 <= x < 99 : 'blue'\n99 <= x      : 'blue'    # values > high are clamped"]}]}, "props": []}, {"name": "LinearInterpolator", "bases": ["Interpolator"], "mro": ["LinearInterpolator", "Interpolator", "Transform", "Model"], "desc": "Compute a linear interpolation between the control points provided through\nthe ``x``, ``y``, and ``data`` parameters.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Compute a linear interpolation between the control points provided through\nthe ", {"type": "literal", "children": ["x"]}, ", ", {"type": "literal", "children": ["y"]}, ", and ", {"type": "literal", "children": ["data"]}, " parameters."]}]}, "props": []}, {"name": "LinearScale", "bases": ["ContinuousScale"], "mro": ["LinearScale", "ContinuousScale", "Scale", "Transform", "Model"], "desc": "Represent a linear scale transformation between continuous ranges.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represent a linear scale transformation between continuous ranges."]}]}, "props": []}, {"name": "LogAxis", "bases": ["ContinuousAxis"], "mro": ["LogAxis", "ContinuousAxis", "Axis", "GuideRenderer", "Renderer", "Model"], "desc": "An axis that picks nice numbers for tick locations on a\nlog scale. Configured with a ``LogTickFormatter`` by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An axis that picks nice numbers for tick locations on a\nlog scale. Configured with a ", {"type": "literal", "children": ["LogTickFormatter"]}, " by default."]}]}, "props": []}, {"name": "LogColorMapper", "bases": ["ContinuousColorMapper"], "mro": ["LogColorMapper", "ContinuousColorMapper", "ColorMapper", "Mapper", "Transform", "Model"], "desc": "Map numbers in a range [*low*, *high*] into a sequence of colors\n(a palette) on a natural logarithm scale.\n\nFor example, if the range is [0, 25] and the palette is\n``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n            x < 0     : 'red'     # values < low are clamped\n   0     <= x < 2.72  : 'red'     # math.e ** 1\n   2.72  <= x < 7.39  : 'green'   # math.e ** 2\n   7.39  <= x < 20.09 : 'blue'    # math.e ** 3\n   20.09 <= x         : 'blue'    # values > high are clamped\n\n.. warning::\n    The ``LogColorMapper`` only works for images with scalar values that are\n    non-negative.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Map numbers in a range [", {"type": "emphasis", "children": ["low"]}, ", ", {"type": "emphasis", "children": ["high"]}, "] into a sequence of colors\n(a palette) on a natural logarithm scale."]}, {"type": "paragraph", "children": ["For example, if the range is [0, 25] and the palette is\n", {"type": "literal", "children": ["['red', 'green', 'blue']"]}, ", the values would be mapped as follows:"]}, {"type": "literal_block", "children": ["         x < 0     : 'red'     # values < low are clamped\n0     <= x < 2.72  : 'red'     # math.e ** 1\n2.72  <= x < 7.39  : 'green'   # math.e ** 2\n7.39  <= x < 20.09 : 'blue'    # math.e ** 3\n20.09 <= x         : 'blue'    # values > high are clamped"]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["LogColorMapper"]}, " only works for images with scalar values that are\nnon-negative."]}]}]}, "props": []}, {"name": "LogScale", "bases": ["ContinuousScale"], "mro": ["LogScale", "ContinuousScale", "Scale", "Transform", "Model"], "desc": "Represent a log scale transformation between continuous ranges.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represent a log scale transformation between continuous ranges."]}]}, "props": []}, {"name": "LogTickFormatter", "bases": ["TickFormatter"], "mro": ["LogTickFormatter", "TickFormatter", "Model"], "desc": "Display tick values from continuous ranges as powers\nof some base.\n\nMost often useful in conjunction with a ``LogTicker``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Display tick values from continuous ranges as powers\nof some base."]}, {"type": "paragraph", "children": ["Most often useful in conjunction with a ", {"type": "literal", "children": ["LogTicker"]}, "."]}]}, "props": [{"name": "min_exponent", "type": "Int", "desc": "Minimum exponent to format in scientific notation. If not zero\nall ticks in range from base^-min_expont to base^min_exponent\nare displayed without exponential notation.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimum exponent to format in scientific notation. If not zero\nall ticks in range from base^-min_expont to base^min_exponent\nare displayed without exponential notation."]}]}, "default": 0}, {"name": "ticker", "type": "Nullable(Instance(Ticker))", "desc": "The corresponding ``LogTicker``, used to determine the correct\nbase to use. If unset, the formatter will use base 10 as a default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The corresponding ", {"type": "literal", "children": ["LogTicker"]}, ", used to determine the correct\nbase to use. If unset, the formatter will use base 10 as a default."]}]}, "default": null}]}, {"name": "LogTicker", "bases": ["AdaptiveTicker"], "mro": ["LogTicker", "AdaptiveTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate ticks on a log scale.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate ticks on a log scale."]}]}, "props": []}, {"name": "MapOptions", "bases": ["Model"], "mro": ["MapOptions", "Model"], "desc": "Abstract base class for map options' models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for map options' models."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "lat", "type": "Required(Float)", "desc": "The latitude where the map should be centered.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The latitude where the map should be centered."]}]}, "default": "<Undefined>"}, {"name": "lng", "type": "Required(Float)", "desc": "The longitude where the map should be centered.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The longitude where the map should be centered."]}]}, "default": "<Undefined>"}, {"name": "zoom", "type": "Int", "desc": "The initial zoom level to use when displaying the map.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The initial zoom level to use when displaying the map."]}]}, "default": 12}]}, {"name": "MapPlot", "bases": ["Plot"], "mro": ["MapPlot", "Plot", "LayoutDOM", "UIElement", "Model"], "desc": "Abstract base class for map plot models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for map plot models."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Mapper", "bases": ["Transform"], "mro": ["Mapper", "Transform", "Model"], "desc": "Base class for mappers.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for mappers."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Marker", "bases": ["XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Marker", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Base class for glyphs that are simple markers with line and\nfill properties, located at an (x, y) location with a specified\nsize.\n\n.. note::\n    For simplicity, all markers have both line and fill properties\n    declared, however some marker types (`asterisk`, `cross`, `x`)\n    only draw lines. For these markers, the fill values are simply\n    ignored.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for glyphs that are simple markers with line and\nfill properties, located at an (x, y) location with a specified\nsize."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["For simplicity, all markers have both line and fill properties\ndeclared, however some marker types (", {"type": "title_reference", "children": ["asterisk"]}, ", ", {"type": "title_reference", "children": ["cross"]}, ", ", {"type": "title_reference", "children": ["x"]}, ")\nonly draw lines. For these markers, the fill values are simply\nignored."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to rotate the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to rotate the markers."]}]}, "default": 0.0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the markers."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the markers."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the markers."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the markers."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the markers."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the markers."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the markers."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the markers."]}]}, "default": 1.0}, {"name": "hit_dilation", "type": "Size", "desc": "The factor by which to dilate the hit radius\nwhich is responsible for defining the range in which a\nmarker responds to interactions with the Hover and Tap\ntools.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The factor by which to dilate the hit radius\nwhich is responsible for defining the range in which a\nmarker responds to interactions with the Hover and Tap\ntools."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the markers."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the markers."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the markers."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the markers."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the markers."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the markers."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the markers."]}]}, "default": 1}, {"name": "size", "type": "SizeSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The size (diameter) values for the markers in screen space units.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The size (diameter) values for the markers in screen space units."]}]}, "default": 4}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-axis coordinates for the center of the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-axis coordinates for the center of the markers."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-axis coordinates for the center of the markers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-axis coordinates for the center of the markers."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "Marking", "bases": ["Model"], "mro": ["Marking", "Model"], "desc": "Base class for graphical markings, e.g. arrow heads.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for graphical markings, e.g. arrow heads."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Markup", "bases": ["Widget"], "mro": ["Markup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Base class for Bokeh models that represent HTML markup elements.\n\nMarkups include e.g., ``<div>``, ``<p>``, and ``<pre>``.\n\nContent can be interpreted as `TeX and LaTeX input`_ when rendering as HTML.\nTeX/LaTeX processing can be disabled by setting ``disable_math`` to True.\n\n.. _`TeX and LaTeX input`: https://docs.mathjax.org/en/latest/basic/mathematics.html#tex-and-latex-input\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for Bokeh models that represent HTML markup elements."]}, {"type": "paragraph", "children": ["Markups include e.g., ", {"type": "literal", "children": ["<div>"]}, ", ", {"type": "literal", "children": ["<p>"]}, ", and ", {"type": "literal", "children": ["<pre>"]}, "."]}, {"type": "paragraph", "children": ["Content can be interpreted as ", {"type": "reference", "children": ["TeX and LaTeX input"]}, " when rendering as HTML.\nTeX/LaTeX processing can be disabled by setting ", {"type": "literal", "children": ["disable_math"]}, " to True."]}, {"type": "target", "children": []}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "disable_math", "type": "Bool", "desc": "Whether the contents should not be processed as TeX/LaTeX input.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the contents should not be processed as TeX/LaTeX input."]}]}, "default": false}, {"name": "text", "type": "String", "desc": "The text or HTML contents of the widget.\n\n.. note::\n    If the HTML content contains elements which size depends on\n    on external, asynchronously loaded resources, the size of\n    the widget may be computed incorrectly. This is in particular\n    an issue with images (``<img>``). To remedy this problem, one\n    either has to set explicit dimensions using CSS properties,\n    HTML attributes or model's ``width`` and ``height`` properties,\n    or inline images' contents using data URIs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text or HTML contents of the widget."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["If the HTML content contains elements which size depends on\non external, asynchronously loaded resources, the size of\nthe widget may be computed incorrectly. This is in particular\nan issue with images (", {"type": "literal", "children": ["<img>"]}, "). To remedy this problem, one\neither has to set explicit dimensions using CSS properties,\nHTML attributes or model's ", {"type": "literal", "children": ["width"]}, " and ", {"type": "literal", "children": ["height"]}, " properties,\nor inline images' contents using data URIs."]}]}]}, "default": ""}]}, {"name": "MathML", "bases": ["MathText"], "mro": ["MathML", "MathText", "BaseText", "Model"], "desc": "Render mathematical content using `MathML <https://www.w3.org/Math/>`_\nnotation.\n\nSee :ref:`ug_styling_mathtext` in the |user guide| for more information.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render mathematical content using ", {"type": "reference", "children": ["MathML"]}, {"type": "target", "children": []}, "\nnotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_styling_mathtext`"]}, " in the ", {"type": "substitution_reference", "children": ["user guide"]}, " for more information."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": []}, {"name": "MathText", "bases": ["BaseText"], "mro": ["MathText", "BaseText", "Model"], "desc": "Base class for renderers of mathematical content.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for renderers of mathematical content."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "MaxAggregator", "bases": ["RowAggregator"], "mro": ["MaxAggregator", "RowAggregator", "Model"], "desc": "Largest value across multiple rows.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Largest value across multiple rows."]}]}, "props": []}, {"name": "Maximum", "bases": ["ScalarExpression"], "mro": ["Maximum", "ScalarExpression", "Model"], "desc": "Computes maximum value of a data source's column. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Computes maximum value of a data source's column."]}]}, "props": [{"name": "field", "type": "Required(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": "<Undefined>"}, {"name": "initial", "type": "Nullable(Float)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": -Infinity}]}, {"name": "Menu", "bases": ["UIElement"], "mro": ["Menu", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "items", "type": "List(Instance(MenuItem))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": []}, {"name": "orientation", "type": "Enum('horizontal', 'vertical')", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": "vertical"}, {"name": "reversed", "type": "Bool", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": false}]}, {"name": "MenuItem", "bases": ["UIElement"], "mro": ["MenuItem", "UIElement", "Model"], "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "MercatorAxis", "bases": ["LinearAxis"], "mro": ["MercatorAxis", "LinearAxis", "ContinuousAxis", "Axis", "GuideRenderer", "Renderer", "Model"], "desc": "An axis that picks nice numbers for tick locations on a\nMercator scale. Configured with a ``MercatorTickFormatter`` by default.\n\nArgs:\n    dimension ('lat' or 'lon', optional) :\n        Whether this axis will display latitude or longitude values.\n        (default: 'lat')", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An axis that picks nice numbers for tick locations on a\nMercator scale. Configured with a ", {"type": "literal", "children": ["MercatorTickFormatter"]}, " by default."]}, {"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["Args:"]}, {"type": "definition", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["dimension ('lat' or 'lon', optional) :"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Whether this axis will display latitude or longitude values.\n(default: 'lat')"]}]}]}]}]}]}]}]}, "props": []}, {"name": "MercatorTickFormatter", "bases": ["BasicTickFormatter"], "mro": ["MercatorTickFormatter", "BasicTickFormatter", "TickFormatter", "Model"], "desc": "A ``TickFormatter`` for values in WebMercator units.\n\nSome map plot types internally use WebMercator to describe coordinates,\nplot bounds, etc. These units are not very human-friendly. This tick\nformatter will convert WebMercator units into Latitude and Longitude\nfor display on axes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A ", {"type": "literal", "children": ["TickFormatter"]}, " for values in WebMercator units."]}, {"type": "paragraph", "children": ["Some map plot types internally use WebMercator to describe coordinates,\nplot bounds, etc. These units are not very human-friendly. This tick\nformatter will convert WebMercator units into Latitude and Longitude\nfor display on axes."]}]}, "props": [{"name": "dimension", "type": "Nullable(Enum('lat', 'lon'))", "desc": "Specify whether to format ticks for Latitude or Longitude.\n\nProjected coordinates are not separable, computing Latitude and Longitude\ntick labels from Web Mercator requires considering coordinates from both\ndimensions together. Use this property to specify which result should be\nused for display.\n\nTypically, if the formatter is for an x-axis, then dimension should be\n``\"lon\"`` and if the formatter is for a y-axis, then the dimension\nshould be `\"lat\"``.\n\nIn order to prevent hard to debug errors, there is no default value for\ndimension. Using an un-configured ``MercatorTickFormatter`` will result in\na validation error and a JavaScript console error.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify whether to format ticks for Latitude or Longitude."]}, {"type": "paragraph", "children": ["Projected coordinates are not separable, computing Latitude and Longitude\ntick labels from Web Mercator requires considering coordinates from both\ndimensions together. Use this property to specify which result should be\nused for display."]}, {"type": "paragraph", "children": ["Typically, if the formatter is for an x-axis, then dimension should be\n", {"type": "literal", "children": ["\"lon\""]}, " and if the formatter is for a y-axis, then the dimension\nshould be ", {"type": "title_reference", "children": ["\"lat\"`"]}, "."]}, {"type": "paragraph", "children": ["In order to prevent hard to debug errors, there is no default value for\ndimension. Using an un-configured ", {"type": "literal", "children": ["MercatorTickFormatter"]}, " will result in\na validation error and a JavaScript console error."]}]}, "default": null}]}, {"name": "MercatorTicker", "bases": ["BasicTicker"], "mro": ["MercatorTicker", "BasicTicker", "AdaptiveTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate nice lat/lon ticks form underlying WebMercator coordinates.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate nice lat/lon ticks form underlying WebMercator coordinates."]}]}, "props": [{"name": "dimension", "type": "Nullable(Enum('lat', 'lon'))", "desc": "Specify whether to generate ticks for Latitude or Longitude.\n\nProjected coordinates are not separable, computing Latitude and Longitude\ntick locations from Web Mercator requires considering coordinates from\nboth dimensions together. Use this property to specify which result should\nbe returned.\n\nTypically, if the ticker is for an x-axis, then dimension should be\n``\"lon\"`` and if the ticker is for a y-axis, then the dimension\nshould be `\"lat\"``.\n\nIn order to prevent hard to debug errors, there is no default value for\ndimension. Using an un-configured ``MercatorTicker`` will result in a\nvalidation error and a JavaScript console error.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify whether to generate ticks for Latitude or Longitude."]}, {"type": "paragraph", "children": ["Projected coordinates are not separable, computing Latitude and Longitude\ntick locations from Web Mercator requires considering coordinates from\nboth dimensions together. Use this property to specify which result should\nbe returned."]}, {"type": "paragraph", "children": ["Typically, if the ticker is for an x-axis, then dimension should be\n", {"type": "literal", "children": ["\"lon\""]}, " and if the ticker is for a y-axis, then the dimension\nshould be ", {"type": "title_reference", "children": ["\"lat\"`"]}, "."]}, {"type": "paragraph", "children": ["In order to prevent hard to debug errors, there is no default value for\ndimension. Using an un-configured ", {"type": "literal", "children": ["MercatorTicker"]}, " will result in a\nvalidation error and a JavaScript console error."]}]}, "default": null}]}, {"name": "MercatorTileSource", "bases": ["TileSource"], "mro": ["MercatorTileSource", "TileSource", "Model"], "desc": "A base class for Mercator tile services (e.g. ``WMTSTileSource``).\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for Mercator tile services (e.g. ", {"type": "literal", "children": ["WMTSTileSource"]}, ")."]}]}, "props": [{"name": "snap_to_zoom", "type": "Bool", "desc": "Forces initial extents to snap to the closest larger zoom level.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Forces initial extents to snap to the closest larger zoom level."]}]}, "default": false}, {"name": "wrap_around", "type": "Bool", "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\nbounds of map.\n\n.. note::\n    Axis coordinates are not wrapped. To toggle axis label visibility,\n    use ``plot.axis.visible = False``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Enables continuous horizontal panning by wrapping the x-axis based on\nbounds of map."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Axis coordinates are not wrapped. To toggle axis label visibility,\nuse ", {"type": "literal", "children": ["plot.axis.visible = False"]}, "."]}]}]}, "default": true}]}, {"name": "MinAggregator", "bases": ["RowAggregator"], "mro": ["MinAggregator", "RowAggregator", "Model"], "desc": "Smallest value across multiple rows.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Smallest value across multiple rows."]}]}, "props": []}, {"name": "Minimum", "bases": ["ScalarExpression"], "mro": ["Minimum", "ScalarExpression", "Model"], "desc": "Computes minimum value of a data source's column. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Computes minimum value of a data source's column."]}]}, "props": [{"name": "field", "type": "Required(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": "<Undefined>"}, {"name": "initial", "type": "Nullable(Float)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": Infinity}]}, {"name": "Model", "bases": [], "mro": ["Model"], "desc": "Base class for all objects stored in Bokeh |Document| instances.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for all objects stored in Bokeh ", {"type": "substitution_reference", "children": ["Document"]}, " instances."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "js_event_callbacks", "type": "Dict(String, List(Instance(Callback)))", "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of event names to lists of ", {"type": "literal", "children": ["CustomJS"]}, " callbacks."]}, {"type": "paragraph", "children": ["Typically, rather then modifying this property directly, callbacks should be\nadded using the ", {"type": "literal", "children": ["Model.js_on_event"]}, " method:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["callback"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["CustomJS"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["code"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"console.log('tap event occurred')\""]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["js_on_event"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["'tap'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["callback"]}, {"type": "inline", "children": [")"]}]}]}, "default": {}}, {"name": "js_property_callbacks", "type": "Dict(String, List(Instance(Callback)))", "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A mapping of attribute names to lists of ", {"type": "literal", "children": ["CustomJS"]}, " callbacks, to be set up on\nBokehJS side when the document is created."]}, {"type": "paragraph", "children": ["Typically, rather then modifying this property directly, callbacks should be\nadded using the ", {"type": "literal", "children": ["Model.js_on_change"]}, " method:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["callback"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["CustomJS"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["code"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"console.log('stuff')\""]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["x_range"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["js_on_change"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["'start'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["callback"]}, {"type": "inline", "children": [")"]}]}]}, "default": {}}, {"name": "name", "type": "Nullable(String)", "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An arbitrary, user-supplied name for this model."]}, {"type": "paragraph", "children": ["This name can be useful when querying the document to retrieve specific\nBokeh models."]}, {"type": "literal_block", "children": [{"type": "inline", "children": [">>>"]}, " ", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["circle"]}, {"type": "inline", "children": ["(["]}, {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["3"]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["4"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["5"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["6"]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["name"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"temp\""]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": [">>>"]}, " ", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["select"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["name"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"temp\""]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["GlyphRenderer"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["id"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["'399d53f5-73e9-44d9-9527-544b761c7705'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["..."]}, {"type": "inline", "children": [")]"]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["No uniqueness guarantees or other conditions are enforced on any names\nthat are provided, nor is the name used directly by Bokeh for any\nreason."]}]}]}, "default": null}, {"name": "subscribed_events", "type": "Set(String)", "desc": "Collection of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to Python\nfor this model.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Collection of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to Python\nfor this model."]}]}, "default": []}, {"name": "syncable", "type": "Bool", "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ", {"type": "literal", "children": ["False"]}, " may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Setting this property to ", {"type": "literal", "children": ["False"]}, " will prevent any ", {"type": "literal", "children": ["on_change()"]}, " callbacks\non this object from triggering. However, any JS-side callbacks will still\nwork."]}]}]}, "default": true}, {"name": "tags", "type": "List(AnyRef)", "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional list of arbitrary, user-supplied values to attach to this\nmodel."]}, {"type": "paragraph", "children": ["This data can be useful when querying the document to retrieve specific\nBokeh models:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": [">>>"]}, " ", {"type": "inline", "children": ["r"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["circle"]}, {"type": "inline", "children": ["(["]}, {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["2"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["3"]}, {"type": "inline", "children": ["],"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["4"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["5"]}, {"type": "inline", "children": [","]}, {"type": "inline", "children": ["6"]}, {"type": "inline", "children": ["])"]}, "\n", {"type": "inline", "children": [">>>"]}, " ", {"type": "inline", "children": ["r"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["tags"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["\"foo\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["10"]}, {"type": "inline", "children": ["]"]}, "\n", {"type": "inline", "children": [">>>"]}, " ", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["select"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["tags"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'foo'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["10"]}, {"type": "inline", "children": ["])"]}, "\n", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["GlyphRenderer"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["id"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["'1de4c3df-a83d-480a-899b-fb263d3d5dd9'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["..."]}, {"type": "inline", "children": [")]"]}]}, {"type": "paragraph", "children": ["Or simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ", {"type": "literal", "children": ["CustomJS"]}, " callbacks, etc."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["No uniqueness guarantees or other conditions are enforced on any tags\nthat are provided, nor are the tags used directly by Bokeh for any\nreason."]}]}]}, "default": []}]}, {"name": "MonthsTicker", "bases": ["SingleIntervalTicker"], "mro": ["MonthsTicker", "SingleIntervalTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate ticks spaced apart by specific, even multiples of months.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate ticks spaced apart by specific, even multiples of months."]}]}, "props": [{"name": "months", "type": "Seq(Int)", "desc": "The intervals of months to use.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The intervals of months to use."]}]}, "default": []}]}, {"name": "MultiChoice", "bases": ["InputWidget"], "mro": ["MultiChoice", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "MultiChoice widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["MultiChoice widget."]}]}, "props": [{"name": "delete_button", "type": "Bool", "desc": "Whether to add a button to remove a selected option.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to add a button to remove a selected option."]}]}, "default": true}, {"name": "max_items", "type": "Nullable(Int)", "desc": "The maximum number of items that can be selected.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The maximum number of items that can be selected."]}]}, "default": null}, {"name": "option_limit", "type": "Nullable(Int)", "desc": "The number of choices that will be rendered in the dropdown.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number of choices that will be rendered in the dropdown."]}]}, "default": null}, {"name": "options", "type": "List(Either(String, Tuple(String, String)))", "desc": "Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n``(value, label)``. In the latter case, the visible widget text for each\nvalue will be corresponding given label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n", {"type": "literal", "children": ["(value, label)"]}, ". In the latter case, the visible widget text for each\nvalue will be corresponding given label."]}]}, "default": []}, {"name": "placeholder", "type": "Nullable(String)", "desc": "A string that is displayed if not item is added.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A string that is displayed if not item is added."]}]}, "default": null}, {"name": "search_option_limit", "type": "Nullable(Int)", "desc": "The number of choices that will be rendered in the dropdown\nwhen search string is entered.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number of choices that will be rendered in the dropdown\nwhen search string is entered."]}]}, "default": null}, {"name": "solid", "type": "Bool", "desc": "Specify whether the choices should be solidly filled.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify whether the choices should be solidly filled."]}]}, "default": true}, {"name": "value", "type": "List(String)", "desc": "Initial or selected values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected values."]}]}, "default": []}]}, {"name": "MultiLine", "bases": ["LineGlyph"], "mro": ["MultiLine", "LineGlyph", "Glyph", "Model"], "desc": "Render several lines.\n\nThe data for the ``MultiLine`` glyph is different in that the vector of\nvalues is not a vector of scalars. Rather, it is a \"list of lists\".\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/MultiLine.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render several lines."]}, {"type": "paragraph", "children": ["The data for the ", {"type": "literal", "children": ["MultiLine"]}, " glyph is different in that the vector of\nvalues is not a vector of scalars. Rather, it is a \"list of lists\"."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/MultiLine.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the lines."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the lines."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the lines."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the lines."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the lines."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the lines."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the lines.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the lines."]}]}, "default": 1}, {"name": "xs", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for all the lines, given as a \"list of lists\".", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for all the lines, given as a \"list of lists\"."]}]}, "default": {"type": "field", "field": "xs"}}, {"name": "ys", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for all the lines, given as a \"list of lists\".", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for all the lines, given as a \"list of lists\"."]}]}, "default": {"type": "field", "field": "ys"}}]}, {"name": "MultiPolygons", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["MultiPolygons", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render several MultiPolygon.\n\nModeled on geoJSON - the data for the ``MultiPolygons`` glyph is\ndifferent in that the vector of values is not a vector of scalars.\nRather, it is a \"list of lists of lists of lists\".\n\nDuring box selection only multi-polygons entirely contained in the\nselection box will be included.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/MultiPolygons.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render several MultiPolygon."]}, {"type": "paragraph", "children": ["Modeled on geoJSON - the data for the ", {"type": "literal", "children": ["MultiPolygons"]}, " glyph is\ndifferent in that the vector of values is not a vector of scalars.\nRather, it is a \"list of lists of lists of lists\"."]}, {"type": "paragraph", "children": ["During box selection only multi-polygons entirely contained in the\nselection box will be included."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/MultiPolygons.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the multipolygons."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the multipolygons."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the multipolygons."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the multipolygons."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the multipolygons."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the multipolygons."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the multipolygons."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the multipolygons."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the multipolygons."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the multipolygons."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the multipolygons."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the multipolygons."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the multipolygons."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the multipolygons."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the multipolygons.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the multipolygons."]}]}, "default": 1}, {"name": "xs", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for all the patches, given as a nested list.\n\n.. note::\n    Each item in ``MultiPolygons`` represents one MultiPolygon and each\n    MultiPolygon is comprised of ``n`` Polygons. Each Polygon is made of\n    one exterior ring optionally followed by ``m`` interior rings (holes).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for all the patches, given as a nested list."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Each item in ", {"type": "literal", "children": ["MultiPolygons"]}, " represents one MultiPolygon and each\nMultiPolygon is comprised of ", {"type": "literal", "children": ["n"]}, " Polygons. Each Polygon is made of\none exterior ring optionally followed by ", {"type": "literal", "children": ["m"]}, " interior rings (holes)."]}]}]}, "default": {"type": "field", "field": "xs"}}, {"name": "ys", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n.. note::\n    Each item in ``MultiPolygons`` represents one MultiPolygon and each\n    MultiPolygon is comprised of ``n`` Polygons. Each Polygon is made of\n    one exterior ring optionally followed by ``m`` interior rings (holes).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for all the patches, given as a \"list of lists\"."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Each item in ", {"type": "literal", "children": ["MultiPolygons"]}, " represents one MultiPolygon and each\nMultiPolygon is comprised of ", {"type": "literal", "children": ["n"]}, " Polygons. Each Polygon is made of\none exterior ring optionally followed by ", {"type": "literal", "children": ["m"]}, " interior rings (holes)."]}]}]}, "default": {"type": "field", "field": "ys"}}]}, {"name": "MultiSelect", "bases": ["InputWidget"], "mro": ["MultiSelect", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Multi-select widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Multi-select widget."]}]}, "props": [{"name": "options", "type": "List(Either(String, Tuple(String, String)))", "desc": "Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n``(value, label)``. In the latter case, the visible widget text for each\nvalue will be corresponding given label.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n", {"type": "literal", "children": ["(value, label)"]}, ". In the latter case, the visible widget text for each\nvalue will be corresponding given label."]}]}, "default": []}, {"name": "size", "type": "Int", "desc": "The number of visible options in the dropdown list. (This uses the\n``select`` HTML element's ``size`` attribute. Some browsers might not\nshow less than 3 options.)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number of visible options in the dropdown list. (This uses the\n", {"type": "literal", "children": ["select"]}, " HTML element's ", {"type": "literal", "children": ["size"]}, " attribute. Some browsers might not\nshow less than 3 options.)"]}]}, "default": 4}, {"name": "value", "type": "List(String)", "desc": "Initial or selected values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected values."]}]}, "default": []}]}, {"name": "NoOverlap", "bases": ["LabelingPolicy"], "mro": ["NoOverlap", "LabelingPolicy", "Model"], "desc": "Basic labeling policy avoiding label overlap. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Basic labeling policy avoiding label overlap."]}]}, "props": [{"name": "min_distance", "type": "Int", "desc": "Minimum distance between labels in pixels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimum distance between labels in pixels."]}]}, "default": 5}]}, {"name": "NodeCoordinates", "bases": ["GraphCoordinates"], "mro": ["NodeCoordinates", "GraphCoordinates", "CoordinateTransform", "Expression", "Model"], "desc": "Node coordinate expression obtained from ``LayoutProvider``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Node coordinate expression obtained from ", {"type": "literal", "children": ["LayoutProvider"]}]}]}, "props": []}, {"name": "NodesAndAdjacentNodes", "bases": ["GraphHitTestPolicy"], "mro": ["NodesAndAdjacentNodes", "GraphHitTestPolicy", "Model"], "desc": "With the ``NodesAndAdjacentNodes`` policy, inspection or selection of\ngraph nodes will also result in the inspection or selection any nodes that\nare immediately adjacent (connected by a single edge). There is no\nselection or inspection of graph edges, and no indication of which node is\nthe tool-selected one from the policy-selected nodes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["With the ", {"type": "literal", "children": ["NodesAndAdjacentNodes"]}, " policy, inspection or selection of\ngraph nodes will also result in the inspection or selection any nodes that\nare immediately adjacent (connected by a single edge). There is no\nselection or inspection of graph edges, and no indication of which node is\nthe tool-selected one from the policy-selected nodes."]}]}, "props": []}, {"name": "NodesAndLinkedEdges", "bases": ["GraphHitTestPolicy"], "mro": ["NodesAndLinkedEdges", "GraphHitTestPolicy", "Model"], "desc": "With the ``NodesAndLinkedEdges`` policy, inspection or selection of graph\nnodes will result in the inspection or selection of the node and of the\nlinked graph edges. There is no direct selection or inspection of graph\nedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["With the ", {"type": "literal", "children": ["NodesAndLinkedEdges"]}, " policy, inspection or selection of graph\nnodes will result in the inspection or selection of the node and of the\nlinked graph edges. There is no direct selection or inspection of graph\nedges."]}]}, "props": []}, {"name": "NodesOnly", "bases": ["GraphHitTestPolicy"], "mro": ["NodesOnly", "GraphHitTestPolicy", "Model"], "desc": "With the ``NodesOnly`` policy, only graph nodes are able to be selected and\ninspected. There is no selection or inspection of graph edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["With the ", {"type": "literal", "children": ["NodesOnly"]}, " policy, only graph nodes are able to be selected and\ninspected. There is no selection or inspection of graph edges."]}]}, "props": []}, {"name": "NormalHead", "bases": ["ArrowHead"], "mro": ["NormalHead", "ArrowHead", "Marking", "Model"], "desc": "Render a closed-body arrow head.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a closed-body arrow head."]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the arrow head interior.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the arrow head interior."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the arrow head interior.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the arrow head interior."]}]}, "default": "black"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the arrow head outline."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the arrow head outline."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the arrow head outline."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the arrow head outline."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the arrow head outline."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the arrow head outline."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the arrow head outline."]}]}, "default": 1}]}, {"name": "NumberEditor", "bases": ["CellEditor"], "mro": ["NumberEditor", "CellEditor", "Model"], "desc": "Spinner-based number cell editor.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Spinner-based number cell editor."]}]}, "props": [{"name": "step", "type": "Float", "desc": "The major step value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The major step value."]}]}, "default": 0.01}]}, {"name": "NumberFormatter", "bases": ["StringFormatter"], "mro": ["NumberFormatter", "StringFormatter", "CellFormatter", "Model"], "desc": "Number cell formatter.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Number cell formatter."]}]}, "props": [{"name": "format", "type": "String", "desc": "The number format, as defined in the following tables:\n\n**NUMBERS**:\n\n============ ============== ===============\nNumber       Format         String\n============ ============== ===============\n10000        '0,0.0000'     10,000.0000\n10000.23     '0,0'          10,000\n10000.23     '+0,0'         +10,000\n-10000       '0,0.0'        -10,000.0\n10000.1234   '0.000'        10000.123\n10000.1234   '0[.]00000'    10000.12340\n-10000       '(0,0.0000)'   (10,000.0000)\n-0.23        '.00'          -.23\n-0.23        '(.00)'        (.23)\n0.23         '0.00000'      0.23000\n0.23         '0.0[0000]'    0.23\n1230974      '0.0a'         1.2m\n1460         '0 a'          1 k\n-104000      '0a'           -104k\n1            '0o'           1st\n52           '0o'           52nd\n23           '0o'           23rd\n100          '0o'           100th\n============ ============== ===============\n\n**CURRENCY**:\n\n=========== =============== =============\nNumber      Format          String\n=========== =============== =============\n1000.234    '$0,0.00'       $1,000.23\n1000.2      '0,0[.]00 $'    1,000.20 $\n1001        '$ 0,0[.]00'    $ 1,001\n-1000.234   '($0,0)'        ($1,000)\n-1000.234   '$0.00'         -$1000.23\n1230974     '($ 0.00 a)'    $ 1.23 m\n=========== =============== =============\n\n**BYTES**:\n\n=============== =========== ============\nNumber          Format      String\n=============== =========== ============\n100             '0b'        100B\n2048            '0 b'       2 KB\n7884486213      '0.0b'      7.3GB\n3467479682787   '0.000 b'   3.154 TB\n=============== =========== ============\n\n**PERCENTAGES**:\n\n============= ============= ===========\nNumber        Format        String\n============= ============= ===========\n1             '0%'          100%\n0.974878234   '0.000%'      97.488%\n-0.43         '0 %'         -43 %\n0.43          '(0.000 %)'   43.000 %\n============= ============= ===========\n\n**TIME**:\n\n============ ============== ============\nNumber       Format         String\n============ ============== ============\n25           '00:00:00'     0:00:25\n238          '00:00:00'     0:03:58\n63846        '00:00:00'     17:44:06\n============ ============== ============\n\nFor the complete specification, see http://numbrojs.com/format.html", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number format, as defined in the following tables:"]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["NUMBERS"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0.0000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10,000.0000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10,000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'+0,0'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["+10,000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-10000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0.0'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-10,000.0"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.1234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10000.123"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.1234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0[.]00000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10000.12340"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-10000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'(0,0.0000)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["(10,000.0000)"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'.00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'(.00)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["(.23)"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.00000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0.23000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.0[0000]'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1230974"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.0a'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1.2m"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1460"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0 a'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1 k"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-104000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0a'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-104k"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1st"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["52"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["52nd"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["23rd"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["100"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["100th"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["CURRENCY"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1000.234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'$0,0.00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["$1,000.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1000.2"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0[.]00 $'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1,000.20 $"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1001"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'$ 0,0[.]00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["$ 1,001"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-1000.234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'($0,0)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["($1,000)"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-1000.234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'$0.00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-$1000.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1230974"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'($ 0.00 a)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["$ 1.23 m"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["BYTES"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["100"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["100B"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["2048"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0 b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["2 KB"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["7884486213"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.0b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["7.3GB"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["3467479682787"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.000 b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["3.154 TB"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["PERCENTAGES"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0%'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["100%"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.974878234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.000%'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["97.488%"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-0.43"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0 %'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-43 %"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.43"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'(0.000 %)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["43.000 %"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["TIME"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["25"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'00:00:00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0:00:25"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["238"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'00:00:00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0:03:58"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["63846"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'00:00:00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["17:44:06"]}]}]}]}]}]}, {"type": "paragraph", "children": ["For the complete specification, see ", {"type": "reference", "children": ["http://numbrojs.com/format.html"]}]}]}, "default": "0,0"}, {"name": "language", "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')", "desc": "The language to use for formatting language-specific features (e.g. thousands separator).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The language to use for formatting language-specific features (e.g. thousands separator)."]}]}, "default": "en"}, {"name": "rounding", "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')", "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup)."]}]}, "default": "round"}]}, {"name": "NumeralTickFormatter", "bases": ["TickFormatter"], "mro": ["NumeralTickFormatter", "TickFormatter", "Model"], "desc": "Tick formatter based on a human-readable format string. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Tick formatter based on a human-readable format string."]}]}, "props": [{"name": "format", "type": "String", "desc": "The number format, as defined in the following tables:\n\n**NUMBERS**:\n\n============ ============== ===============\nNumber       Format         String\n============ ============== ===============\n10000        '0,0.0000'     10,000.0000\n10000.23     '0,0'          10,000\n10000.23     '+0,0'         +10,000\n-10000       '0,0.0'        -10,000.0\n10000.1234   '0.000'        10000.123\n10000.1234   '0[.]00000'    10000.12340\n-10000       '(0,0.0000)'   (10,000.0000)\n-0.23        '.00'          -.23\n-0.23        '(.00)'        (.23)\n0.23         '0.00000'      0.23000\n0.23         '0.0[0000]'    0.23\n1230974      '0.0a'         1.2m\n1460         '0 a'          1 k\n-104000      '0a'           -104k\n1            '0o'           1st\n52           '0o'           52nd\n23           '0o'           23rd\n100          '0o'           100th\n============ ============== ===============\n\n**CURRENCY**:\n\n=========== =============== =============\nNumber      Format          String\n=========== =============== =============\n1000.234    '$0,0.00'       $1,000.23\n1000.2      '0,0[.]00 $'    1,000.20 $\n1001        '$ 0,0[.]00'    $ 1,001\n-1000.234   '($0,0)'        ($1,000)\n-1000.234   '$0.00'         -$1000.23\n1230974     '($ 0.00 a)'    $ 1.23 m\n=========== =============== =============\n\n**BYTES**:\n\n=============== =========== ============\nNumber          Format      String\n=============== =========== ============\n100             '0b'        100B\n2048            '0 b'       2 KB\n7884486213      '0.0b'      7.3GB\n3467479682787   '0.000 b'   3.154 TB\n=============== =========== ============\n\n**PERCENTAGES**:\n\n============= ============= ===========\nNumber        Format        String\n============= ============= ===========\n1             '0%'          100%\n0.974878234   '0.000%'      97.488%\n-0.43         '0 %'         -43 %\n0.43          '(0.000 %)'   43.000 %\n============= ============= ===========\n\n**TIME**:\n\n============ ============== ============\nNumber       Format         String\n============ ============== ============\n25           '00:00:00'     0:00:25\n238          '00:00:00'     0:03:58\n63846        '00:00:00'     17:44:06\n============ ============== ============\n\nFor the complete specification, see http://numbrojs.com/format.html", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number format, as defined in the following tables:"]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["NUMBERS"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0.0000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10,000.0000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10,000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'+0,0'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["+10,000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-10000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0.0'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-10,000.0"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.1234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10000.123"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["10000.1234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0[.]00000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["10000.12340"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-10000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'(0,0.0000)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["(10,000.0000)"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'.00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'(.00)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["(.23)"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.00000'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0.23000"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.0[0000]'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1230974"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.0a'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1.2m"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1460"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0 a'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1 k"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-104000"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0a'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-104k"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1st"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["52"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["52nd"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["23"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["23rd"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["100"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0o'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["100th"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["CURRENCY"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1000.234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'$0,0.00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["$1,000.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1000.2"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0,0[.]00 $'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["1,000.20 $"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1001"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'$ 0,0[.]00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["$ 1,001"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-1000.234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'($0,0)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["($1,000)"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-1000.234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'$0.00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-$1000.23"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1230974"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'($ 0.00 a)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["$ 1.23 m"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["BYTES"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["100"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["100B"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["2048"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0 b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["2 KB"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["7884486213"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.0b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["7.3GB"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["3467479682787"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.000 b'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["3.154 TB"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["PERCENTAGES"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["1"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0%'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["100%"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.974878234"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0.000%'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["97.488%"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["-0.43"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'0 %'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["-43 %"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["0.43"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'(0.000 %)'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["43.000 %"]}]}]}]}]}]}, {"type": "paragraph", "children": [{"type": "strong", "children": ["TIME"]}, ":"]}, {"type": "table", "children": [{"type": "tgroup", "children": [{"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "colspec", "children": []}, {"type": "thead", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["Number"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["Format"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["String"]}]}]}]}, {"type": "tbody", "children": [{"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["25"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'00:00:00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0:00:25"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["238"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'00:00:00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["0:03:58"]}]}]}, {"type": "row", "children": [{"type": "entry", "children": [{"type": "paragraph", "children": ["63846"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["'00:00:00'"]}]}, {"type": "entry", "children": [{"type": "paragraph", "children": ["17:44:06"]}]}]}]}]}]}, {"type": "paragraph", "children": ["For the complete specification, see ", {"type": "reference", "children": ["http://numbrojs.com/format.html"]}]}]}, "default": "0,0"}, {"name": "language", "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')", "desc": "The language to use for formatting language-specific features (e.g. thousands separator).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The language to use for formatting language-specific features (e.g. thousands separator)."]}]}, "default": "en"}, {"name": "rounding", "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')", "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup)."]}]}, "default": "round"}]}, {"name": "NumericInput", "bases": ["InputWidget"], "mro": ["NumericInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Numeric input widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Numeric input widget."]}]}, "props": [{"name": "format", "type": "Either(Null, String, Instance(TickFormatter))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "high", "type": "Either(Null, Float, Int)", "desc": "Optional highest allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Optional highest allowable value."]}]}, "default": null}, {"name": "low", "type": "Either(Null, Float, Int)", "desc": "Optional lowest allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Optional lowest allowable value."]}]}, "default": null}, {"name": "mode", "type": "Enum('int', 'float')", "desc": "Define the type of number which can be enter in the input\n\nexample\nmode int: 1, -1, 156\nmode float: 1, -1.2, 1.1e-25", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Define the type of number which can be enter in the input"]}, {"type": "paragraph", "children": ["example\nmode int: 1, -1, 156\nmode float: 1, -1.2, 1.1e-25"]}]}, "default": "int"}, {"name": "placeholder", "type": "String", "desc": "Placeholder for empty input field.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Placeholder for empty input field."]}]}, "default": ""}, {"name": "value", "type": "Either(Null, Float, Int)", "desc": "Initial or entered value.\n\nChange events are triggered whenever <enter> is pressed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or entered value."]}, {"type": "paragraph", "children": ["Change events are triggered whenever <enter> is pressed."]}]}, "default": null}]}, {"name": "OpenHead", "bases": ["ArrowHead"], "mro": ["OpenHead", "ArrowHead", "Marking", "Model"], "desc": "Render an open-body arrow head.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render an open-body arrow head."]}]}, "props": [{"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the arrow head outline."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the arrow head outline."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the arrow head outline."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the arrow head outline."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the arrow head outline."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the arrow head outline."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the arrow head outline."]}]}, "default": 1}]}, {"name": "OpenURL", "bases": ["Callback"], "mro": ["OpenURL", "Callback", "Model"], "desc": "Open a URL in a new or current tab or window.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Open a URL in a new or current tab or window."]}]}, "props": [{"name": "same_tab", "type": "Bool", "desc": "Open URL in a new (`False`, default) or current (`True`) tab or window.\nFor `same_tab=False`, whether tab or window will be opened is browser\ndependent.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Open URL in a new (", {"type": "title_reference", "children": ["False"]}, ", default) or current (", {"type": "title_reference", "children": ["True"]}, ") tab or window.\nFor ", {"type": "title_reference", "children": ["same_tab=False"]}, ", whether tab or window will be opened is browser\ndependent."]}]}, "default": false}, {"name": "url", "type": "String", "desc": "The URL to direct the web browser to. This can be a template string,\nwhich will be formatted with data from the data source.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The URL to direct the web browser to. This can be a template string,\nwhich will be formatted with data from the data source."]}]}, "default": "http://"}]}, {"name": "PanTool", "bases": ["Drag"], "mro": ["PanTool", "Drag", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |pan_icon|\n\nThe pan tool allows the user to pan a Plot by left-dragging a mouse, or on\ntouch devices by dragging a finger or stylus, across the plot region.\n\nThe pan tool also activates the border regions of a Plot for \"single axis\"\npanning. For instance, dragging in the vertical border or axis will effect\na pan in the vertical direction only, with horizontal dimension kept fixed.\n\n.. |pan_icon| image:: /_images/icons/Pan.png\n    :height: 24px\n    :alt: Icon of four arrows meeting in a plus shape representing the pan tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["pan_icon"]}]}, {"type": "paragraph", "children": ["The pan tool allows the user to pan a Plot by left-dragging a mouse, or on\ntouch devices by dragging a finger or stylus, across the plot region."]}, {"type": "paragraph", "children": ["The pan tool also activates the border regions of a Plot for \"single axis\"\npanning. For instance, dragging in the vertical border or axis will effect\na pan in the vertical direction only, with horizontal dimension kept fixed."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions the pan tool is constrained to act in. By default\nthe pan tool will pan in any dimension, but can be configured to only\npan horizontally across the width of the plot, or vertically across the\nheight of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the pan tool is constrained to act in. By default\nthe pan tool will pan in any dimension, but can be configured to only\npan horizontally across the width of the plot, or vertically across the\nheight of the plot."]}]}, "default": "both"}]}, {"name": "Pane", "bases": ["UIElement"], "mro": ["Pane", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "children", "type": "List(Either(String, Instance(UIElement)))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": []}]}, {"name": "Paragraph", "bases": ["Markup"], "mro": ["Paragraph", "Markup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A block (paragraph) of text.\n\nThis Bokeh model corresponds to an HTML ``<p>`` element.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/interaction/widgets/paragraph.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A block (paragraph) of text."]}, {"type": "paragraph", "children": ["This Bokeh model corresponds to an HTML ", {"type": "literal", "children": ["<p>"]}, " element."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/interaction/widgets/paragraph.py\n    :source-position: below"]}]}]}]}, "props": []}, {"name": "PasswordInput", "bases": ["TextInput"], "mro": ["PasswordInput", "TextInput", "TextLikeInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Single-line password input widget.\n\nThis widget hides the input value so that it is not visible in the browser.\n\n.. warning::\n    Secure transmission of the password to Bokeh server application code\n    requires configuring the server for SSL (i.e. HTTPS) termination.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Single-line password input widget."]}, {"type": "paragraph", "children": ["This widget hides the input value so that it is not visible in the browser."]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["Secure transmission of the password to Bokeh server application code\nrequires configuring the server for SSL (i.e. HTTPS) termination."]}]}]}, "props": []}, {"name": "Patch", "bases": ["ConnectedXYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Patch", "ConnectedXYGlyph", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render a single patch.\n\nThe ``Patch`` glyph is different from most other glyphs in that the vector\nof values only produces one glyph on the Plot.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Patch.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a single patch."]}, {"type": "paragraph", "children": ["The ", {"type": "literal", "children": ["Patch"]}, " glyph is different from most other glyphs in that the vector\nof values only produces one glyph on the Plot."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Patch.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the patch."]}]}, "default": 1.0}, {"name": "fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the patch."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "Alpha", "desc": "The hatch alpha values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the patch."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "Nullable(Color)", "desc": "The hatch color values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the patch."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the patch."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "Nullable(String)", "desc": "The hatch pattern values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the patch."]}]}, "default": null}, {"name": "hatch_scale", "type": "Size", "desc": "The hatch scale values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the patch."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "Size", "desc": "The hatch weight values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the patch."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the patch."]}]}, "default": 1.0}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the patch."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the patch."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the patch."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the patch."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the patch."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the patch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the patch."]}]}, "default": 1}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for the points of the patch.\n\n.. note::\n    A patch may comprise multiple polygons. In this case the\n    x-coordinates for each polygon should be separated by NaN\n    values in the sequence.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for the points of the patch."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["A patch may comprise multiple polygons. In this case the\nx-coordinates for each polygon should be separated by NaN\nvalues in the sequence."]}]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for the points of the patch.\n\n.. note::\n    A patch may comprise multiple polygons. In this case the\n    y-coordinates for each polygon should be separated by NaN\n    values in the sequence.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for the points of the patch."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["A patch may comprise multiple polygons. In this case the\ny-coordinates for each polygon should be separated by NaN\nvalues in the sequence."]}]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "Patches", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Patches", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render several patches.\n\nThe data for the ``Patches`` glyph is different in that the vector of\nvalues is not a vector of scalars. Rather, it is a \"list of lists\".\n\nDuring box selection only patches entirely contained in the\nselection box will be included.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Patches.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render several patches."]}, {"type": "paragraph", "children": ["The data for the ", {"type": "literal", "children": ["Patches"]}, " glyph is different in that the vector of\nvalues is not a vector of scalars. Rather, it is a \"list of lists\"."]}, {"type": "paragraph", "children": ["During box selection only patches entirely contained in the\nselection box will be included."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Patches.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the patches."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the patches."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the patches."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the patches."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the patches."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the patches."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the patches."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the patches."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the patches."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the patches."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the patches."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the patches."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the patches."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the patches."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the patches.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the patches."]}]}, "default": 1}, {"name": "xs", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for all the patches, given as a \"list of lists\".\n\n.. note::\n    Individual patches may comprise multiple polygons. In this case\n    the x-coordinates for each polygon should be separated by NaN\n    values in the sublists.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for all the patches, given as a \"list of lists\"."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Individual patches may comprise multiple polygons. In this case\nthe x-coordinates for each polygon should be separated by NaN\nvalues in the sublists."]}]}]}, "default": {"type": "field", "field": "xs"}}, {"name": "ys", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n.. note::\n    Individual patches may comprise multiple polygons. In this case\n    the y-coordinates for each polygon should be separated by NaN\n    values in the sublists.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for all the patches, given as a \"list of lists\"."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Individual patches may comprise multiple polygons. In this case\nthe y-coordinates for each polygon should be separated by NaN\nvalues in the sublists."]}]}]}, "default": {"type": "field", "field": "ys"}}]}, {"name": "PercentEditor", "bases": ["CellEditor"], "mro": ["PercentEditor", "CellEditor", "Model"], "desc": "``IntEditor`` optimized for editing percentages.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["IntEditor"]}, " optimized for editing percentages."]}]}, "props": []}, {"name": "PlainText", "bases": ["BaseText"], "mro": ["PlainText", "BaseText", "Model"], "desc": "Represents plain text in contexts where text parsing is allowed.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Represents plain text in contexts where text parsing is allowed."]}]}, "props": []}, {"name": "Plot", "bases": ["LayoutDOM"], "mro": ["Plot", "LayoutDOM", "UIElement", "Model"], "desc": "Model representing a plot, containing glyphs, guides, annotations.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Model representing a plot, containing glyphs, guides, annotations."]}]}, "props": [{"name": "above", "type": "List(Instance(Renderer))", "desc": "A list of renderers to occupy the area above of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of renderers to occupy the area above of the plot."]}]}, "default": []}, {"name": "aspect_scale", "type": "Float", "desc": "A value to be given for increased aspect ratio control. This value is added\nmultiplicatively to the calculated value required for ``match_aspect``.\n``aspect_scale`` is defined as the ratio of width over height of the figure.\n\nFor example, a plot with ``aspect_scale`` value of 2 will result in a\nsquare in *data units* to be drawn on the screen as a rectangle with a\npixel width twice as long as its pixel height.\n\n.. note::\n    This setting only takes effect if ``match_aspect`` is set to ``True``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A value to be given for increased aspect ratio control. This value is added\nmultiplicatively to the calculated value required for ", {"type": "literal", "children": ["match_aspect"]}, ".\n", {"type": "literal", "children": ["aspect_scale"]}, " is defined as the ratio of width over height of the figure."]}, {"type": "paragraph", "children": ["For example, a plot with ", {"type": "literal", "children": ["aspect_scale"]}, " value of 2 will result in a\nsquare in ", {"type": "emphasis", "children": ["data units"]}, " to be drawn on the screen as a rectangle with a\npixel width twice as long as its pixel height."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This setting only takes effect if ", {"type": "literal", "children": ["match_aspect"]}, " is set to ", {"type": "literal", "children": ["True"]}, "."]}]}]}, "default": 1}, {"name": "background_fill_alpha", "type": "Alpha", "desc": "The fill alpha for the plot background style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha for the plot background style."]}]}, "default": 1.0}, {"name": "background_fill_color", "type": "Nullable(Color)", "desc": "The fill color for the plot background style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color for the plot background style."]}]}, "default": "#ffffff"}, {"name": "below", "type": "List(Instance(Renderer))", "desc": "A list of renderers to occupy the area below of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of renderers to occupy the area below of the plot."]}]}, "default": []}, {"name": "border_fill_alpha", "type": "Alpha", "desc": "The fill alpha for the plot border style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha for the plot border style."]}]}, "default": 1.0}, {"name": "border_fill_color", "type": "Nullable(Color)", "desc": "The fill color for the plot border style.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color for the plot border style."]}]}, "default": "#ffffff"}, {"name": "center", "type": "List(Instance(Renderer))", "desc": "A list of renderers to occupy the center area (frame) of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of renderers to occupy the center area (frame) of the plot."]}]}, "default": []}, {"name": "extra_x_ranges", "type": "Dict(String, Instance(Range))", "desc": "Additional named ranges to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Additional named ranges to make available for mapping x-coordinates."]}, {"type": "paragraph", "children": ["This is useful for adding additional axes."]}]}, "default": {}}, {"name": "extra_x_scales", "type": "Dict(String, Instance(Scale))", "desc": "Additional named scales to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Additional named scales to make available for mapping x-coordinates."]}, {"type": "paragraph", "children": ["This is useful for adding additional axes."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This feature is experimental and may change in the short term."]}]}]}, "default": {}}, {"name": "extra_y_ranges", "type": "Dict(String, Instance(Range))", "desc": "Additional named ranges to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Additional named ranges to make available for mapping y-coordinates."]}, {"type": "paragraph", "children": ["This is useful for adding additional axes."]}]}, "default": {}}, {"name": "extra_y_scales", "type": "Dict(String, Instance(Scale))", "desc": "Additional named scales to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Additional named scales to make available for mapping y-coordinates."]}, {"type": "paragraph", "children": ["This is useful for adding additional axes."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This feature is experimental and may change in the short term."]}]}]}, "default": {}}, {"name": "frame_align", "type": "Either(Bool, Struct(left=Bool, right=Bool, top=Bool, bottom=Bool))", "desc": "Allows to specify which frame edges to align in multiple-plot layouts.\n\nThe default is to align all edges, but users can opt-out from alignment\nof each individual edge or all edges. Note also that other proproperties\nmay disable alignment of certain edges, especially when using fixed frame\nsize (``frame_width`` and ``frame_height`` properties).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to specify which frame edges to align in multiple-plot layouts."]}, {"type": "paragraph", "children": ["The default is to align all edges, but users can opt-out from alignment\nof each individual edge or all edges. Note also that other proproperties\nmay disable alignment of certain edges, especially when using fixed frame\nsize (", {"type": "literal", "children": ["frame_width"]}, " and ", {"type": "literal", "children": ["frame_height"]}, " properties)."]}]}, "default": true}, {"name": "frame_height", "type": "Nullable(Int)", "desc": "The height of a plot frame or the inner height of a plot, excluding any\naxes, titles, border padding, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The height of a plot frame or the inner height of a plot, excluding any\naxes, titles, border padding, etc."]}]}, "default": null}, {"name": "frame_width", "type": "Nullable(Int)", "desc": "The width of a plot frame or the inner width of a plot, excluding any\naxes, titles, border padding, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width of a plot frame or the inner width of a plot, excluding any\naxes, titles, border padding, etc."]}]}, "default": null}, {"name": "hidpi", "type": "Bool", "desc": "Whether to use HiDPI mode when available.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to use HiDPI mode when available."]}]}, "default": true}, {"name": "hold_render", "type": "Bool", "desc": "When set to True all requests to repaint the plot will be hold off.\n\nThis is useful when periodically updating many glyphs. For example, let's\nassume we have 10 lines on a plot, each with its own datasource. We stream\nto all of them every second in a for loop like so:\n\n.. code:: python\n\n    for line in lines:\n        line.stream(new_points())\n\nThe problem with this code is that every stream triggers a re-rendering of\nthe plot. Even tough repainting only on the last stream would produce almost\nidentical visual effect. Especially for lines with many points this becomes\ncomputationally expensive and can freeze your browser. Using a convenience\nmethod `hold`, we can control when rendering is initiated like so:\n\n.. code:: python\n\n    with plot.hold(render=True):\n        for line in lines:\n            line.stream(new_points())\n\nIn this case we render newly appended points only after the last stream.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["When set to True all requests to repaint the plot will be hold off."]}, {"type": "paragraph", "children": ["This is useful when periodically updating many glyphs. For example, let's\nassume we have 10 lines on a plot, each with its own datasource. We stream\nto all of them every second in a for loop like so:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["for"]}, " ", {"type": "inline", "children": ["line"]}, " ", {"type": "inline", "children": ["in"]}, " ", {"type": "inline", "children": ["lines"]}, {"type": "inline", "children": [":"]}, "\n    ", {"type": "inline", "children": ["line"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["stream"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["new_points"]}, {"type": "inline", "children": ["())"]}]}, {"type": "paragraph", "children": ["The problem with this code is that every stream triggers a re-rendering of\nthe plot. Even tough repainting only on the last stream would produce almost\nidentical visual effect. Especially for lines with many points this becomes\ncomputationally expensive and can freeze your browser. Using a convenience\nmethod ", {"type": "title_reference", "children": ["hold"]}, ", we can control when rendering is initiated like so:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["with"]}, " ", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["hold"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["render"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["True"]}, {"type": "inline", "children": ["):"]}, "\n    ", {"type": "inline", "children": ["for"]}, " ", {"type": "inline", "children": ["line"]}, " ", {"type": "inline", "children": ["in"]}, " ", {"type": "inline", "children": ["lines"]}, {"type": "inline", "children": [":"]}, "\n        ", {"type": "inline", "children": ["line"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["stream"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["new_points"]}, {"type": "inline", "children": ["())"]}]}, {"type": "paragraph", "children": ["In this case we render newly appended points only after the last stream."]}]}, "default": false}, {"name": "inner_height", "type": "Readonly(Int)", "desc": "This is the exact height of the plotting canvas, i.e. the height of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["This is the exact height of the plotting canvas, i.e. the height of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook)."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an experimental feature and the API may change in near future."]}]}]}, "default": 0}, {"name": "inner_width", "type": "Readonly(Int)", "desc": "This is the exact width of the plotting canvas, i.e. the width of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["This is the exact width of the plotting canvas, i.e. the width of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook)."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an experimental feature and the API may change in near future."]}]}]}, "default": 0}, {"name": "left", "type": "List(Instance(Renderer))", "desc": "A list of renderers to occupy the area to the left of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of renderers to occupy the area to the left of the plot."]}]}, "default": []}, {"name": "lod_factor", "type": "Int", "desc": "Decimation factor to use when applying level-of-detail decimation.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Decimation factor to use when applying level-of-detail decimation."]}]}, "default": 10}, {"name": "lod_interval", "type": "Int", "desc": "Interval (in ms) during which an interactive tool event will enable\nlevel-of-detail downsampling.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Interval (in ms) during which an interactive tool event will enable\nlevel-of-detail downsampling."]}]}, "default": 300}, {"name": "lod_threshold", "type": "Nullable(Int)", "desc": "A number of data points, above which level-of-detail downsampling may\nbe performed by glyph renderers. Set to ``None`` to disable any\nlevel-of-detail downsampling.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A number of data points, above which level-of-detail downsampling may\nbe performed by glyph renderers. Set to ", {"type": "literal", "children": ["None"]}, " to disable any\nlevel-of-detail downsampling."]}]}, "default": 2000}, {"name": "lod_timeout", "type": "Int", "desc": "Timeout (in ms) for checking whether interactive tool events are still\noccurring. Once level-of-detail mode is enabled, a check is made every\n``lod_timeout`` ms. If no interactive tool events have happened,\nlevel-of-detail mode is disabled.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Timeout (in ms) for checking whether interactive tool events are still\noccurring. Once level-of-detail mode is enabled, a check is made every\n", {"type": "literal", "children": ["lod_timeout"]}, " ms. If no interactive tool events have happened,\nlevel-of-detail mode is disabled."]}]}, "default": 500}, {"name": "match_aspect", "type": "Bool", "desc": "Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\nthe ratio of width over height. This property controls whether Bokeh should\nattempt to match the (width/height) of *data space* to the (width/height)\nin pixels of *screen space*.\n\nDefault is ``False`` which indicates that the *data* aspect ratio and the\n*screen* aspect ratio vary independently. ``True`` indicates that the plot\naspect ratio of the axes will match the aspect ratio of the pixel extent\nthe axes. The end result is that a 1x1 area in data space is a square in\npixels, and conversely that a 1x1 pixel is a square in data units.\n\n.. note::\n    This setting only takes effect when there are two dataranges. This\n    setting only sets the initial plot draw and subsequent resets. It is\n    possible for tools (single axis zoom, unconstrained box zoom) to\n    change the aspect ratio.\n\n.. warning::\n    This setting is incompatible with linking dataranges across multiple\n    plots. Doing so may result in undefined behavior.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\nthe ratio of width over height. This property controls whether Bokeh should\nattempt to match the (width/height) of ", {"type": "emphasis", "children": ["data space"]}, " to the (width/height)\nin pixels of ", {"type": "emphasis", "children": ["screen space"]}, "."]}, {"type": "paragraph", "children": ["Default is ", {"type": "literal", "children": ["False"]}, " which indicates that the ", {"type": "emphasis", "children": ["data"]}, " aspect ratio and the\n", {"type": "emphasis", "children": ["screen"]}, " aspect ratio vary independently. ", {"type": "literal", "children": ["True"]}, " indicates that the plot\naspect ratio of the axes will match the aspect ratio of the pixel extent\nthe axes. The end result is that a 1x1 area in data space is a square in\npixels, and conversely that a 1x1 pixel is a square in data units."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This setting only takes effect when there are two dataranges. This\nsetting only sets the initial plot draw and subsequent resets. It is\npossible for tools (single axis zoom, unconstrained box zoom) to\nchange the aspect ratio."]}]}, {"type": "warning", "children": [{"type": "paragraph", "children": ["This setting is incompatible with linking dataranges across multiple\nplots. Doing so may result in undefined behavior."]}]}]}, "default": false}, {"name": "min_border", "type": "Nullable(Int)", "desc": "A convenience property to set all all the ``min_border_X`` properties\nto the same value. If an individual border property is explicitly set,\nit will override ``min_border``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A convenience property to set all all the ", {"type": "literal", "children": ["min_border_X"]}, " properties\nto the same value. If an individual border property is explicitly set,\nit will override ", {"type": "literal", "children": ["min_border"]}, "."]}]}, "default": 5}, {"name": "min_border_bottom", "type": "Nullable(Int)", "desc": "Minimum size in pixels of the padding region below the bottom of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimum size in pixels of the padding region below the bottom of\nthe central plot region."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is a ", {"type": "emphasis", "children": ["minimum"]}, ". The padding region may expand as needed to\naccommodate titles or axes, etc."]}]}]}, "default": null}, {"name": "min_border_left", "type": "Nullable(Int)", "desc": "Minimum size in pixels of the padding region to the left of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimum size in pixels of the padding region to the left of\nthe central plot region."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is a ", {"type": "emphasis", "children": ["minimum"]}, ". The padding region may expand as needed to\naccommodate titles or axes, etc."]}]}]}, "default": null}, {"name": "min_border_right", "type": "Nullable(Int)", "desc": "Minimum size in pixels of the padding region to the right of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimum size in pixels of the padding region to the right of\nthe central plot region."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is a ", {"type": "emphasis", "children": ["minimum"]}, ". The padding region may expand as needed to\naccommodate titles or axes, etc."]}]}]}, "default": null}, {"name": "min_border_top", "type": "Nullable(Int)", "desc": "Minimum size in pixels of the padding region above the top of the\ncentral plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Minimum size in pixels of the padding region above the top of the\ncentral plot region."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is a ", {"type": "emphasis", "children": ["minimum"]}, ". The padding region may expand as needed to\naccommodate titles or axes, etc."]}]}]}, "default": null}, {"name": "outer_height", "type": "Readonly(Int)", "desc": "This is the exact height of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["This is the exact height of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook)."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an experimental feature and the API may change in near future."]}]}]}, "default": 0}, {"name": "outer_width", "type": "Readonly(Int)", "desc": "This is the exact width of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["This is the exact width of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook)."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an experimental feature and the API may change in near future."]}]}]}, "default": 0}, {"name": "outline_line_alpha", "type": "Alpha", "desc": "The line alpha for the plot border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha for the plot border outline."]}]}, "default": 1.0}, {"name": "outline_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap for the plot border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap for the plot border outline."]}]}, "default": "butt"}, {"name": "outline_line_color", "type": "Nullable(Color)", "desc": "The line color for the plot border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color for the plot border outline."]}]}, "default": "#e5e5e5"}, {"name": "outline_line_dash", "type": "DashPattern", "desc": "The line dash for the plot border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash for the plot border outline."]}]}, "default": []}, {"name": "outline_line_dash_offset", "type": "Int", "desc": "The line dash offset for the plot border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset for the plot border outline."]}]}, "default": 0}, {"name": "outline_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join for the plot border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join for the plot border outline."]}]}, "default": "bevel"}, {"name": "outline_line_width", "type": "Float", "desc": "The line width for the plot border outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width for the plot border outline."]}]}, "default": 1}, {"name": "output_backend", "type": "Enum('canvas', 'svg', 'webgl')", "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n.. note::\n    When set to ``webgl``, glyphs without a WebGL rendering implementation\n    will fall back to rendering onto 2D canvas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify the output backend for the plot area. Default is HTML5 Canvas."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["When set to ", {"type": "literal", "children": ["webgl"]}, ", glyphs without a WebGL rendering implementation\nwill fall back to rendering onto 2D canvas."]}]}]}, "default": "canvas"}, {"name": "renderers", "type": "List(Instance(Renderer))", "desc": "A list of all glyph renderers for this plot.\n\nThis property can be manipulated by hand, but the ``add_glyph`` is\nrecommended to help make sure all necessary setup is performed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of all glyph renderers for this plot."]}, {"type": "paragraph", "children": ["This property can be manipulated by hand, but the ", {"type": "literal", "children": ["add_glyph"]}, " is\nrecommended to help make sure all necessary setup is performed."]}]}, "default": []}, {"name": "reset_policy", "type": "Enum('standard', 'event_only')", "desc": "How a plot should respond to being reset. By deafult, the standard actions\nare to clear any tool state history, return plot ranges to their original\nvalues, undo all selections, and emit a ``Reset`` event. If customization\nis desired, this property may be set to ``\"event_only\"``, which will\nsuppress all of the actions except the Reset event.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How a plot should respond to being reset. By deafult, the standard actions\nare to clear any tool state history, return plot ranges to their original\nvalues, undo all selections, and emit a ", {"type": "literal", "children": ["Reset"]}, " event. If customization\nis desired, this property may be set to ", {"type": "literal", "children": ["\"event_only\""]}, ", which will\nsuppress all of the actions except the Reset event."]}]}, "default": "standard"}, {"name": "right", "type": "List(Instance(Renderer))", "desc": "A list of renderers to occupy the area to the right of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of renderers to occupy the area to the right of the plot."]}]}, "default": []}, {"name": "title", "type": "Either(Null, Instance(Title))", "desc": "A title for the plot. Can be a text string or a Title annotation.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A title for the plot. Can be a text string or a Title annotation."]}]}, "default": "{\"__type__\": \"Title\", \"name\": \"Title\", \"type\": \"object\"}"}, {"name": "title_location", "type": "Nullable(Enum('above', 'below', 'left', 'right'))", "desc": "Where the title will be located. Titles on the left or right side\nwill be rotated.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Where the title will be located. Titles on the left or right side\nwill be rotated."]}]}, "default": "above"}, {"name": "toolbar", "type": "Instance(Toolbar)", "desc": "The toolbar associated with this plot which holds all the tools. It is\nautomatically created with the plot if necessary.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The toolbar associated with this plot which holds all the tools. It is\nautomatically created with the plot if necessary."]}]}, "default": "{\"__type__\": \"Toolbar\", \"name\": \"Toolbar\", \"type\": \"object\"}"}, {"name": "toolbar_inner", "type": "Bool", "desc": "Locate the toolbar inside the frame. Setting this property to ``True``\nmakes most sense with auto-hidden toolbars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Locate the toolbar inside the frame. Setting this property to ", {"type": "literal", "children": ["True"]}, "\nmakes most sense with auto-hidden toolbars."]}]}, "default": false}, {"name": "toolbar_location", "type": "Nullable(Enum('above', 'below', 'left', 'right'))", "desc": "Where the toolbar will be located. If set to None, no toolbar\nwill be attached to the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Where the toolbar will be located. If set to None, no toolbar\nwill be attached to the plot."]}]}, "default": "right"}, {"name": "toolbar_sticky", "type": "Bool", "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\nthe toolbar will be outside of the axes, titles etc.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Stick the toolbar to the edge of the plot. Default: True. If False,\nthe toolbar will be outside of the axes, titles etc."]}]}, "default": true}, {"name": "x_range", "type": "Instance(Range)", "desc": "The (default) data range of the horizontal dimension of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The (default) data range of the horizontal dimension of the plot."]}]}, "default": "{\"__type__\": \"DataRange1d\", \"name\": \"DataRange1d\", \"type\": \"object\"}"}, {"name": "x_scale", "type": "Instance(Scale)", "desc": "What kind of scale to use to convert x-coordinates in data space\ninto x-coordinates in screen space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What kind of scale to use to convert x-coordinates in data space\ninto x-coordinates in screen space."]}]}, "default": "{\"__type__\": \"LinearScale\", \"name\": \"LinearScale\", \"type\": \"object\"}"}, {"name": "y_range", "type": "Instance(Range)", "desc": "The (default) data range of the vertical dimension of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The (default) data range of the vertical dimension of the plot."]}]}, "default": "{\"__type__\": \"DataRange1d\", \"name\": \"DataRange1d\", \"type\": \"object\"}"}, {"name": "y_scale", "type": "Instance(Scale)", "desc": "What kind of scale to use to convert y-coordinates in data space\ninto y-coordinates in screen space.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What kind of scale to use to convert y-coordinates in data space\ninto y-coordinates in screen space."]}]}, "default": "{\"__type__\": \"LinearScale\", \"name\": \"LinearScale\", \"type\": \"object\"}"}]}, {"name": "PlotActionTool", "bases": ["ActionTool"], "mro": ["PlotActionTool", "ActionTool", "Tool", "Model"], "desc": "A base class action tools acting on plots.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class action tools acting on plots."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "PointDrawTool", "bases": ["EditTool", "Drag", "Tap"], "mro": ["PointDrawTool", "EditTool", "Drag", "Tap", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |point_draw_icon|\n\nThe PointDrawTool allows adding, dragging and deleting point-like glyphs\n(i.e subclasses of``XYGlyph``) on one or more renderers by editing the\nunderlying ``ColumnDataSource`` data. Like other drawing tools, the\nrenderers that are to be edited must be supplied explicitly as a list. Any\nnewly added points will be inserted on the ``ColumnDataSource`` of the\nfirst supplied renderer.\n\nThe tool will modify the columns on the data source corresponding to the\n``x`` and ``y`` values of the glyph. Any additional columns in the data\nsource will be padded with the given ``empty_value`` when adding a new\npoint.\n\n.. note::\n    The data source updates will trigger data change events continuously\n    throughout the edit operations on the BokehJS side. In Bokeh server\n    apps, the data source will only be synced once, when the edit operation\n    finishes.\n\nThe supported actions include:\n\n* Add point: Tap anywhere on the plot\n\n* Move point: Tap and drag an existing point, the point will be\n  dropped once you let go of the mouse button.\n\n* Delete point: Tap a point to select it then press <<backspace>>\n  key while the mouse is within the plot area.\n\n.. |point_draw_icon| image:: /_images/icons/PointDraw.png\n    :height: 24px\n    :alt: Icon of three points with an arrow pointing to one representing the point-edit tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["point_draw_icon"]}]}, {"type": "paragraph", "children": ["The PointDrawTool allows adding, dragging and deleting point-like glyphs\n(i.e subclasses of``XYGlyph``) on one or more renderers by editing the\nunderlying ", {"type": "literal", "children": ["ColumnDataSource"]}, " data. Like other drawing tools, the\nrenderers that are to be edited must be supplied explicitly as a list. Any\nnewly added points will be inserted on the ", {"type": "literal", "children": ["ColumnDataSource"]}, " of the\nfirst supplied renderer."]}, {"type": "paragraph", "children": ["The tool will modify the columns on the data source corresponding to the\n", {"type": "literal", "children": ["x"]}, " and ", {"type": "literal", "children": ["y"]}, " values of the glyph. Any additional columns in the data\nsource will be padded with the given ", {"type": "literal", "children": ["empty_value"]}, " when adding a new\npoint."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["The data source updates will trigger data change events continuously\nthroughout the edit operations on the BokehJS side. In Bokeh server\napps, the data source will only be synced once, when the edit operation\nfinishes."]}]}, {"type": "paragraph", "children": ["The supported actions include:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Add point: Tap anywhere on the plot"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Move point: Tap and drag an existing point, the point will be\ndropped once you let go of the mouse button."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Delete point: Tap a point to select it then press <<backspace>>\nkey while the mouse is within the plot area."]}]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "add", "type": "Bool", "desc": "Enables adding of new points on tap events.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Enables adding of new points on tap events."]}]}, "default": true}, {"name": "drag", "type": "Bool", "desc": "Enables dragging of existing points on pan events.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Enables dragging of existing points on pan events."]}]}, "default": true}, {"name": "num_objects", "type": "Int", "desc": "Defines a limit on the number of points that can be drawn. By default there\nis no limit on the number of objects, but if enabled the oldest drawn point\nwill be dropped to make space for the new point.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines a limit on the number of points that can be drawn. By default there\nis no limit on the number of objects, but if enabled the oldest drawn point\nwill be dropped to make space for the new point."]}]}, "default": 0}]}, {"name": "PolarTransform", "bases": ["CoordinateTransform"], "mro": ["PolarTransform", "CoordinateTransform", "Expression", "Model"], "desc": "Transform from polar to cartesian coordinates. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Transform from polar to cartesian coordinates."]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angular coordinate (i.e. the angle from the reference axis).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angular coordinate (i.e. the angle from the reference axis)."]}]}, "default": {"type": "field", "field": "angle"}}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "direction", "type": "Enum('clock', 'anticlock')", "desc": "Whether ``angle`` measures clockwise or anti-clockwise from the reference axis.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether ", {"type": "literal", "children": ["angle"]}, " measures clockwise or anti-clockwise from the reference axis."]}]}, "default": "anticlock"}, {"name": "radius", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The radial coordinate (i.e. the distance from the origin).\n\nNegative radius is allowed, which is equivalent to using positive radius\nand changing ``direction`` to the opposite value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The radial coordinate (i.e. the distance from the origin)."]}, {"type": "paragraph", "children": ["Negative radius is allowed, which is equivalent to using positive radius\nand changing ", {"type": "literal", "children": ["direction"]}, " to the opposite value."]}]}, "default": {"type": "field", "field": "radius"}}]}, {"name": "PolyAnnotation", "bases": ["Annotation"], "mro": ["PolyAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a shaded polygonal region as an annotation.\n\nSee :ref:`ug_basic_annotations_polygon_annotations` for information on\nplotting polygon annotations.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a shaded polygonal region as an annotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_polygon_annotations`"]}, " for information on\nplotting polygon annotations."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the polygon."]}]}, "default": 0.4}, {"name": "fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the polygon."]}]}, "default": "#fff9ba"}, {"name": "hatch_alpha", "type": "Alpha", "desc": "The hatch alpha values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the polygon."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "Nullable(Color)", "desc": "The hatch color values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the polygon."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the polygon."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "Nullable(String)", "desc": "The hatch pattern values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the polygon."]}]}, "default": null}, {"name": "hatch_scale", "type": "Size", "desc": "The hatch scale values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the polygon."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "Size", "desc": "The hatch weight values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the polygon."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the polygon."]}]}, "default": 0.3}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the polygon."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the polygon."]}]}, "default": "#cccccc"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the polygon."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the polygon."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the polygon."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the polygon."]}]}, "default": 1}, {"name": "xs", "type": "Seq(Float)", "desc": "The x-coordinates of the region to draw.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the region to draw."]}]}, "default": []}, {"name": "xs_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the ``xs`` attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the ", {"type": "literal", "children": ["xs"]}, " attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}, {"name": "ys", "type": "Seq(Float)", "desc": "The y-coordinates of the region to draw.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the region to draw."]}]}, "default": []}, {"name": "ys_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the ``ys`` attribute. Interpreted as |data units| by\ndefault.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the ", {"type": "literal", "children": ["ys"]}, " attribute. Interpreted as ", {"type": "substitution_reference", "children": ["data units"]}, " by\ndefault."]}]}, "default": "data"}]}, {"name": "PolyDrawTool", "bases": ["PolyTool", "Drag", "Tap"], "mro": ["PolyDrawTool", "PolyTool", "EditTool", "Drag", "Tap", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |poly_draw_icon|\n\nThe PolyDrawTool allows drawing, selecting and deleting ``Patches`` and\n``MultiLine`` glyphs on one or more renderers by editing the underlying\n``ColumnDataSource`` data. Like other drawing tools, the renderers that\nare to be edited must be supplied explicitly.\n\nThe tool will modify the columns on the data source corresponding to the\n``xs`` and ``ys`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared ``empty_value``, when adding a new\npoint.\n\nIf a ``vertex_renderer`` with an point-like glyph is supplied then the\n``PolyDrawTool`` will use it to display the vertices of the multi-lines or\npatches on all supplied renderers. This also enables the ability to snap\nto existing vertices while drawing.\n\nThe supported actions include:\n\n* Add patch or multi-line: Double tap to add the first vertex, then use tap\n  to add each subsequent vertex, to finalize the draw action double tap to\n  insert the final vertex or press the <<esc> key.\n\n* Move patch or ulti-line: Tap and drag an existing patch/multi-line, the\n  point will be dropped once you let go of the mouse button.\n\n* Delete patch or multi-line: Tap a patch/multi-line to select it then\n  press <<backspace>> key while the mouse is within the plot area.\n\n.. |poly_draw_icon| image:: /_images/icons/PolyDraw.png\n    :height: 24px\n    :alt: Icon of a solid line trapezoid with an arrow pointing at the lower right representing the polygon-draw tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["poly_draw_icon"]}]}, {"type": "paragraph", "children": ["The PolyDrawTool allows drawing, selecting and deleting ", {"type": "literal", "children": ["Patches"]}, " and\n", {"type": "literal", "children": ["MultiLine"]}, " glyphs on one or more renderers by editing the underlying\n", {"type": "literal", "children": ["ColumnDataSource"]}, " data. Like other drawing tools, the renderers that\nare to be edited must be supplied explicitly."]}, {"type": "paragraph", "children": ["The tool will modify the columns on the data source corresponding to the\n", {"type": "literal", "children": ["xs"]}, " and ", {"type": "literal", "children": ["ys"]}, " values of the glyph. Any additional columns in the data\nsource will be padded with the declared ", {"type": "literal", "children": ["empty_value"]}, ", when adding a new\npoint."]}, {"type": "paragraph", "children": ["If a ", {"type": "literal", "children": ["vertex_renderer"]}, " with an point-like glyph is supplied then the\n", {"type": "literal", "children": ["PolyDrawTool"]}, " will use it to display the vertices of the multi-lines or\npatches on all supplied renderers. This also enables the ability to snap\nto existing vertices while drawing."]}, {"type": "paragraph", "children": ["The supported actions include:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Add patch or multi-line: Double tap to add the first vertex, then use tap\nto add each subsequent vertex, to finalize the draw action double tap to\ninsert the final vertex or press the <<esc> key."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Move patch or ulti-line: Tap and drag an existing patch/multi-line, the\npoint will be dropped once you let go of the mouse button."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Delete patch or multi-line: Tap a patch/multi-line to select it then\npress <<backspace>> key while the mouse is within the plot area."]}]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "drag", "type": "Bool", "desc": "Enables dragging of existing patches and multi-lines on pan events.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Enables dragging of existing patches and multi-lines on pan events."]}]}, "default": true}, {"name": "num_objects", "type": "Int", "desc": "Defines a limit on the number of patches or multi-lines that can be drawn.\nBy default there is no limit on the number of objects, but if enabled the\noldest drawn patch or multi-line will be dropped to make space for the new\npatch or multi-line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines a limit on the number of patches or multi-lines that can be drawn.\nBy default there is no limit on the number of objects, but if enabled the\noldest drawn patch or multi-line will be dropped to make space for the new\npatch or multi-line."]}]}, "default": 0}]}, {"name": "PolyEditTool", "bases": ["PolyTool", "Drag", "Tap"], "mro": ["PolyEditTool", "PolyTool", "EditTool", "Drag", "Tap", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |poly_edit_icon|\n\nThe PolyEditTool allows editing the vertices of one or more ``Patches`` or\n``MultiLine`` glyphs. Glyphs to be edited are defined via the ``renderers``\nproperty and a renderer for the vertices is set via the ``vertex_renderer``\nproperty (must render a point-like Glyph (a subclass of ``XYGlyph``).\n\nThe tool will modify the columns on the data source corresponding to the\n``xs`` and ``ys`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared``empty_value``, when adding a new\npoint.\n\nThe supported actions include:\n\n* Show vertices: Double tap an existing patch or multi-line\n\n* Add vertex: Double tap an existing vertex to select it, the tool will\n  draw the next point, to add it tap in a new location. To finish editing\n  and add a point double tap otherwise press the <<esc> key to cancel.\n\n* Move vertex: Drag an existing vertex and let go of the mouse button to\n  release it.\n\n* Delete vertex: After selecting one or more vertices press <<backspace>>\n  while the mouse cursor is within the plot area.\n\n.. |poly_edit_icon| image:: /_images/icons/PolyEdit.png\n    :height: 24px\n    :alt: Icon of two lines meeting in a vertex with an arrow pointing at it representing the polygon-edit tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["poly_edit_icon"]}]}, {"type": "paragraph", "children": ["The PolyEditTool allows editing the vertices of one or more ", {"type": "literal", "children": ["Patches"]}, " or\n", {"type": "literal", "children": ["MultiLine"]}, " glyphs. Glyphs to be edited are defined via the ", {"type": "literal", "children": ["renderers"]}, "\nproperty and a renderer for the vertices is set via the ", {"type": "literal", "children": ["vertex_renderer"]}, "\nproperty (must render a point-like Glyph (a subclass of ", {"type": "literal", "children": ["XYGlyph"]}, ")."]}, {"type": "paragraph", "children": ["The tool will modify the columns on the data source corresponding to the\n", {"type": "literal", "children": ["xs"]}, " and ", {"type": "literal", "children": ["ys"]}, " values of the glyph. Any additional columns in the data\nsource will be padded with the declared``empty_value``, when adding a new\npoint."]}, {"type": "paragraph", "children": ["The supported actions include:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["Show vertices: Double tap an existing patch or multi-line"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Add vertex: Double tap an existing vertex to select it, the tool will\ndraw the next point, to add it tap in a new location. To finish editing\nand add a point double tap otherwise press the <<esc> key to cancel."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Move vertex: Drag an existing vertex and let go of the mouse button to\nrelease it."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Delete vertex: After selecting one or more vertices press <<backspace>>\nwhile the mouse cursor is within the plot area."]}]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": []}, {"name": "PolySelectTool", "bases": ["Tap", "SelectTool"], "mro": ["PolySelectTool", "Tap", "SelectTool", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |poly_select_icon|\n\nThe polygon selection tool allows users to make selections on a\nPlot by indicating a polygonal region with mouse clicks. single\nclicks (or taps) add successive points to the definition of the\npolygon, and a double click (or tap) indicates the selection\nregion is ready.\n\nSee :ref:`ug_styling_plots_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n.. note::\n    Selections can be comprised of multiple regions, even those\n    made by different selection tools. Hold down the <<shift>> key\n    while making a selection to append the new selection to any\n    previous selection that might exist.\n\n.. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n    :height: 24px\n    :alt: Icon of a dashed trapezoid with an arrow pointing at the lower right representing the polygon-selection tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["poly_select_icon"]}]}, {"type": "paragraph", "children": ["The polygon selection tool allows users to make selections on a\nPlot by indicating a polygonal region with mouse clicks. single\nclicks (or taps) add successive points to the definition of the\npolygon, and a double click (or tap) indicates the selection\nregion is ready."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_styling_plots_selected_unselected_glyphs`"]}, " for information\non styling selected and unselected glyphs."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Selections can be comprised of multiple regions, even those\nmade by different selection tools. Hold down the <<shift>> key\nwhile making a selection to append the new selection to any\nprevious selection that might exist."]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "overlay", "type": "Instance(PolyAnnotation)", "desc": "A shaded annotation drawn to indicate the selection region.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A shaded annotation drawn to indicate the selection region."]}]}, "default": "{\"__type__\": \"PolyAnnotation\", \"attributes\": {\"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"syncable\": false, \"visible\": false, \"xs\": [], \"xs_units\": \"canvas\", \"ys\": [], \"ys_units\": \"canvas\"}, \"name\": \"PolyAnnotation\", \"type\": \"object\"}"}]}, {"name": "PolyTool", "bases": ["EditTool"], "mro": ["PolyTool", "EditTool", "GestureTool", "Tool", "Model"], "desc": "A base class for polygon draw/edit tools. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for polygon draw/edit tools.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": [{"name": "vertex_renderer", "type": "Nullable(Instance(GlyphRenderer))", "desc": "The renderer used to render the vertices of a selected line or polygon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The renderer used to render the vertices of a selected line or polygon."]}]}, "default": null}]}, {"name": "PreText", "bases": ["Paragraph"], "mro": ["PreText", "Paragraph", "Markup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A block (paragraph) of pre-formatted text.\n\nThis Bokeh model corresponds to an HTML ``<pre>`` element.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/interaction/widgets/pretext.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A block (paragraph) of pre-formatted text."]}, {"type": "paragraph", "children": ["This Bokeh model corresponds to an HTML ", {"type": "literal", "children": ["<pre>"]}, " element."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/interaction/widgets/pretext.py\n    :source-position: below"]}]}]}]}, "props": []}, {"name": "PrintfTickFormatter", "bases": ["TickFormatter"], "mro": ["PrintfTickFormatter", "TickFormatter", "Model"], "desc": "Tick formatter based on a printf-style format string. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Tick formatter based on a printf-style format string."]}]}, "props": [{"name": "format", "type": "String", "desc": "The number format, as defined as follows: the placeholder in the format\nstring is marked by % and is followed by one or more of these elements,\nin this order:\n\n* An optional ``+`` sign\n    Causes the result to be preceded with a plus or minus sign on numeric\n    values. By default, only the ``-`` sign is used on negative numbers.\n\n* An optional padding specifier\n    Specifies what (if any) character to use for padding. Possible values\n    are 0 or any other character preceded by a ``'`` (single quote). The\n    default is to pad with spaces.\n\n* An optional ``-`` sign\n    Causes sprintf to left-align the result of this placeholder. The default\n    is to right-align the result.\n\n* An optional number\n    Specifies how many characters the result should have. If the value to be\n    returned is shorter than this number, the result will be padded.\n\n* An optional precision modifier\n    Consists of a ``.`` (dot) followed by a number, specifies how many digits\n    should be displayed for floating point numbers. When used on a string, it\n    causes the result to be truncated.\n\n* A type specifier\n    Can be any of:\n\n    - ``%`` --- yields a literal ``%`` character\n    - ``b`` --- yields an integer as a binary number\n    - ``c`` --- yields an integer as the character with that ASCII value\n    - ``d`` or ``i`` --- yields an integer as a signed decimal number\n    - ``e`` --- yields a float using scientific notation\n    - ``u`` --- yields an integer as an unsigned decimal number\n    - ``f`` --- yields a float as is\n    - ``o`` --- yields an integer as an octal number\n    - ``s`` --- yields a string as is\n    - ``x`` --- yields an integer as a hexadecimal number (lower-case)\n    - ``X`` --- yields an integer as a hexadecimal number (upper-case)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The number format, as defined as follows: the placeholder in the format\nstring is marked by % and is followed by one or more of these elements,\nin this order:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["An optional ", {"type": "literal", "children": ["+"]}, " sign"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Causes the result to be preceded with a plus or minus sign on numeric\nvalues. By default, only the ", {"type": "literal", "children": ["-"]}, " sign is used on negative numbers."]}]}]}]}]}, {"type": "list_item", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["An optional padding specifier"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Specifies what (if any) character to use for padding. Possible values\nare 0 or any other character preceded by a ", {"type": "literal", "children": ["'"]}, " (single quote). The\ndefault is to pad with spaces."]}]}]}]}]}, {"type": "list_item", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["An optional ", {"type": "literal", "children": ["-"]}, " sign"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Causes sprintf to left-align the result of this placeholder. The default\nis to right-align the result."]}]}]}]}]}, {"type": "list_item", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["An optional number"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Specifies how many characters the result should have. If the value to be\nreturned is shorter than this number, the result will be padded."]}]}]}]}]}, {"type": "list_item", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["An optional precision modifier"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Consists of a ", {"type": "literal", "children": ["."]}, " (dot) followed by a number, specifies how many digits\nshould be displayed for floating point numbers. When used on a string, it\ncauses the result to be truncated."]}]}]}]}]}, {"type": "list_item", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["A type specifier"]}, {"type": "definition", "children": [{"type": "paragraph", "children": ["Can be any of:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["%"]}, " --- yields a literal ", {"type": "literal", "children": ["%"]}, " character"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["b"]}, " --- yields an integer as a binary number"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["c"]}, " --- yields an integer as the character with that ASCII value"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["d"]}, " or ", {"type": "literal", "children": ["i"]}, " --- yields an integer as a signed decimal number"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["e"]}, " --- yields a float using scientific notation"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["u"]}, " --- yields an integer as an unsigned decimal number"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["f"]}, " --- yields a float as is"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["o"]}, " --- yields an integer as an octal number"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["s"]}, " --- yields a string as is"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["x"]}, " --- yields an integer as a hexadecimal number (lower-case)"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["X"]}, " --- yields an integer as a hexadecimal number (upper-case)"]}]}]}]}]}]}]}]}]}, "default": "%s"}]}, {"name": "QUADKEYTileSource", "bases": ["MercatorTileSource"], "mro": ["QUADKEYTileSource", "MercatorTileSource", "TileSource", "Model"], "desc": "Has the same tile origin as the ``WMTSTileSource`` but requests tiles using\na `quadkey` argument instead of X, Y, Z e.g.\n``http://your.quadkey.tile.host/{Q}.png``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Has the same tile origin as the ", {"type": "literal", "children": ["WMTSTileSource"]}, " but requests tiles using\na ", {"type": "title_reference", "children": ["quadkey"]}, " argument instead of X, Y, Z e.g.\n", {"type": "literal", "children": ["http://your.quadkey.tile.host/{Q}.png"]}]}]}, "props": []}, {"name": "Quad", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Quad", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render axis-aligned quads.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Quad.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render axis-aligned quads."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Quad.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "bottom", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the bottom edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the bottom edges."]}]}, "default": {"type": "field", "field": "bottom"}}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the quads."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the quads."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the quads."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the quads."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the quads."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the quads."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the quads."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the quads."]}]}, "default": 1.0}, {"name": "left", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the left edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the left edges."]}]}, "default": {"type": "field", "field": "left"}}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the quads."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the quads."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the quads."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the quads."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the quads."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the quads."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the quads.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the quads."]}]}, "default": 1}, {"name": "right", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the right edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the right edges."]}]}, "default": {"type": "field", "field": "right"}}, {"name": "top", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the top edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the top edges."]}]}, "default": {"type": "field", "field": "top"}}]}, {"name": "Quadratic", "bases": ["LineGlyph"], "mro": ["Quadratic", "LineGlyph", "Glyph", "Model"], "desc": "Render parabolas.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Quadratic.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render parabolas."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Quadratic.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "cx", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the control points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the control points."]}]}, "default": {"type": "field", "field": "cx"}}, {"name": "cy", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the control points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the control points."]}]}, "default": {"type": "field", "field": "cy"}}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the parabolas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the parabolas."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the parabolas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the parabolas."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the parabolas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the parabolas."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the parabolas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the parabolas."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the parabolas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the parabolas."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the parabolas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the parabolas."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the parabolas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the parabolas."]}]}, "default": 1}, {"name": "x0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the starting points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the starting points."]}]}, "default": {"type": "field", "field": "x0"}}, {"name": "x1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the ending points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the ending points."]}]}, "default": {"type": "field", "field": "x1"}}, {"name": "y0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the starting points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the starting points."]}]}, "default": {"type": "field", "field": "y0"}}, {"name": "y1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the ending points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the ending points."]}]}, "default": {"type": "field", "field": "y1"}}]}, {"name": "RadioButtonGroup", "bases": ["ToggleButtonGroup"], "mro": ["RadioButtonGroup", "ToggleButtonGroup", "AbstractGroup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A group of radio boxes rendered as toggle buttons.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A group of radio boxes rendered as toggle buttons."]}]}, "props": [{"name": "active", "type": "Nullable(Int)", "desc": "The index of the selected radio box, or ``None`` if nothing is\nselected.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The index of the selected radio box, or ", {"type": "literal", "children": ["None"]}, " if nothing is\nselected."]}]}, "default": null}]}, {"name": "RadioGroup", "bases": ["ToggleInputGroup"], "mro": ["RadioGroup", "ToggleInputGroup", "AbstractGroup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A group of radio boxes.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A group of radio boxes."]}]}, "props": [{"name": "active", "type": "Nullable(Int)", "desc": "The index of the selected radio box, or ``None`` if nothing is selected.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The index of the selected radio box, or ", {"type": "literal", "children": ["None"]}, " if nothing is selected."]}]}, "default": null}]}, {"name": "Range", "bases": ["Model"], "mro": ["Range", "Model"], "desc": "A base class for all range types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all range types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Range1d", "bases": ["Range"], "mro": ["Range1d", "Range", "Model"], "desc": "A fixed, closed range [start, end] in a continuous scalar\ndimension.\n\nIn addition to supplying ``start`` and ``end`` keyword arguments\nto the ``Range1d`` initializer, you can also instantiate with\nthe convenience syntax::\n\n    Range(0, 10) # equivalent to Range(start=0, end=10)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A fixed, closed range [start, end] in a continuous scalar\ndimension."]}, {"type": "paragraph", "children": ["In addition to supplying ", {"type": "literal", "children": ["start"]}, " and ", {"type": "literal", "children": ["end"]}, " keyword arguments\nto the ", {"type": "literal", "children": ["Range1d"]}, " initializer, you can also instantiate with\nthe convenience syntax:"]}, {"type": "literal_block", "children": ["Range(0, 10) # equivalent to Range(start=0, end=10)"]}]}, "props": [{"name": "bounds", "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta)), Tuple(Datetime, Datetime), Tuple(Nullable(Datetime), Datetime), Tuple(Datetime, Nullable(Datetime))))", "desc": "The bounds that the range is allowed to go to. Typically used to prevent\nthe user from panning/zooming/etc away from the data.\n\nIf set to ``'auto'``, the bounds will be computed to the start and end of the Range.\n\nBounds are provided as a tuple of ``(min, max)`` so regardless of whether your range is\nincreasing or decreasing, the first item should be the minimum value of the range and the\nsecond item should be the maximum. Setting min > max will result in a ``ValueError``.\n\nBy default, bounds are ``None`` and your plot to pan/zoom as far as you want. If you only\nwant to constrain one end of the plot, you can set min or max to None.\n\nExamples:\n\n.. code-block:: python\n\n    Range1d(0, 1, bounds='auto')  # Auto-bounded to 0 and 1 (Default behavior)\n    Range1d(start=0, end=1, bounds=(0, None))  # Maximum is unbounded, minimum bounded to 0", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The bounds that the range is allowed to go to. Typically used to prevent\nthe user from panning/zooming/etc away from the data."]}, {"type": "paragraph", "children": ["If set to ", {"type": "literal", "children": ["'auto'"]}, ", the bounds will be computed to the start and end of the Range."]}, {"type": "paragraph", "children": ["Bounds are provided as a tuple of ", {"type": "literal", "children": ["(min, max)"]}, " so regardless of whether your range is\nincreasing or decreasing, the first item should be the minimum value of the range and the\nsecond item should be the maximum. Setting min > max will result in a ", {"type": "literal", "children": ["ValueError"]}, "."]}, {"type": "paragraph", "children": ["By default, bounds are ", {"type": "literal", "children": ["None"]}, " and your plot to pan/zoom as far as you want. If you only\nwant to constrain one end of the plot, you can set min or max to None."]}, {"type": "paragraph", "children": ["Examples:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["Range1d"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["bounds"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["'auto'"]}, {"type": "inline", "children": [")"]}, "  ", {"type": "inline", "children": ["# Auto-bounded to 0 and 1 (Default behavior)"]}, "\n", {"type": "inline", "children": ["Range1d"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["start"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["end"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["1"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["bounds"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["None"]}, {"type": "inline", "children": ["))"]}, "  ", {"type": "inline", "children": ["# Maximum is unbounded, minimum bounded to 0"]}]}]}, "default": null}, {"name": "end", "type": "Either(Float, Datetime, TimeDelta)", "desc": "The end of the range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The end of the range."]}]}, "default": 1}, {"name": "max_interval", "type": "Either(Null, Float, TimeDelta)", "desc": "The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval. Can be a ``TimeDelta``. Note that ``bounds`` can\nimpose an implicit constraint on the maximum interval as well. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval. Can be a ", {"type": "literal", "children": ["TimeDelta"]}, ". Note that ", {"type": "literal", "children": ["bounds"]}, " can\nimpose an implicit constraint on the maximum interval as well."]}]}, "default": null}, {"name": "min_interval", "type": "Either(Null, Float, TimeDelta)", "desc": "The level that the range is allowed to zoom in, expressed as the\nminimum visible interval. If set to ``None`` (default), the minimum\ninterval is not bound. Can be a ``TimeDelta``. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The level that the range is allowed to zoom in, expressed as the\nminimum visible interval. If set to ", {"type": "literal", "children": ["None"]}, " (default), the minimum\ninterval is not bound. Can be a ", {"type": "literal", "children": ["TimeDelta"]}, "."]}]}, "default": null}, {"name": "reset_end", "type": "Either(Null, Float, Datetime, TimeDelta)", "desc": "The end of the range to apply when resetting. If set to ``None`` defaults\nto the ``end`` value during initialization.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The end of the range to apply when resetting. If set to ", {"type": "literal", "children": ["None"]}, " defaults\nto the ", {"type": "literal", "children": ["end"]}, " value during initialization."]}]}, "default": null}, {"name": "reset_start", "type": "Either(Null, Float, Datetime, TimeDelta)", "desc": "The start of the range to apply after reset. If set to ``None`` defaults\nto the ``start`` value during initialization.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The start of the range to apply after reset. If set to ", {"type": "literal", "children": ["None"]}, " defaults\nto the ", {"type": "literal", "children": ["start"]}, " value during initialization."]}]}, "default": null}, {"name": "start", "type": "Either(Float, Datetime, TimeDelta)", "desc": "The start of the range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The start of the range."]}]}, "default": 0}]}, {"name": "RangeSlider", "bases": ["AbstractSlider"], "mro": ["RangeSlider", "AbstractSlider", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Range-slider based number range selection widget. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Range-slider based number range selection widget."]}]}, "props": [{"name": "end", "type": "Required(Float)", "desc": "The maximum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The maximum allowable value."]}]}, "default": "<Undefined>"}, {"name": "start", "type": "Required(Float)", "desc": "The minimum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum allowable value."]}]}, "default": "<Undefined>"}, {"name": "step", "type": "Float", "desc": "The step between consecutive values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The step between consecutive values."]}]}, "default": 1}, {"name": "value", "type": "Required(Tuple(Float, Float))", "desc": "Initial or selected range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected range."]}]}, "default": "<Undefined>"}, {"name": "value_throttled", "type": "Readonly(Required(Tuple(Float, Float)))", "desc": "Initial or selected value, throttled according to report only on mouseup.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value, throttled according to report only on mouseup."]}]}, "default": "<Undefined>"}]}, {"name": "RangeTool", "bases": ["Drag"], "mro": ["RangeTool", "Drag", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |range_icon|\n\nThe range tool allows the user to update range objects for either or both\nof the x- or y-dimensions by dragging a corresponding shaded annotation to\nmove it or change its boundaries.\n\nA common use case is to add this tool to a plot with a large fixed range,\nbut to configure the tool range from a different plot. When the user\nmanipulates the overlay, the range of the second plot will be updated\nautomatically.\n\n.. |range_icon| image:: /_images/icons/Range.png\n    :height: 24px", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["range_icon"]}]}, {"type": "paragraph", "children": ["The range tool allows the user to update range objects for either or both\nof the x- or y-dimensions by dragging a corresponding shaded annotation to\nmove it or change its boundaries."]}, {"type": "paragraph", "children": ["A common use case is to add this tool to a plot with a large fixed range,\nbut to configure the tool range from a different plot. When the user\nmanipulates the overlay, the range of the second plot will be updated\nautomatically."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "overlay", "type": "Instance(BoxAnnotation)", "desc": "A shaded annotation drawn to indicate the configured ranges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A shaded annotation drawn to indicate the configured ranges."]}]}, "default": "{\"__type__\": \"BoxAnnotation\", \"attributes\": {\"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [2, 2], \"line_width\": 0.5, \"syncable\": false}, \"name\": \"BoxAnnotation\", \"type\": \"object\"}"}, {"name": "x_interaction", "type": "Bool", "desc": "Whether to respond to horizontal pan motions when an ``x_range`` is present.\n\nBy default, when an ``x_range`` is specified, it is possible to adjust the\nhorizontal position of the range box by panning horizontally inside the\nbox, or along the top or bottom edge of the box. To disable this, and fix\nthe  range box in place horizontally, set to False. (The box will still\nupdate if the ``x_range`` is updated programmatically.)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to respond to horizontal pan motions when an ", {"type": "literal", "children": ["x_range"]}, " is present."]}, {"type": "paragraph", "children": ["By default, when an ", {"type": "literal", "children": ["x_range"]}, " is specified, it is possible to adjust the\nhorizontal position of the range box by panning horizontally inside the\nbox, or along the top or bottom edge of the box. To disable this, and fix\nthe  range box in place horizontally, set to False. (The box will still\nupdate if the ", {"type": "literal", "children": ["x_range"]}, " is updated programmatically.)"]}]}, "default": true}, {"name": "x_range", "type": "Nullable(Instance(Range1d))", "desc": "A range synchronized to the x-dimension of the overlay. If None, the overlay\nwill span the entire x-dimension.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A range synchronized to the x-dimension of the overlay. If None, the overlay\nwill span the entire x-dimension."]}]}, "default": null}, {"name": "y_interaction", "type": "Bool", "desc": "Whether to respond to vertical pan motions when a ``y_range`` is present.\n\nBy default, when a ``y_range`` is specified, it is possible to adjust the\nvertical position of the range box by panning vertically inside the box, or\nalong the top or bottom edge of the box. To disable this, and fix the range\nbox in place vertically, set to False. (The box will still update if the\n``y_range`` is updated programmatically.)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to respond to vertical pan motions when a ", {"type": "literal", "children": ["y_range"]}, " is present."]}, {"type": "paragraph", "children": ["By default, when a ", {"type": "literal", "children": ["y_range"]}, " is specified, it is possible to adjust the\nvertical position of the range box by panning vertically inside the box, or\nalong the top or bottom edge of the box. To disable this, and fix the range\nbox in place vertically, set to False. (The box will still update if the\n", {"type": "literal", "children": ["y_range"]}, " is updated programmatically.)"]}]}, "default": true}, {"name": "y_range", "type": "Nullable(Instance(Range1d))", "desc": "A range synchronized to the y-dimension of the overlay. If None, the overlay\nwill span the entire y-dimension.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A range synchronized to the y-dimension of the overlay. If None, the overlay\nwill span the entire y-dimension."]}]}, "default": null}]}, {"name": "Ray", "bases": ["XYGlyph", "LineGlyph"], "mro": ["Ray", "XYGlyph", "LineGlyph", "Glyph", "Model"], "desc": "Render rays.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Ray.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render rays."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Ray.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles in radians to extend the rays, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles in radians to extend the rays, as measured from the horizontal."]}]}, "default": 0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "length", "type": "DistanceSpec(units_default='data')", "desc": "The length to extend the ray. Note that this ``length`` defaults\nto |data units| (measured in the x-direction).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The length to extend the ray. Note that this ", {"type": "literal", "children": ["length"]}, " defaults\nto ", {"type": "substitution_reference", "children": ["data units"]}, " (measured in the x-direction)."]}]}, "default": 0}, {"name": "length_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the rays."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the rays."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the rays."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the rays."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the rays."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the rays."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the rays."]}]}, "default": 1}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to start the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to start the rays."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to start the rays.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to start the rays."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "Rect", "bases": ["XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Rect", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render rectangles.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Rect.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render rectangles."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Rect.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to rotate the rectangles, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to rotate the rectangles, as measured from the horizontal."]}]}, "default": 0.0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "dilate", "type": "Bool", "desc": "Whether to always round fractional pixel locations in such a way\nas to make the rectangles bigger.\n\nThis setting may be useful if pixel rounding errors are causing\nrectangles to have a gap between them, when they should appear\nflush.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to always round fractional pixel locations in such a way\nas to make the rectangles bigger."]}, {"type": "paragraph", "children": ["This setting may be useful if pixel rounding errors are causing\nrectangles to have a gap between them, when they should appear\nflush."]}]}, "default": false}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the rectangles."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the rectangles."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the rectangles."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the rectangles."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the rectangles."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the rectangles."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the rectangles."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the rectangles."]}]}, "default": 1.0}, {"name": "height", "type": "DistanceSpec(units_default='data')", "desc": "The overall heights of the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The overall heights of the rectangles."]}]}, "default": {"type": "field", "field": "height"}}, {"name": "height_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the rectangles."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the rectangles."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the rectangles."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the rectangles."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the rectangles."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the rectangles."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the rectangles."]}]}, "default": 1}, {"name": "width", "type": "DistanceSpec(units_default='data')", "desc": "The overall widths of the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The overall widths of the rectangles."]}]}, "default": {"type": "field", "field": "width"}}, {"name": "width_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the centers of the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the centers of the rectangles."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the centers of the rectangles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the centers of the rectangles."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "RedoTool", "bases": ["PlotActionTool"], "mro": ["RedoTool", "PlotActionTool", "ActionTool", "Tool", "Model"], "desc": "*toolbar icon*: |redo_icon|\n\nRedo tool reverses the last action performed by undo tool.\n\n.. |redo_icon| image:: /_images/icons/Redo.png\n    :height: 24px\n    :alt: Icon of an arrow on a circular arc pointing to the right representing the redo tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["redo_icon"]}]}, {"type": "paragraph", "children": ["Redo tool reverses the last action performed by undo tool."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": []}, {"name": "Renderer", "bases": ["Model"], "mro": ["Renderer", "Model"], "desc": "An abstract base class for renderer types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An abstract base class for renderer types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "coordinates", "type": "Nullable(Instance(CoordinateMapping))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "group", "type": "Nullable(Instance(RendererGroup))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "level", "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')", "desc": "Specifies the level in which to paint this renderer.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specifies the level in which to paint this renderer."]}]}, "default": "image"}, {"name": "visible", "type": "Bool", "desc": "Is the renderer visible.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Is the renderer visible."]}]}, "default": true}, {"name": "x_range_name", "type": "String", "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range."]}]}, "default": "default"}, {"name": "y_range_name", "type": "String", "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range."]}]}, "default": "default"}]}, {"name": "RendererGroup", "bases": ["Model"], "mro": ["RendererGroup", "Model"], "desc": "A collection of renderers.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A collection of renderers."]}]}, "props": [{"name": "visible", "type": "Bool", "desc": "Makes all groupped renderers visible or not.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Makes all groupped renderers visible or not."]}]}, "default": true}]}, {"name": "ResetTool", "bases": ["PlotActionTool"], "mro": ["ResetTool", "PlotActionTool", "ActionTool", "Tool", "Model"], "desc": "*toolbar icon*: |reset_icon|\n\nThe reset tool is an action. When activated in the toolbar, the tool resets\nthe data bounds of the plot to their values when the plot was initially\ncreated.\n\n.. |reset_icon| image:: /_images/icons/Reset.png\n    :height: 24px\n    :alt: Icon of two arrows on a circular arc forming a circle representing the reset tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["reset_icon"]}]}, {"type": "paragraph", "children": ["The reset tool is an action. When activated in the toolbar, the tool resets\nthe data bounds of the plot to their values when the plot was initially\ncreated."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": []}, {"name": "Row", "bases": ["FlexBox"], "mro": ["Row", "FlexBox", "LayoutDOM", "UIElement", "Model"], "desc": "Lay out child components in a single horizontal row.\n\nChildren can be specified as positional arguments, as a single argument\nthat is a sequence, or using the ``children`` keyword argument.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Lay out child components in a single horizontal row."]}, {"type": "paragraph", "children": ["Children can be specified as positional arguments, as a single argument\nthat is a sequence, or using the ", {"type": "literal", "children": ["children"]}, " keyword argument."]}]}, "props": []}, {"name": "RowAggregator", "bases": ["Model"], "mro": ["RowAggregator", "Model"], "desc": "Abstract base class for data cube's row formatters.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for data cube's row formatters."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "field_", "type": "String", "desc": "Refers to the table column being aggregated", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Refers to the table column being aggregated"]}]}, "default": ""}]}, {"name": "SVGIcon", "bases": ["Icon"], "mro": ["SVGIcon", "Icon", "Model"], "desc": "SVG icons with inline definitions. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["SVG icons with inline definitions."]}]}, "props": [{"name": "svg", "type": "Required(String)", "desc": "The SVG definition of an icon.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The SVG definition of an icon."]}]}, "default": "<Undefined>"}]}, {"name": "SaveTool", "bases": ["ActionTool"], "mro": ["SaveTool", "ActionTool", "Tool", "Model"], "desc": "*toolbar icon*: |save_icon|\n\nThe save tool is an action. When activated, the tool opens a download dialog\nwhich allows to save an image reproduction of the plot in PNG format. If\nautomatic download is not support by a web browser, the tool falls back to\nopening the generated image in a new tab or window. User then can manually\nsave it by right clicking on the image and choosing \"Save As\" (or similar)\nmenu item.\n\n.. |save_icon| image:: /_images/icons/Save.png\n    :height: 24px\n    :alt: Icon of a floppy disk representing the save tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["save_icon"]}]}, {"type": "paragraph", "children": ["The save tool is an action. When activated, the tool opens a download dialog\nwhich allows to save an image reproduction of the plot in PNG format. If\nautomatic download is not support by a web browser, the tool falls back to\nopening the generated image in a new tab or window. User then can manually\nsave it by right clicking on the image and choosing \"Save As\" (or similar)\nmenu item."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "filename", "type": "Nullable(String)", "desc": "Optional string specifying the filename of the saved image (extension not\nneeded). If a filename is not provided or set to None, the user is prompted\nfor a filename at save time.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Optional string specifying the filename of the saved image (extension not\nneeded). If a filename is not provided or set to None, the user is prompted\nfor a filename at save time."]}]}, "default": null}]}, {"name": "ScalarExpression", "bases": ["Model"], "mro": ["ScalarExpression", "Model"], "desc": "Base class for for scalar expressions. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for for scalar expressions.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": []}, {"name": "ScalarFillProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering fill regions.\n\nMirrors the BokehJS ``properties.Fill`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering fill regions."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.Fill"]}, " class."]}]}, "props": [{"name": "fill_alpha", "type": "Alpha", "desc": "An alpha value to use to fill paths with.\n\n    Acceptable values are floating-point numbers between 0 and 1 (0 being\n    transparent and 1 being opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to fill paths with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque)."]}]}]}, "default": 1.0}, {"name": "fill_color", "type": "Nullable(Color)", "desc": "A color to use to fill paths with.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to fill paths with."]}]}, "default": "gray"}]}, {"name": "ScalarHatchProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering fill regions.\n\nMirrors the BokehJS ``properties.Hatch`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering fill regions."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.Hatch"]}, " class."]}]}, "props": [{"name": "hatch_alpha", "type": "Alpha", "desc": "An alpha value to use to hatching with.\n\n    Acceptable values are floating-point numbers between 0 and 1 (0 being\n    transparent and 1 being opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to hatching with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque)."]}]}]}, "default": 1.0}, {"name": "hatch_color", "type": "Nullable(Color)", "desc": "A color to use to hatching with.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to hatching with."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": {}}, {"name": "hatch_pattern", "type": "Nullable(String)", "desc": "Built-in patterns are can either be specified as long names:\n\nblank, dot, ring, horizontal_line, vertical_line, cross, horizontal_dash, vertical_dash, spiral, right_diagonal_line, left_diagonal_line, diagonal_cross, right_diagonal_dash, left_diagonal_dash, horizontal_wave, vertical_wave, criss_cross\n\nor as one-letter abbreviations:\n\n' ', '.', 'o', '-', '|', '+', '\"', ':', '@', '/', '\\\\', 'x', ',', '`', 'v', '>', '*'", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Built-in patterns are can either be specified as long names:"]}, {"type": "paragraph", "children": ["blank, dot, ring, horizontal_line, vertical_line, cross, horizontal_dash, vertical_dash, spiral, right_diagonal_line, left_diagonal_line, diagonal_cross, right_diagonal_dash, left_diagonal_dash, horizontal_wave, vertical_wave, criss_cross"]}, {"type": "paragraph", "children": ["or as one-letter abbreviations:"]}, {"type": "paragraph", "children": ["' ', '.', 'o', '-', '|', '+', '\"', ':', '@', '/', '\u0000\\', 'x', ',', '`', 'v', '>', '*'"]}]}, "default": null}, {"name": "hatch_scale", "type": "Size", "desc": "A rough measure of the 'size' of the hatching pattern. Generally speaking, the\nhigher the number, the more spread out the pattern will be.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A rough measure of the 'size' of the hatching pattern. Generally speaking, the\nhigher the number, the more spread out the pattern will be."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "Size", "desc": "A width value for line-strokes used in hatching.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A width value for line-strokes used in hatching."]}]}, "default": 1.0}]}, {"name": "ScalarImageProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering images.\n\nMirrors the BokehJS ``properties.Image`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering images."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.Image"]}, " class."]}]}, "props": [{"name": "global_alpha", "type": "Alpha", "desc": "An alpha value to use to images with.\n\n    Acceptable values are floating-point numbers between 0 and 1 (0 being\n    transparent and 1 being opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to images with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque)."]}]}]}, "default": 1.0}]}, {"name": "ScalarLineProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering path operations.\n\nMirrors the BokehJS ``properties.Line`` class.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering path operations."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.Line"]}, " class."]}]}, "props": [{"name": "line_alpha", "type": "Alpha", "desc": "An alpha value to use to stroke paths with.\n\n    Acceptable values are floating-point numbers between 0 and 1 (0 being\n    transparent and 1 being opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to stroke paths with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque)."]}]}]}, "default": 1.0}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "How path segments should be terminated.\n\nAcceptable values are:\n\n- ``'butt'`` |butt_cap|\n- ``'round'`` |round_cap|\n- ``'square'`` |square_cap|", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How path segments should be terminated."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'butt'"]}, " ", {"type": "substitution_reference", "children": ["butt_cap"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'round'"]}, " ", {"type": "substitution_reference", "children": ["round_cap"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'square'"]}, " ", {"type": "substitution_reference", "children": ["square_cap"]}]}]}]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "A color to use to stroke paths with.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to stroke paths with."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPattern", "desc": "How should the line be dashed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How should the line be dashed."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The distance into the ``line_dash`` (in pixels) that the pattern should start from.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The distance into the ", {"type": "literal", "children": ["line_dash"]}, " (in pixels) that the pattern should start from."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "How path segments should be joined together.\n\nAcceptable values are:\n\n- ``'miter'`` |miter_join|\n- ``'round'`` |round_join|\n- ``'bevel'`` |bevel_join|", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How path segments should be joined together."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'miter'"]}, " ", {"type": "substitution_reference", "children": ["miter_join"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'round'"]}, " ", {"type": "substitution_reference", "children": ["round_join"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'bevel'"]}, " ", {"type": "substitution_reference", "children": ["bevel_join"]}]}]}]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "Stroke width in units of pixels.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Stroke width in units of pixels."]}]}, "default": 1}]}, {"name": "ScalarTextProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering text.\n\nMirrors the BokehJS ``properties.Text`` class.\n\n.. note::\n    There is currently only support for filling text. An interface\n    to stroke the outlines of text has not yet been exposed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering text."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.Text"]}, " class."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["There is currently only support for filling text. An interface\nto stroke the outlines of text has not yet been exposed."]}]}]}, "props": [{"name": "text_align", "type": "Enum('left', 'right', 'center')", "desc": "Horizontal anchor point to use when rendering text.\n\nAcceptable values are:\n\n- ``'left'``\n- ``'right'``\n- ``'center'``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Horizontal anchor point to use when rendering text."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'left'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'right'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'center'"]}]}]}]}]}, "default": "left"}, {"name": "text_alpha", "type": "Alpha", "desc": "An alpha value to use to fill text with.\n\n    Acceptable values are floating-point numbers between 0 and 1 (0 being\n    transparent and 1 being opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to fill text with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque)."]}]}]}, "default": 1.0}, {"name": "text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "Vertical anchor point to use when rendering text.\n\nAcceptable values are:\n\n- ``'top'``\n- ``'middle'``\n- ``'bottom'``\n- ``'alphabetic'``\n- ``'hanging'``\n- ``'ideographic'``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Vertical anchor point to use when rendering text."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'top'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'middle'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'bottom'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'alphabetic'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'hanging'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'ideographic'"]}]}]}]}]}, "default": "bottom"}, {"name": "text_color", "type": "Nullable(Color)", "desc": "A color to use to fill text with.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to fill text with."]}]}, "default": "#444444"}, {"name": "text_font", "type": "String", "desc": "Name of a font to use for rendering text, e.g., ``'times'``, ``'helvetica'``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Name of a font to use for rendering text, e.g., ", {"type": "literal", "children": ["'times'"]}, ", ", {"type": "literal", "children": ["'helvetica'"]}, "."]}]}, "default": "helvetica"}, {"name": "text_font_size", "type": "FontSize", "desc": "", "richdesc": {"type": "document", "children": []}, "default": "16px"}, {"name": "text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "A style to use for rendering text.\n\nAcceptable values are:\n\n- ``'normal'`` normal text\n- ``'italic'`` *italic text*\n- ``'bold'`` **bold text**\n- ``\"bold italic\"`` ***bold italic text***", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A style to use for rendering text."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'normal'"]}, " normal text"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'italic'"]}, " ", {"type": "emphasis", "children": ["italic text"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'bold'"]}, " ", {"type": "strong", "children": ["bold text"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["\"bold italic\""]}, " ", {"type": "strong", "children": ["*bold italic text*"]}]}]}]}]}, "default": "normal"}, {"name": "text_line_height", "type": "Float", "desc": "In multi-line text, how much additional space should be allocated for\neach line. The value is provided as a number, but should be treated as\na percentage of font size. The default is 120%. Setting it to 1.0, so\n100%, means no additional space will be used.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["In multi-line text, how much additional space should be allocated for\neach line. The value is provided as a number, but should be treated as\na percentage of font size. The default is 120%. Setting it to 1.0, so\n100%, means no additional space will be used."]}]}, "default": 1.2}, {"name": "text_outline_color", "type": "Nullable(Color)", "desc": "A color to use to outline text with.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to outline text with."]}]}, "default": null}]}, {"name": "Scale", "bases": ["Transform"], "mro": ["Scale", "Transform", "Model"], "desc": "Base class for ``Scale`` models that represent an invertible\ncomputation to be carried out on the client-side.\n\nJavaScript implementations should implement the following methods:\n\n.. code-block\n\n    compute(x: number): number {\n        # compute and return the transform of a single value\n    }\n\n    v_compute(xs: Arrayable<number>): Arrayable<number> {\n        # compute and return the transform of an array of values\n    }\n\n    invert(sx: number): number {\n        # compute and return the inverse transform of a single value\n    }\n\n    v_invert(sxs: Arrayable<number>): Arrayable<number> {\n        # compute and return the inverse transform of an array of values\n    }\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for ", {"type": "literal", "children": ["Scale"]}, " models that represent an invertible\ncomputation to be carried out on the client-side."]}, {"type": "paragraph", "children": ["JavaScript implementations should implement the following methods:"]}, {"type": "comment", "children": ["code-block\n\ncompute(x: number): number {\n    # compute and return the transform of a single value\n}\n\nv_compute(xs: Arrayable<number>): Arrayable<number> {\n    # compute and return the transform of an array of values\n}\n\ninvert(sx: number): number {\n    # compute and return the inverse transform of a single value\n}\n\nv_invert(sxs: Arrayable<number>): Arrayable<number> {\n    # compute and return the inverse transform of an array of values\n}"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "ScanningColorMapper", "bases": ["ContinuousColorMapper"], "mro": ["ScanningColorMapper", "ContinuousColorMapper", "ColorMapper", "Mapper", "Transform", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "Scatter", "bases": ["Marker"], "mro": ["Scatter", "Marker", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render scatter markers selected from a predefined list of designs.\n\nUse ``Scatter`` to draw any of Bokeh's built-in marker types:\n``asterisk``, ``circle``, ``circle_cross``, ``circle_dot``, ``circle_x``,\n``circle_y``, ``cross``, ``dash``, ``diamond``, ``diamond_cross``,\n``diamond_dot``, ``dot``, ``hex``, ``hex_dot``, ``inverted_triangle``,\n``plus``, ``square``, ``square_cross``, ``square_dot``, ``square_pin``,\n``square_x``, ``star``, ``star_dot``, ``triangle``, ``triangle_dot``,\n``triangle_pin``, ``x``, or ``y``. This collection is available in\n:class:`~bokeh.core.enums.MarkerType`.\n\nBokeh's built-in markers consist of a set of base markers, most of which can\nbe combined with different kinds of additional visual features:\n\n.. bokeh-plot:: __REPO__/examples/basic/scatters/markertypes.py\n    :source-position: none\n\nYou can select marker types in two ways:\n\n* To draw the **same marker for all values**, use the ``marker`` attribute\n  to specify the name of a specific marker. For example:\n\n  .. code-block:: python\n\n      glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"square\")\n      plot.add_glyph(source, glyph)\n\n  This will render square markers for all points.\n\n* Alternatively, to use **marker types specified in a data source column**,\n  assign the column name to the ``marker`` attribute. For example:\n\n  .. code-block:: python\n\n      # source.data['markers'] = [\"circle\", \"square\", \"circle\", ... ]\n\n      glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"markers\")\n      plot.add_glyph(source, glyph)\n\n.. note::\n    When you draw ``circle`` markers with ``Scatter``, you can only assign a\n    size in |screen units| (by passing a number of pixels to the ``size``\n    property). In case you want to define the radius of circles in\n    |data units|, use the :class:`~bokeh.models.glyphs.Circle` glyph instead\n    of the ``Scatter`` glyph.\n\n.. note::\n    ``Scatter`` markers with multiple marker types may be drawn in a\n    different order when using the WebGL output backend. This is an explicit\n    trade-off made in the interests of performance.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Scatter.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render scatter markers selected from a predefined list of designs."]}, {"type": "paragraph", "children": ["Use ", {"type": "literal", "children": ["Scatter"]}, " to draw any of Bokeh's built-in marker types:\n", {"type": "literal", "children": ["asterisk"]}, ", ", {"type": "literal", "children": ["circle"]}, ", ", {"type": "literal", "children": ["circle_cross"]}, ", ", {"type": "literal", "children": ["circle_dot"]}, ", ", {"type": "literal", "children": ["circle_x"]}, ",\n", {"type": "literal", "children": ["circle_y"]}, ", ", {"type": "literal", "children": ["cross"]}, ", ", {"type": "literal", "children": ["dash"]}, ", ", {"type": "literal", "children": ["diamond"]}, ", ", {"type": "literal", "children": ["diamond_cross"]}, ",\n", {"type": "literal", "children": ["diamond_dot"]}, ", ", {"type": "literal", "children": ["dot"]}, ", ", {"type": "literal", "children": ["hex"]}, ", ", {"type": "literal", "children": ["hex_dot"]}, ", ", {"type": "literal", "children": ["inverted_triangle"]}, ",\n", {"type": "literal", "children": ["plus"]}, ", ", {"type": "literal", "children": ["square"]}, ", ", {"type": "literal", "children": ["square_cross"]}, ", ", {"type": "literal", "children": ["square_dot"]}, ", ", {"type": "literal", "children": ["square_pin"]}, ",\n", {"type": "literal", "children": ["square_x"]}, ", ", {"type": "literal", "children": ["star"]}, ", ", {"type": "literal", "children": ["star_dot"]}, ", ", {"type": "literal", "children": ["triangle"]}, ", ", {"type": "literal", "children": ["triangle_dot"]}, ",\n", {"type": "literal", "children": ["triangle_pin"]}, ", ", {"type": "literal", "children": ["x"]}, ", or ", {"type": "literal", "children": ["y"]}, ". This collection is available in\n", {"type": "problematic", "children": [":class:`~bokeh.core.enums.MarkerType`"]}, "."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "paragraph", "children": ["Bokeh's built-in markers consist of a set of base markers, most of which can\nbe combined with different kinds of additional visual features:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/basic/scatters/markertypes.py\n    :source-position: none\n"]}]}, {"type": "paragraph", "children": ["You can select marker types in two ways:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["To draw the ", {"type": "strong", "children": ["same marker for all values"]}, ", use the ", {"type": "literal", "children": ["marker"]}, " attribute\nto specify the name of a specific marker. For example:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["glyph"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["Scatter"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["x"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"x\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["y"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"y\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["size"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"sizes\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["marker"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"square\""]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["add_glyph"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["source"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["glyph"]}, {"type": "inline", "children": [")"]}]}, {"type": "paragraph", "children": ["This will render square markers for all points."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["Alternatively, to use ", {"type": "strong", "children": ["marker types specified in a data source column"]}, ",\nassign the column name to the ", {"type": "literal", "children": ["marker"]}, " attribute. For example:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["# source.data['markers'] = [\"circle\", \"square\", \"circle\", ... ]"]}, "\n\n", {"type": "inline", "children": ["glyph"]}, " ", {"type": "inline", "children": ["="]}, " ", {"type": "inline", "children": ["Scatter"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["x"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"x\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["y"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"y\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["size"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"sizes\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["marker"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["\"markers\""]}, {"type": "inline", "children": [")"]}, "\n", {"type": "inline", "children": ["plot"]}, {"type": "inline", "children": ["."]}, {"type": "inline", "children": ["add_glyph"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["source"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["glyph"]}, {"type": "inline", "children": [")"]}]}]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["When you draw ", {"type": "literal", "children": ["circle"]}, " markers with ", {"type": "literal", "children": ["Scatter"]}, ", you can only assign a\nsize in ", {"type": "substitution_reference", "children": ["screen units"]}, " (by passing a number of pixels to the ", {"type": "literal", "children": ["size"]}, "\nproperty). In case you want to define the radius of circles in\n", {"type": "substitution_reference", "children": ["data units"]}, ", use the ", {"type": "problematic", "children": [":class:`~bokeh.models.glyphs.Circle`"]}, " glyph instead\nof the ", {"type": "literal", "children": ["Scatter"]}, " glyph."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, {"type": "note", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["Scatter"]}, " markers with multiple marker types may be drawn in a\ndifferent order when using the WebGL output backend. This is an explicit\ntrade-off made in the interests of performance."]}]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Scatter.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "marker", "type": "MarkerSpec(String, MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Which marker to render. This can be the name of any built in marker,\ne.g. \"circle\", or a reference to a data column containing such names.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which marker to render. This can be the name of any built in marker,\ne.g. \"circle\", or a reference to a data column containing such names."]}]}, "default": "circle"}]}, {"name": "ScientificFormatter", "bases": ["StringFormatter"], "mro": ["ScientificFormatter", "StringFormatter", "CellFormatter", "Model"], "desc": "Display numeric values from continuous ranges as \"basic numbers\",\nusing scientific notation when appropriate by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Display numeric values from continuous ranges as \"basic numbers\",\nusing scientific notation when appropriate by default."]}]}, "props": [{"name": "power_limit_high", "type": "Int", "desc": "Limit the use of scientific notation to when::\n    log(x) >= power_limit_high", "richdesc": {"type": "document", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["Limit the use of scientific notation to when::"]}, {"type": "definition", "children": [{"type": "system_message", "children": [{"type": "paragraph", "children": ["Blank line missing before literal block (after the \"::\")? Interpreted as a definition list item."]}]}, {"type": "paragraph", "children": ["log(x) >= power_limit_high"]}]}]}]}]}, "default": 5}, {"name": "power_limit_low", "type": "Int", "desc": "Limit the use of scientific notation to when::\n    log(x) <= power_limit_low", "richdesc": {"type": "document", "children": [{"type": "definition_list", "children": [{"type": "definition_list_item", "children": [{"type": "term", "children": ["Limit the use of scientific notation to when::"]}, {"type": "definition", "children": [{"type": "system_message", "children": [{"type": "paragraph", "children": ["Blank line missing before literal block (after the \"::\")? Interpreted as a definition list item."]}]}, {"type": "paragraph", "children": ["log(x) <= power_limit_low"]}]}]}]}]}, "default": -3}, {"name": "precision", "type": "Int", "desc": "How many digits of precision to display.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["How many digits of precision to display."]}]}, "default": 10}]}, {"name": "Scroll", "bases": ["GestureTool"], "mro": ["Scroll", "GestureTool", "Tool", "Model"], "desc": "A base class for tools that respond to scroll events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for tools that respond to scroll events."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "ScrollBox", "bases": ["LayoutDOM"], "mro": ["ScrollBox", "LayoutDOM", "UIElement", "Model"], "desc": "A panel that allows to scroll overflowing UI elements.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A panel that allows to scroll overflowing UI elements."]}]}, "props": [{"name": "child", "type": "Instance(UIElement)", "desc": "The child UI element. This can be a single UI control, widget, etc., or\na container layout like ``Column`` or ``Row``, or a combitation of layouts.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The child UI element. This can be a single UI control, widget, etc., or\na container layout like ", {"type": "literal", "children": ["Column"]}, " or ", {"type": "literal", "children": ["Row"]}, ", or a combitation of layouts."]}]}, "default": "<Undefined>"}, {"name": "horizontal_scrollbar", "type": "Enum('auto', 'visible', 'hidden')", "desc": "The visibility of the horizontal scrollbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The visibility of the horizontal scrollbar."]}]}, "default": "auto"}, {"name": "vertical_scrollbar", "type": "Enum('auto', 'visible', 'hidden')", "desc": "The visibility of the vertical scrollbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The visibility of the vertical scrollbar."]}]}, "default": "auto"}]}, {"name": "Section", "bases": ["MenuItem"], "mro": ["Section", "MenuItem", "UIElement", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "items", "type": "List(Instance(Action))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": []}]}, {"name": "Segment", "bases": ["LineGlyph"], "mro": ["Segment", "LineGlyph", "Glyph", "Model"], "desc": "Render segments.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Segment.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render segments."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Segment.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the segments.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the segments."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the segments.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the segments."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the segments.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the segments."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the segments.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the segments."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the segments.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the segments."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the segments.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the segments."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the segments.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the segments."]}]}, "default": 1}, {"name": "x0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the starting points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the starting points."]}]}, "default": {"type": "field", "field": "x0"}}, {"name": "x1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the ending points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the ending points."]}]}, "default": {"type": "field", "field": "x1"}}, {"name": "y0", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the starting points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the starting points."]}]}, "default": {"type": "field", "field": "y0"}}, {"name": "y1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the ending points.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the ending points."]}]}, "default": {"type": "field", "field": "y1"}}]}, {"name": "Select", "bases": ["InputWidget"], "mro": ["Select", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Single-select widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Single-select widget."]}]}, "props": [{"name": "options", "type": "Either(List(Either(String, Tuple(String, String))), Dict(String, List(Either(String, Tuple(String, String)))))", "desc": "Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n``(value, label)``. In the latter case, the visible widget text for each\nvalue will be corresponding given label. Option groupings can be provided\nby supplying a dictionary object whose values are in the aforementioned\nlist format", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n", {"type": "literal", "children": ["(value, label)"]}, ". In the latter case, the visible widget text for each\nvalue will be corresponding given label. Option groupings can be provided\nby supplying a dictionary object whose values are in the aforementioned\nlist format"]}]}, "default": []}, {"name": "value", "type": "String", "desc": "Initial or selected value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value."]}]}, "default": ""}]}, {"name": "SelectEditor", "bases": ["CellEditor"], "mro": ["SelectEditor", "CellEditor", "Model"], "desc": "Select cell editor.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Select cell editor."]}]}, "props": [{"name": "options", "type": "List(String)", "desc": "The list of options to select from.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The list of options to select from."]}]}, "default": []}]}, {"name": "SelectTool", "bases": ["GestureTool"], "mro": ["SelectTool", "GestureTool", "Tool", "Model"], "desc": "A base class for tools that perform \"selections\", e.g. ``BoxSelectTool``.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for tools that perform \"selections\", e.g. ", {"type": "literal", "children": ["BoxSelectTool"]}, "."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "mode", "type": "Enum('replace', 'append', 'intersect', 'subtract')", "desc": "Defines what should happen when a new selection is made. The default\nis to replace the existing selection. Other options are to append to\nthe selection, intersect with it or subtract from it.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines what should happen when a new selection is made. The default\nis to replace the existing selection. Other options are to append to\nthe selection, intersect with it or subtract from it."]}]}, "default": "replace"}, {"name": "renderers", "type": "Either(Auto, List(Instance(DataRenderer)))", "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot."]}]}, "default": "auto"}]}, {"name": "Selection", "bases": ["Model"], "mro": ["Selection", "Model"], "desc": "A Selection represents a portion of the data in a ``DataSource``, which\ncan be visually manipulated in a plot.\n\nSelections are typically created by selecting points in a plot with\na ``SelectTool``, but can also be programmatically specified.\n\nFor most glyphs, the ``indices`` property is the relevant value to use.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A Selection represents a portion of the data in a ", {"type": "literal", "children": ["DataSource"]}, ", which\ncan be visually manipulated in a plot."]}, {"type": "paragraph", "children": ["Selections are typically created by selecting points in a plot with\na ", {"type": "literal", "children": ["SelectTool"]}, ", but can also be programmatically specified."]}, {"type": "paragraph", "children": ["For most glyphs, the ", {"type": "literal", "children": ["indices"]}, " property is the relevant value to use."]}]}, "props": [{"name": "image_indices", "type": "List(Struct(index=Int, i=Int, j=Int, flat_index=Int))", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": []}, {"name": "indices", "type": "Seq(Int)", "desc": "The \"scatter\" level indices included in a selection. For example, for a\nselection on a ``Circle`` glyph, this list records the indices of which\nindividual circles are selected.\n\nFor \"multi\" glyphs such as ``Patches``, ``MultiLine``, ``MultiPolygons``,\netc, this list records the indices of which entire sub-items are selected.\nFor example, which indidual polygons of a ``MultiPolygon`` are selected.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The \"scatter\" level indices included in a selection. For example, for a\nselection on a ", {"type": "literal", "children": ["Circle"]}, " glyph, this list records the indices of which\nindividual circles are selected."]}, {"type": "paragraph", "children": ["For \"multi\" glyphs such as ", {"type": "literal", "children": ["Patches"]}, ", ", {"type": "literal", "children": ["MultiLine"]}, ", ", {"type": "literal", "children": ["MultiPolygons"]}, ",\netc, this list records the indices of which entire sub-items are selected.\nFor example, which indidual polygons of a ", {"type": "literal", "children": ["MultiPolygon"]}, " are selected."]}]}, "default": []}, {"name": "line_indices", "type": "Seq(Int)", "desc": "The point indices included in a selection on a ``Line`` glyph.\n\nThis value records the indices of the individual points on a ``Line`` that\nwere selected by a selection tool.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The point indices included in a selection on a ", {"type": "literal", "children": ["Line"]}, " glyph."]}, {"type": "paragraph", "children": ["This value records the indices of the individual points on a ", {"type": "literal", "children": ["Line"]}, " that\nwere selected by a selection tool."]}]}, "default": []}, {"name": "multiline_indices", "type": "Dict(String, Seq(Int))", "desc": "The detailed point indices included in a selection on a ``MultiLine``.\n\nThis value records which points, on which lines, are part of a seletion on\na ``MulitLine``. The keys are the top level indices (i.e., which line)\nwhich map to lists of indices (i.e. which points on that line).\n\nIf you only need to know which lines are selected, without knowing what\nindividual points on those lines are selected, then you can look at the\nkeys of this dictionary (converted to ints).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The detailed point indices included in a selection on a ", {"type": "literal", "children": ["MultiLine"]}, "."]}, {"type": "paragraph", "children": ["This value records which points, on which lines, are part of a seletion on\na ", {"type": "literal", "children": ["MulitLine"]}, ". The keys are the top level indices (i.e., which line)\nwhich map to lists of indices (i.e. which points on that line)."]}, {"type": "paragraph", "children": ["If you only need to know which lines are selected, without knowing what\nindividual points on those lines are selected, then you can look at the\nkeys of this dictionary (converted to ints)."]}]}, "default": {}}]}, {"name": "SelectionPolicy", "bases": ["Model"], "mro": ["SelectionPolicy", "Model"], "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Selector", "bases": ["Model"], "mro": ["Selector", "Model"], "desc": "Base class for selector queries. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for selector queries.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": []}, {"name": "ServerSentDataSource", "bases": ["WebDataSource"], "mro": ["ServerSentDataSource", "WebDataSource", "ColumnDataSource", "ColumnarDataSource", "DataSource", "Model"], "desc": "A data source that can populate columns by receiving server sent\nevents endpoints.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A data source that can populate columns by receiving server sent\nevents endpoints."]}]}, "props": []}, {"name": "SetValue", "bases": ["Callback"], "mro": ["SetValue", "Callback", "Model"], "desc": "Allows to update a property of an object. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to update a property of an object."]}]}, "props": [{"name": "attr", "type": "Required(String)", "desc": "The property to modify.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The property to modify."]}]}, "default": "<Undefined>"}, {"name": "obj", "type": "Required(Instance(HasProps))", "desc": "Object to set the value on.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Object to set the value on."]}]}, "default": "<Undefined>"}, {"name": "value", "type": "Required(Any)", "desc": "The value to set.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The value to set."]}]}, "default": "<Undefined>"}]}, {"name": "SingleIntervalTicker", "bases": ["ContinuousTicker"], "mro": ["SingleIntervalTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate evenly spaced ticks at a fixed interval regardless of\nscale.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate evenly spaced ticks at a fixed interval regardless of\nscale."]}]}, "props": [{"name": "interval", "type": "Required(Float)", "desc": "The interval between adjacent ticks.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The interval between adjacent ticks."]}]}, "default": "<Undefined>"}]}, {"name": "Slider", "bases": ["AbstractSlider"], "mro": ["Slider", "AbstractSlider", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Slider-based number selection widget. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Slider-based number selection widget."]}]}, "props": [{"name": "end", "type": "Required(Float)", "desc": "The maximum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The maximum allowable value."]}]}, "default": "<Undefined>"}, {"name": "start", "type": "Required(Float)", "desc": "The minimum allowable value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The minimum allowable value."]}]}, "default": "<Undefined>"}, {"name": "step", "type": "Float", "desc": "The step between consecutive values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The step between consecutive values."]}]}, "default": 1}, {"name": "value", "type": "Required(Float)", "desc": "Initial or selected value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value."]}]}, "default": "<Undefined>"}, {"name": "value_throttled", "type": "Readonly(Required(Float))", "desc": "Initial or selected value, throttled according to report only on mouseup.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or selected value, throttled according to report only on mouseup."]}]}, "default": "<Undefined>"}]}, {"name": "Slope", "bases": ["Annotation"], "mro": ["Slope", "Annotation", "Renderer", "Model"], "desc": "Render a sloped line as an annotation.\n\nSee :ref:`ug_basic_annotations_slope` for information on plotting slopes.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a sloped line as an annotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_slope`"]}, " for information on plotting slopes."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "gradient", "type": "Nullable(Float)", "desc": "The gradient of the line, in |data units|", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The gradient of the line, in ", {"type": "substitution_reference", "children": ["data units"]}]}]}, "default": null}, {"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the line."]}]}, "default": 1.0}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the line."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the line."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the line."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the line."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the line."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the line.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the line."]}]}, "default": 1}, {"name": "y_intercept", "type": "Nullable(Float)", "desc": "The y intercept of the line, in |data units|", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y intercept of the line, in ", {"type": "substitution_reference", "children": ["data units"]}]}]}, "default": null}]}, {"name": "Spacer", "bases": ["LayoutDOM"], "mro": ["Spacer", "LayoutDOM", "UIElement", "Model"], "desc": "A container for space used to fill an empty spot in a row or column.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A container for space used to fill an empty spot in a row or column."]}]}, "props": []}, {"name": "Span", "bases": ["Annotation"], "mro": ["Span", "Annotation", "Renderer", "Model"], "desc": "Render a horizontal or vertical line span.\n\nSee :ref:`ug_basic_annotations_spans` for information on plotting spans.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a horizontal or vertical line span."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_spans`"]}, " for information on plotting spans."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "dimension", "type": "Enum('width', 'height')", "desc": "The direction of the span can be specified by setting this property\nto \"height\" (``y`` direction) or \"width\" (``x`` direction).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The direction of the span can be specified by setting this property\nto \"height\" (", {"type": "literal", "children": ["y"]}, " direction) or \"width\" (", {"type": "literal", "children": ["x"]}, " direction)."]}]}, "default": "width"}, {"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the span.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the span."]}]}, "default": 1.0}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the span.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the span."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the span.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the span."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the span.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the span."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the span.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the span."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the span.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the span."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the span.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the span."]}]}, "default": 1}, {"name": "location", "type": "Nullable(Float)", "desc": "The location of the span, along ``dimension``.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The location of the span, along ", {"type": "literal", "children": ["dimension"]}, "."]}, {"type": "paragraph", "children": ["Datetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch."]}]}, "default": null}, {"name": "location_units", "type": "Enum('canvas', 'screen', 'data')", "desc": "The unit type for the location attribute. Interpreted as \"data space\"\nunits by default.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The unit type for the location attribute. Interpreted as \"data space\"\nunits by default."]}]}, "default": "data"}]}, {"name": "Spinner", "bases": ["NumericInput"], "mro": ["Spinner", "NumericInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Numeric Spinner input widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Numeric Spinner input widget."]}]}, "props": [{"name": "page_step_multiplier", "type": "Interval(Float, 0, inf)", "desc": "Defines the multiplication factor applied to step when the page up and page\ndown keys are pressed", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines the multiplication factor applied to step when the page up and page\ndown keys are pressed"]}]}, "default": 10}, {"name": "step", "type": "Interval(Float, 1e-16, inf)", "desc": "The step added or subtracted to the current value", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The step added or subtracted to the current value"]}]}, "default": 1}, {"name": "value_throttled", "type": "Readonly(Either(Null, Float, Int))", "desc": "value reported at the end of interactions", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["value reported at the end of interactions"]}]}, "default": null}, {"name": "wheel_wait", "type": "Either(Int, Float)", "desc": "Defines the debounce time in ms before updating `value_throttled` when the\nmouse wheel is used to change the input", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Defines the debounce time in ms before updating ", {"type": "title_reference", "children": ["value_throttled"]}, " when the\nmouse wheel is used to change the input"]}]}, "default": 100}]}, {"name": "Stack", "bases": ["Expression"], "mro": ["Stack", "Expression", "Model"], "desc": "An expression for generating arrays by summing different columns from\na ``ColumnDataSource``.\n\nThis expression is useful for implementing stacked bar charts at a low\nlevel.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An expression for generating arrays by summing different columns from\na ", {"type": "literal", "children": ["ColumnDataSource"]}, "."]}, {"type": "paragraph", "children": ["This expression is useful for implementing stacked bar charts at a low\nlevel."]}]}, "props": [{"name": "fields", "type": "Seq(String)", "desc": "A sequence of fields from a ``ColumnDataSource`` to sum (elementwise). For\nexample:\n\n.. code-block:: python\n\n    Stack(fields=['sales', 'marketing'])\n\nWill compute an array of values (in the browser) by adding the elements\nof the ``'sales'`` and ``'marketing'`` columns of a data source.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A sequence of fields from a ", {"type": "literal", "children": ["ColumnDataSource"]}, " to sum (elementwise). For\nexample:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["Stack"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["fields"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["'sales'"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["'marketing'"]}, {"type": "inline", "children": ["])"]}]}, {"type": "paragraph", "children": ["Will compute an array of values (in the browser) by adding the elements\nof the ", {"type": "literal", "children": ["'sales'"]}, " and ", {"type": "literal", "children": ["'marketing'"]}, " columns of a data source."]}]}, "default": []}]}, {"name": "StaticLayoutProvider", "bases": ["LayoutProvider"], "mro": ["StaticLayoutProvider", "LayoutProvider", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "graph_layout", "type": "Dict(Int, Seq(Any))", "desc": "The coordinates of the graph nodes in cartesian space. The dictionary\nkeys correspond to a node index and the values are a two element sequence\ncontaining the x and y coordinates of the node.\n\n.. code-block:: python\n\n    {\n        0 : [0.5, 0.5],\n        1 : [1.0, 0.86],\n        2 : [0.86, 1],\n    }", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The coordinates of the graph nodes in cartesian space. The dictionary\nkeys correspond to a node index and the values are a two element sequence\ncontaining the x and y coordinates of the node."]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["{"]}, "\n    ", {"type": "inline", "children": ["0"]}, " ", {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["0.5"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["0.5"]}, {"type": "inline", "children": ["],"]}, "\n    ", {"type": "inline", "children": ["1"]}, " ", {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["1.0"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["0.86"]}, {"type": "inline", "children": ["],"]}, "\n    ", {"type": "inline", "children": ["2"]}, " ", {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["["]}, {"type": "inline", "children": ["0.86"]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["1"]}, {"type": "inline", "children": ["],"]}, "\n", {"type": "inline", "children": ["}"]}]}]}, "default": {}}]}, {"name": "Step", "bases": ["XYGlyph", "LineGlyph"], "mro": ["Step", "XYGlyph", "LineGlyph", "Glyph", "Model"], "desc": "Render step lines.\n\nStep levels can be draw before, after, or centered on each point, according\nto the value of the ``mode`` property.\n\nThe x-coordinates are assumed to be (and must be) sorted in ascending order\nfor steps to be properly rendered.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Step.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render step lines."]}, {"type": "paragraph", "children": ["Step levels can be draw before, after, or centered on each point, according\nto the value of the ", {"type": "literal", "children": ["mode"]}, " property."]}, {"type": "paragraph", "children": ["The x-coordinates are assumed to be (and must be) sorted in ascending order\nfor steps to be properly rendered."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Step.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "line_alpha", "type": "Alpha", "desc": "The line alpha values for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the steps."]}]}, "default": 1.0}, {"name": "line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the steps."]}]}, "default": "butt"}, {"name": "line_color", "type": "Nullable(Color)", "desc": "The line color values for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the steps."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPattern", "desc": "The line dash values for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the steps."]}]}, "default": []}, {"name": "line_dash_offset", "type": "Int", "desc": "The line dash offset values for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the steps."]}]}, "default": 0}, {"name": "line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the steps."]}]}, "default": "bevel"}, {"name": "line_width", "type": "Float", "desc": "The line width values for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the steps."]}]}, "default": 1}, {"name": "mode", "type": "Enum('before', 'after', 'center')", "desc": "Where the step \"level\" should be drawn in relation to the x and y\ncoordinates. The parameter can assume one of three values:\n\n* ``before``: (default) Draw step levels before each x-coordinate (no step before the first point)\n* ``after``:  Draw step levels after each x-coordinate (no step after the last point)\n* ``center``: Draw step levels centered on each x-coordinate", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Where the step \"level\" should be drawn in relation to the x and y\ncoordinates. The parameter can assume one of three values:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["before"]}, ": (default) Draw step levels before each x-coordinate (no step before the first point)"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["after"]}, ":  Draw step levels after each x-coordinate (no step after the last point)"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["center"]}, ": Draw step levels centered on each x-coordinate"]}]}]}]}, "default": "before"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for the steps."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for the steps.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for the steps."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "StepInterpolator", "bases": ["Interpolator"], "mro": ["StepInterpolator", "Interpolator", "Transform", "Model"], "desc": "Compute a step-wise interpolation between the points provided through\nthe ``x``, ``y``, and ``data`` parameters.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Compute a step-wise interpolation between the points provided through\nthe ", {"type": "literal", "children": ["x"]}, ", ", {"type": "literal", "children": ["y"]}, ", and ", {"type": "literal", "children": ["data"]}, " parameters."]}]}, "props": [{"name": "mode", "type": "Enum('before', 'after', 'center')", "desc": "Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:\n\n* ``after`` (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform.\n* ``before``: Assume the y-value associated with the nearest x-value which is greater than the point to transform.\n* ``center``: Assume the y-value associated with the nearest x-value to the point to transform.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["after"]}, " (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["before"]}, ": Assume the y-value associated with the nearest x-value which is greater than the point to transform."]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["center"]}, ": Assume the y-value associated with the nearest x-value to the point to transform."]}]}]}]}, "default": "after"}]}, {"name": "StringEditor", "bases": ["CellEditor"], "mro": ["StringEditor", "CellEditor", "Model"], "desc": "Basic string cell editor with auto-completion.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Basic string cell editor with auto-completion."]}]}, "props": [{"name": "completions", "type": "List(String)", "desc": "An optional list of completion strings.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional list of completion strings."]}]}, "default": []}]}, {"name": "StringFormatter", "bases": ["CellFormatter"], "mro": ["StringFormatter", "CellFormatter", "Model"], "desc": "Basic string cell formatter.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Basic string cell formatter."]}]}, "props": [{"name": "font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "An optional text font style, e.g. bold, italic.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional text font style, e.g. bold, italic."]}]}, "default": "normal"}, {"name": "nan_format", "type": "String", "desc": "Formatting to apply to NaN and None values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Formatting to apply to NaN and None values."]}]}, "default": "-"}, {"name": "text_align", "type": "Enum('left', 'right', 'center')", "desc": "An optional text align, i.e. left, center or right.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional text align, i.e. left, center or right."]}]}, "default": "left"}, {"name": "text_color", "type": "Nullable(Color)", "desc": "An optional text color.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional text color."]}]}, "default": null}]}, {"name": "Styles", "bases": ["Model"], "mro": ["Styles", "Model"], "desc": "Allows to configure style attribute of DOM elements. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Allows to configure style attribute of DOM elements."]}]}, "props": [{"name": "align_content", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "align_items", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "align_self", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "alignment_baseline", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "all", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_delay", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_direction", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_duration", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_fill_mode", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_iteration_count", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_name", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_play_state", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "animation_timing_function", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "aspect_ratio", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "backface_visibility", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_attachment", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_clip", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_image", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_origin", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_position_x", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_position_y", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_repeat", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "background_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "baseline_shift", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "block_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_end_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_end_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_end_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_start_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_start_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_block_start_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_bottom", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_bottom_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_bottom_left_radius", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_bottom_right_radius", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_bottom_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_bottom_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_collapse", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_image", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_image_outset", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_image_repeat", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_image_slice", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_image_source", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_image_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_end_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_end_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_end_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_start_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_start_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_inline_start_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_left", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_left_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_left_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_left_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_radius", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_right", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_right_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_right_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_right_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_spacing", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_top", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_top_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_top_left_radius", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_top_right_radius", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_top_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_top_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "border_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "bottom", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "box_shadow", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "box_sizing", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "break_after", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "break_before", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "break_inside", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "caption_side", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "caret_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "clear", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "clip", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "clip_path", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "clip_rule", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "color_interpolation", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "color_interpolation_filters", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_count", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_fill", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_gap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_rule", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_rule_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_rule_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_rule_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_span", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "column_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "columns", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "content", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "counter_increment", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "counter_reset", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "cursor", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "direction", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "display", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "dominant_baseline", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "empty_cells", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "fill", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "fill_opacity", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "fill_rule", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "filter", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flex", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flex_basis", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flex_direction", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flex_flow", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flex_grow", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flex_shrink", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flex_wrap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "float", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flood_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "flood_opacity", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_family", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_feature_settings", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_kerning", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_size_adjust", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_stretch", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_synthesis", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_variant", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_variant_caps", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_variant_east_asian", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_variant_ligatures", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_variant_numeric", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_variant_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "font_weight", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "gap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "glyph_orientation_vertical", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_area", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_auto_columns", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_auto_flow", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_auto_rows", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_column", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_column_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_column_gap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_column_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_gap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_row", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_row_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_row_gap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_row_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_template", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_template_areas", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_template_columns", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "grid_template_rows", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "height", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "hyphens", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "image_orientation", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "image_rendering", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "inline_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "justify_content", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "justify_items", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "justify_self", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "left", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "letter_spacing", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "lighting_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "line_break", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "line_height", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "list_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "list_style_image", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "list_style_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "list_style_type", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_block_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_block_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_bottom", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_inline_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_inline_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_left", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_right", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "margin_top", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "marker", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "marker_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "marker_mid", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "marker_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "mask", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "mask_composite", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "mask_image", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "mask_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "mask_repeat", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "mask_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "mask_type", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "max_block_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "max_height", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "max_inline_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "max_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "min_block_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "min_height", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "min_inline_size", "type": "Nullable(String)", "desc": "The `min-inline-size`_ CSS property defines the horizontal or vertical\nminimal size of an element's block, depending on its writing mode. It\ncorresponds to either the ``min-width`` or the ``min-height`` property,\ndepending on the value of ``writing-mode``.\n\n.. _min-inline-size: https://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-size", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The ", {"type": "reference", "children": ["min-inline-size"]}, " CSS property defines the horizontal or vertical\nminimal size of an element's block, depending on its writing mode. It\ncorresponds to either the ", {"type": "literal", "children": ["min-width"]}, " or the ", {"type": "literal", "children": ["min-height"]}, " property,\ndepending on the value of ", {"type": "literal", "children": ["writing-mode"]}, "."]}, {"type": "target", "children": []}]}, "default": null}, {"name": "min_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "object_fit", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "object_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "opacity", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "order", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "orphans", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "outline", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "outline_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "outline_offset", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "outline_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "outline_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overflow", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overflow_anchor", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overflow_wrap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overflow_x", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overflow_y", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overscroll_behavior", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overscroll_behavior_block", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overscroll_behavior_inline", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overscroll_behavior_x", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "overscroll_behavior_y", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_block_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_block_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_bottom", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_inline_end", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_inline_start", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_left", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_right", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "padding_top", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "page_break_after", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "page_break_before", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "page_break_inside", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "paint_order", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "perspective", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "perspective_origin", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "place_content", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "place_items", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "place_self", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "pointer_events", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "quotes", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "resize", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "right", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "rotate", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "row_gap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "ruby_align", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "ruby_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "scale", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "scroll_behavior", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "shape_rendering", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stop_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stop_opacity", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke_dasharray", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke_dashoffset", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke_linecap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke_linejoin", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke_miterlimit", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke_opacity", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "stroke_width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "tab_size", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "table_layout", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_align", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_align_last", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_anchor", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_combine_upright", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_decoration", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_decoration_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_decoration_line", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_decoration_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_emphasis", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_emphasis_color", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_emphasis_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_emphasis_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_indent", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_justify", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_orientation", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_overflow", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_rendering", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_shadow", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_transform", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "text_underline_position", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "top", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "touch_action", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transform", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transform_box", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transform_origin", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transform_style", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transition", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transition_delay", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transition_duration", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transition_property", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "transition_timing_function", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "translate", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "unicode_bidi", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "user_select", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "vertical_align", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "visibility", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "white_space", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "widows", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "width", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "will_change", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "word_break", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "word_spacing", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "word_wrap", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "writing_mode", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}, {"name": "z_index", "type": "Nullable(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}]}, {"name": "SumAggregator", "bases": ["RowAggregator"], "mro": ["SumAggregator", "RowAggregator", "Model"], "desc": "Simple sum across multiple rows.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Simple sum across multiple rows."]}]}, "props": []}, {"name": "Switch", "bases": ["ToggleInput"], "mro": ["Switch", "ToggleInput", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A checkbox-like widget. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A checkbox-like widget."]}]}, "props": []}, {"name": "SymmetricDifferenceFilter", "bases": ["Filter"], "mro": ["SymmetricDifferenceFilter", "Filter", "Model"], "desc": "Computes symmetric difference of indices resulting from other filters. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Computes symmetric difference of indices resulting from other filters."]}]}, "props": [{"name": "operands", "type": "Required(NonEmpty(Seq(Instance(Filter))))", "desc": "Indices produced by a collection of these filters will be xored.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indices produced by a collection of these filters will be xored."]}]}, "default": "<Undefined>"}]}, {"name": "TMSTileSource", "bases": ["MercatorTileSource"], "mro": ["TMSTileSource", "MercatorTileSource", "TileSource", "Model"], "desc": "Contains tile config info and provides urls for tiles based on a\ntemplated url e.g. ``http://your.tms.server.host/{Z}/{X}/{Y}.png``. The\ndefining feature of TMS is the tile-origin in located at the bottom-left.\n\n``TMSTileSource`` can also be helpful in implementing tile renderers for\ncustom tile sets, including non-spatial datasets.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Contains tile config info and provides urls for tiles based on a\ntemplated url e.g. ", {"type": "literal", "children": ["http://your.tms.server.host/{Z}/{X}/{Y}.png"]}, ". The\ndefining feature of TMS is the tile-origin in located at the bottom-left."]}, {"type": "paragraph", "children": [{"type": "literal", "children": ["TMSTileSource"]}, " can also be helpful in implementing tile renderers for\ncustom tile sets, including non-spatial datasets."]}]}, "props": []}, {"name": "TabPanel", "bases": ["Model"], "mro": ["TabPanel", "Model"], "desc": "A single-widget container with title bar and controls.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A single-widget container with title bar and controls."]}]}, "props": [{"name": "child", "type": "Instance(UIElement)", "desc": "The child widget. If you need more children, use a layout widget, e.g. a ``Column``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The child widget. If you need more children, use a layout widget, e.g. a ", {"type": "literal", "children": ["Column"]}, "."]}]}, "default": "<Undefined>"}, {"name": "closable", "type": "Bool", "desc": "Whether this panel is closable or not. If True, an \"x\" button will appear.\n\nClosing a panel is equivalent to removing it from its parent container (e.g. tabs).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether this panel is closable or not. If True, an \"x\" button will appear."]}, {"type": "paragraph", "children": ["Closing a panel is equivalent to removing it from its parent container (e.g. tabs)."]}]}, "default": false}, {"name": "disabled", "type": "Bool", "desc": "Whether the widget is responsive to UI events.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the widget is responsive to UI events."]}]}, "default": false}, {"name": "title", "type": "String", "desc": "The text title of the panel.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text title of the panel."]}]}, "default": ""}]}, {"name": "TableColumn", "bases": ["Model"], "mro": ["TableColumn", "Model"], "desc": "Table column widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Table column widget."]}]}, "props": [{"name": "default_sort", "type": "Enum('ascending', 'descending')", "desc": "The default sorting order. By default ``ascending`` order is used.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The default sorting order. By default ", {"type": "literal", "children": ["ascending"]}, " order is used."]}]}, "default": "ascending"}, {"name": "editor", "type": "Instance(CellEditor)", "desc": "The cell editor for this column. By default, a simple string editor\nis used.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The cell editor for this column. By default, a simple string editor\nis used."]}]}, "default": "{\"__type__\": \"StringEditor\", \"name\": \"StringEditor\", \"type\": \"object\"}"}, {"name": "field", "type": "Required(String)", "desc": "The name of the field mapping to a column in the data source.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The name of the field mapping to a column in the data source."]}]}, "default": "<Undefined>"}, {"name": "formatter", "type": "Instance(CellFormatter)", "desc": "The cell formatter for this column. By default, a simple string\nformatter is used.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The cell formatter for this column. By default, a simple string\nformatter is used."]}]}, "default": "{\"__type__\": \"StringFormatter\", \"name\": \"StringFormatter\", \"type\": \"object\"}"}, {"name": "sortable", "type": "Bool", "desc": "Whether this column is sortable or not. Note that data table has\nto have sorting enabled to allow sorting in general.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether this column is sortable or not. Note that data table has\nto have sorting enabled to allow sorting in general."]}]}, "default": true}, {"name": "title", "type": "Nullable(String)", "desc": "The title of this column. If not set, column's data field is\nused instead.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The title of this column. If not set, column's data field is\nused instead."]}]}, "default": null}, {"name": "visible", "type": "Bool", "desc": "Whether this column shold be displayed or not.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether this column shold be displayed or not."]}]}, "default": true}, {"name": "width", "type": "Int", "desc": "The width or maximum width (depending on data table's configuration)\nin pixels of this column.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The width or maximum width (depending on data table's configuration)\nin pixels of this column."]}]}, "default": 300}]}, {"name": "TableWidget", "bases": ["Widget"], "mro": ["TableWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Abstract base class for data table (data grid) widgets.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for data table (data grid) widgets."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "source", "type": "Instance(DataSource)", "desc": "The source of data for the widget.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The source of data for the widget."]}]}, "default": "{\"__type__\": \"ColumnDataSource\", \"attributes\": {\"data\": {\"type\": \"map\"}, \"selected\": {\"attributes\": {\"indices\": [], \"line_indices\": []}, \"id\": \"p3812\", \"name\": \"Selection\", \"type\": \"object\"}, \"selection_policy\": {\"id\": \"p3813\", \"name\": \"UnionRenderers\", \"type\": \"object\"}}, \"name\": \"ColumnDataSource\", \"type\": \"object\"}"}, {"name": "view", "type": "Instance(CDSView)", "desc": "A view into the data source to use when rendering table rows. A default view\nof the entire data source is created if a view is not passed in during\ninitialization.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A view into the data source to use when rendering table rows. A default view\nof the entire data source is created if a view is not passed in during\ninitialization."]}]}, "default": "{\"__type__\": \"CDSView\", \"attributes\": {\"filter\": {\"id\": \"p3823\", \"name\": \"AllIndices\", \"type\": \"object\"}}, \"name\": \"CDSView\", \"type\": \"object\"}"}]}, {"name": "TablerIcon", "bases": ["Icon"], "mro": ["TablerIcon", "Icon", "Model"], "desc": "Icons from an external icon provider (https://tabler-icons.io/).\n\n.. note::\n    This icon set is MIT licensed (see https://github.com/tabler/tabler-icons/blob/master/LICENSE).\n\n.. note::\n    External icons are loaded from thrid-party servers and may not be avilable\n    immediately (e.g. due to slow iternet connection) or not available at all.\n    It isn't possible to create a self-contained bundles with the use of\n    ``inline`` resources. To circumvent this, one use ``SVGIcon``, by copying\n    the SVG contents of an icon from Tabler's web site.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Icons from an external icon provider (", {"type": "reference", "children": ["https://tabler-icons.io/"]}, ")."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This icon set is MIT licensed (see ", {"type": "reference", "children": ["https://github.com/tabler/tabler-icons/blob/master/LICENSE"]}, ")."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["External icons are loaded from thrid-party servers and may not be avilable\nimmediately (e.g. due to slow iternet connection) or not available at all.\nIt isn't possible to create a self-contained bundles with the use of\n", {"type": "literal", "children": ["inline"]}, " resources. To circumvent this, one use ", {"type": "literal", "children": ["SVGIcon"]}, ", by copying\nthe SVG contents of an icon from Tabler's web site."]}]}]}, "props": [{"name": "icon_name", "type": "Required(String)", "desc": "The name of the icon. See https://tabler-icons.io/ for the list of names.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The name of the icon. See ", {"type": "reference", "children": ["https://tabler-icons.io/"]}, " for the list of names."]}]}, "default": "<Undefined>"}]}, {"name": "Tabs", "bases": ["LayoutDOM"], "mro": ["Tabs", "LayoutDOM", "UIElement", "Model"], "desc": "A panel widget with navigation tabs.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/interaction/widgets/tab_panes.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A panel widget with navigation tabs."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/interaction/widgets/tab_panes.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "active", "type": "Int", "desc": "The index of the active tab.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The index of the active tab."]}]}, "default": 0}, {"name": "tabs", "type": "List(Instance(TabPanel))", "desc": "The list of child panel widgets.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The list of child panel widgets."]}]}, "default": []}, {"name": "tabs_location", "type": "Enum('above', 'below', 'left', 'right')", "desc": "The location of the buttons that activate tabs.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The location of the buttons that activate tabs."]}]}, "default": "above"}]}, {"name": "Tap", "bases": ["GestureTool"], "mro": ["Tap", "GestureTool", "Tool", "Model"], "desc": "A base class for tools that respond to tap/click events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for tools that respond to tap/click events."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "TapTool", "bases": ["Tap", "SelectTool"], "mro": ["TapTool", "Tap", "SelectTool", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |tap_icon|\n\nThe tap selection tool allows the user to select at single points by\nleft-clicking a mouse, or tapping with a finger.\n\nSee :ref:`ug_styling_plots_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n.. |tap_icon| image:: /_images/icons/Tap.png\n    :height: 24px\n    :alt:  Icon of two concentric circles with a + in the lower right representing the tap tool in the toolbar.\n\n.. note::\n    Selections can be comprised of multiple regions, even those\n    made by different selection tools. Hold down the <<shift>> key\n    while making a selection to append the new selection to any\n    previous selection that might exist.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["tap_icon"]}]}, {"type": "paragraph", "children": ["The tap selection tool allows the user to select at single points by\nleft-clicking a mouse, or tapping with a finger."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_styling_plots_selected_unselected_glyphs`"]}, " for information\non styling selected and unselected glyphs."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Selections can be comprised of multiple regions, even those\nmade by different selection tools. Hold down the <<shift>> key\nwhile making a selection to append the new selection to any\nprevious selection that might exist."]}]}]}, "props": [{"name": "behavior", "type": "Enum('select', 'inspect')", "desc": "This tool can be configured to either make selections or inspections\non associated data sources. The difference is that selection changes\npropagate across bokeh and other components (e.g. selection glyph)\nwill be notified. Inspections don't act like this, so it's useful to\nconfigure `callback` when setting `behavior='inspect'`.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["This tool can be configured to either make selections or inspections\non associated data sources. The difference is that selection changes\npropagate across bokeh and other components (e.g. selection glyph)\nwill be notified. Inspections don't act like this, so it's useful to\nconfigure ", {"type": "title_reference", "children": ["callback"]}, " when setting ", {"type": "title_reference", "children": ["behavior='inspect'"]}, "."]}]}, "default": "select"}, {"name": "callback", "type": "Nullable(Instance(Callback))", "desc": "A callback to execute *whenever a glyph is \"hit\"* by a mouse click\nor tap.\n\nThis is often useful with the  :class:`~bokeh.models.callbacks.OpenURL`\nmodel to open URLs based on a user clicking or tapping a specific glyph.\n\nHowever, it may also be a :class:`~bokeh.models.callbacks.CustomJS`\nwhich can execute arbitrary JavaScript code in response to clicking or\ntapping glyphs. The callback will be executed for each individual glyph\nthat is it hit by a click or tap, and will receive the ``TapTool`` model\nas  ``cb_obj``. The optional ``cb_data`` will have the data source as\nits ``.source`` attribute and the selection geometry as its\n``.geometries`` attribute.\n\nThe ``.geometries`` attribute has 5 members.\n``.type`` is the geometry type, which always a ``.point`` for a tap event.\n``.sx`` and ``.sy`` are the screen X and Y coordinates where the tap occurred.\n``.x`` and ``.y`` are the converted data coordinates for the item that has\nbeen selected. The ``.x`` and ``.y`` values are based on the axis assigned\nto that glyph.\n\n.. note::\n    This callback does *not* execute on every tap, only when a glyph is\n    \"hit\". If you would like to execute a callback on every mouse tap,\n    please see :ref:`ug_interaction_js_callbacks_customjs_js_on_event`.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A callback to execute ", {"type": "emphasis", "children": ["whenever a glyph is \"hit\""]}, " by a mouse click\nor tap."]}, {"type": "paragraph", "children": ["This is often useful with the  ", {"type": "problematic", "children": [":class:`~bokeh.models.callbacks.OpenURL`"]}, "\nmodel to open URLs based on a user clicking or tapping a specific glyph."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "paragraph", "children": ["However, it may also be a ", {"type": "problematic", "children": [":class:`~bokeh.models.callbacks.CustomJS`"]}, "\nwhich can execute arbitrary JavaScript code in response to clicking or\ntapping glyphs. The callback will be executed for each individual glyph\nthat is it hit by a click or tap, and will receive the ", {"type": "literal", "children": ["TapTool"]}, " model\nas  ", {"type": "literal", "children": ["cb_obj"]}, ". The optional ", {"type": "literal", "children": ["cb_data"]}, " will have the data source as\nits ", {"type": "literal", "children": [".source"]}, " attribute and the selection geometry as its\n", {"type": "literal", "children": [".geometries"]}, " attribute."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}, {"type": "paragraph", "children": ["The ", {"type": "literal", "children": [".geometries"]}, " attribute has 5 members.\n", {"type": "literal", "children": [".type"]}, " is the geometry type, which always a ", {"type": "literal", "children": [".point"]}, " for a tap event.\n", {"type": "literal", "children": [".sx"]}, " and ", {"type": "literal", "children": [".sy"]}, " are the screen X and Y coordinates where the tap occurred.\n", {"type": "literal", "children": [".x"]}, " and ", {"type": "literal", "children": [".y"]}, " are the converted data coordinates for the item that has\nbeen selected. The ", {"type": "literal", "children": [".x"]}, " and ", {"type": "literal", "children": [".y"]}, " values are based on the axis assigned\nto that glyph."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This callback does ", {"type": "emphasis", "children": ["not"]}, " execute on every tap, only when a glyph is\n\"hit\". If you would like to execute a callback on every mouse tap,\nplease see ", {"type": "problematic", "children": [":ref:`ug_interaction_js_callbacks_customjs_js_on_event`"]}, "."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}]}, "default": null}, {"name": "gesture", "type": "Enum('tap', 'doubletap')", "desc": "Specifies which kind of gesture will be used to trigger the tool,\neither a single or double tap.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specifies which kind of gesture will be used to trigger the tool,\neither a single or double tap."]}]}, "default": "tap"}]}, {"name": "TeX", "bases": ["MathText"], "mro": ["TeX", "MathText", "BaseText", "Model"], "desc": "Render mathematical content using `LaTeX <https://www.latex-project.org/>`_\nnotation.\n\nSee :ref:`ug_styling_mathtext` in the |user guide| for more information.\n\n.. note::\n    Bokeh uses `MathJax <https://www.mathjax.org>`_ to render text\n    containing mathematical notation.\n\n    MathJax only supports math-mode macros (no text-mode macros). You\n    can see more about differences between standard TeX/LaTeX and MathJax\n    here: https://docs.mathjax.org/en/latest/input/tex/differences.html", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render mathematical content using ", {"type": "reference", "children": ["LaTeX"]}, {"type": "target", "children": []}, "\nnotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_styling_mathtext`"]}, " in the ", {"type": "substitution_reference", "children": ["user guide"]}, " for more information."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["Bokeh uses ", {"type": "reference", "children": ["MathJax"]}, {"type": "target", "children": []}, " to render text\ncontaining mathematical notation."]}, {"type": "paragraph", "children": ["MathJax only supports math-mode macros (no text-mode macros). You\ncan see more about differences between standard TeX/LaTeX and MathJax\nhere: ", {"type": "reference", "children": ["https://docs.mathjax.org/en/latest/input/tex/differences.html"]}]}]}]}, "props": [{"name": "inline", "type": "Bool", "desc": "Whether the math text is inline display or not (for TeX input). Default is False.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the math text is inline display or not (for TeX input). Default is False."]}]}, "default": false}, {"name": "macros", "type": "Dict(String, Either(String, Tuple(String, Int)))", "desc": "User defined TeX macros.\n\nThis is a mapping from control sequence names (without leading backslash) to\neither replacement strings or tuples of a replacement string and a number\nof arguments.\n\nExample:\n\n.. code-block:: python\n\n    TeX(text=r\"\\R \\rightarrow \\R^2\", macros={\"RR\": r\"{\\bf R}\"})", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["User defined TeX macros."]}, {"type": "paragraph", "children": ["This is a mapping from control sequence names (without leading backslash) to\neither replacement strings or tuples of a replacement string and a number\nof arguments."]}, {"type": "paragraph", "children": ["Example:"]}, {"type": "literal_block", "children": [{"type": "inline", "children": ["TeX"]}, {"type": "inline", "children": ["("]}, {"type": "inline", "children": ["text"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["r"]}, {"type": "inline", "children": ["\"\\R \\rightarrow \\R^2\""]}, {"type": "inline", "children": [","]}, " ", {"type": "inline", "children": ["macros"]}, {"type": "inline", "children": ["="]}, {"type": "inline", "children": ["{"]}, {"type": "inline", "children": ["\"RR\""]}, {"type": "inline", "children": [":"]}, " ", {"type": "inline", "children": ["r"]}, {"type": "inline", "children": ["\"{\\bf R}\""]}, {"type": "inline", "children": ["})"]}]}]}, "default": {}}]}, {"name": "TeeHead", "bases": ["ArrowHead"], "mro": ["TeeHead", "ArrowHead", "Marking", "Model"], "desc": "Render a tee-style arrow head.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a tee-style arrow head."]}]}, "props": [{"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the arrow head outline."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the arrow head outline."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the arrow head outline."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the arrow head outline."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the arrow head outline."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the arrow head outline."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the arrow head outline."]}]}, "default": 1}]}, {"name": "Text", "bases": ["XYGlyph", "TextGlyph"], "mro": ["Text", "XYGlyph", "TextGlyph", "Glyph", "Model"], "desc": "Render text.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Text.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render text."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Text.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to rotate the text, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to rotate the text, as measured from the horizontal."]}]}, "default": 0}, {"name": "angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "text", "type": "StringSpec(String, String, Instance(Value), Instance(Field), Instance(Expr), Struct(value=String, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text values to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text values to render."]}]}, "default": "text"}, {"name": "text_align", "type": "TextAlignSpec(String, Enum('left', 'right', 'center'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('left', 'right', 'center'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text align values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align values for the text."]}]}, "default": "left"}, {"name": "text_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text alpha values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha values for the text."]}]}, "default": 1.0}, {"name": "text_baseline", "type": "TextBaselineSpec(String, Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text baseline values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline values for the text."]}]}, "default": "bottom"}, {"name": "text_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color values for the text."]}]}, "default": "#444444"}, {"name": "text_font", "type": "StringSpec(String, String, Instance(Value), Instance(Field), Instance(Expr), Struct(value=String, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font values for the text."]}]}, "default": {"type": "value", "value": "helvetica"}}, {"name": "text_font_size", "type": "FontSizeSpec(String, FontSize, Instance(Value), Instance(Field), Instance(Expr), Struct(value=FontSize, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font size values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size values for the text."]}]}, "default": {"type": "value", "value": "16px"}}, {"name": "text_font_style", "type": "FontStyleSpec(String, Enum('normal', 'italic', 'bold', 'bold italic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('normal', 'italic', 'bold', 'bold italic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text font style values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style values for the text."]}]}, "default": "normal"}, {"name": "text_line_height", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text line height values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height values for the text."]}]}, "default": 1.2}, {"name": "text_outline_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The text outline color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color values for the text."]}]}, "default": null}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates to locate the text anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates to locate the text anchors."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "x_offset", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Offset values to apply to the x-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset values to apply to the x-coordinates."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates to locate the text anchors.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates to locate the text anchors."]}]}, "default": {"type": "field", "field": "y"}}, {"name": "y_offset", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Offset values to apply to the y-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset values to apply to the y-coordinates."]}, {"type": "paragraph", "children": ["This is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in ", {"type": "substitution_reference", "children": ["screen units"]}, " from a given data position."]}]}, "default": 0}]}, {"name": "TextAnnotation", "bases": ["Annotation"], "mro": ["TextAnnotation", "Annotation", "Renderer", "Model"], "desc": "Base class for text annotation models such as labels and titles.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for text annotation models such as labels and titles."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "background_fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "background_fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_alpha", "type": "Alpha", "desc": "The line alpha values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the text bounding box."]}]}, "default": 1.0}, {"name": "border_line_cap", "type": "Enum('butt', 'round', 'square')", "desc": "The line cap values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the text bounding box."]}]}, "default": "butt"}, {"name": "border_line_color", "type": "Nullable(Color)", "desc": "The line color values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the text bounding box."]}]}, "default": null}, {"name": "border_line_dash", "type": "DashPattern", "desc": "The line dash values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the text bounding box."]}]}, "default": []}, {"name": "border_line_dash_offset", "type": "Int", "desc": "The line dash offset values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the text bounding box."]}]}, "default": 0}, {"name": "border_line_join", "type": "Enum('miter', 'round', 'bevel')", "desc": "The line join values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the text bounding box."]}]}, "default": "bevel"}, {"name": "border_line_width", "type": "Float", "desc": "The line width values for the text bounding box.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the text bounding box."]}]}, "default": 1}, {"name": "text", "type": "TextLike(MathString, Instance(BaseText))", "desc": "A text or LaTeX notation to render.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A text or LaTeX notation to render."]}]}, "default": ""}, {"name": "text_align", "type": "Enum('left', 'right', 'center')", "desc": "The text align values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text align values for the text."]}]}, "default": "left"}, {"name": "text_alpha", "type": "Alpha", "desc": "The text alpha values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text alpha values for the text."]}]}, "default": 1.0}, {"name": "text_baseline", "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')", "desc": "The text baseline values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text baseline values for the text."]}]}, "default": "bottom"}, {"name": "text_color", "type": "Nullable(Color)", "desc": "The text color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text color values for the text."]}]}, "default": "#444444"}, {"name": "text_font", "type": "String", "desc": "The text font values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font values for the text."]}]}, "default": "helvetica"}, {"name": "text_font_size", "type": "FontSize", "desc": "The text font size values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font size values for the text."]}]}, "default": "16px"}, {"name": "text_font_style", "type": "Enum('normal', 'italic', 'bold', 'bold italic')", "desc": "The text font style values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text font style values for the text."]}]}, "default": "normal"}, {"name": "text_line_height", "type": "Float", "desc": "The text line height values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text line height values for the text."]}]}, "default": 1.2}, {"name": "text_outline_color", "type": "Nullable(Color)", "desc": "The text outline color values for the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The text outline color values for the text."]}]}, "default": null}]}, {"name": "TextAreaInput", "bases": ["TextLikeInput"], "mro": ["TextAreaInput", "TextLikeInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Multi-line input widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Multi-line input widget."]}]}, "props": [{"name": "cols", "type": "Int", "desc": "Specifies the width of the text area (in average character width). Default: 20", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specifies the width of the text area (in average character width). Default: 20"]}]}, "default": 20}, {"name": "rows", "type": "Int", "desc": "Specifies the height of the text area (in lines). Default: 2", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specifies the height of the text area (in lines). Default: 2"]}]}, "default": 2}]}, {"name": "TextEditor", "bases": ["CellEditor"], "mro": ["TextEditor", "CellEditor", "Model"], "desc": "Multi-line string cell editor.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Multi-line string cell editor."]}]}, "props": []}, {"name": "TextGlyph", "bases": ["Glyph"], "mro": ["TextGlyph", "Glyph", "Model"], "desc": "Glyphs with text properties\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Glyphs with text properties"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "TextInput", "bases": ["TextLikeInput"], "mro": ["TextInput", "TextLikeInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Single-line input widget.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Single-line input widget."]}]}, "props": [{"name": "prefix", "type": "Nullable(String)", "desc": "An optional string prefix to display before the input. This is useful to\nindicate e.g. a variable the entered value will be assigned to.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional string prefix to display before the input. This is useful to\nindicate e.g. a variable the entered value will be assigned to."]}]}, "default": null}, {"name": "suffix", "type": "Nullable(String)", "desc": "An optional string suffix to display after the input. This is useful to\nindicate e.g. the units of measurement of the entered value.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An optional string suffix to display after the input. This is useful to\nindicate e.g. the units of measurement of the entered value."]}]}, "default": null}]}, {"name": "TextLikeInput", "bases": ["InputWidget"], "mro": ["TextLikeInput", "InputWidget", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Base class for text-like input widgets.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for text-like input widgets."]}]}, "props": [{"name": "max_length", "type": "Nullable(Int)", "desc": "Max count of characters in field", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Max count of characters in field"]}]}, "default": null}, {"name": "placeholder", "type": "String", "desc": "Placeholder for empty input field.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Placeholder for empty input field."]}]}, "default": ""}, {"name": "value", "type": "String", "desc": "Initial or entered text value.\n\nChange events are triggered whenever <enter> is pressed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or entered text value."]}, {"type": "paragraph", "children": ["Change events are triggered whenever <enter> is pressed."]}]}, "default": ""}, {"name": "value_input", "type": "String", "desc": "Initial or current value.\n\nChange events are triggered whenever any update happens, i.e. on every\nkeypress.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Initial or current value."]}, {"type": "paragraph", "children": ["Change events are triggered whenever any update happens, i.e. on every\nkeypress."]}]}, "default": ""}]}, {"name": "TextProps", "bases": [], "mro": [], "desc": "Properties relevant to rendering text.\n\nMirrors the BokehJS ``properties.TextVector`` class.\n\n.. note::\n    There is currently only support for filling text. An interface\n    to stroke the outlines of text has not yet been exposed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Properties relevant to rendering text."]}, {"type": "paragraph", "children": ["Mirrors the BokehJS ", {"type": "literal", "children": ["properties.TextVector"]}, " class."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["There is currently only support for filling text. An interface\nto stroke the outlines of text has not yet been exposed."]}]}]}, "props": [{"name": "text_align", "type": "TextAlignSpec(String, Enum('left', 'right', 'center'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('left', 'right', 'center'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Horizontal anchor point to use when rendering text.\n\nAcceptable values are:\n\n- ``'left'``\n- ``'right'``\n- ``'center'``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Horizontal anchor point to use when rendering text."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'left'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'right'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'center'"]}]}]}]}]}, "default": "left"}, {"name": "text_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "An alpha value to use to fill text with.\n\n    Acceptable values are numbers in 0..1 range (transparent..opaque).\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An alpha value to use to fill text with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are numbers in 0..1 range (transparent..opaque)."]}]}]}, "default": 1.0}, {"name": "text_baseline", "type": "TextBaselineSpec(String, Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Vertical anchor point to use when rendering text.\n\nAcceptable values are:\n\n- ``'top'``\n- ``'middle'``\n- ``'bottom'``\n- ``'alphabetic'``\n- ``'hanging'``\n- ``'ideographic'``", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Vertical anchor point to use when rendering text."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'top'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'middle'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'bottom'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'alphabetic'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'hanging'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'ideographic'"]}]}]}]}]}, "default": "bottom"}, {"name": "text_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A color to use to fill text with.\n\n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``, ``'rgb(0 127 0 / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1\n    - a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to fill text with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ", ", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern"]}]}]}]}]}, "default": "#444444"}, {"name": "text_font", "type": "StringSpec(String, String, Instance(Value), Instance(Field), Instance(Expr), Struct(value=String, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "Name of a font to use for rendering text, e.g., ``'times'``, ``'helvetica'``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Name of a font to use for rendering text, e.g., ", {"type": "literal", "children": ["'times'"]}, ", ", {"type": "literal", "children": ["'helvetica'"]}, "."]}]}, "default": {"type": "value", "value": "helvetica"}}, {"name": "text_font_size", "type": "FontSizeSpec(String, FontSize, Instance(Value), Instance(Field), Instance(Expr), Struct(value=FontSize, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": {"type": "value", "value": "16px"}}, {"name": "text_font_style", "type": "FontStyleSpec(String, Enum('normal', 'italic', 'bold', 'bold italic'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('normal', 'italic', 'bold', 'bold italic'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A style to use for rendering text.\n\nAcceptable values are:\n\n- ``'normal'`` normal text\n- ``'italic'`` *italic text*\n- ``'bold'`` **bold text**\n- ``\"bold italic\"`` ***bold italic text***", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A style to use for rendering text."]}, {"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'normal'"]}, " normal text"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'italic'"]}, " ", {"type": "emphasis", "children": ["italic text"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["'bold'"]}, " ", {"type": "strong", "children": ["bold text"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": [{"type": "literal", "children": ["\"bold italic\""]}, " ", {"type": "strong", "children": ["*bold italic text*"]}]}]}]}]}, "default": "normal"}, {"name": "text_line_height", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "In multi-line text, how much additional space should be allocated for\neach line. The value is provided as a number, but should be treated as\na percentage of font size. The default is 120%. Setting it to 1.0, so\n100%, means no additional space will be used.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["In multi-line text, how much additional space should be allocated for\neach line. The value is provided as a number, but should be treated as\na percentage of font size. The default is 120%. Setting it to 1.0, so\n100%, means no additional space will be used."]}]}, "default": 1.2}, {"name": "text_outline_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "A color to use to outline text with.\n\n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``, ``'rgb(0 127 0 / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1\n    - a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A color to use to outline text with."]}, {"type": "block_quote", "children": [{"type": "paragraph", "children": ["Acceptable values are:"]}, {"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["any of the ", {"type": "substitution_reference", "children": ["named CSS colors"]}, ", e.g ", {"type": "literal", "children": ["'green'"]}, ", ", {"type": "literal", "children": ["'indigo'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["RGB(A) hex strings, e.g., ", {"type": "literal", "children": ["'#FF0000'"]}, ", ", {"type": "literal", "children": ["'#44444444'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["CSS4 color strings, e.g., ", {"type": "literal", "children": ["'rgba(255, 0, 127, 0.6)'"]}, ", ", {"type": "literal", "children": ["'rgb(0 127 0 / 1.0)'"]}]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 3-tuple of integers (r, g, b) between 0 and 255"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 4-tuple of (r, g, b, a) where r, g, b are integers between 0..255 and a is between 0..1"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["a 32-bit unsiged integers using the 0xRRGGBBAA byte order pattern"]}]}]}]}]}, "default": null}]}, {"name": "Texture", "bases": ["Model"], "mro": ["Texture", "Model"], "desc": "Base class for ``Texture`` models that represent fill patterns.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for ", {"type": "literal", "children": ["Texture"]}, " models that represent fill patterns."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "repetition", "type": "Enum('repeat', 'repeat_x', 'repeat_y', 'no_repeat')", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": "repeat"}]}, {"name": "TickFormatter", "bases": ["Model"], "mro": ["TickFormatter", "Model"], "desc": "A base class for all tick formatter types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all tick formatter types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "Ticker", "bases": ["Model"], "mro": ["Ticker", "Model"], "desc": "A base class for all ticker types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all ticker types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "TileRenderer", "bases": ["Renderer"], "mro": ["TileRenderer", "Renderer", "Model"], "desc": "    ", "richdesc": {"type": "document", "children": []}, "props": [{"name": "alpha", "type": "Float", "desc": "tile opacity 0.0 - 1.0", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["tile opacity 0.0 - 1.0"]}]}, "default": 1.0}, {"name": "render_parents", "type": "Bool", "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True."]}]}, "default": true}, {"name": "smoothing", "type": "Bool", "desc": "Enable image smoothing for the rendered tiles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Enable image smoothing for the rendered tiles."]}]}, "default": true}, {"name": "tile_source", "type": "Instance(TileSource)", "desc": "Local data source to use when rendering glyphs on the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Local data source to use when rendering glyphs on the plot."]}]}, "default": "{\"__type__\": \"WMTSTileSource\", \"name\": \"WMTSTileSource\", \"type\": \"object\"}"}]}, {"name": "TileSource", "bases": ["Model"], "mro": ["TileSource", "Model"], "desc": "A base class for all tile source types.\n\nIn general, tile sources are used as a required input for ``TileRenderer``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all tile source types."]}, {"type": "paragraph", "children": ["In general, tile sources are used as a required input for ", {"type": "literal", "children": ["TileRenderer"]}, "."]}]}, "props": [{"name": "attribution", "type": "String", "desc": "Data provider attribution content. This can include HTML content.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Data provider attribution content. This can include HTML content."]}]}, "default": ""}, {"name": "extra_url_vars", "type": "Dict(String, Any)", "desc": "A dictionary that maps url variable template keys to values.\n\nThese variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A dictionary that maps url variable template keys to values."]}, {"type": "paragraph", "children": ["These variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name)."]}]}, "default": {}}, {"name": "initial_resolution", "type": "Nullable(Float)", "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute."]}]}, "default": null}, {"name": "max_zoom", "type": "Int", "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A maximum zoom level for the tile layer. This is the most zoomed-in level."]}]}, "default": 30}, {"name": "min_zoom", "type": "Int", "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A minimum zoom level for the tile layer. This is the most zoomed-out level."]}]}, "default": 0}, {"name": "tile_size", "type": "Int", "desc": "Tile size in pixels (e.g. 256)", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Tile size in pixels (e.g. 256)"]}]}, "default": 256}, {"name": "url", "type": "String", "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Tile service url e.g., ", {"type": "reference", "children": ["http://c.tile.openstreetmap.org"]}, "/{Z}/{X}/{Y}.png"]}]}, "default": ""}, {"name": "x_origin_offset", "type": "Required(Float)", "desc": "An x-offset in plot coordinates", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An x-offset in plot coordinates"]}]}, "default": "<Undefined>"}, {"name": "y_origin_offset", "type": "Required(Float)", "desc": "A y-offset in plot coordinates", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A y-offset in plot coordinates"]}]}, "default": "<Undefined>"}]}, {"name": "TimeEditor", "bases": ["CellEditor"], "mro": ["TimeEditor", "CellEditor", "Model"], "desc": "Spinner-based time cell editor.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Spinner-based time cell editor."]}]}, "props": []}, {"name": "Title", "bases": ["TextAnnotation"], "mro": ["Title", "TextAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a single title box as an annotation.\n\nSee :ref:`ug_basic_annotations_titles` for information on plotting titles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a single title box as an annotation."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_titles`"]}, " for information on plotting titles."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "align", "type": "Enum('left', 'right', 'center')", "desc": "Alignment of the text in its enclosing space, *along* the direction of the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Alignment of the text in its enclosing space, ", {"type": "emphasis", "children": ["along"]}, " the direction of the text."]}]}, "default": "left"}, {"name": "offset", "type": "Float", "desc": "Offset the text by a number of pixels (can be positive or negative). Shifts the text in\ndifferent directions based on the location of the title:\n\n    * above: shifts title right\n    * right: shifts title down\n    * below: shifts title right\n    * left: shifts title up", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Offset the text by a number of pixels (can be positive or negative). Shifts the text in\ndifferent directions based on the location of the title:"]}, {"type": "block_quote", "children": [{"type": "bullet_list", "children": [{"type": "list_item", "children": [{"type": "paragraph", "children": ["above: shifts title right"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["right: shifts title down"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["below: shifts title right"]}]}, {"type": "list_item", "children": [{"type": "paragraph", "children": ["left: shifts title up"]}]}]}]}]}, "default": 0}, {"name": "standoff", "type": "Float", "desc": "    ", "richdesc": {"type": "document", "children": []}, "default": 10}, {"name": "vertical_align", "type": "Enum('top', 'middle', 'bottom')", "desc": "Alignment of the text in its enclosing space, *across* the direction of the text.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Alignment of the text in its enclosing space, ", {"type": "emphasis", "children": ["across"]}, " the direction of the text."]}]}, "default": "bottom"}]}, {"name": "Toggle", "bases": ["AbstractButton"], "mro": ["Toggle", "AbstractButton", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A two-state toggle button.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A two-state toggle button."]}]}, "props": [{"name": "active", "type": "Bool", "desc": "The state of the toggle button.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The state of the toggle button."]}]}, "default": false}]}, {"name": "ToggleButtonGroup", "bases": ["AbstractGroup"], "mro": ["ToggleButtonGroup", "AbstractGroup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Abstract base class for groups with items rendered as buttons.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for groups with items rendered as buttons."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "button_type", "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')", "desc": "A style for the button, signifying it's role. Possible values are one of the\nfollowing:\n\n.. bokeh-plot::\n    :source-position: none\n\n    from bokeh.core.enums import ButtonType\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import Button\n\n    show(column(\n        [Button(label=button_type, button_type=button_type) for button_type in ButtonType]\n        ))", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A style for the button, signifying it's role. Possible values are one of the\nfollowing:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot::\n    :source-position: none\n\n    from bokeh.core.enums import ButtonType\n    from bokeh.io import show\n    from bokeh.layouts import column\n    from bokeh.models import Button\n\n    show(column(\n        [Button(label=button_type, button_type=button_type) for button_type in ButtonType]\n        ))"]}]}]}, "default": "default"}, {"name": "orientation", "type": "Enum('horizontal', 'vertical')", "desc": "Orient the button group either horizontally (default) or vertically.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Orient the button group either horizontally (default) or vertically."]}]}, "default": "horizontal"}]}, {"name": "ToggleInput", "bases": ["Widget"], "mro": ["ToggleInput", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Base class for toggleable (boolean) input widgets. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for toggleable (boolean) input widgets.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": [{"name": "active", "type": "Bool", "desc": "The state of the widget.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The state of the widget."]}]}, "default": false}]}, {"name": "ToggleInputGroup", "bases": ["AbstractGroup"], "mro": ["ToggleInputGroup", "AbstractGroup", "Widget", "LayoutDOM", "UIElement", "Model"], "desc": "Abstract base class for groups with items rendered as check/radio\nboxes.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Abstract base class for groups with items rendered as check/radio\nboxes."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "inline", "type": "Bool", "desc": "Should items be arrange vertically (``False``) or horizontally\nin-line (``True``).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Should items be arrange vertically (", {"type": "literal", "children": ["False"]}, ") or horizontally\nin-line (", {"type": "literal", "children": ["True"]}, ")."]}]}, "default": false}]}, {"name": "Tool", "bases": ["Model"], "mro": ["Tool", "Model"], "desc": "A base class for all interactive tool types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all interactive tool types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "description", "type": "Nullable(String)", "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip."]}]}, "default": null}, {"name": "icon", "type": "Nullable(Either(Enum('append_mode', 'box_edit', 'box_select', 'box_zoom', 'clear_selection', 'copy', 'crosshair', 'freehand_draw', 'help', 'hover', 'intersect_mode', 'lasso_select', 'line_edit', 'pan', 'point_draw', 'poly_draw', 'poly_edit', 'polygon_select', 'range', 'redo', 'replace_mode', 'reset', 'save', 'subtract_mode', 'tap_select', 'undo', 'wheel_pan', 'wheel_zoom', 'xpan', 'ypan', 'zoom_in', 'zoom_out'), Regex('^\\\\.'), Image))", "desc": "An icon to display in the toolbar.\n\nThe icon can provided as well known tool icon name, a CSS class selector,\na data URI with an ``image/*`` MIME, a path to an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array. If ``None``, then the intrinsic icon\nwill be used (may depend on tool's configuration).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["An icon to display in the toolbar."]}, {"type": "paragraph", "children": ["The icon can provided as well known tool icon name, a CSS class selector,\na data URI with an ", {"type": "literal", "children": ["image/*"]}, " MIME, a path to an image, a PIL ", {"type": "literal", "children": ["Image"]}, "\nobject, or an RGB(A) NumPy array. If ", {"type": "literal", "children": ["None"]}, ", then the intrinsic icon\nwill be used (may depend on tool's configuration)."]}]}, "default": null}]}, {"name": "ToolProxy", "bases": ["Model"], "mro": ["ToolProxy", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "active", "type": "Bool", "desc": "", "richdesc": {"type": "document", "children": []}, "default": false}, {"name": "disabled", "type": "Bool", "desc": "", "richdesc": {"type": "document", "children": []}, "default": false}, {"name": "tools", "type": "List(Instance(Tool))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": []}]}, {"name": "Toolbar", "bases": ["UIElement"], "mro": ["Toolbar", "UIElement", "Model"], "desc": "Collect tools to display for a single plot.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Collect tools to display for a single plot."]}]}, "props": [{"name": "active_drag", "type": "Either(Null, Auto, Instance(Drag))", "desc": "Specify a drag tool to be active when the plot is displayed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify a drag tool to be active when the plot is displayed."]}]}, "default": "auto"}, {"name": "active_inspect", "type": "Either(Null, Auto, Instance(InspectTool), Seq(Instance(InspectTool)))", "desc": "Specify an inspection tool or sequence of inspection tools to be active when\nthe plot is displayed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify an inspection tool or sequence of inspection tools to be active when\nthe plot is displayed."]}]}, "default": "auto"}, {"name": "active_multi", "type": "Either(Null, Auto, Instance(GestureTool))", "desc": "Specify an active multi-gesture tool, for instance an edit tool or a range\ntool.\n\nNote that activating a multi-gesture tool will deactivate any other gesture\ntools as appropriate. For example, if a pan tool is set as the active drag,\nand this property is set to a ``BoxEditTool`` instance, the pan tool will\nbe deactivated (i.e. the multi-gesture tool will take precedence).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify an active multi-gesture tool, for instance an edit tool or a range\ntool."]}, {"type": "paragraph", "children": ["Note that activating a multi-gesture tool will deactivate any other gesture\ntools as appropriate. For example, if a pan tool is set as the active drag,\nand this property is set to a ", {"type": "literal", "children": ["BoxEditTool"]}, " instance, the pan tool will\nbe deactivated (i.e. the multi-gesture tool will take precedence)."]}]}, "default": "auto"}, {"name": "active_scroll", "type": "Either(Null, Auto, Instance(Scroll))", "desc": "Specify a scroll/pinch tool to be active when the plot is displayed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify a scroll/pinch tool to be active when the plot is displayed."]}]}, "default": "auto"}, {"name": "active_tap", "type": "Either(Null, Auto, Instance(Tap))", "desc": "Specify a tap/click tool to be active when the plot is displayed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Specify a tap/click tool to be active when the plot is displayed."]}]}, "default": "auto"}, {"name": "autohide", "type": "Bool", "desc": "Whether the toolbar will be hidden by default. Default: False.\nIf True, hides toolbar when cursor is not in canvas.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the toolbar will be hidden by default. Default: False.\nIf True, hides toolbar when cursor is not in canvas."]}]}, "default": false}, {"name": "logo", "type": "Nullable(Enum('normal', 'grey'))", "desc": "What version of the Bokeh logo to display on the toolbar. If\nset to None, no logo will be displayed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["What version of the Bokeh logo to display on the toolbar. If\nset to None, no logo will be displayed."]}]}, "default": "normal"}, {"name": "tools", "type": "List(Either(Instance(Tool), Instance(ToolProxy)))", "desc": "A list of tools to add to the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of tools to add to the plot."]}]}, "default": []}]}, {"name": "ToolbarPanel", "bases": ["HTMLAnnotation"], "mro": ["ToolbarPanel", "HTMLAnnotation", "Annotation", "Renderer", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "toolbar", "type": "Instance(Toolbar)", "desc": "A toolbar to display.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A toolbar to display."]}]}, "default": "<Undefined>"}]}, {"name": "Tooltip", "bases": ["UIElement"], "mro": ["Tooltip", "UIElement", "Model"], "desc": "Render a tooltip.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a tooltip."]}]}, "props": [{"name": "attachment", "type": "Either(Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below'), Auto)", "desc": "Whether the tooltip should be displayed to the left or right of the cursor\nposition or above or below it, or if it should be automatically placed\nin the horizontal or vertical dimension.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the tooltip should be displayed to the left or right of the cursor\nposition or above or below it, or if it should be automatically placed\nin the horizontal or vertical dimension."]}]}, "default": "auto"}, {"name": "closable", "type": "Bool", "desc": "Whether to allow dismissing a tooltip by clicking close (x) button. Useful when\nusing this model for persistent tooltips.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to allow dismissing a tooltip by clicking close (x) button. Useful when\nusing this model for persistent tooltips."]}]}, "default": false}, {"name": "content", "type": "Required(Either(String, Instance(HTML)))", "desc": "The tooltip's content. Can be a plaintext string or a :class:`~bokeh.models.HTML`\nobject.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The tooltip's content. Can be a plaintext string or a ", {"type": "problematic", "children": [":class:`~bokeh.models.HTML`"]}, "\nobject."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"class\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"class\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"class\"."]}]}]}, "default": "<Undefined>"}, {"name": "interactive", "type": "Bool", "desc": "Whether to allow pointer events on the contents of this tooltip. Depending\non the use case, it may be necessary to disable interactions for better\nuser experience. This however will prevent the user from interacting with\nthe contents of this tooltip, e.g. clicking links.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to allow pointer events on the contents of this tooltip. Depending\non the use case, it may be necessary to disable interactions for better\nuser experience. This however will prevent the user from interacting with\nthe contents of this tooltip, e.g. clicking links."]}]}, "default": true}, {"name": "position", "type": "Nullable(Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Float, Float)))", "desc": "The position of the tooltip with respect to its parent. It can be either\nan absolute position within the parent or an anchor point for symbolic\npositioning.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The position of the tooltip with respect to its parent. It can be either\nan absolute position within the parent or an anchor point for symbolic\npositioning."]}]}, "default": null}, {"name": "show_arrow", "type": "Bool", "desc": "Whether tooltip's arrow should be shown.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether tooltip's arrow should be shown."]}]}, "default": true}, {"name": "target", "type": "Either(Instance(UIElement), Instance(Selector), Auto)", "desc": "Tooltip can be manually attached to a target UI element or a DOM node\n(referred to by a selector, e.g. CSS selector or XPath), or its\nattachment can be inferred from its parent in ``\"auto\"`` mode.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Tooltip can be manually attached to a target UI element or a DOM node\n(referred to by a selector, e.g. CSS selector or XPath), or its\nattachment can be inferred from its parent in ", {"type": "literal", "children": ["\"auto\""]}, " mode."]}]}, "default": "auto"}]}, {"name": "Transform", "bases": ["Model"], "mro": ["Transform", "Model"], "desc": "Base class for ``Transform`` models that represent a computation\nto be carried out on the client-side.\n\nJavaScript implementations should implement the following methods:\n\n.. code-block\n\n    compute(x: number): number {\n        # compute and return the transform of a single value\n    }\n\n    v_compute(xs: Arrayable<number>): Arrayable<number> {\n        # compute and return the transform of an array of values\n    }\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for ", {"type": "literal", "children": ["Transform"]}, " models that represent a computation\nto be carried out on the client-side."]}, {"type": "paragraph", "children": ["JavaScript implementations should implement the following methods:"]}, {"type": "comment", "children": ["code-block\n\ncompute(x: number): number {\n    # compute and return the transform of a single value\n}\n\nv_compute(xs: Arrayable<number>): Arrayable<number> {\n    # compute and return the transform of an array of values\n}"]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "UIElement", "bases": ["Model"], "mro": ["UIElement", "Model"], "desc": "Base class for user interface elements.\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for user interface elements."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "classes", "type": "List(String)", "desc": "List of additional CSS classes to add to the underlying DOM element.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["List of additional CSS classes to add to the underlying DOM element."]}]}, "default": []}, {"name": "styles", "type": "Either(Dict(String, Nullable(String)), Instance(Styles))", "desc": "Inline CSS styles applied to the underlying DOM element.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Inline CSS styles applied to the underlying DOM element."]}]}, "default": {}}, {"name": "stylesheets", "type": "List(Either(String, Dict(String, Either(Dict(String, Nullable(String)), Instance(Styles)))))", "desc": "Additional style-sheets to use for the underlying DOM element.\n\nNote that all bokeh's components use shadow DOM, thus any included style\nsheets must reflect that, e.g. use ``:host`` CSS pseudo selector to access\nthe root DOM element.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Additional style-sheets to use for the underlying DOM element."]}, {"type": "paragraph", "children": ["Note that all bokeh's components use shadow DOM, thus any included style\nsheets must reflect that, e.g. use ", {"type": "literal", "children": [":host"]}, " CSS pseudo selector to access\nthe root DOM element."]}]}, "default": []}, {"name": "visible", "type": "Bool", "desc": "Whether the component should be displayed on screen.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether the component should be displayed on screen."]}]}, "default": true}]}, {"name": "UndoTool", "bases": ["PlotActionTool"], "mro": ["UndoTool", "PlotActionTool", "ActionTool", "Tool", "Model"], "desc": "*toolbar icon*: |undo_icon|\n\nUndo tool allows to restore previous state of the plot.\n\n.. |undo_icon| image:: /_images/icons/Undo.png\n    :height: 24px\n    :alt: Icon of an arrow on a circular arc pointing to the left representing the undo tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["undo_icon"]}]}, {"type": "paragraph", "children": ["Undo tool allows to restore previous state of the plot."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": []}, {"name": "UnionFilter", "bases": ["Filter"], "mro": ["UnionFilter", "Filter", "Model"], "desc": "Computes union of indices resulting from other filters. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Computes union of indices resulting from other filters."]}]}, "props": [{"name": "operands", "type": "Required(NonEmpty(Seq(Instance(Filter))))", "desc": "Indices produced by a collection of these filters will be unioned.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Indices produced by a collection of these filters will be unioned."]}]}, "default": "<Undefined>"}]}, {"name": "UnionRenderers", "bases": ["SelectionPolicy"], "mro": ["UnionRenderers", "SelectionPolicy", "Model"], "desc": "When a data source is shared between multiple renderers, selecting a point on\nfrom any renderer will cause that row in the data source to be selected. The\nselection is made from the union of hit test results from all renderers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["When a data source is shared between multiple renderers, selecting a point on\nfrom any renderer will cause that row in the data source to be selected. The\nselection is made from the union of hit test results from all renderers."]}]}, "props": []}, {"name": "VArea", "bases": ["FillGlyph", "HatchGlyph"], "mro": ["VArea", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render a vertically directed area between two equal length sequences\nof y-coordinates with the same x-coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/VArea.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a vertically directed area between two equal length sequences\nof y-coordinates with the same x-coordinates."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/VArea.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "fill_alpha", "type": "Alpha", "desc": "The fill alpha values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the vertical directed area."]}]}, "default": 1.0}, {"name": "fill_color", "type": "Nullable(Color)", "desc": "The fill color values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the vertical directed area."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the vertical directed area."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the vertical directed area."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the vertical directed area."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the vertical directed area."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the vertical directed area."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the vertical directed area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the vertical directed area."]}]}, "default": 1.0}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates for the points of the area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates for the points of the area."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y1", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for the points of one side of the area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for the points of one side of the area."]}]}, "default": {"type": "field", "field": "y1"}}, {"name": "y2", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates for the points of the other side of the area.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates for the points of the other side of the area."]}]}, "default": {"type": "field", "field": "y2"}}]}, {"name": "VBar", "bases": ["LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["VBar", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render vertical bars, given a center coordinate, width and (top, bottom) coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/VBar.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render vertical bars, given a center coordinate, width and (top, bottom) coordinates."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/VBar.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "bottom", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the bottom edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the bottom edges."]}]}, "default": 0}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the vertical bars."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the vertical bars."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the vertical bars."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the vertical bars."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the vertical bars."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the vertical bars."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the vertical bars."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the vertical bars."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the vertical bars."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the vertical bars."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the vertical bars."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the vertical bars."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the vertical bars."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the vertical bars."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the vertical bars."]}]}, "default": 1}, {"name": "top", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the top edges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the top edges."]}]}, "default": {"type": "field", "field": "top"}}, {"name": "width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The widths of the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The widths of the vertical bars."]}]}, "default": 1}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the centers of the vertical bars.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the centers of the vertical bars."]}]}, "default": {"type": "field", "field": "x"}}]}, {"name": "VBox", "bases": ["LayoutDOM"], "mro": ["VBox", "LayoutDOM", "UIElement", "Model"], "desc": "A CSS grid-based vertical box. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A CSS grid-based vertical box."]}]}, "props": [{"name": "children", "type": "List(Struct(child=Instance(UIElement), row=Int, span=Int))", "desc": "A list of children with their associated position in the vertical box (optional; row number, span).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A list of children with their associated position in the vertical box (optional; row number, span)."]}]}, "default": []}, {"name": "rows", "type": "Nullable(Any)", "desc": "Describes how the grid should maintain its rows' heights.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Describes how the grid should maintain its rows' heights."]}]}, "default": null}, {"name": "spacing", "type": "Either(Int, Tuple(Int, Int))", "desc": "The gap between children (in pixels).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The gap between children (in pixels)."]}]}, "default": 0}]}, {"name": "VeeHead", "bases": ["ArrowHead"], "mro": ["VeeHead", "ArrowHead", "Marking", "Model"], "desc": "Render a vee-style arrow head.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a vee-style arrow head."]}]}, "props": [{"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the arrow head interior.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the arrow head interior."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the arrow head interior.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the arrow head interior."]}]}, "default": "black"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the arrow head outline."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the arrow head outline."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the arrow head outline."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the arrow head outline."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the arrow head outline."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the arrow head outline."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the arrow head outline.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the arrow head outline."]}]}, "default": 1}]}, {"name": "WMTSTileSource", "bases": ["MercatorTileSource"], "mro": ["WMTSTileSource", "MercatorTileSource", "TileSource", "Model"], "desc": "Behaves much like ``TMSTileSource`` but has its tile-origin in the\ntop-left.\n\nThis is the most common used tile source for web mapping applications.\nSuch companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\nservice which use the WMTS specification e.g. ``http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Behaves much like ", {"type": "literal", "children": ["TMSTileSource"]}, " but has its tile-origin in the\ntop-left."]}, {"type": "paragraph", "children": ["This is the most common used tile source for web mapping applications.\nSuch companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\nservice which use the WMTS specification e.g. ", {"type": "literal", "children": ["http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png"]}, "."]}]}, "props": []}, {"name": "WebDataSource", "bases": ["ColumnDataSource"], "mro": ["WebDataSource", "ColumnDataSource", "ColumnarDataSource", "DataSource", "Model"], "desc": "Base class for web column data sources that can update from data\nURLs.\n\n.. note::\n    This base class is typically not useful to instantiate on its own.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for web column data sources that can update from data\nURLs."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This base class is typically not useful to instantiate on its own."]}]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": [{"name": "adapter", "type": "Nullable(Instance(CustomJS))", "desc": "A JavaScript callback to adapt raw JSON responses to Bokeh ``ColumnDataSource``\nformat.\n\nIf provided, this callback is executes immediately after the JSON data is\nreceived, but before appending or replacing data in the data source. The\n``CustomJS`` callback will receive the ``AjaxDataSource`` as ``cb_obj`` and\nwill receive the raw JSON response as ``cb_data.response``. The callback\ncode should return a ``data`` object suitable for a Bokeh ``ColumnDataSource``\n(i.e.  a mapping of string column names to arrays of data).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A JavaScript callback to adapt raw JSON responses to Bokeh ", {"type": "literal", "children": ["ColumnDataSource"]}, "\nformat."]}, {"type": "paragraph", "children": ["If provided, this callback is executes immediately after the JSON data is\nreceived, but before appending or replacing data in the data source. The\n", {"type": "literal", "children": ["CustomJS"]}, " callback will receive the ", {"type": "literal", "children": ["AjaxDataSource"]}, " as ", {"type": "literal", "children": ["cb_obj"]}, " and\nwill receive the raw JSON response as ", {"type": "literal", "children": ["cb_data.response"]}, ". The callback\ncode should return a ", {"type": "literal", "children": ["data"]}, " object suitable for a Bokeh ", {"type": "literal", "children": ["ColumnDataSource"]}, "\n(i.e.  a mapping of string column names to arrays of data)."]}]}, "default": null}, {"name": "data_url", "type": "Required(String)", "desc": "A URL to to fetch data from.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A URL to to fetch data from."]}]}, "default": "<Undefined>"}, {"name": "max_size", "type": "Nullable(Int)", "desc": "Maximum size of the data columns. If a new fetch would result in columns\nlarger than ``max_size``, then earlier data is dropped to make room.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Maximum size of the data columns. If a new fetch would result in columns\nlarger than ", {"type": "literal", "children": ["max_size"]}, ", then earlier data is dropped to make room."]}]}, "default": null}, {"name": "mode", "type": "Enum('replace', 'append')", "desc": "Whether to append new data to existing data (up to ``max_size``), or to\nreplace existing data entirely.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether to append new data to existing data (up to ", {"type": "literal", "children": ["max_size"]}, "), or to\nreplace existing data entirely."]}]}, "default": "replace"}]}, {"name": "Wedge", "bases": ["XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph"], "mro": ["Wedge", "XYGlyph", "LineGlyph", "FillGlyph", "HatchGlyph", "Glyph", "Model"], "desc": "Render wedges.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: __REPO__/examples/reference/models/Wedge.py\n    :source-position: below", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render wedges."]}, {"type": "section", "children": [{"type": "title", "children": ["Example"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No directive entry for \"bokeh-plot\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"bokeh-plot\" as canonical directive name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown directive type \"bokeh-plot\"."]}, {"type": "literal_block", "children": [".. bokeh-plot:: __REPO__/examples/reference/models/Wedge.py\n    :source-position: below"]}]}]}]}, "props": [{"name": "direction", "type": "Enum('clock', 'anticlock')", "desc": "Which direction to stroke between the start and end angles.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which direction to stroke between the start and end angles."]}]}, "default": "anticlock"}, {"name": "end_angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to end the wedges, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to end the wedges, as measured from the horizontal."]}]}, "default": {"type": "field", "field": "end_angle"}}, {"name": "end_angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "fill_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill alpha values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill alpha values for the wedges."]}]}, "default": 1.0}, {"name": "fill_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The fill color values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The fill color values for the wedges."]}]}, "default": "gray"}, {"name": "hatch_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch alpha values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch alpha values for the wedges."]}]}, "default": 1.0}, {"name": "hatch_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch color values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch color values for the wedges."]}]}, "default": "black"}, {"name": "hatch_extra", "type": "Dict(String, Instance(Texture))", "desc": "The hatch extra values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch extra values for the wedges."]}]}, "default": {}}, {"name": "hatch_pattern", "type": "HatchPatternSpec(String, Nullable(HatchPatternType), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(HatchPatternType), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch pattern values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch pattern values for the wedges."]}]}, "default": null}, {"name": "hatch_scale", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch scale values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch scale values for the wedges."]}]}, "default": 12.0}, {"name": "hatch_weight", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The hatch weight values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The hatch weight values for the wedges."]}]}, "default": 1.0}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the wedges."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the wedges."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the wedges."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the wedges."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the wedges."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the wedges."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the wedges."]}]}, "default": 1}, {"name": "radius", "type": "DistanceSpec(units_default='data')", "desc": "Radii of the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Radii of the wedges."]}]}, "default": {"type": "field", "field": "radius"}}, {"name": "radius_units", "type": "NotSerialized(Enum('screen', 'data'))", "desc": "Units to use for the associated property: screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: screen or data"]}]}, "default": "data"}, {"name": "start_angle", "type": "AngleSpec(units_default='rad')", "desc": "The angles to start the wedges, as measured from the horizontal.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The angles to start the wedges, as measured from the horizontal."]}]}, "default": {"type": "field", "field": "start_angle"}}, {"name": "start_angle_units", "type": "NotSerialized(Enum('deg', 'rad', 'grad', 'turn'))", "desc": "Units to use for the associated property: deg, rad, grad or turn", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: deg, rad, grad or turn"]}]}, "default": "rad"}, {"name": "x", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The x-coordinates of the points of the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The x-coordinates of the points of the wedges."]}]}, "default": {"type": "field", "field": "x"}}, {"name": "y", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The y-coordinates of the points of the wedges.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The y-coordinates of the points of the wedges."]}]}, "default": {"type": "field", "field": "y"}}]}, {"name": "WheelPanTool", "bases": ["Scroll"], "mro": ["WheelPanTool", "Scroll", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |wheel_pan_icon|\n\nThe wheel pan tool allows the user to pan the plot along the configured\ndimension using the scroll wheel.\n\n.. |wheel_pan_icon| image:: /_images/icons/WheelPan.png\n    :height: 24px\n    :alt: Icon of a mouse shape next to crossed arrows representing the wheel-pan tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["wheel_pan_icon"]}]}, {"type": "paragraph", "children": ["The wheel pan tool allows the user to pan the plot along the configured\ndimension using the scroll wheel."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimension", "type": "Enum('width', 'height')", "desc": "Which dimension the wheel pan tool is constrained to act in. By default the\nwheel pan tool will pan the plot along the x-axis.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimension the wheel pan tool is constrained to act in. By default the\nwheel pan tool will pan the plot along the x-axis."]}]}, "default": "width"}]}, {"name": "WheelZoomTool", "bases": ["Scroll"], "mro": ["WheelZoomTool", "Scroll", "GestureTool", "Tool", "Model"], "desc": "*toolbar icon*: |wheel_zoom_icon|\n\nThe wheel zoom tool will zoom the plot in and out, centered on the\ncurrent mouse location.\n\nThe wheel zoom tool also activates the border regions of a Plot for\n\"single axis\" zooming. For instance, zooming in the vertical border or\naxis will effect a zoom in the vertical direction only, with the\nhorizontal dimension kept fixed.\n\n.. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n    :height: 24px\n    :alt: Icon of a mouse shape next to an hourglass representing the wheel-zoom tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["wheel_zoom_icon"]}]}, {"type": "paragraph", "children": ["The wheel zoom tool will zoom the plot in and out, centered on the\ncurrent mouse location."]}, {"type": "paragraph", "children": ["The wheel zoom tool also activates the border regions of a Plot for\n\"single axis\" zooming. For instance, zooming in the vertical border or\naxis will effect a zoom in the vertical direction only, with the\nhorizontal dimension kept fixed."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions the wheel zoom tool is constrained to act in. By default\nthe wheel zoom tool will zoom in any dimension, but can be configured to\nonly zoom horizontally across the width of the plot, or vertically across\nthe height of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the wheel zoom tool is constrained to act in. By default\nthe wheel zoom tool will zoom in any dimension, but can be configured to\nonly zoom horizontally across the width of the plot, or vertically across\nthe height of the plot."]}]}, "default": "both"}, {"name": "maintain_focus", "type": "Bool", "desc": "If True, then hitting a range bound in any one dimension will prevent all\nfurther zooming all dimensions. If False, zooming can continue\nindependently in any dimension that has not yet reached its bounds, even if\nthat causes overall focus or aspect ratio to change.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["If True, then hitting a range bound in any one dimension will prevent all\nfurther zooming all dimensions. If False, zooming can continue\nindependently in any dimension that has not yet reached its bounds, even if\nthat causes overall focus or aspect ratio to change."]}]}, "default": true}, {"name": "speed", "type": "Float", "desc": "Speed at which the wheel zooms. Default is 1/600. Optimal range is between\n0.001 and 0.09. High values will be clipped. Speed may very between browsers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Speed at which the wheel zooms. Default is 1/600. Optimal range is between\n0.001 and 0.09. High values will be clipped. Speed may very between browsers."]}]}, "default": 0.0016666666666666668}, {"name": "zoom_on_axis", "type": "Bool", "desc": "Whether scrolling on an axis (outside the central plot area) should zoom\nthat dimension.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Whether scrolling on an axis (outside the central plot area) should zoom\nthat dimension."]}]}, "default": true}]}, {"name": "Whisker", "bases": ["DataAnnotation"], "mro": ["Whisker", "DataAnnotation", "Annotation", "Renderer", "Model"], "desc": "Render a whisker along a dimension.\n\nSee :ref:`ug_basic_annotations_whiskers` for information on plotting whiskers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Render a whisker along a dimension."]}, {"type": "paragraph", "children": ["See ", {"type": "problematic", "children": [":ref:`ug_basic_annotations_whiskers`"]}, " for information on plotting whiskers."]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["No role entry for \"ref\" in module \"docutils.parsers.rst.languages.en\".\nTrying \"ref\" as canonical role name."]}]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unknown interpreted text role \"ref\"."]}]}]}, "props": [{"name": "base", "type": "UnitsSpec(units_default='data')", "desc": "The orthogonal coordinates of the upper and lower values.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The orthogonal coordinates of the upper and lower values."]}]}, "default": {"type": "field", "field": "base"}}, {"name": "base_units", "type": "NotSerialized(Enum('canvas', 'screen', 'data'))", "desc": "Units to use for the associated property: canvas, screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: canvas, screen or data"]}]}, "default": "data"}, {"name": "dimension", "type": "Enum('width', 'height')", "desc": "The direction of the whisker can be specified by setting this property\nto \"height\" (``y`` direction) or \"width\" (``x`` direction).", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The direction of the whisker can be specified by setting this property\nto \"height\" (", {"type": "literal", "children": ["y"]}, " direction) or \"width\" (", {"type": "literal", "children": ["x"]}, " direction)."]}]}, "default": "height"}, {"name": "line_alpha", "type": "AlphaSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line alpha values for the whisker body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line alpha values for the whisker body."]}]}, "default": 1.0}, {"name": "line_cap", "type": "LineCapSpec(String, Enum('butt', 'round', 'square'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('butt', 'round', 'square'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line cap values for the whisker body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line cap values for the whisker body."]}]}, "default": "butt"}, {"name": "line_color", "type": "ColorSpec(String, Nullable(Color), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Nullable(Color), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line color values for the whisker body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line color values for the whisker body."]}]}, "default": "black"}, {"name": "line_dash", "type": "DashPatternSpec(String, DashPattern, Instance(Value), Instance(Field), Instance(Expr), Struct(value=DashPattern, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash values for the whisker body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash values for the whisker body."]}]}, "default": []}, {"name": "line_dash_offset", "type": "IntSpec(String, Int, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Int, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line dash offset values for the whisker body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line dash offset values for the whisker body."]}]}, "default": 0}, {"name": "line_join", "type": "LineJoinSpec(String, Enum('miter', 'round', 'bevel'), Instance(Value), Instance(Field), Instance(Expr), Struct(value=Enum('miter', 'round', 'bevel'), transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line join values for the whisker body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line join values for the whisker body."]}]}, "default": "bevel"}, {"name": "line_width", "type": "NumberSpec(String, Float, Instance(Value), Instance(Field), Instance(Expr), Struct(value=Float, transform=Instance(Transform)), Struct(field=String, transform=Instance(Transform)), Struct(expr=Instance(Expression), transform=Instance(Transform)))", "desc": "The line width values for the whisker body.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The line width values for the whisker body."]}]}, "default": 1}, {"name": "lower", "type": "UnitsSpec(units_default='data')", "desc": "The coordinates of the lower end of the whiskers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The coordinates of the lower end of the whiskers."]}]}, "default": {"type": "field", "field": "lower"}}, {"name": "lower_head", "type": "Nullable(Instance(ArrowHead))", "desc": "Instance of ``ArrowHead``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Instance of ", {"type": "literal", "children": ["ArrowHead"]}, "."]}]}, "default": "{\"__type__\": \"TeeHead\", \"attributes\": {\"size\": {\"type\": \"value\", \"value\": 10}}, \"name\": \"TeeHead\", \"type\": \"object\"}"}, {"name": "lower_units", "type": "NotSerialized(Enum('canvas', 'screen', 'data'))", "desc": "Units to use for the associated property: canvas, screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: canvas, screen or data"]}]}, "default": "data"}, {"name": "upper", "type": "UnitsSpec(units_default='data')", "desc": "The coordinates of the upper end of the whiskers.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The coordinates of the upper end of the whiskers."]}]}, "default": {"type": "field", "field": "upper"}}, {"name": "upper_head", "type": "Nullable(Instance(ArrowHead))", "desc": "Instance of ``ArrowHead``.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Instance of ", {"type": "literal", "children": ["ArrowHead"]}, "."]}]}, "default": "{\"__type__\": \"TeeHead\", \"attributes\": {\"size\": {\"type\": \"value\", \"value\": 10}}, \"name\": \"TeeHead\", \"type\": \"object\"}"}, {"name": "upper_units", "type": "NotSerialized(Enum('canvas', 'screen', 'data'))", "desc": "Units to use for the associated property: canvas, screen or data", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Units to use for the associated property: canvas, screen or data"]}]}, "default": "data"}]}, {"name": "Widget", "bases": ["LayoutDOM"], "mro": ["Widget", "LayoutDOM", "UIElement", "Model"], "desc": "A base class for all interactive widget types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A base class for all interactive widget types."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "XComponent", "bases": ["XYComponent"], "mro": ["XComponent", "XYComponent", "Expression", "Model"], "desc": "X-component of a coordinate system transform to cartesian coordinates. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["X-component of a coordinate system transform to cartesian coordinates."]}]}, "props": []}, {"name": "XYComponent", "bases": ["Expression"], "mro": ["XYComponent", "Expression", "Model"], "desc": "Base class for bi-variate expressions. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for bi-variate expressions.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": [{"name": "transform", "type": "Instance(CoordinateTransform)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": "<Undefined>"}]}, {"name": "XYGlyph", "bases": ["Glyph"], "mro": ["XYGlyph", "Glyph", "Model"], "desc": "Base class of glyphs with `x` and `y` coordinate attributes.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class of glyphs with ", {"type": "title_reference", "children": ["x"]}, " and ", {"type": "title_reference", "children": ["y"]}, " coordinate attributes."]}, {"type": "note", "children": [{"type": "paragraph", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. ", {"type": "strong", "children": ["It is not useful to instantiate on its own."]}]}]}]}, "props": []}, {"name": "YComponent", "bases": ["XYComponent"], "mro": ["YComponent", "XYComponent", "Expression", "Model"], "desc": "Y-component of a coordinate system transform to cartesian coordinates. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Y-component of a coordinate system transform to cartesian coordinates."]}]}, "props": []}, {"name": "YearsTicker", "bases": ["SingleIntervalTicker"], "mro": ["YearsTicker", "SingleIntervalTicker", "ContinuousTicker", "Ticker", "Model"], "desc": "Generate ticks spaced apart even numbers of years.\n\n    ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Generate ticks spaced apart even numbers of years."]}]}, "props": []}, {"name": "ZoomInTool", "bases": ["PlotActionTool"], "mro": ["ZoomInTool", "PlotActionTool", "ActionTool", "Tool", "Model"], "desc": "*toolbar icon*: |zoom_in_icon|\n\nThe zoom-in tool allows users to click a button to zoom in\nby a fixed amount.\n\n.. |zoom_in_icon| image:: /_images/icons/ZoomIn.png\n    :height: 24px\n    :alt: Icon of a plus sign next to a magnifying glass representing the zoom-in tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["zoom_in_icon"]}]}, {"type": "paragraph", "children": ["The zoom-in tool allows users to click a button to zoom in\nby a fixed amount."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions the zoom-in tool is constrained to act in. By default the\nzoom-in zoom tool will zoom in any dimension, but can be configured to only\nzoom horizontally across the width of the plot, or vertically across the\nheight of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the zoom-in tool is constrained to act in. By default the\nzoom-in zoom tool will zoom in any dimension, but can be configured to only\nzoom horizontally across the width of the plot, or vertically across the\nheight of the plot."]}]}, "default": "both"}, {"name": "factor", "type": "Percent", "desc": "Percentage to zoom for each click of the zoom-in tool.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Percentage to zoom for each click of the zoom-in tool."]}]}, "default": 0.1}]}, {"name": "ZoomOutTool", "bases": ["PlotActionTool"], "mro": ["ZoomOutTool", "PlotActionTool", "ActionTool", "Tool", "Model"], "desc": "*toolbar icon*: |zoom_out_icon|\n\nThe zoom-out tool allows users to click a button to zoom out\nby a fixed amount.\n\n.. |zoom_out_icon| image:: /_images/icons/ZoomOut.png\n    :height: 24px\n    :alt: Icon of a minus sign next to a magnifying glass representing the zoom-out tool in the toolbar.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": [{"type": "emphasis", "children": ["toolbar icon"]}, ": ", {"type": "substitution_reference", "children": ["zoom_out_icon"]}]}, {"type": "paragraph", "children": ["The zoom-out tool allows users to click a button to zoom out\nby a fixed amount."]}, {"type": "substitution_definition", "children": [{"type": "image", "children": []}]}]}, "props": [{"name": "dimensions", "type": "Enum('width', 'height', 'both')", "desc": "Which dimensions the zoom-out tool is constrained to act in. By default the\nzoom-out tool will zoom in any dimension, but can be configured to only\nzoom horizontally across the width of the plot, or vertically across the\nheight of the plot.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Which dimensions the zoom-out tool is constrained to act in. By default the\nzoom-out tool will zoom in any dimension, but can be configured to only\nzoom horizontally across the width of the plot, or vertically across the\nheight of the plot."]}]}, "default": "both"}, {"name": "factor", "type": "Percent", "desc": "Percentage to zoom for each click of the zoom-in tool.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Percentage to zoom for each click of the zoom-in tool."]}]}, "default": 0.1}, {"name": "maintain_focus", "type": "Bool", "desc": "If True, then hitting a range bound in any one dimension will prevent all\nfurther zooming all dimensions. If False, zooming can continue\nindependently in any dimension that has not yet reached its bounds, even if\nthat causes overall focus or aspect ratio to change.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["If True, then hitting a range bound in any one dimension will prevent all\nfurther zooming all dimensions. If False, zooming can continue\nindependently in any dimension that has not yet reached its bounds, even if\nthat causes overall focus or aspect ratio to change."]}]}, "default": true}]}, {"name": "bokeh.models.dom.Action", "bases": ["Model"], "mro": ["bokeh.models.dom.Action", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "bokeh.models.dom.ColorRef", "bases": ["bokeh.models.dom.ValueRef"], "mro": ["bokeh.models.dom.ColorRef", "bokeh.models.dom.ValueRef", "bokeh.models.dom.Placeholder", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "hex", "type": "Bool", "desc": "", "richdesc": {"type": "document", "children": []}, "default": true}, {"name": "swatch", "type": "Bool", "desc": "", "richdesc": {"type": "document", "children": []}, "default": true}]}, {"name": "bokeh.models.dom.DOMElement", "bases": ["bokeh.models.dom.DOMNode"], "mro": ["bokeh.models.dom.DOMElement", "bokeh.models.dom.DOMNode", "Model"], "desc": "Base class for DOM elements. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for DOM elements.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": [{"name": "children", "type": "List(Either(String, Instance(DOMNode), Instance(UIElement)))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": []}, {"name": "style", "type": "Nullable(Either(Instance(Styles), Dict(String, String)))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": null}]}, {"name": "bokeh.models.dom.DOMNode", "bases": ["Model"], "mro": ["bokeh.models.dom.DOMNode", "Model"], "desc": "Base class for DOM nodes. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Base class for DOM nodes.\n.. note:"]}, {"type": "system_message", "children": [{"type": "paragraph", "children": ["Unexpected indentation."]}]}, {"type": "literal_block", "children": ["This is an abstract base class used to help organize the hierarchy of Bokeh\nmodel types. **It is not useful to instantiate on its own.**"]}]}, "props": []}, {"name": "bokeh.models.dom.Div", "bases": ["bokeh.models.dom.DOMElement"], "mro": ["bokeh.models.dom.Div", "bokeh.models.dom.DOMElement", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "bokeh.models.dom.HTML", "bases": ["Model"], "mro": ["bokeh.models.dom.HTML", "Model"], "desc": "A parsed HTML fragment with optional references to DOM nodes and UI elements. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A parsed HTML fragment with optional references to DOM nodes and UI elements."]}]}, "props": [{"name": "html", "type": "Required(Either(String, List(Either(String, Instance(DOMNode), Instance(UIElement)))))", "desc": "Either a parsed HTML string with optional references to Bokeh objects using\n``<ref id=\"...\"></ref>`` syntax. Or a list of parsed HTML interleaved with\nBokeh's objects. Any DOM node or UI element (even a plot) can be referenced\nhere.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["Either a parsed HTML string with optional references to Bokeh objects using\n", {"type": "literal", "children": ["<ref id=\"...\"></ref>"]}, " syntax. Or a list of parsed HTML interleaved with\nBokeh's objects. Any DOM node or UI element (even a plot) can be referenced\nhere."]}]}, "default": "<Undefined>"}, {"name": "refs", "type": "List(Either(String, Instance(DOMNode), Instance(UIElement)))", "desc": "A collection of objects referenced by ``<ref id=\"...\"></ref>`` from `the `html`` property.\nObjects already included by instance in ``html`` don't have to be repeated here.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A collection of objects referenced by ", {"type": "literal", "children": ["<ref id=\"...\"></ref>"]}, " from ", {"type": "title_reference", "children": ["the `html`"]}, " property.\nObjects already included by instance in ", {"type": "literal", "children": ["html"]}, " don't have to be repeated here."]}]}, "default": []}]}, {"name": "bokeh.models.dom.Index", "bases": ["bokeh.models.dom.Placeholder"], "mro": ["bokeh.models.dom.Index", "bokeh.models.dom.Placeholder", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "bokeh.models.dom.Placeholder", "bases": ["bokeh.models.dom.DOMNode"], "mro": ["bokeh.models.dom.Placeholder", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "bokeh.models.dom.Span", "bases": ["bokeh.models.dom.DOMElement"], "mro": ["bokeh.models.dom.Span", "bokeh.models.dom.DOMElement", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "bokeh.models.dom.Table", "bases": ["bokeh.models.dom.DOMElement"], "mro": ["bokeh.models.dom.Table", "bokeh.models.dom.DOMElement", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "bokeh.models.dom.TableRow", "bases": ["bokeh.models.dom.DOMElement"], "mro": ["bokeh.models.dom.TableRow", "bokeh.models.dom.DOMElement", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": []}, {"name": "bokeh.models.dom.Template", "bases": ["bokeh.models.dom.DOMElement"], "mro": ["bokeh.models.dom.Template", "bokeh.models.dom.DOMElement", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "actions", "type": "List(Instance(Action))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": []}]}, {"name": "bokeh.models.dom.Text", "bases": ["bokeh.models.dom.DOMNode"], "mro": ["bokeh.models.dom.Text", "bokeh.models.dom.DOMNode", "Model"], "desc": "DOM text node. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["DOM text node."]}]}, "props": [{"name": "content", "type": "String", "desc": "", "richdesc": {"type": "document", "children": []}, "default": ""}]}, {"name": "bokeh.models.dom.ToggleGroup", "bases": ["bokeh.models.dom.Action"], "mro": ["bokeh.models.dom.ToggleGroup", "bokeh.models.dom.Action", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "groups", "type": "List(Instance(RendererGroup))", "desc": "", "richdesc": {"type": "document", "children": []}, "default": []}]}, {"name": "bokeh.models.dom.ValueOf", "bases": ["bokeh.models.dom.Placeholder"], "mro": ["bokeh.models.dom.ValueOf", "bokeh.models.dom.Placeholder", "bokeh.models.dom.DOMNode", "Model"], "desc": "A placeholder for the value of a model's property. ", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["A placeholder for the value of a model's property."]}]}, "props": [{"name": "attr", "type": "Required(String)", "desc": "The name of the property whose value will be observed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The name of the property whose value will be observed."]}]}, "default": "<Undefined>"}, {"name": "obj", "type": "Required(Instance(HasProps))", "desc": "The object whose property will be observed.", "richdesc": {"type": "document", "children": [{"type": "paragraph", "children": ["The object whose property will be observed."]}]}, "default": "<Undefined>"}]}, {"name": "bokeh.models.dom.ValueRef", "bases": ["bokeh.models.dom.Placeholder"], "mro": ["bokeh.models.dom.ValueRef", "bokeh.models.dom.Placeholder", "bokeh.models.dom.DOMNode", "Model"], "desc": "", "richdesc": {"type": "document", "children": []}, "props": [{"name": "field", "type": "Required(String)", "desc": "", "richdesc": {"type": "document", "children": []}, "default": "<Undefined>"}]}]