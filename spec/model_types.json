[
  {
    "name": "AbstractButton",
    "fullname": "bokeh.models.widgets.buttons.AbstractButton",
    "bases": [
      "bokeh.models.widgets.widget.Widget",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "desc": "A base class that defines common properties for all button types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "A style for the button, signifying it's role.",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "The text label for the button to display.",
        "default": "Button"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "An optional image appearing to the left of button's text.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "AbstractGroup",
    "fullname": "bokeh.models.widgets.groups.AbstractGroup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": "Abstract base class for all kinds of groups.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "AbstractIcon",
    "fullname": "bokeh.models.widgets.icons.AbstractIcon",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "An abstract base class for icon widgets.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "AbstractSlider",
    "fullname": "bokeh.models.widgets.sliders.AbstractSlider",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "Whether or not show slider's value.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "    ",
        "default": "ltr"
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "Acceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "#e6e6e6"
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "Slider's label.",
        "default": ""
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "    ",
        "default": ""
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "    ",
        "default": true
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "ActionTool",
    "fullname": "bokeh.models.tools.ActionTool",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "desc": "A base class for tools that are buttons in the toolbar.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "AdaptiveTicker",
    "fullname": "bokeh.models.tickers.AdaptiveTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": "Generate \"nice\" round ticks at any magnitude.\n\nCreates ticks that are \"base\" multiples of a set of given\nmantissas. For example, with ``base=10`` and\n``mantissas=[1, 2, 5]``, the ticker will generate the sequence::\n\n    ..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ...",
    "props": [
      {
        "name": "base",
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "default": 10.0
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "default": 0.0
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n.. note::\n    To specify an unbounded interval, set to ``None``.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "AjaxDataSource",
    "fullname": "bokeh.models.sources.AjaxDataSource",
    "bases": [
      "bokeh.models.sources.WebDataSource"
    ],
    "desc": "A data source that can populate columns by making Ajax calls to REST\nendpoints.\n\nThe ``AjaxDataSource`` can be especially useful if you want to make a\nstandalone document (i.e. not backed by the Bokeh server) that can still\ndynamically update using an existing REST API.\n\nThe response from the REST API should match the ``.data`` property of a\nstandard ``ColumnDataSource``, i.e. a JSON dict that maps names to arrays\nof values:\n\n.. code-block:: python\n\n    {\n        'x' : [1, 2, 3, ...],\n        'y' : [9, 3, 2, ...]\n    }\n\nAlternatively, if the REST API returns a different format, a ``CustomJS``\ncallback can be provided to convert the REST response into Bokeh format,\nvia the ``adapter`` property of this data source.\n\nInitial data can be set by specifying the ``data`` property directly.\nThis is necessary when used in conjunction with a ``FactorRange``, even\nif the columns in `data`` are empty.\n\nA full example can be seen at :bokeh-tree:`examples/howto/ajax_source.py`",
    "props": [
      {
        "name": "http_headers",
        "type": "Dict(String, String)",
        "desc": "Specify HTTP headers to set for the Ajax request.\n\nExample:\n\n.. code-block:: python\n\n    ajax_source.headers = { 'x-my-custom-header': 'some value' }",
        "default": {}
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "max_size",
        "type": "Nullable(Int)",
        "desc": "Maximum size of the data columns. If a new fetch would result in columns\nlarger than ``max_size``, then earlier data is dropped to make room.",
        "default": null
      },
      {
        "name": "data_url",
        "type": "NonNullable(String)",
        "desc": "A URL to to fetch data from.",
        "default": "<Undefined>"
      },
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "Mapping of column names to sequences of data. The columns can be, e.g,\nPython lists or tuples, NumPy arrays, etc.\n\nThe .data attribute can also be set from Pandas DataFrames or GroupBy\nobjects. In these cases, the behaviour is identical to passing the objects\nto the ``ColumnDataSource`` initializer.",
        "default": {}
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "method",
        "type": "Enum('POST', 'GET')",
        "desc": "Specify the HTTP method to use for the Ajax request (GET or POST)",
        "default": "POST"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append')",
        "desc": "Whether to append new data to existing data (up to ``max_size``), or to\nreplace existing data entirely.",
        "default": "replace"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "content_type",
        "type": "String",
        "desc": "Set the \"contentType\" parameter for the Ajax request.",
        "default": "application/json"
      },
      {
        "name": "adapter",
        "type": "Nullable(Instance(CustomJS))",
        "desc": "A JavaScript callback to adapt raw JSON responses to Bokeh ``ColumnDataSource``\nformat.\n\nIf provided, this callback is executes immediately after the JSON data is\nreceived, but before appending or replacing data in the data source. The\n``CustomJS`` callback will receive the ``AjaxDataSource`` as ``cb_obj`` and\nwill receive the raw JSON response as ``cb_data.response``. The callback\ncode should return a ``data`` object suitable for a Bokeh ``ColumnDataSource``\n(i.e.  a mapping of string column names to arrays of data).",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "polling_interval",
        "type": "Nullable(Int)",
        "desc": "A polling interval (in milliseconds) for updating data source.",
        "default": null
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "An instance of a ``SelectionPolicy`` that determines how selections are set.",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "if_modified",
        "type": "Bool",
        "desc": "Whether to include an ``If-Modified-Since`` header in Ajax requests\nto the server. If this header is supported by the server, then only\nnew data since the last request will be returned.",
        "default": false
      }
    ]
  },
  {
    "name": "AllLabels",
    "fullname": "bokeh.models.labeling.AllLabels",
    "bases": [
      "bokeh.models.labeling.LabelingPolicy"
    ],
    "desc": "Select all labels even if they overlap. ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Annotation",
    "fullname": "bokeh.models.annotations.Annotation",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": "Base class for all annotation models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "AnnularWedge",
    "fullname": "bokeh.models.glyphs.AnnularWedge",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render annular wedges.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/AnnularWedge.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the annular wedges.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the annular wedges.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the center of the annular wedges.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the annular wedges.",
        "default": 1.0
      },
      {
        "name": "outer_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The outer radii of the annular wedges.",
        "default": {
          "field": "outer_radius"
        }
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the center of the annular wedges.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the annular wedges.",
        "default": 1.0
      },
      {
        "name": "inner_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to end the annular wedges, as measured from the horizontal.",
        "default": {
          "field": "end_angle"
        }
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the annular wedges.",
        "default": "gray"
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the annular wedges.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the annular wedges.",
        "default": {}
      },
      {
        "name": "inner_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The inner radii of the annular wedges.",
        "default": {
          "field": "inner_radius"
        }
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the annular wedges.",
        "default": "butt"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the annular wedges.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the annular wedges.",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "Which direction to stroke between the start and end angles.",
        "default": "anticlock"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the annular wedges.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the annular wedges.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "outer_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to start the annular wedges, as measured from the horizontal.",
        "default": {
          "field": "start_angle"
        }
      },
      {
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the annular wedges.",
        "default": "black"
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the annular wedges.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the annular wedges.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Annulus",
    "fullname": "bokeh.models.glyphs.Annulus",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render annuli.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Annulus.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the annuli.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the annuli.",
        "default": {}
      },
      {
        "name": "inner_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The inner radii of the annuli.",
        "default": {
          "field": "inner_radius"
        }
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the annuli.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the annuli.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the center of the annuli.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the annuli.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the annuli.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the annuli.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the annuli.",
        "default": null
      },
      {
        "name": "outer_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The outer radii of the annuli.",
        "default": {
          "field": "outer_radius"
        }
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the center of the annuli.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the annuli.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the annuli.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the annuli.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the annuli.",
        "default": 1.0
      },
      {
        "name": "inner_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "outer_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the annuli.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the annuli.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the annuli.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Arc",
    "fullname": "bokeh.models.glyphs.Arc",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render arcs.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Arc.py\n    :source-position: below",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the arcs.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the center of the arcs.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the arcs.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the arcs.",
        "default": "bevel"
      },
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "Which direction to stroke between the start and end angles.",
        "default": "anticlock"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the center of the arcs.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "Radius of the arc.",
        "default": {
          "field": "radius"
        }
      },
      {
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the arcs.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the arcs.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to start the arcs, as measured from the horizontal.",
        "default": {
          "field": "start_angle"
        }
      },
      {
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to end the arcs, as measured from the horizontal.",
        "default": {
          "field": "end_angle"
        }
      },
      {
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the arcs.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the arcs.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Arrow",
    "fullname": "bokeh.models.annotations.Arrow",
    "bases": [
      "bokeh.models.annotations.DataAnnotation"
    ],
    "desc": "Render arrows as an annotation.\n\nSee :ref:`userguide_annotations_arrows` for information on plotting arrows.",
    "props": [
      {
        "name": "start",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "Instance of ``ArrowHead``.",
        "default": null
      },
      {
        "name": "y_end",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to locate the end of the arrows.",
        "default": {
          "field": "y_end"
        }
      },
      {
        "name": "x_end",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to locate the end of the arrows.",
        "default": {
          "field": "x_end"
        }
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the arrow body.",
        "default": 1
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the arrow body.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "start_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the start_x and start_y attributes. Interpreted as \"data\nspace\" units by default.",
        "default": "data"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the arrow body.",
        "default": "bevel"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the arrow body.",
        "default": []
      },
      {
        "name": "y_start",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to locate the start of the arrows.",
        "default": {
          "field": "y_start"
        }
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the arrow body.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "end",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "Instance of ``ArrowHead``.",
        "default": "{\"__type__\": \"bokeh.models.arrow_heads.OpenHead\"}"
      },
      {
        "name": "x_start",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to locate the start of the arrows.",
        "default": {
          "field": "x_start"
        }
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the arrow body.",
        "default": "black"
      },
      {
        "name": "end_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the end_x and end_y attributes. Interpreted as \"data\nspace\" units by default.",
        "default": "data"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the arrow body.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "ArrowHead",
    "fullname": "bokeh.models.arrow_heads.ArrowHead",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for arrow heads.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size, in pixels, of the arrow head.",
        "default": 25
      }
    ]
  },
  {
    "name": "Ascii",
    "fullname": "bokeh.models.text.Ascii",
    "bases": [
      "bokeh.models.text.MathText"
    ],
    "desc": "Render mathematical content using `AsciiMath <http://asciimath.org/>`_\nnotation.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "The text value to render.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "AutocompleteInput",
    "fullname": "bokeh.models.widgets.inputs.AutocompleteInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ],
    "desc": "Single-line input widget with auto-completion.\n\n    ",
    "props": [
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "Max count of characters in field",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "min_characters",
        "type": "PositiveInt",
        "desc": "The number of characters a user must type before completions are presented.",
        "default": 2
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "case_sensitive",
        "type": "Bool",
        "desc": "Enable or disable case sensitivity",
        "default": true
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "completions",
        "type": "List(String)",
        "desc": "A list of completion strings. This will be used to guide the\nuser upon typing the beginning of a desired value.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "restrict",
        "type": "Bool",
        "desc": "Set to False in order to allow users to enter text that is not present in the list of completion strings.",
        "default": true
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "value",
        "type": "String",
        "desc": "Initial or entered text value.\n\nChange events are triggered whenever <enter> is pressed.",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "Placeholder for empty input field.",
        "default": ""
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "value_input",
        "type": "String",
        "desc": "Initial or current value.\n\nChange events are triggered whenever any update happens, i.e. on every\nkeypress.",
        "default": ""
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "AvgAggregator",
    "fullname": "bokeh.models.widgets.tables.AvgAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": "Simple average across multiple rows.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "Refers to the table column being aggregated",
        "default": ""
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Axis",
    "fullname": "bokeh.models.axes.Axis",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "desc": "A base class that defines common properties for all axis types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 4
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "The line width of the axis line.",
        "default": 1
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.",
        "default": "auto"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.",
        "default": "horizontal"
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "default": []
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "alphabetic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.",
        "default": 2
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the axis line.",
        "default": "black"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the axis label.",
        "default": "italic"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.",
        "default": 5
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": "black"
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.",
        "default": null
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "default": "<Undefined>"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the axis label.",
        "default": 1.0
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the axis line.",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "default": "bottom"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the axis label.",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.",
        "default": "<Undefined>"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the axis label.",
        "default": "13px"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "The text font of the axis label.",
        "default": "helvetica"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "center"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 6
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.",
        "default": 5
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the axis label.",
        "default": "#444444"
      }
    ]
  },
  {
    "name": "BBoxTileSource",
    "fullname": "bokeh.models.tiles.BBoxTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": "Has the same default tile origin as the ``WMTSTileSource`` but requested\ntiles use a ``{XMIN}``, ``{YMIN}``, ``{XMAX}``, ``{YMAX}`` e.g.\n``http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}``.",
    "props": [
      {
        "name": "url",
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "default": ""
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute.",
        "default": 156543.03392804097
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "default": ""
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\nThese variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name).",
        "default": {}
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\nbounds of map.\n\n..note::\n    Axis coordinates are not wrapped. To toggle axis label visibility,\n    use ``plot.axis.visible = False``.",
        "default": true
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "An x-offset in plot coordinates",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "default": 256
      },
      {
        "name": "use_latlon",
        "type": "Bool",
        "desc": "Flag which indicates option to output ``{XMIN}``, ``{YMIN}``, ``{XMAX}``, ``{YMAX}`` in meters or latitude and longitude.",
        "default": false
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "default": 30
      },
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "A y-offset in plot coordinates",
        "default": 20037508.34
      }
    ]
  },
  {
    "name": "Band",
    "fullname": "bokeh.models.annotations.Band",
    "bases": [
      "bokeh.models.annotations.DataAnnotation"
    ],
    "desc": "Render a filled area band along a dimension.\n\nSee :ref:`userguide_annotations_bands` for information on plotting bands.",
    "props": [
      {
        "name": "base",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "default": {
          "field": "base"
        }
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the band.",
        "default": 1
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the band.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the band.",
        "default": 0.4
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the band.",
        "default": "bevel"
      },
      {
        "name": "lower_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "The direction of the band can be specified by setting this property\nto \"height\" (``y`` direction) or \"width\" (``x`` direction).",
        "default": "height"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the band.",
        "default": []
      },
      {
        "name": "base_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the band.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "upper_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the band.",
        "default": "#cccccc"
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the band.",
        "default": "#fff9ba"
      },
      {
        "name": "upper",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "The coordinates of the upper portion of the filled area band.",
        "default": {
          "field": "upper"
        }
      },
      {
        "name": "lower",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "The coordinates of the lower portion of the filled area band.",
        "default": {
          "field": "lower"
        }
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the band.",
        "default": 0.3
      }
    ]
  },
  {
    "name": "BaseText",
    "fullname": "bokeh.models.text.BaseText",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for renderers of text content of various kinds.\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "The text value to render.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "BasicTickFormatter",
    "fullname": "bokeh.models.formatters.BasicTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": "Display tick values from continuous ranges as \"basic numbers\",\nusing scientific notation when appropriate by default.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "power_limit_low",
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n    log(x) <= power_limit_low",
        "default": -3
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "precision",
        "type": "Either(Auto, Int)",
        "desc": "How many digits of precision to display in tick labels.",
        "default": "auto"
      },
      {
        "name": "use_scientific",
        "type": "Bool",
        "desc": "Whether to ever display scientific notation. If ``True``, then\nwhen to use scientific notation is controlled by ``power_limit_low``\nand ``power_limit_high``.",
        "default": true
      },
      {
        "name": "power_limit_high",
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n    log(x) >= power_limit_high",
        "default": 5
      }
    ]
  },
  {
    "name": "BasicTicker",
    "fullname": "bokeh.models.tickers.BasicTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "desc": "Generate ticks on a linear scale.\n\n.. note::\n    This class may be renamed to ``LinearTicker`` in the future.",
    "props": [
      {
        "name": "base",
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "default": 10.0
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "default": 0.0
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n.. note::\n    To specify an unbounded interval, set to ``None``.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "Bezier",
    "fullname": "bokeh.models.glyphs.Bezier",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render Bezier curves.\n\nFor more information consult the `Wikipedia article for Bezier curve`_.\n\n.. _Wikipedia article for Bezier curve: http://en.wikipedia.org/wiki/Bezier_curve\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Bezier.py\n    :source-position: below",
    "props": [
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the ending points.",
        "default": {
          "field": "x1"
        }
      },
      {
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the starting points.",
        "default": {
          "field": "y0"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the Bezier curves.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the Bezier curves.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the ending points.",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the starting points.",
        "default": {
          "field": "x0"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the Bezier curves.",
        "default": "bevel"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the Bezier curves.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the Bezier curves.",
        "default": 0
      },
      {
        "name": "cy1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of second control points.",
        "default": {
          "field": "cy1"
        }
      },
      {
        "name": "cx1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of second control points.",
        "default": {
          "field": "cx1"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "cx0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of first control points.",
        "default": {
          "field": "cx0"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the Bezier curves.",
        "default": "black"
      },
      {
        "name": "cy0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of first control points.",
        "default": {
          "field": "cy0"
        }
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the Bezier curves.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "BinnedTicker",
    "fullname": "bokeh.models.tickers.BinnedTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "desc": "Ticker that aligns ticks exactly at bin boundaries of a scanning color mapper. ",
    "props": [
      {
        "name": "mapper",
        "type": "Instance(ScanningColorMapper)",
        "desc": "A scanning color mapper (e.g. ``EqHistColorMapper``) to use.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "num_major_ticks",
        "type": "Either(Int, Auto)",
        "desc": "The number of major tick positions to show or \"auto\" to use the\nnumber of bins provided by the mapper.",
        "default": 8
      }
    ]
  },
  {
    "name": "BooleanFilter",
    "fullname": "bokeh.models.filters.BooleanFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": "A ``BooleanFilter`` filters data by returning the subset of data corresponding to indices\nwhere the values of the booleans array is True.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "booleans",
        "type": "Nullable(Seq(Bool))",
        "desc": "A list of booleans indicating which rows of data to select.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "BooleanFormatter",
    "fullname": "bokeh.models.widgets.tables.BooleanFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "desc": "Boolean (check mark) cell formatter.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "icon",
        "type": "Enum('check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o')",
        "desc": "The icon visualizing the check mark.",
        "default": "check"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Box",
    "fullname": "bokeh.models.layouts.Box",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "Abstract base class for Row and Column. Do not use directly.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "The gap between children (in pixels).",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "default": []
      }
    ]
  },
  {
    "name": "BoxAnnotation",
    "fullname": "bokeh.models.annotations.BoxAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": "Render a shaded rectangular region as an annotation.\n\nSee :ref:`userguide_annotations_box_annotations` for information on plotting box annotations.",
    "props": [
      {
        "name": "hatch_scale",
        "type": "Size",
        "desc": "The hatch scale values for the box.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the box.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the box.",
        "default": 0.4
      },
      {
        "name": "hatch_weight",
        "type": "Size",
        "desc": "The hatch weight values for the box.",
        "default": 1.0
      },
      {
        "name": "bottom",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "The y-coordinates of the bottom edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.",
        "default": null
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the box.",
        "default": "#fff9ba"
      },
      {
        "name": "left_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the left attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "right",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "The x-coordinates of the right edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.",
        "default": null
      },
      {
        "name": "hatch_alpha",
        "type": "Alpha",
        "desc": "The hatch alpha values for the box.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the box.",
        "default": {}
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "bottom_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the bottom attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the box.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "top_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the top attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "left",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "The x-coordinates of the left edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.",
        "default": null
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the box.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "Nullable(String)",
        "desc": "The hatch pattern values for the box.",
        "default": null
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the box.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the box.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "top",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "The y-coordinates of the top edge of the box annotation.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.",
        "default": null
      },
      {
        "name": "right_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the right attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the box.",
        "default": "#cccccc"
      },
      {
        "name": "hatch_color",
        "type": "Nullable(Color)",
        "desc": "The hatch color values for the box.",
        "default": "black"
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the contents are rendered to a canvas or as a\nHTML element overlaid on the canvas. The default mode is \"canvas\".\n\n.. note::\n    This property is deprecated and will be removed in bokeh 3.0.\n\n.. note::\n    The HTML labels won't be present in the output using the \"save\" tool.\n\n.. warning::\n    Not all visual styling properties are supported if the render_mode is\n    set to \"css\". The border_line_dash property isn't fully supported and\n    border_line_dash_offset isn't supported at all. Setting text_alpha will\n    modify the opacity of the entire background box and border in addition\n    to the text. Finally, clipping Label annotations inside of the plot\n    area isn't supported in \"css\" mode.",
        "default": "canvas"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the box.",
        "default": 0.3
      }
    ]
  },
  {
    "name": "BoxEditTool",
    "fullname": "bokeh.models.tools.BoxEditTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": "*toolbar icon*: |box_edit_icon|\n\nAllows drawing, dragging and deleting ``Rect`` glyphs on one or more\nrenderers by editing the underlying ``ColumnDataSource`` data. Like other\ndrawing tools, the renderers that are to be edited must be supplied\nexplicitly as a list. When drawing a new box the data will always be added\nto the ``ColumnDataSource`` on the first supplied renderer.\n\nThe tool will modify the columns on the data source corresponding to the\n``x``, ``y``, ``width`` and ``height`` values of the glyph. Any additional\ncolumns in the data source will be padded with ``empty_value``, when adding\na new box.\n\nThe supported actions include:\n\n* Add box: Hold shift then click and drag anywhere on the plot or double\n  tap once to start drawing, move the mouse and double tap again to finish\n  drawing.\n\n* Move box: Click and drag an existing box, the box will be dropped once\n  you let go of the mouse button.\n\n* Delete box: Tap a box to select it then press <<backspace>> key while the\n  mouse is within the plot area.\n\nTo **Move** or **Delete** multiple boxes at once:\n\n* Move selection: Select box(es) with <<shift>>+tap (or another selection\n  tool) then drag anywhere on the plot. Selecting and then dragging on a\n  specific box will move both.\n\n* Delete selection: Select box(es) with <<shift>>+tap (or another selection\n  tool) then press <<backspace>> while the mouse is within the plot area.\n\n.. |box_edit_icon| image:: /_images/icons/BoxEdit.png\n    :height: 24px",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "Defines a limit on the number of boxes that can be drawn. By default there\nis no limit on the number of objects, but if enabled the oldest drawn box\nwill be dropped to make space for the new box being added.",
        "default": 0
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the box drawing is to be free in. By default, users may\nfreely draw boxes with any dimensions. If only \"width\" is set, the box will\nbe constrained to span the entire vertical space of the plot, only the\nhorizontal dimension can be controlled. If only \"height\" is set, the box\nwill be constrained to span the entire horizontal space of the plot, and the\nvertical dimension can be controlled.",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "BoxSelectTool",
    "fullname": "bokeh.models.tools.BoxSelectTool",
    "bases": [
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": "*toolbar icon*: |box_select_icon|\n\nThe box selection tool allows users to make selections on a Plot by showing\na rectangular region by dragging the mouse or a finger over the plot area.\nThe end of the drag event indicates the selection region is ready.\n\nSee :ref:`userguide_styling_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n\n.. |box_select_icon| image:: /_images/icons/BoxSelect.png\n    :height: 24px",
    "props": [
      {
        "name": "origin",
        "type": "Enum('corner', 'center')",
        "desc": "Indicates whether the rectangular selection area should originate from a corner\n(top-left or bottom-right depending on direction) or the center of the box.",
        "default": "corner"
      },
      {
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "default": "{\"__type__\": \"bokeh.models.annotations.BoxAnnotation\", \"bottom_units\": \"screen\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"right_units\": \"screen\", \"syncable\": false, \"top_units\": \"screen\"}"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.",
        "default": "auto"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "select_every_mousemove",
        "type": "Bool",
        "desc": "Whether a selection computation should happen on every mouse event, or only\nonce, when the selection region is completed. Default: False",
        "default": false
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the box selection is to be free in. By default, users may\nfreely draw selections boxes with any dimensions. If only \"width\" is set,\nthe box will be constrained to span the entire vertical space of the plot,\nonly the horizontal dimension can be controlled. If only \"height\" is set,\nthe box will be constrained to span the entire horizontal space of the\nplot, and the vertical dimension can be controlled.",
        "default": "both"
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that have a matching\nvalue for their ``name`` attribute will be used.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "Defines what should happen when a new selection is made. The default\nis to replace the existing selection. Other options are to append to\nthe selection, intersect with it or subtract from it.",
        "default": "replace"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "BoxZoomTool",
    "fullname": "bokeh.models.tools.BoxZoomTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "desc": "*toolbar icon*: |box_zoom_icon|\n\nThe box zoom tool allows users to define a rectangular egion of a Plot to\nzoom to by dragging he mouse or a finger over the plot region. The end of\nthe drag event indicates the selection region is ready.\n\n.. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n    :height: 24px\n\n.. note::\n    ``BoxZoomTool`` is incompatible with ``GMapPlot`` due to the manner in\n    which Google Maps exert explicit control over aspect ratios. Adding\n    this tool to a ``GMapPlot`` will have no effect.",
    "props": [
      {
        "name": "origin",
        "type": "Enum('corner', 'center')",
        "desc": "Indicates whether the rectangular zoom area should originate from a corner\n(top-left or bottom-right depending on direction) or the center of the box.",
        "default": "corner"
      },
      {
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "default": "{\"__type__\": \"bokeh.models.annotations.BoxAnnotation\", \"bottom_units\": \"screen\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"right_units\": \"screen\", \"syncable\": false, \"top_units\": \"screen\"}"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the zoom box is to be free in. By default, users may\nfreely draw zoom boxes with any dimensions. If only \"width\" is supplied,\nthe box will be constrained to span the entire vertical space of the plot,\nonly the horizontal dimension can be controlled. If only \"height\" is\nsupplied, the box will be constrained to span the entire horizontal space\nof the plot, and the vertical dimension can be controlled.",
        "default": "both"
      },
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "Whether the box zoom region should be restricted to have the same\naspect ratio as the plot region.\n\n.. note::\n    If the tool is restricted to one dimension, this value has\n    no effect.",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "Button",
    "fullname": "bokeh.models.widgets.buttons.Button",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "desc": "A click button.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "A style for the button, signifying it's role.",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "The text label for the button to display.",
        "default": "Button"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "An optional image appearing to the left of button's text.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "ButtonGroup",
    "fullname": "bokeh.models.widgets.groups.ButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "desc": "Abstract base class for groups with items rendered as buttons.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the button group either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "A style for the button, signifying it's role.",
        "default": "default"
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "CDSView",
    "fullname": "bokeh.models.sources.CDSView",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A view into a ``ColumnDataSource`` that represents a row-wise subset.\n\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "source",
        "type": "Instance(ColumnarDataSource)",
        "desc": "The ``ColumnDataSource`` associated with this view. Used to determine\nthe length of the columns.",
        "default": "<Undefined>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "filters",
        "type": "List(Instance(Filter))",
        "desc": "List of filters that the view comprises.",
        "default": []
      }
    ]
  },
  {
    "name": "Callback",
    "fullname": "bokeh.models.callbacks.Callback",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for interactive callback.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CanvasTexture",
    "fullname": "bokeh.models.textures.CanvasTexture",
    "bases": [
      "bokeh.models.textures.Texture"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "repetition",
        "type": "Enum('repeat', 'repeat_x', 'repeat_y', 'no_repeat')",
        "desc": "    ",
        "default": "repeat"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "code",
        "type": "NonNullable(String)",
        "desc": "A snippet of JavaScript code to execute in the browser.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "CategoricalAxis",
    "fullname": "bokeh.models.axes.CategoricalAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "desc": "An axis that displays ticks and labels for categorical ranges.\n\nThe ``CategoricalAxis`` can handle factor ranges with up to two levels of\nnesting, including drawing a separator line between top-level groups of\nfactors.",
    "props": [
      {
        "name": "group_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": "bottom"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "separator_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.",
        "default": "butt"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 4
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "The line width of the axis line.",
        "default": 1
      },
      {
        "name": "separator_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.",
        "default": "bevel"
      },
      {
        "name": "group_text_line_height",
        "type": "Float",
        "desc": "The text line height of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": 1.2
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.",
        "default": null
      },
      {
        "name": "separator_line_width",
        "type": "Float",
        "desc": "The line width of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.",
        "default": 2
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.",
        "default": "auto"
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.",
        "default": "horizontal"
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "default": []
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "group_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": "left"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "alphabetic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.",
        "default": 2
      },
      {
        "name": "subgroup_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": "11px"
      },
      {
        "name": "separator_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.",
        "default": "lightgrey"
      },
      {
        "name": "group_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": "bold"
      },
      {
        "name": "separator_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.",
        "default": 0
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.",
        "default": 5
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "group_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": 1.0
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": "black"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the axis label.",
        "default": 1.0
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the axis line.",
        "default": 1.0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "default": "bottom"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "group_text_font",
        "type": "String",
        "desc": "The text font of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": "helvetica"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "The text font of the axis label.",
        "default": "helvetica"
      },
      {
        "name": "separator_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.",
        "default": 1.0
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "subgroup_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": 1.0
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the axis label.",
        "default": "#444444"
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "subgroup_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": "bottom"
      },
      {
        "name": "separator_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the separator line between top-level categorical groups.\n\nThis property always applies to factors in the outermost level of nesting.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "subgroup_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)",
        "desc": "What direction the subgroup label text should be oriented.\n\nIf a number is supplied, the angle of the text is measured from horizontal.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": "parallel"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "subgroup_text_font",
        "type": "String",
        "desc": "The text font of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": "helvetica"
      },
      {
        "name": "subgroup_text_line_height",
        "type": "Float",
        "desc": "The text line height of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": 1.2
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the axis line.",
        "default": "black"
      },
      {
        "name": "subgroup_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": "#444444"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the axis label.",
        "default": "italic"
      },
      {
        "name": "group_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)",
        "desc": "What direction the group label text should be oriented.\n\nIf a number is supplied, the angle of the text is measured from horizontal.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": "parallel"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "default": "left"
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "group_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": "11px"
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.",
        "default": null
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "default": "{\"__type__\": \"bokeh.models.tickers.CategoricalTicker\"}"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "subgroup_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": "bold"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "default": 0
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the axis label.",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.",
        "default": "{\"__type__\": \"bokeh.models.formatters.CategoricalTickFormatter\"}"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the axis label.",
        "default": "13px"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "center"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 6
      },
      {
        "name": "group_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the group categorical labels.\n\nThis property always applies to factors in the outermost level of nesting.\nIf the list of categorical factors is flat (i.e. no nesting) then this\nproperty has no effect.",
        "default": "grey"
      },
      {
        "name": "subgroup_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the subgroup categorical labels.\n\nThis property always applies to factors in the middle level of nesting.\nIf the list of categorical factors is has only zero or one levels of nesting,\nthen this property has no effect.",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.",
        "default": 5
      }
    ]
  },
  {
    "name": "CategoricalColorMapper",
    "fullname": "bokeh.models.mappers.CategoricalColorMapper",
    "bases": [
      "bokeh.models.mappers.CategoricalMapper",
      "bokeh.models.mappers.ColorMapper"
    ],
    "desc": "Map categorical factors to colors.\n\nValues that are passed to this mapper that are not in the factors list\nwill be mapped to ``nan_color``.",
    "props": [
      {
        "name": "start",
        "type": "Int",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n``start=1`` will perform color mapping only based on the second sub-factor\n(i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)",
        "default": 0
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "A sequence of factors / categories that map to the some target range. For\nexample the following color mapper:\n\n.. code-block:: python\n\n    mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\nwill map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n``end=1`` will perform color mapping only based on the first sub-factor\n(i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\nIf ``None`` then all sub-factors from ``start`` to the end of the\nfactor will be used for color mapping.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "gray"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "CategoricalMapper",
    "fullname": "bokeh.models.mappers.CategoricalMapper",
    "bases": [
      "bokeh.models.mappers.Mapper"
    ],
    "desc": "Base class for mappers that map categorical factors to other values.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "start",
        "type": "Int",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n``start=1`` will perform color mapping only based on the second sub-factor\n(i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)",
        "default": 0
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "A sequence of factors / categories that map to the some target range. For\nexample the following color mapper:\n\n.. code-block:: python\n\n    mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\nwill map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n``end=1`` will perform color mapping only based on the first sub-factor\n(i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\nIf ``None`` then all sub-factors from ``start`` to the end of the\nfactor will be used for color mapping.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "CategoricalMarkerMapper",
    "fullname": "bokeh.models.mappers.CategoricalMarkerMapper",
    "bases": [
      "bokeh.models.mappers.CategoricalMapper"
    ],
    "desc": "Map categorical factors to marker types.\n\nValues that are passed to this mapper that are not in the factors list\nwill be mapped to ``default_value``.\n\n.. note::\n    This mappers is primarily only useful with the ``Scatter`` marker\n    glyph that be parameterized by marker type.",
    "props": [
      {
        "name": "start",
        "type": "Int",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n``start=1`` will perform color mapping only based on the second sub-factor\n(i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)",
        "default": 0
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "A sequence of factors / categories that map to the some target range. For\nexample the following color mapper:\n\n.. code-block:: python\n\n    mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\nwill map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n``end=1`` will perform color mapping only based on the first sub-factor\n(i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\nIf ``None`` then all sub-factors from ``start`` to the end of the\nfactor will be used for color mapping.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "markers",
        "type": "Seq(MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'))",
        "desc": "A sequence of marker types to use as the target for mapping.",
        "default": "<Undefined>"
      },
      {
        "name": "default_value",
        "type": "MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y')",
        "desc": "A marker type to use in case an unrecognized factor is passed in to be\nmapped.",
        "default": "circle"
      }
    ]
  },
  {
    "name": "CategoricalPatternMapper",
    "fullname": "bokeh.models.mappers.CategoricalPatternMapper",
    "bases": [
      "bokeh.models.mappers.CategoricalMapper"
    ],
    "desc": "Map categorical factors to hatch fill patterns.\n\nValues that are passed to this mapper that are not in the factors list\nwill be mapped to ``default_value``.\n\nAdded in version 1.1.1",
    "props": [
      {
        "name": "start",
        "type": "Int",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n``start=1`` will perform color mapping only based on the second sub-factor\n(i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)",
        "default": 0
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "A sequence of factors / categories that map to the some target range. For\nexample the following color mapper:\n\n.. code-block:: python\n\n    mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\nwill map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "A start index to \"slice\" data factors with before mapping.\n\nFor example, if the data to color map consists of 2-level factors such\nas ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n``end=1`` will perform color mapping only based on the first sub-factor\n(i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\nIf ``None`` then all sub-factors from ``start`` to the end of the\nfactor will be used for color mapping.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "patterns",
        "type": "Seq(HatchPatternType)",
        "desc": "A sequence of marker types to use as the target for mapping.",
        "default": "<Undefined>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "default_value",
        "type": "HatchPatternType",
        "desc": "A hatch pattern to use in case an unrecognized factor is passed in to be\nmapped.",
        "default": " "
      }
    ]
  },
  {
    "name": "CategoricalScale",
    "fullname": "bokeh.models.scales.CategoricalScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "desc": "Represent a scale transformation between a categorical source range and\ncontinuous target range.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CategoricalTickFormatter",
    "fullname": "bokeh.models.formatters.CategoricalTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": "Display tick values from categorical ranges as string\nvalues.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CategoricalTicker",
    "fullname": "bokeh.models.tickers.CategoricalTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "desc": "Generate ticks for categorical ranges.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CellEditor",
    "fullname": "bokeh.models.widgets.tables.CellEditor",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Abstract base class for data table's cell editors.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CellFormatter",
    "fullname": "bokeh.models.widgets.tables.CellFormatter",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Abstract base class for data table's cell formatters.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CheckboxButtonGroup",
    "fullname": "bokeh.models.widgets.groups.CheckboxButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "desc": "A group of check boxes rendered as toggle buttons.\n\n    ",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the button group either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "A style for the button, signifying it's role.",
        "default": "default"
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "active",
        "type": "List(Int)",
        "desc": "The list of indices of selected check boxes.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "CheckboxEditor",
    "fullname": "bokeh.models.widgets.tables.CheckboxEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Boolean value cell editor.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CheckboxGroup",
    "fullname": "bokeh.models.widgets.groups.CheckboxGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "desc": "A group of check boxes.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "active",
        "type": "List(Int)",
        "desc": "The list of indices of selected check boxes.",
        "default": []
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "Should items be arrange vertically (``False``) or horizontally\nin-line (``True``).",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Circle",
    "fullname": "bokeh.models.glyphs.Circle",
    "bases": [
      "bokeh.models.glyphs.Marker"
    ],
    "desc": "Render circle markers. \n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Circle.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the markers.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the markers.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the markers.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the markers.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "size",
        "type": "SizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "default": 4
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the markers.",
        "default": "butt"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "radius_dimension",
        "type": "Enum('x', 'y', 'max', 'min')",
        "desc": "What dimension to measure circle radii along.\n\nWhen the data space aspect ratio is not 1-1, then the size of the drawn\ncircles depends on what direction is used to measure the \"distance\" of\nthe radius. This property allows that direction to be controlled.\n\nSetting this dimension to 'max' will calculate the radius on both the x\nand y dimensions and use the maximum of the two, 'min' selects the minimum.",
        "default": "x"
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "default": 0.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the markers.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the markers.",
        "default": null
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "radius",
        "type": "NullDistanceSpec(units_default='data')",
        "desc": "The radius values for circle markers (in |data units|, by default).\n\n.. note::\n    Circle markers are slightly unusual in that they support specifying\n    a radius in addition to a size. Only one of ``radius`` or ``size``\n    should be given.\n\n.. warning::\n    Note that ``Circle`` glyphs are always drawn as circles on the screen,\n    even in cases where the data space aspect ratio is not 1-1. In all\n    cases where radius values are specified, the \"distance\" for the radius\n    is measured along the dimension specified by ``radius_dimension``. If\n    the aspect ratio is very large or small, the drawn circles may appear\n    much larger or smaller than expected. See :bokeh-issue:`626` for more\n    information.",
        "default": null
      },
      {
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "hit_dilation",
        "type": "Size",
        "desc": "The factor by which to dilate the hit radius\nwhich is responsible for defining the range in which a\nmarker responds to interactions with the Hover and Tap\ntools.",
        "default": 1.0
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the markers.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the markers.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the markers.",
        "default": 1.0
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the markers.",
        "default": "black"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the markers.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the markers.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "ColorBar",
    "fullname": "bokeh.models.annotations.ColorBar",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": "Render a color bar based on a color mapper.\n\nSee :ref:`userguide_annotations_color_bars` for information on plotting color bars.",
    "props": [
      {
        "name": "orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Auto)",
        "desc": "Whether the color bar should be oriented vertically or horizontally.",
        "default": "auto"
      },
      {
        "name": "bar_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the color scale bar outline.",
        "default": "bevel"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance (in pixels) that major ticks should extend out of the\nmain plot area.",
        "default": 0
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "#ffffff"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "title_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align values for the title text.",
        "default": "left"
      },
      {
        "name": "title_standoff",
        "type": "Int",
        "desc": "The distance (in pixels) to separate the title from the color bar.",
        "default": 2
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "The line dash for the color bar border outline.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "bar_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset for the color scale bar outline.",
        "default": 0
      },
      {
        "name": "title_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha values for the title text.",
        "default": 1.0
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "bottom"
      },
      {
        "name": "title_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style values for the title text.",
        "default": "italic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance (in pixels) that major ticks should extend into the\nmain plot area.",
        "default": 5
      },
      {
        "name": "bar_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the color scale bar outline.",
        "default": "butt"
      },
      {
        "name": "title_text_line_height",
        "type": "Float",
        "desc": "The text line height values for the title text.",
        "default": 1.2
      },
      {
        "name": "title_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline values for the title text.",
        "default": "bottom"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance (in pixels) that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "The line width for the color bar border outline.",
        "default": 1
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": null
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the color bar border outline.",
        "default": "bevel"
      },
      {
        "name": "width",
        "type": "Either(Auto, Int)",
        "desc": "The width (in pixels) that the color scale should occupy.",
        "default": "auto"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "title_text_font_size",
        "type": "FontSize",
        "desc": "The text font size values for the title text.",
        "default": "13px"
      },
      {
        "name": "bar_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color for the color scale bar outline.",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "The title text to render.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "margin",
        "type": "Int",
        "desc": "Amount of margin (in pixels) around the outside of the color bar.",
        "default": 30
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color for the color bar border outline.",
        "default": null
      },
      {
        "name": "scale_alpha",
        "type": "Float",
        "desc": "The alpha with which to render the color scale.",
        "default": 1.0
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "bar_line_width",
        "type": "Float",
        "desc": "The line width for the color scale bar outline.",
        "default": 1
      },
      {
        "name": "label_standoff",
        "type": "Int",
        "desc": "The distance (in pixels) to separate the tick labels from the color bar.",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "title_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color values for the title text.",
        "default": "#444444"
      },
      {
        "name": "color_mapper",
        "type": "Instance(ColorMapper)",
        "desc": "A color mapper containing a color palette to render.\n\n.. warning::\n    If the `low` and `high` attributes of the ``ColorMapper`` aren't set, ticks\n    and tick labels won't be rendered. Additionally, if a ``LogTicker`` is\n    passed to the `ticker` argument and either or both of the logarithms\n    of `low` and `high` values of the color_mapper are non-numeric\n    (i.e. `low=0`), the tick and tick labels won't be rendered.",
        "default": "<Undefined>"
      },
      {
        "name": "title_text_font",
        "type": "String",
        "desc": "The text font values for the title text.",
        "default": "helvetica"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the color bar background style.",
        "default": "#ffffff"
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha for the color bar border outline.",
        "default": 1.0
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "bar_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha for the color scale bar outline.",
        "default": 1.0
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the color bar background style.",
        "default": 0.95
      },
      {
        "name": "height",
        "type": "Either(Auto, Int)",
        "desc": "The height (in pixels) that the color scale should occupy.",
        "default": "auto"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "ticker",
        "type": "Either(Instance(Ticker), Auto)",
        "desc": "A Ticker to use for computing locations of axis components.",
        "default": "auto"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset for the color bar border outline.",
        "default": 0
      },
      {
        "name": "location",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Float, Float))",
        "desc": "The location where the color bar should draw itself. It's either one of\n``bokeh.core.enums.Anchor``'s enumerated values, or a ``(x, y)``\ntuple indicating an absolute location absolute location in screen\ncoordinates (pixels from the bottom-left corner).\n\n.. warning::\n    If the color bar is placed in a side panel, the location will likely\n    have to be set to `(0,0)`.",
        "default": "top_right"
      },
      {
        "name": "bar_line_dash",
        "type": "DashPattern",
        "desc": "The line dash for the color scale bar outline.",
        "default": []
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.NoOverlap\"}"
      },
      {
        "name": "formatter",
        "type": "Either(Instance(TickFormatter), Auto)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance of ticks.",
        "default": "auto"
      },
      {
        "name": "padding",
        "type": "Int",
        "desc": "Amount of padding (in pixels) between the color scale and color bar border.",
        "default": 10
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the color bar border outline.",
        "default": "butt"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "left"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance (in pixels) that major ticks should extend out of the\nmain plot area.",
        "default": 0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      }
    ]
  },
  {
    "name": "ColorMapper",
    "fullname": "bokeh.models.mappers.ColorMapper",
    "bases": [
      "bokeh.models.mappers.Mapper"
    ],
    "desc": "Base class for color mapper types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "gray"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "ColorPicker",
    "fullname": "bokeh.models.widgets.inputs.ColorPicker",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": "Color picker widget\n\n.. warning::\n    This widget as a limited support on *Internet Explorer* (it will be displayed\n    as a simple text input).",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "color",
        "type": "ColorHex",
        "desc": "The initial color of the picked color (named or hexadecimal)\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "#000000"
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Column",
    "fullname": "bokeh.models.layouts.Column",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "desc": "Lay out child components in a single vertical row.\n\nChildren can be specified as positional arguments, as a single argument\nthat is a sequence, or using the ``children`` keyword argument.",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "rows",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), height=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "Describes how the component should maintain its rows' heights.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion.",
        "default": "auto"
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "The gap between children (in pixels).",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "default": []
      }
    ]
  },
  {
    "name": "ColumnDataSource",
    "fullname": "bokeh.models.sources.ColumnDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "desc": "Maps names of columns to sequences or arrays.\n\nThe ``ColumnDataSource`` is a fundamental data structure of Bokeh. Most\nplots, data tables, etc. will be driven by a ``ColumnDataSource``.\n\nIf the ``ColumnDataSource`` initializer is called with a single argument that\ncan be any of the following:\n\n* A Python ``dict`` that maps string names to sequences of values, e.g.\n  lists, arrays, etc.\n\n  .. code-block:: python\n\n      data = {'x': [1,2,3,4], 'y': np.array([10.0, 20.0, 30.0, 40.0])}\n\n      source = ColumnDataSource(data)\n\n.. note::\n    ``ColumnDataSource`` only creates a shallow copy of ``data``. Use e.g.\n    ``ColumnDataSource(copy.deepcopy(data))`` if initializing from another\n    ``ColumnDataSource.data`` object that you want to keep independent.\n\n* A Pandas ``DataFrame`` object\n\n  .. code-block:: python\n\n      source = ColumnDataSource(df)\n\n  In this case the CDS will have columns corresponding to the columns of\n  the ``DataFrame``. If the ``DataFrame`` columns have multiple levels,\n  they will be flattened using an underscore (e.g. level_0_col_level_1_col).\n  The index of the ``DataFrame`` will be flattened to an ``Index`` of tuples\n  if it's a ``MultiIndex``, and then reset using ``reset_index``. The result\n  will be a column with the same name if the index was named, or\n  level_0_name_level_1_name if it was a named ``MultiIndex``. If the\n  ``Index`` did not have a name or the ``MultiIndex`` name could not be\n  flattened/determined, the ``reset_index`` function will name the index column\n  ``index``, or ``level_0`` if the name ``index`` is not available.\n\n* A Pandas ``GroupBy`` object\n\n  .. code-block:: python\n\n      group = df.groupby(('colA', 'ColB'))\n\n  In this case the CDS will have columns corresponding to the result of\n  calling ``group.describe()``. The ``describe`` method generates columns\n  for statistical measures such as ``mean`` and ``count`` for all the\n  non-grouped original columns. The CDS columns are formed by joining\n  original column names with the computed measure. For example, if a\n  ``DataFrame`` has columns ``'year'`` and ``'mpg'``. Then passing\n  ``df.groupby('year')`` to a CDS will result in columns such as\n  ``'mpg_mean'``\n\n  If the ``GroupBy.describe`` result has a named index column, then\n  CDS will also have a column with this name. However, if the index name\n  (or any subname of a ``MultiIndex``) is ``None``, then the CDS will have\n  a column generically named ``index`` for the index.\n\n  Note this capability to adapt ``GroupBy`` objects may only work with\n  Pandas ``>=0.20.0``.\n\n.. note::\n    There is an implicit assumption that all the columns in a given\n    ``ColumnDataSource`` all have the same length at all times. For this\n    reason, it is usually preferable to update the ``.data`` property\n    of a data source \"all at once\".",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "Mapping of column names to sequences of data. The columns can be, e.g,\nPython lists or tuples, NumPy arrays, etc.\n\nThe .data attribute can also be set from Pandas DataFrames or GroupBy\nobjects. In these cases, the behaviour is identical to passing the objects\nto the ``ColumnDataSource`` initializer.",
        "default": {}
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "An instance of a ``SelectionPolicy`` that determines how selections are set.",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      }
    ]
  },
  {
    "name": "ColumnarDataSource",
    "fullname": "bokeh.models.sources.ColumnarDataSource",
    "bases": [
      "bokeh.models.sources.DataSource"
    ],
    "desc": "A base class for data source types, which can be mapped onto\na columnar format.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "An instance of a ``SelectionPolicy`` that determines how selections are set.",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      }
    ]
  },
  {
    "name": "CompositeTicker",
    "fullname": "bokeh.models.tickers.CompositeTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": "Combine different tickers at different scales.\n\nUses the ``min_interval`` and ``max_interval`` interval attributes\nof the tickers to select the appropriate ticker at different\nscales.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tickers",
        "type": "Seq(Instance(Ticker))",
        "desc": "A list of Ticker objects to combine at different scales in order\nto generate tick values. The supplied tickers should be in order.\nSpecifically, if S comes before T, then it should be the case that::\n\n    S.get_max_interval() < T.get_min_interval()",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "ConnectedXYGlyph",
    "fullname": "bokeh.models.glyph.ConnectedXYGlyph",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": "Base class of glyphs with `x` and `y` coordinate attributes and\na connected topology.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "ContinuousAxis",
    "fullname": "bokeh.models.axes.ContinuousAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "desc": "A base class for all numeric, non-categorical axes types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 4
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "The line width of the axis line.",
        "default": 1
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.",
        "default": "auto"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.",
        "default": "horizontal"
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "default": []
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "alphabetic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.",
        "default": 2
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the axis line.",
        "default": "black"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the axis label.",
        "default": "italic"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.",
        "default": 5
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": "black"
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.",
        "default": null
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "default": "<Undefined>"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the axis label.",
        "default": 1.0
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the axis line.",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "default": "bottom"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the axis label.",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.",
        "default": "<Undefined>"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the axis label.",
        "default": "13px"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "The text font of the axis label.",
        "default": "helvetica"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "center"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 6
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.",
        "default": 5
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the axis label.",
        "default": "#444444"
      }
    ]
  },
  {
    "name": "ContinuousColorMapper",
    "fullname": "bokeh.models.mappers.ContinuousColorMapper",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ],
    "desc": "Base class for continuous color mapper types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "A collection of glyph renderers to pool data from for establishing data metrics.\nIf empty, mapped data will be used instead.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is higher than ``high`` value. If None,\nvalues higher than ``high`` are mapped to the last color in the palette.",
        "default": null
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\nvalues lower than ``low`` are mapped to the first color in the palette.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "gray"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "The minimum value of the range to map into the palette. Values below\nthis are clamped to ``low``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "The maximum value of the range to map into the palette. Values above\nthis are clamped to ``high``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "ContinuousScale",
    "fullname": "bokeh.models.scales.ContinuousScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "desc": "Represent a scale transformation between continuous ranges.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "ContinuousTicker",
    "fullname": "bokeh.models.tickers.ContinuousTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "desc": "A base class for non-categorical ticker types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "CoordinateMapping",
    "fullname": "bokeh.models.canvas.CoordinateMapping",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A mapping between two coordinate systems. ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "y_source",
        "type": "Instance(Range)",
        "desc": "",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "y_target",
        "type": "Instance(Range)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "x_target",
        "type": "Instance(Range)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": "",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "x_source",
        "type": "Instance(Range)",
        "desc": "",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": "",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      }
    ]
  },
  {
    "name": "CoordinateTransform",
    "fullname": "bokeh.models.expressions.CoordinateTransform",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": "Base class for coordinate transforms. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "CrosshairTool",
    "fullname": "bokeh.models.tools.CrosshairTool",
    "bases": [
      "bokeh.models.tools.InspectTool"
    ],
    "desc": "*toolbar icon*: |crosshair_icon|\n\nThe crosshair tool is a passive inspector tool. It is generally on at all\ntimes, but can be configured in the inspector's menu associated with the\n*toolbar icon* shown above.\n\nThe crosshair tool draws a crosshair annotation over the plot, centered on\nthe current mouse position. The crosshair tool may be configured to draw\nacross only one dimension by setting the ``dimension`` property to only\n``width`` or ``height``.\n\n.. |crosshair_icon| image:: /_images/icons/Crosshair.png\n    :height: 24px",
    "props": [
      {
        "name": "toggleable",
        "type": "Bool",
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\ninspection tool. If ``False``, the viewers of a plot will not be able to\ntoggle the inspector on or off using the toolbar.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "Stroke width in units of pixels.",
        "default": 1
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the crosshair tool is to track. By default, both vertical\nand horizontal lines will be drawn. If only \"width\" is supplied, only a\nhorizontal line will be drawn. If only \"height\" is supplied, only a\nvertical line will be drawn.",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "line_color",
        "type": "Color",
        "desc": "A color to use to stroke paths with.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "An alpha value to use to stroke paths with.\n\nAcceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque).",
        "default": 1.0
      }
    ]
  },
  {
    "name": "CumSum",
    "fullname": "bokeh.models.expressions.CumSum",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": "An expression for generating arrays by cumulatively summing a single\ncolumn from a ``ColumnDataSource``.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "The name of a ``ColumnDataSource`` column to cumulatively sum for new values.",
        "default": "<Undefined>"
      },
      {
        "name": "include_zero",
        "type": "Bool",
        "desc": "Whether to include zero at the start of the result. Note that the length\nof the result is always the same as the input column. Therefore if this\nproperty is True, then the last value of the column will not be included\nin the sum.\n\n.. code-block:: python\n\n    source = ColumnDataSource(data=dict(foo=[1, 2, 3, 4]))\n\n    CumSum(field='foo')\n    # -> [1, 3, 6, 10]\n\n    CumSum(field='foo', include_zero=True)\n    # -> [0, 1, 3, 6]",
        "default": false
      }
    ]
  },
  {
    "name": "CustomAction",
    "fullname": "bokeh.models.tools.CustomAction",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "Execute a custom action, e.g. ``CustomJS`` callback when a toolbar\nicon is activated.\n\nExample:\n\n    .. code-block:: python\n\n        tool = CustomAction(icon=\"icon.png\",\n                            callback=CustomJS(code='alert(\"foo\")'))\n\n        plot.add_tools(tool)",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": "Perform a Custom Action"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "icon",
        "type": "Image",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": "<Undefined>"
      },
      {
        "name": "callback",
        "type": "Nullable(Instance(Callback))",
        "desc": "A Bokeh callback to execute when the custom action icon is activated.",
        "default": null
      }
    ]
  },
  {
    "name": "CustomJS",
    "fullname": "bokeh.models.callbacks.CustomJS",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "desc": "Execute a JavaScript function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "code",
        "type": "String",
        "desc": "A snippet of JavaScript code to execute in the browser. The\ncode is made into the body of a function, and all of of the named objects in\n``args`` are available as parameters that the code can use. Additionally,\na ``cb_obj`` parameter contains the object that triggered the callback\nand an optional ``cb_data`` parameter that contains any tool-specific data\n(i.e. mouse coordinates and hovered glyph indices for the ``HoverTool``).",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback.",
        "default": {}
      }
    ]
  },
  {
    "name": "CustomJSExpr",
    "fullname": "bokeh.models.expressions.CustomJSExpr",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": "Evaluate a JavaScript function/generator.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "code",
        "type": "String",
        "desc": "A snippet of JavaScript code to execute in the browser. The code is made into\nthe body of a generator function, and all of of the named objects in ``args``\nare available as parameters that the code can use. One can either return an\narray-like object (array, typed array, nd-array), an iterable (which will\nbe converted to an array) or a scalar value (which will be converted into\nan array of an appropriate length), or alternatively yield values that will\nbe collected into an array.",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback. There is no need to manually include the data\nsource of the associated glyph renderer, as it is available within the scope of\nthe code via `this` keyword (e.g. `this.data` will give access to raw data).",
        "default": {}
      }
    ]
  },
  {
    "name": "CustomJSFilter",
    "fullname": "bokeh.models.filters.CustomJSFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": "Filter data sources with a custom defined JavaScript function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "code",
        "type": "String",
        "desc": "A snippet of JavaScript code to filter data contained in a columnar data source.\nThe code is made into the body of a function, and all of of the named objects in\n``args`` are available as parameters that the code can use. The variable\n``source`` will contain the data source that is associated with the ``CDSView`` this\nfilter is added to.\n\nThe code should either return the indices of the subset or an array of booleans\nto use to subset data source rows.\n\nExample:\n\n    .. code-block\n\n        code = '''\n        const indices = []\n        for (let i = 0; i <= source.data['some_column'].length; i++) {\n            if (source.data['some_column'][i] == 'some_value') {\n                indices.push(i)\n            }\n        }\n        return indices\n        '''",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "args",
        "type": "RestrictedDict(String, AnyRef)",
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the callback's code snippet as the values of\nnamed parameters to the callback.",
        "default": {}
      }
    ]
  },
  {
    "name": "CustomJSHover",
    "fullname": "bokeh.models.tools.CustomJSHover",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Define a custom formatter to apply to a hover tool field.\n\nThis model can be configured with JavaScript code to format hover tooltips.\nThe JavaScript code has access to the current value to format, some special\nvariables, and any format configured on the tooltip. The variable ``value``\nwill contain the untransformed value. The variable ``special_vars`` will\nprovide a dict with the following contents:\n\n* ``x`` data-space x-coordinate of the mouse\n* ``y`` data-space y-coordinate of the mouse\n* ``sx`` screen-space x-coordinate of the mouse\n* ``sy`` screen-space y-coordinate of the mouse\n* ``data_x`` data-space x-coordinate of the hovered glyph\n* ``data_y`` data-space y-coordinate of the hovered glyph\n* ``indices`` column indices of all currently hovered glyphs\n* ``name`` value of the ``name`` property of the hovered glyph renderer\n\nIf the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\nthen a ``segment_index`` key will also be present.\n\nFinally, the value of the format passed in the tooltip specification is\navailable as the ``format`` variable.\n\nExample:\n\n    As an example, the following code adds a custom formatter to format\n    WebMercator northing coordinates (in meters) as a latitude:\n\n    .. code-block:: python\n\n        lat_custom = CustomJSHover(code=\"\"\"\n            const projections = Bokeh.require(\"core/util/projections\");\n            const x = special_vars.x\n            const y = special_vars.y\n            const coords = projections.wgs84_mercator.invert(x, y)\n            return \"\" + coords[1]\n        \"\"\")\n\n        p.add_tools(HoverTool(\n            tooltips=[( 'lat','@y{custom}' )],\n            formatters={'@y':lat_custom}\n        ))\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "code",
        "type": "String",
        "desc": "A snippet of JavaScript code to transform a single value. The variable\n``value`` will contain the untransformed value and can be expected to be\npresent in the function namespace at render time. Additionally, the\nvariable ``special_vars`` will be available, and will provide a dict\nwith the following contents:\n\n* ``x`` data-space x-coordinate of the mouse\n* ``y`` data-space y-coordinate of the mouse\n* ``sx`` screen-space x-coordinate of the mouse\n* ``sy`` screen-space y-coordinate of the mouse\n* ``data_x`` data-space x-coordinate of the hovered glyph\n* ``data_y`` data-space y-coordinate of the hovered glyph\n* ``indices`` column indices of all currently hovered glyphs\n\nIf the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\nthen a ``segment_index`` key will also be present.\n\nFinally, the value of the format passed in the tooltip specification is\navailable as the ``format`` variable.\n\nThe snippet will be made into the body of a function and therefore requires\na return statement.\n\nExample:\n\n    .. code-block:: javascript\n\n        code = '''\n        return value + \" total\"\n        '''",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "args",
        "type": "Dict(String, Instance(Model))",
        "desc": "A mapping of names to Bokeh plot objects. These objects are made available\nto the callback code snippet as the values of named parameters to the\ncallback.",
        "default": {}
      }
    ]
  },
  {
    "name": "CustomJSTransform",
    "fullname": "bokeh.models.transforms.CustomJSTransform",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": "Apply a custom defined transform to data.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "v_func",
        "type": "String",
        "desc": "A snippet of JavaScript code to transform an array of values. The variable\n``xs`` will contain the untransformed array and can be expected to be\npresent in the function namespace at render time. The snippet will be\ninto the body of a function and therefore requires a return statement.\n\nExample:\n\n    .. code-block:: javascript\n\n        v_func = '''\n        const new_xs = new Array(xs.length)\n        for(let i = 0; i < xs.length; i++) {\n            new_xs[i] = xs[i] + 0.5\n        }\n        return new_xs\n        '''\n\n.. warning::\n    The vectorized function, ``v_func``, must return an array of the\n    same length as the input ``xs`` array.",
        "default": ""
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "func",
        "type": "String",
        "desc": "A snippet of JavaScript code to transform a single value. The variable\n``x`` will contain the untransformed value and can be expected to be\npresent in the function namespace at render time. The snippet will be\ninto the body of a function and therefore requires a return statement.\n\nExample:\n\n    .. code-block:: javascript\n\n        func = '''\n        return Math.floor(x) + 0.5\n        '''",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the transform' code snippet as the values of\nnamed parameters to the callback.",
        "default": {}
      }
    ]
  },
  {
    "name": "CustomLabelingPolicy",
    "fullname": "bokeh.models.labeling.CustomLabelingPolicy",
    "bases": [
      "bokeh.models.labeling.LabelingPolicy"
    ],
    "desc": "Select labels based on a user-defined policy function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing it to Bokeh.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "code",
        "type": "String",
        "desc": "A snippet of JavaScript code that selects a subset of labels for display.\n\nThe following arguments a are available:\n\n  * ``indices``, a set-like object containing label indices to filter\n  * ``bboxes``, an array of bounding box objects per label\n  * ``distance(i, j)``, a function computing distance (in axis dimensions)\n      between labels. If labels i and j overlap, then ``distance(i, j) <= 0``.\n  * the keys of ``args`` mapping, if any\n\nExample:\n\n    Only display labels at even indices:\n\n    .. code-block:: javascript\n\n        code = '''\n        for (const i of indices)\n          if (i % 2 == 1)\n            indices.unset(i)\n        '''\n\n    Alternatively, as a generator:\n\n    .. code-block:: javascript\n\n        code = '''\n        for (const i of indices)\n          if (i % 2 == 0)\n            yield i\n        '''",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "A mapping of names to Python objects. In particular, those can be Bokeh's models.\nThese objects are made available to the labeling policy's code snippet as the\nvalues of named parameters to the callback.",
        "default": {}
      }
    ]
  },
  {
    "name": "DataAnnotation",
    "fullname": "bokeh.models.annotations.DataAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": "Base class for annotations that utilize a data source.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "DataCube",
    "fullname": "bokeh.models.widgets.tables.DataCube",
    "bases": [
      "bokeh.models.widgets.tables.DataTable"
    ],
    "desc": "Specialized DataTable with collapsing groups, totals, and sub-totals.\n    ",
    "props": [
      {
        "name": "target",
        "type": "Instance(DataSource)",
        "desc": "Two column datasource (row_indices & labels) describing which rows of the\ndata cubes are expanded or collapsed",
        "default": "<Undefined>"
      },
      {
        "name": "index_position",
        "type": "Nullable(Int)",
        "desc": "Where among the list of columns to insert a column displaying the row\nindex. Negative indices are supported, and specify an index position\nfrom the end of the list of columns (i.e. standard Python behaviour).\n\nTo prevent the index column from being added, set to None.\n\nIf the absolute value of index_position  is larger than the length of\nthe columns, then the index will appear at the beginning or end, depending\non the sign.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "frozen_columns",
        "type": "Nullable(Int)",
        "desc": "Integer indicating the number of columns to freeze. If set the first N\ncolumns will be frozen which prevents them from scrolling out of frame.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "index_header",
        "type": "String",
        "desc": "The column header to display for the index column, if it is present.",
        "default": "#"
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "selectable",
        "type": "Either(Bool, Enum('checkbox'))",
        "desc": "Whether a table's rows can be selected or not. Using ``checkbox`` is\nequivalent  to ``True``, but makes selection visible through a checkbox\nfor each row,  instead of highlighting rows. Multiple selection is\nallowed and can be achieved by either clicking multiple checkboxes (if\nenabled) or using Shift + click on rows.",
        "default": true
      },
      {
        "name": "row_height",
        "type": "Int",
        "desc": "The height of each row in pixels.",
        "default": 25
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "fit_columns",
        "type": "Nullable(Bool)",
        "desc": "**This is a legacy parameter.** For new development, use the\n``autosize_mode`` parameter.\n\nWhether columns should be fit to the available width. This results in\nno horizontal scrollbar showing up, but data can get unreadable if there\nis not enough space available. If set to ``True``, each column's width is\nunderstood as maximum width.",
        "default": null
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "The source of data for the widget.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "columns",
        "type": "List(Instance(TableColumn))",
        "desc": "The list of child column widgets.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": 400
      },
      {
        "name": "grouping",
        "type": "List(Instance(GroupingInfo))",
        "desc": "Describe what aggregation operations used to define sub-totals and totals",
        "default": []
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "frozen_rows",
        "type": "Nullable(Int)",
        "desc": "Integer indicating the number of rows to freeze. If set the first N\nrows will be frozen which prevents them from scrolling out of frame,\nif set to a negative value last N rows will be frozen.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "index_width",
        "type": "Int",
        "desc": "The width of the index column, if present.",
        "default": 40
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "A view into the data source to use when rendering table rows. A default view\nof the entire data source is created if a view is not passed in during\ninitialization.",
        "default": "<Undefined>"
      },
      {
        "name": "reorderable",
        "type": "Bool",
        "desc": "Allows the reordering of a table's columns. To reorder a column,\nclick and drag a table's header to the desired location in the table.\nThe columns on either side will remain in their previous order.",
        "default": true
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "header_row",
        "type": "Bool",
        "desc": "Whether to show a header row with column names at the top of the table.",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": 600
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "sortable",
        "type": "Bool",
        "desc": "Allows to sort table's contents. By default natural order is preserved.\nTo sort a column, click on it's header. Clicking one more time changes\nsort direction. Use Ctrl + click to return to natural order. Use\nShift + click to sort multiple columns simultaneously.",
        "default": true
      },
      {
        "name": "autosize_mode",
        "type": "Enum('fit_columns', 'fit_viewport', 'force_fit', 'none')",
        "desc": "Describes the column autosizing mode with one of the following options:\n\n``\"fit_columns\"``\n    Compute column widths based on cell contents but ensure the\n    table fits into the available viewport. This results in no\n    horizontal scrollbar showing up, but data can get unreadable\n    if there is not enough space available.\n\n``\"fit_viewport\"``\n    Adjust the viewport size after computing columns widths based\n    on cell contents.\n\n``\"force_fit\"``\n    Fit columns into available space dividing the table width across\n    the columns equally (equivalent to `fit_columns=True`).\n    This results in no horizontal scrollbar showing up, but data\n    can get unreadable if there is not enough space available.\n\n``\"none\"``\n    Do not automatically compute column widths.",
        "default": "force_fit"
      },
      {
        "name": "scroll_to_selection",
        "type": "Bool",
        "desc": "Whenever a selection is made on the data source, scroll the selected\nrows into the table's viewport if none of the selected rows are already\nin the viewport.",
        "default": true
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "auto_edit",
        "type": "Bool",
        "desc": "When enabled editing mode is enabled after a single click on a\ntable cell.",
        "default": false
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "editable",
        "type": "Bool",
        "desc": "Allows to edit table's contents. Needs cell editors to be configured on\ncolumns that are required to be editable.",
        "default": false
      }
    ]
  },
  {
    "name": "DataModel",
    "fullname": "bokeh.model.data_model.DataModel",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "DataRange",
    "fullname": "bokeh.models.ranges.DataRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "desc": "A base class for all data range types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "Either(List(Instance(Model)), Auto)",
        "desc": "An explicit list of renderers to autorange against. If unset,\ndefaults to all renderers on a plot.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\nhave a matching value for their ``name`` attribute will be used\nfor autoranging.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      }
    ]
  },
  {
    "name": "DataRange1d",
    "fullname": "bokeh.models.ranges.DataRange1d",
    "bases": [
      "bokeh.models.ranges.DataRange"
    ],
    "desc": "An auto-fitting range in a continuous scalar dimension.\n\nBy default the ``start`` and ``end`` of the range automatically\nassume min and max values of the data for associated renderers.",
    "props": [
      {
        "name": "follow_interval",
        "type": "Nullable(Either(Float, TimeDelta))",
        "desc": "If ``follow`` is set to ``\"start\"`` or ``\"end\"`` then the range will\nalways be constrained to that::\n\n     abs(r.start - r.end) <= follow_interval\n\nis maintained.",
        "default": null
      },
      {
        "name": "start",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "An explicitly supplied range start. If provided, will override\nautomatically computed start value.",
        "default": null
      },
      {
        "name": "min_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "The level that the range is allowed to zoom in, expressed as the\nminimum visible interval. If set to ``None`` (default), the minimum\ninterval is not bound.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "Either(List(Instance(Model)), Auto)",
        "desc": "An explicit list of renderers to autorange against. If unset,\ndefaults to all renderers on a plot.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "flipped",
        "type": "Bool",
        "desc": "Whether the range should be \"flipped\" from its normal direction when\nauto-ranging.",
        "default": false
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "follow",
        "type": "Nullable(Enum('start', 'end'))",
        "desc": "Configure the data to follow one or the other data extreme, with a\nmaximum range size of ``follow_interval``.\n\nIf set to ``\"start\"`` then the range will adjust so that ``start`` always\ncorresponds to the minimum data value (or maximum, if ``flipped`` is\n``True``).\n\nIf set to ``\"end\"`` then the range will adjust so that ``end`` always\ncorresponds to the maximum data value (or minimum, if ``flipped`` is\n``True``).\n\nIf set to ``None`` (default), then auto-ranging does not follow, and\nthe range will encompass both the minimum and maximum data values.\n\n``follow`` cannot be used with bounds, and if set, bounds will be set to\n``None``.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that\nhave a matching value for their ``name`` attribute will be used\nfor autoranging.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      },
      {
        "name": "bounds",
        "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta)), Tuple(Datetime, Datetime), Tuple(Nullable(Datetime), Datetime), Tuple(Datetime, Nullable(Datetime))))",
        "desc": "The bounds that the range is allowed to go to. Typically used to prevent\nthe user from panning/zooming/etc away from the data.\n\nBy default, the bounds will be None, allowing your plot to pan/zoom as far\nas you want. If bounds are 'auto' they will be computed to be the same as\nthe start and end of the ``DataRange1d``.\n\nBounds are provided as a tuple of ``(min, max)`` so regardless of whether\nyour range is increasing or decreasing, the first item should be the\nminimum value of the range and the second item should be the maximum.\nSetting ``min > max`` will result in a ``ValueError``.\n\nIf you only want to constrain one end of the plot, you can set ``min`` or\n``max`` to ``None`` e.g. ``DataRange1d(bounds=(None, 12))``",
        "default": null
      },
      {
        "name": "max_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval. Note that ``bounds`` can impose an\nimplicit constraint on the maximum interval as well.",
        "default": null
      },
      {
        "name": "default_span",
        "type": "Either(Float, TimeDelta)",
        "desc": "A default width for the interval, in case ``start`` is equal to ``end``\n(if used with a log axis, default_span is in powers of 10).",
        "default": 2.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "end",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "An explicitly supplied range end. If provided, will override\nautomatically computed end value.",
        "default": null
      },
      {
        "name": "range_padding",
        "type": "Either(Float, TimeDelta)",
        "desc": "How much padding to add around the computed data bounds.\n\nWhen ``range_padding_units`` is set to ``\"percent\"``, the span of the\nrange span is expanded to make the range ``range_padding`` percent larger.\n\nWhen ``range_padding_units`` is set to ``\"absolute\"``, the start and end\nof the range span are extended by the amount ``range_padding``.",
        "default": 0.1
      },
      {
        "name": "range_padding_units",
        "type": "Enum('percent', 'absolute')",
        "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\nas an absolute quantity. (default: ``\"percent\"``)",
        "default": "percent"
      },
      {
        "name": "only_visible",
        "type": "Bool",
        "desc": "If True, renderers that that are not visible will be excluded from automatic\nbounds computations.",
        "default": false
      }
    ]
  },
  {
    "name": "DataRenderer",
    "fullname": "bokeh.models.renderers.DataRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": "An abstract base class for data renderer types (e.g. ``GlyphRenderer``, ``GraphRenderer``).\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "glyph"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "DataSource",
    "fullname": "bokeh.models.sources.DataSource",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A base class for data source types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      }
    ]
  },
  {
    "name": "DataTable",
    "fullname": "bokeh.models.widgets.tables.DataTable",
    "bases": [
      "bokeh.models.widgets.tables.TableWidget"
    ],
    "desc": "Two-dimensional grid for visualization and editing large amounts\nof data.",
    "props": [
      {
        "name": "index_position",
        "type": "Nullable(Int)",
        "desc": "Where among the list of columns to insert a column displaying the row\nindex. Negative indices are supported, and specify an index position\nfrom the end of the list of columns (i.e. standard Python behaviour).\n\nTo prevent the index column from being added, set to None.\n\nIf the absolute value of index_position  is larger than the length of\nthe columns, then the index will appear at the beginning or end, depending\non the sign.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "frozen_columns",
        "type": "Nullable(Int)",
        "desc": "Integer indicating the number of columns to freeze. If set the first N\ncolumns will be frozen which prevents them from scrolling out of frame.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "index_header",
        "type": "String",
        "desc": "The column header to display for the index column, if it is present.",
        "default": "#"
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "selectable",
        "type": "Either(Bool, Enum('checkbox'))",
        "desc": "Whether a table's rows can be selected or not. Using ``checkbox`` is\nequivalent  to ``True``, but makes selection visible through a checkbox\nfor each row,  instead of highlighting rows. Multiple selection is\nallowed and can be achieved by either clicking multiple checkboxes (if\nenabled) or using Shift + click on rows.",
        "default": true
      },
      {
        "name": "row_height",
        "type": "Int",
        "desc": "The height of each row in pixels.",
        "default": 25
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "fit_columns",
        "type": "Nullable(Bool)",
        "desc": "**This is a legacy parameter.** For new development, use the\n``autosize_mode`` parameter.\n\nWhether columns should be fit to the available width. This results in\nno horizontal scrollbar showing up, but data can get unreadable if there\nis not enough space available. If set to ``True``, each column's width is\nunderstood as maximum width.",
        "default": null
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "The source of data for the widget.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "columns",
        "type": "List(Instance(TableColumn))",
        "desc": "The list of child column widgets.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": 400
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "frozen_rows",
        "type": "Nullable(Int)",
        "desc": "Integer indicating the number of rows to freeze. If set the first N\nrows will be frozen which prevents them from scrolling out of frame,\nif set to a negative value last N rows will be frozen.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "index_width",
        "type": "Int",
        "desc": "The width of the index column, if present.",
        "default": 40
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "A view into the data source to use when rendering table rows. A default view\nof the entire data source is created if a view is not passed in during\ninitialization.",
        "default": "<Undefined>"
      },
      {
        "name": "reorderable",
        "type": "Bool",
        "desc": "Allows the reordering of a table's columns. To reorder a column,\nclick and drag a table's header to the desired location in the table.\nThe columns on either side will remain in their previous order.",
        "default": true
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "header_row",
        "type": "Bool",
        "desc": "Whether to show a header row with column names at the top of the table.",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": 600
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "sortable",
        "type": "Bool",
        "desc": "Allows to sort table's contents. By default natural order is preserved.\nTo sort a column, click on it's header. Clicking one more time changes\nsort direction. Use Ctrl + click to return to natural order. Use\nShift + click to sort multiple columns simultaneously.",
        "default": true
      },
      {
        "name": "autosize_mode",
        "type": "Enum('fit_columns', 'fit_viewport', 'force_fit', 'none')",
        "desc": "Describes the column autosizing mode with one of the following options:\n\n``\"fit_columns\"``\n    Compute column widths based on cell contents but ensure the\n    table fits into the available viewport. This results in no\n    horizontal scrollbar showing up, but data can get unreadable\n    if there is not enough space available.\n\n``\"fit_viewport\"``\n    Adjust the viewport size after computing columns widths based\n    on cell contents.\n\n``\"force_fit\"``\n    Fit columns into available space dividing the table width across\n    the columns equally (equivalent to `fit_columns=True`).\n    This results in no horizontal scrollbar showing up, but data\n    can get unreadable if there is not enough space available.\n\n``\"none\"``\n    Do not automatically compute column widths.",
        "default": "force_fit"
      },
      {
        "name": "scroll_to_selection",
        "type": "Bool",
        "desc": "Whenever a selection is made on the data source, scroll the selected\nrows into the table's viewport if none of the selected rows are already\nin the viewport.",
        "default": true
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "auto_edit",
        "type": "Bool",
        "desc": "When enabled editing mode is enabled after a single click on a\ntable cell.",
        "default": false
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "editable",
        "type": "Bool",
        "desc": "Allows to edit table's contents. Needs cell editors to be configured on\ncolumns that are required to be editable.",
        "default": false
      }
    ]
  },
  {
    "name": "DateEditor",
    "fullname": "bokeh.models.widgets.tables.DateEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Calendar-based date cell editor.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "DateFormatter",
    "fullname": "bokeh.models.widgets.tables.DateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "desc": "Date cell formatter.\n\n    ",
    "props": [
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "An optional text font style, e.g. bold, italic.",
        "default": "normal"
      },
      {
        "name": "format",
        "type": "Either(Enum('ATOM', 'W3C', 'RFC-3339', 'ISO-8601', 'COOKIE', 'RFC-822', 'RFC-850', 'RFC-1036', 'RFC-1123', 'RFC-2822', 'RSS', 'TIMESTAMP'), String)",
        "desc": "The date format can be any standard  `strftime`_ format string, as well\nas any of the following predefined format names:\n\n================================================ ================== ===================\nFormat name(s)                                   Format string      Example Output\n================================================ ================== ===================\n``ATOM`` / ``W3C`` / ``RFC-3339`` / ``ISO-8601`` ``\"%Y-%m-%d\"``     2014-03-01\n``COOKIE``                                       ``\"%a, %d %b %Y\"`` Sat, 01 Mar 2014\n``RFC-850``                                      ``\"%A, %d-%b-%y\"`` Saturday, 01-Mar-14\n``RFC-1123`` / ``RFC-2822``                      ``\"%a, %e %b %Y\"`` Sat, 1 Mar 2014\n``RSS`` / ``RFC-822`` / ``RFC-1036``             ``\"%a, %e %b %y\"`` Sat, 1 Mar 14\n``TIMESTAMP``                                    (ms since epoch)   1393632000000\n================================================ ================== ===================\n\nNote that in the table some of the format names are synonymous, with\nidentical format names separated by slashes.\n\nThis list of supported `strftime`_ format codes is reproduced below.\n\n%a\n    The abbreviated name of the day of the week according to the\n    current locale.\n\n%A\n    The full name of the day of the week according to the current\n    locale.\n\n%b\n    The abbreviated month name according to the current locale.\n\n%B\n    The full month name according to the current locale.\n\n%c\n    The preferred date and time representation for the current\n    locale.\n\n%C\n    The century number (year/100) as a 2-digit integer.\n\n%d\n    The day of the month as a decimal number (range 01 to 31).\n\n%D\n    Equivalent to %m/%d/%y.  (Americans should note that in many\n    other countries %d/%m/%y is rather common. This means that in\n    international context this format is ambiguous and should not\n    be used.)\n\n%e\n    Like %d, the day of the month as a decimal number, but a\n    leading zero is replaced by a space.\n\n%f\n    Microsecond as a decimal number, zero-padded on the left (range\n    000000-999999). This is an extension to the set of directives\n    available to `timezone`_.\n\n%F\n    Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n%G\n    The ISO 8601 week-based year with century as a decimal number.\n    The 4-digit year corresponding to the ISO week number (see %V).\n    This has the same format and value as %Y, except that if the\n    ISO week number belongs to the previous or next year, that year\n    is used instead.\n\n%g\n    Like %G, but without century, that is, with a 2-digit year (00-99).\n\n%h\n    Equivalent to %b.\n\n%H\n    The hour as a decimal number using a 24-hour clock (range 00\n    to 23).\n\n%I\n    The hour as a decimal number using a 12-hour clock (range 01\n    to 12).\n\n%j\n    The day of the year as a decimal number (range 001 to 366).\n\n%k\n    The hour (24-hour clock) as a decimal number (range 0 to 23).\n    Single digits are preceded by a blank.  (See also %H.)\n\n%l\n    The hour (12-hour clock) as a decimal number (range 1 to 12).\n    Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n%m\n    The month as a decimal number (range 01 to 12).\n\n%M\n    The minute as a decimal number (range 00 to 59).\n\n%n\n    A newline character. Bokeh text does not currently support\n    newline characters.\n\n%N\n    Nanosecond as a decimal number, zero-padded on the left (range\n    000000000-999999999). Supports a padding width specifier, i.e.\n    %3N displays 3 leftmost digits. However, this is only accurate\n    to the millisecond level of precision due to limitations of\n    `timezone`_.\n\n%p\n    Either \"AM\" or \"PM\" according to the given time value, or the\n    corresponding strings for the current locale.  Noon is treated\n    as \"PM\" and midnight as \"AM\".\n\n%P\n    Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n    string for the current locale.\n\n%r\n    The time in a.m. or p.m. notation.  In the POSIX locale this\n    is equivalent to %I:%M:%S %p.\n\n%R\n    The time in 24-hour notation (%H:%M). For a version including\n    the seconds, see %T below.\n\n%s\n    The number of seconds since the Epoch, 1970-01-01 00:00:00\n    +0000 (UTC).\n\n%S\n    The second as a decimal number (range 00 to 60).  (The range\n    is up to 60 to allow for occasional leap seconds.)\n\n%t\n    A tab character. Bokeh text does not currently support tab\n    characters.\n\n%T\n    The time in 24-hour notation (%H:%M:%S).\n\n%u\n    The day of the week as a decimal, range 1 to 7, Monday being 1.\n    See also %w.\n\n%U\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Sunday as the first day of\n    week 01.  See also %V and %W.\n\n%V\n    The ISO 8601 week number (see NOTES) of the current year as a\n    decimal number, range 01 to 53, where week 1 is the first week\n    that has at least 4 days in the new year.  See also %U and %W.\n\n%w\n    The day of the week as a decimal, range 0 to 6, Sunday being 0.\n    See also %u.\n\n%W\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Monday as the first day of\n    week 01.\n\n%x\n    The preferred date representation for the current locale\n    without the time.\n\n%X\n    The preferred time representation for the current locale\n    without the date.\n\n%y\n    The year as a decimal number without a century (range 00 to 99).\n\n%Y\n    The year as a decimal number including the century.\n\n%z\n    The +hhmm or -hhmm numeric timezone (that is, the hour and\n    minute offset from UTC).\n\n%Z\n    The timezone name or abbreviation.\n\n%%\n    A literal '%' character.\n\n.. warning::\n    The client library BokehJS uses the `timezone`_ library to\n    format datetimes. The inclusion of the list below is based on the\n    claim that `timezone`_ makes to support \"the full compliment\n    of GNU date format specifiers.\" However, this claim has not\n    been tested exhaustively against this list. If you find formats\n    that do not function as expected, please submit a `github issue`_,\n    so that the documentation can be updated appropriately.\n\n.. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n.. _timezone: http://bigeasy.github.io/timezone/\n.. _github issue: https://github.com/bokeh/bokeh/issues",
        "default": "ISO-8601"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "An optional text align, i.e. left, center or right.",
        "default": "left"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "nan_format",
        "type": "Nullable(String)",
        "desc": "Formatting to apply to NaN and None values (falls back to regular date formatting if not set).",
        "default": null
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "An optional text color.",
        "default": null
      }
    ]
  },
  {
    "name": "DatePicker",
    "fullname": "bokeh.models.widgets.inputs.DatePicker",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": "Calendar-based date picker widget.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "max_date",
        "type": "Nullable(Date)",
        "desc": "Optional latest allowable date.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "Date",
        "desc": "The initial or picked date.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "disabled_dates",
        "type": "List(Either(Date, Tuple(Date, Date)))",
        "desc": "A list of dates of ``(start, end)`` date ranges to make unavailable for\nselection. All other dates will be avalable.\n\n.. note::\n    Only one of ``disabled_dates`` and ``enabled_dates`` should be specified.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "position",
        "type": "Enum('auto', 'above', 'below')",
        "desc": "Where the calendar is rendered relative to the input when ``inline`` is False.",
        "default": "auto"
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "enabled_dates",
        "type": "List(Either(Date, Tuple(Date, Date)))",
        "desc": "A list of dates of ``(start, end)`` date ranges to make available for\nselection. All other dates will be unavailable.\n\n.. note::\n    Only one of ``disabled_dates`` and ``enabled_dates`` should be specified.",
        "default": []
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "Whether the calendar sholud be displayed inline.",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "min_date",
        "type": "Nullable(Date)",
        "desc": "Optional earliest allowable date.",
        "default": null
      }
    ]
  },
  {
    "name": "DateRangeSlider",
    "fullname": "bokeh.models.widgets.sliders.DateRangeSlider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": "Slider-based date range selection widget. ",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "Acceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "#e6e6e6"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Datetime)",
        "desc": "The maximum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "start",
        "type": "NonNullable(Datetime)",
        "desc": "The minimum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Tuple(Datetime, Datetime)))",
        "desc": "Initial or selected value, throttled to report only on mouseup.",
        "default": "<Undefined>"
      },
      {
        "name": "value",
        "type": "NonNullable(Tuple(Datetime, Datetime))",
        "desc": "Initial or selected range.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "Whether or not show slider's value.",
        "default": true
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "    ",
        "default": "ltr"
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "step",
        "type": "Int",
        "desc": "The step between consecutive values.",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "Slider's label.",
        "default": ""
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "    ",
        "default": "%d %b %Y"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "    ",
        "default": true
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "DateSlider",
    "fullname": "bokeh.models.widgets.sliders.DateSlider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": "Slider-based date selection widget. ",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "Acceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "#e6e6e6"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Datetime)",
        "desc": "The maximum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "start",
        "type": "NonNullable(Datetime)",
        "desc": "The minimum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Datetime))",
        "desc": "Initial or selected value, throttled to report only on mouseup.",
        "default": "<Undefined>"
      },
      {
        "name": "value",
        "type": "NonNullable(Datetime)",
        "desc": "Initial or selected value.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "Whether or not show slider's value.",
        "default": true
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "    ",
        "default": "ltr"
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "step",
        "type": "Int",
        "desc": "The step between consecutive values.",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "Slider's label.",
        "default": ""
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "    ",
        "default": "%d %b %Y"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "    ",
        "default": true
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "DatetimeAxis",
    "fullname": "bokeh.models.axes.DatetimeAxis",
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ],
    "desc": "A ``LinearAxis`` that picks nice numbers for tick locations on\na datetime scale. Configured with a ``DatetimeTickFormatter`` by\ndefault.",
    "props": [
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 4
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "The line width of the axis line.",
        "default": 1
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.",
        "default": "auto"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.",
        "default": "horizontal"
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "default": []
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "alphabetic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.",
        "default": 2
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the axis line.",
        "default": "black"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the axis label.",
        "default": "italic"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.",
        "default": 5
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": "black"
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.",
        "default": null
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "default": "{\"__type__\": \"bokeh.models.tickers.DatetimeTicker\"}"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the axis label.",
        "default": 1.0
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the axis line.",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "default": "bottom"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the axis label.",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.",
        "default": "{\"__type__\": \"bokeh.models.formatters.DatetimeTickFormatter\"}"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the axis label.",
        "default": "13px"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "The text font of the axis label.",
        "default": "helvetica"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "center"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 6
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.",
        "default": 5
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the axis label.",
        "default": "#444444"
      }
    ]
  },
  {
    "name": "DatetimeTickFormatter",
    "fullname": "bokeh.models.formatters.DatetimeTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": "A ``TickFormatter`` for displaying datetime values nicely across a\nrange of scales.\n\n``DatetimeTickFormatter`` has the following properties (listed together\nwith their default values) that can be used to control the formatting\nof axis ticks at different scales scales:\n\n.. code-block:: python\n\n    microseconds = ['%fus']\n\n    milliseconds = ['%3Nms', '%S.%3Ns']\n\n    seconds = ['%Ss']\n\n    minsec = [':%M:%S']\n\n    minutes = [':%M', '%Mm']\n\n    hourmin = ['%H:%M']\n\n    hours = ['%Hh', '%H:%M']\n\n    days = ['%m/%d', '%a%d']\n\n    months = ['%m/%Y', '%b %Y']\n\n    years = ['%Y']\n\nEach scale property can be set to format or list of formats to use for\nformatting datetime tick values that fall in in that \"time scale\".\nBy default, only the first format string passed for each time scale\nwill be used. By default, all leading zeros are stripped away from\nthe formatted labels.\n\nThis list of supported `strftime`_ formats is reproduced below.\n\n%a\n    The abbreviated name of the day of the week according to the\n    current locale.\n\n%A\n    The full name of the day of the week according to the current\n    locale.\n\n%b\n    The abbreviated month name according to the current locale.\n\n%B\n    The full month name according to the current locale.\n\n%c\n    The preferred date and time representation for the current\n    locale.\n\n%C\n    The century number (year/100) as a 2-digit integer.\n\n%d\n    The day of the month as a decimal number (range 01 to 31).\n\n%D\n    Equivalent to %m/%d/%y.  (Americans should note that in many\n    other countries %d/%m/%y is rather common. This means that in\n    international context this format is ambiguous and should not\n    be used.)\n\n%e\n    Like %d, the day of the month as a decimal number, but a\n    leading zero is replaced by a space.\n\n%f\n    Microsecond as a decimal number, zero-padded on the left (range\n    000000-999999). This is an extension to the set of directives\n    available to `timezone`_.\n\n%F\n    Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n%G\n    The ISO 8601 week-based year with century as a decimal number.\n    The 4-digit year corresponding to the ISO week number (see %V).\n    This has the same format and value as %Y, except that if the\n    ISO week number belongs to the previous or next year, that year\n    is used instead.\n\n%g\n    Like %G, but without century, that is, with a 2-digit year (00-99).\n\n%h\n    Equivalent to %b.\n\n%H\n    The hour as a decimal number using a 24-hour clock (range 00\n    to 23).\n\n%I\n    The hour as a decimal number using a 12-hour clock (range 01\n    to 12).\n\n%j\n    The day of the year as a decimal number (range 001 to 366).\n\n%k\n    The hour (24-hour clock) as a decimal number (range 0 to 23).\n    Single digits are preceded by a blank.  (See also %H.)\n\n%l\n    The hour (12-hour clock) as a decimal number (range 1 to 12).\n    Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n%m\n    The month as a decimal number (range 01 to 12).\n\n%M\n    The minute as a decimal number (range 00 to 59).\n\n%n\n    A newline character. Bokeh text does not currently support\n    newline characters.\n\n%N\n    Nanosecond as a decimal number, zero-padded on the left (range\n    000000000-999999999). Supports a padding width specifier, i.e.\n    %3N displays 3 leftmost digits. However, this is only accurate\n    to the millisecond level of precision due to limitations of\n    `timezone`_.\n\n%p\n    Either \"AM\" or \"PM\" according to the given time value, or the\n    corresponding strings for the current locale.  Noon is treated\n    as \"PM\" and midnight as \"AM\".\n\n%P\n    Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n    string for the current locale.\n\n%r\n    The time in a.m. or p.m. notation.  In the POSIX locale this\n    is equivalent to %I:%M:%S %p.\n\n%R\n    The time in 24-hour notation (%H:%M). For a version including\n    the seconds, see %T below.\n\n%s\n    The number of seconds since the Epoch, 1970-01-01 00:00:00\n    +0000 (UTC).\n\n%S\n    The second as a decimal number (range 00 to 60).  (The range\n    is up to 60 to allow for occasional leap seconds.)\n\n%t\n    A tab character. Bokeh text does not currently support tab\n    characters.\n\n%T\n    The time in 24-hour notation (%H:%M:%S).\n\n%u\n    The day of the week as a decimal, range 1 to 7, Monday being 1.\n    See also %w.\n\n%U\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Sunday as the first day of\n    week 01.  See also %V and %W.\n\n%V\n    The ISO 8601 week number (see NOTES) of the current year as a\n    decimal number, range 01 to 53, where week 1 is the first week\n    that has at least 4 days in the new year.  See also %U and %W.\n\n%w\n    The day of the week as a decimal, range 0 to 6, Sunday being 0.\n    See also %u.\n\n%W\n    The week number of the current year as a decimal number, range\n    00 to 53, starting with the first Monday as the first day of\n    week 01.\n\n%x\n    The preferred date representation for the current locale\n    without the time.\n\n%X\n    The preferred time representation for the current locale\n    without the date.\n\n%y\n    The year as a decimal number without a century (range 00 to 99).\n\n%Y\n    The year as a decimal number including the century.\n\n%z\n    The +hhmm or -hhmm numeric timezone (that is, the hour and\n    minute offset from UTC).\n\n%Z\n    The timezone name or abbreviation.\n\n%%\n    A literal '%' character.\n\n.. warning::\n    The client library BokehJS uses the `timezone`_ library to\n    format datetimes. The inclusion of the list below is based on the\n    claim that `timezone`_ makes to support \"the full compliment\n    of GNU date format specifiers.\" However, this claim has not\n    been tested exhaustively against this list. If you find formats\n    that do not function as expected, please submit a `github issue`_,\n    so that the documentation can be updated appropriately.\n\n.. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n.. _timezone: http://bigeasy.github.io/timezone/\n.. _github issue: https://github.com/bokeh/bokeh/issues",
    "props": [
      {
        "name": "days",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``days`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%m/%d",
          "%a%d"
        ]
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "milliseconds",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``milliseconds`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%3Nms",
          "%S.%3Ns"
        ]
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "microseconds",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``microseconds`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%fus"
        ]
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "months",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``months`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%m/%Y",
          "%b %Y"
        ]
      },
      {
        "name": "seconds",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``seconds`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%Ss"
        ]
      },
      {
        "name": "minsec",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``minsec`` (for combined minutes and seconds) range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          ":%M:%S"
        ]
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "minutes",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``minutes`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          ":%M",
          "%Mm"
        ]
      },
      {
        "name": "years",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``years`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%Y"
        ]
      },
      {
        "name": "hourmin",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``hourmin`` (for combined hours and minutes) range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%H:%M"
        ]
      },
      {
        "name": "hours",
        "type": "List(String)",
        "desc": "Formats for displaying datetime values in the ``hours`` range.\n\nSee the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.",
        "default": [
          "%Hh",
          "%H:%M"
        ]
      }
    ]
  },
  {
    "name": "DatetimeTicker",
    "fullname": "bokeh.models.tickers.DatetimeTicker",
    "bases": [
      "bokeh.models.tickers.CompositeTicker"
    ],
    "desc": "Generate nice ticks across different date and time scales.\n\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tickers",
        "type": "Seq(Instance(Ticker))",
        "desc": "A list of Ticker objects to combine at different scales in order\nto generate tick values. The supplied tickers should be in order.\nSpecifically, if S comes before T, then it should be the case that::\n\n    S.get_max_interval() < T.get_min_interval()",
        "default": [
          "{\"__type__\": \"bokeh.models.tickers.AdaptiveTicker\", \"mantissas\": [1, 2, 5], \"max_interval\": 500.0, \"num_minor_ticks\": 0}",
          "{\"__type__\": \"bokeh.models.tickers.AdaptiveTicker\", \"base\": 60, \"mantissas\": [1, 2, 5, 10, 15, 20, 30], \"max_interval\": 1800000.0, \"min_interval\": 1000.0, \"num_minor_ticks\": 0}",
          "{\"__type__\": \"bokeh.models.tickers.AdaptiveTicker\", \"base\": 24, \"mantissas\": [1, 2, 4, 6, 8, 12], \"max_interval\": 43200000.0, \"min_interval\": 3600000.0, \"num_minor_ticks\": 0}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 8, 15, 22]}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 15]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 2, 4, 6, 8, 10]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 4, 8]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 6]}",
          "{\"__type__\": \"bokeh.models.tickers.YearsTicker\"}"
        ]
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "DaysTicker",
    "fullname": "bokeh.models.tickers.DaysTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "desc": "Generate ticks spaced apart by specific, even multiples of days.\n\n    ",
    "props": [
      {
        "name": "days",
        "type": "Seq(Int)",
        "desc": "The intervals of days to use.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 0
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "The interval between adjacent ticks.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "Div",
    "fullname": "bokeh.models.widgets.markups.Div",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "desc": "A block (div) of text.\n\nThis Bokeh model corresponds to an HTML ``<div>`` element.\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_div.py\n    :source-position: below",
    "props": [
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "Raw CSS style declaration. Note this may be web browser dependent.",
        "default": {}
      },
      {
        "name": "render_as_text",
        "type": "Bool",
        "desc": "Whether the contents should be rendered as raw text or as interpreted HTML.\nThe default value is False, meaning contents are rendered as HTML.",
        "default": false
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "Whether the contents should not be processed as TeX/LaTeX input.",
        "default": false
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "text",
        "type": "String",
        "desc": "The text or HTML contents of the widget.\n\n.. note::\n    If the HTML content contains elements which size depends on\n    on external, asynchronously loaded resources, the size of\n    the widget may be computed incorrectly. This is in particular\n    an issue with images (``<img>``). To remedy this problem, one\n    either has to set explicit dimensions using CSS properties,\n    HTML attributes or model's ``width`` and ``height`` properties,\n    or inline images' contents using data URIs.",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Dodge",
    "fullname": "bokeh.models.transforms.Dodge",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": "Apply either fixed dodge amount to data.\n\n    ",
    "props": [
      {
        "name": "range",
        "type": "Nullable(Instance(Range))",
        "desc": "When applying ``Dodge`` to categorical data values, the corresponding\n``FactorRange`` must be supplied as the ``range`` property.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "value",
        "type": "Float",
        "desc": "The amount to dodge the input data.",
        "default": 0
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "Drag",
    "fullname": "bokeh.models.tools.Drag",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": "A base class for tools that respond to drag events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "Dropdown",
    "fullname": "bokeh.models.widgets.buttons.Dropdown",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "desc": "A dropdown button.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "A style for the button, signifying it's role.",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "The text label for the button to display.",
        "default": "Dropdown"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "split",
        "type": "Bool",
        "desc": "    ",
        "default": false
      },
      {
        "name": "menu",
        "type": "List(Either(Null, String, Tuple(String, Either(String, Instance(Callback)))))",
        "desc": "Button's dropdown menu consisting of entries containing item's text and\nvalue name. Use ``None`` as a menu separator.",
        "default": []
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "An optional image appearing to the left of button's text.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "EdgeCoordinates",
    "fullname": "bokeh.models.graphs.EdgeCoordinates",
    "bases": [
      "bokeh.models.graphs.GraphCoordinates"
    ],
    "desc": "Node coordinate expression obtained from ``LayoutProvider``",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "layout",
        "type": "Instance(LayoutProvider)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "EdgesAndLinkedNodes",
    "fullname": "bokeh.models.graphs.EdgesAndLinkedNodes",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "With the ``EdgesAndLinkedNodes`` policy, inspection or selection of graph\nedges will result in the inspection or selection of the edge and of the\nlinked graph nodes. There is no direct selection or inspection of graph\nnodes.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "EdgesOnly",
    "fullname": "bokeh.models.graphs.EdgesOnly",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "With the ``EdgesOnly`` policy, only graph edges are able to be selected and\ninspected. There is no selection or inspection of graph nodes.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "EditTool",
    "fullname": "bokeh.models.tools.EditTool",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": "A base class for all interactive draw tool types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "Ellipse",
    "fullname": "bokeh.models.glyphs.Ellipse",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render ellipses.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Ellipse.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the ellipses.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the ellipses.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the ellipses.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the ellipses.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the centers of the ellipses.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the ellipses.",
        "default": "butt"
      },
      {
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angle the ellipses are rotated from horizontal. [rad]",
        "default": 0.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the ellipses.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the ellipses.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the ellipses.",
        "default": null
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The widths of each ellipse.",
        "default": {
          "field": "width"
        }
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the centers of the ellipses.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the ellipses.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the ellipses.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the ellipses.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the ellipses.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The heights of each ellipse.",
        "default": {
          "field": "height"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the ellipses.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the ellipses.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the ellipses.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "EqHistColorMapper",
    "fullname": "bokeh.models.mappers.EqHistColorMapper",
    "bases": [
      "bokeh.models.mappers.ScanningColorMapper"
    ],
    "desc": "",
    "props": [
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "A collection of glyph renderers to pool data from for establishing data metrics.\nIf empty, mapped data will be used instead.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is higher than ``high`` value. If None,\nvalues higher than ``high`` are mapped to the last color in the palette.",
        "default": null
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\nvalues lower than ``low`` are mapped to the first color in the palette.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "bins",
        "type": "Int",
        "desc": "Number of histogram bins",
        "default": 65536
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "gray"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "The minimum value of the range to map into the palette. Values below\nthis are clamped to ``low``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "The maximum value of the range to map into the palette. Values above\nthis are clamped to ``high``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "Expression",
    "fullname": "bokeh.models.expressions.Expression",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for ``Expression`` models that represent a computation\nto be carried out on the client-side.\n\nJavaScript implementations should implement the following methods:\n\n.. code-block\n\n    v_compute(source: ColumnarDataSource): Arrayable {\n        # compute and return array of values\n    }\n\n.. note::\n    If you wish for results to be cached per source and updated only if\n    the source changes, implement ``_v_compute: (source)`` instead.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "FactorRange",
    "fullname": "bokeh.models.ranges.FactorRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "desc": "A Range of values for a categorical dimension.\n\nIn addition to supplying ``factors`` as a keyword argument to the\n``FactorRange`` initializer, you may also instantiate with a sequence of\npositional arguments:\n\n.. code-block:: python\n\n    FactorRange(\"foo\", \"bar\") # equivalent to FactorRange(factors=[\"foo\", \"bar\"])\n\nUsers will normally supply categorical values directly:\n\n.. code-block:: python\n\n    p.circle(x=[\"foo\", \"bar\"], ...)\n\nBokehJS will create a mapping from ``\"foo\"`` and ``\"bar\"`` to a numerical\ncoordinate system called *synthetic coordinates*. In the simplest cases,\nfactors are separated by a distance of 1.0 in synthetic coordinates,\nhowever the exact mapping from factors to synthetic coordinates is\naffected by he padding properties as well as whether the number of levels\nthe factors have.\n\nUsers typically do not need to worry about the details of this mapping,\nhowever it can be useful to fine tune positions by adding offsets. When\nsupplying factors as coordinates or values, it is possible to add an\noffset in the synthetic coordinate space by adding a final number value\nto a factor tuple. For example:\n\n.. code-block:: python\n\n    p.circle(x=[(\"foo\", 0.3), ...], ...)\n\nwill position the first circle at an ``x`` position that is offset by\nadding 0.3 to the synthetic coordinate for ``\"foo\"``.",
    "props": [
      {
        "name": "subgroup_padding",
        "type": "Float",
        "desc": "How much padding to add in between mid-level groups of factors. This\nproperty only applies when the overall factors have three levels. For\nexample with:\n\n.. code-block:: python\n\n    FactorRange(factors=[\n        ['foo', 'A', '1'],  ['foo', 'A', '2'], ['foo', 'A', '3'],\n        ['foo', 'B', '2'],\n        ['bar', 'A', '1'],  ['bar', 'A', '2']\n    ])\n\nThis property dictates how much padding to add between the three factors\nin the `['foo', 'A']` group, and between the two factors in the the\n[`bar`]",
        "default": 0.8
      },
      {
        "name": "start",
        "type": "Readonly(Float)",
        "desc": "The start of the range, in synthetic coordinates.\n\n    Synthetic coordinates are only computed in the browser, based on the\n    factors and various padding properties. The value of ``start`` will only\n    be available in situations where bidirectional communication is\n    available (e.g. server, notebook).",
        "default": 0.0
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "A sequence of factors to define this categorical range.\n\nFactors may have 1, 2, or 3 levels. For 1-level factors, each factor is\nsimply a string. For example:\n\n.. code-block:: python\n\n    FactorRange(factors=[\"sales\", \"marketing\", \"engineering\"])\n\ndefines a range with three simple factors that might represent different\nunits of a business.\n\nFor 2- and 3- level factors, each factor is a tuple of strings:\n\n.. code-block:: python\n\n    FactorRange(factors=[\n        [\"2016\", \"sales'], [\"2016\", \"marketing'], [\"2016\", \"engineering\"],\n        [\"2017\", \"sales'], [\"2017\", \"marketing'], [\"2017\", \"engineering\"],\n    ])\n\ndefines a range with six 2-level factors that might represent the three\nbusiness units, grouped by year.\n\nNote that factors and sub-factors *may only be strings*.",
        "default": []
      },
      {
        "name": "min_interval",
        "type": "Nullable(Float)",
        "desc": "The level that the range is allowed to zoom in, expressed as the\nminimum visible interval in synthetic coordinates. If set to ``None``\n(default), the minimum interval is not bounded.\n\nThe default \"width\" of a category is 1.0 in synthetic coordinates.\nHowever, the distance between factors is affected by the various\npadding properties and whether or not factors are grouped.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "group_padding",
        "type": "Float",
        "desc": "How much padding to add in between top-level groups of factors. This\nproperty only applies when the overall range factors have either two or\nthree levels. For example, with:\n\n.. code-block:: python\n\n    FactorRange(factors=[[\"foo\", \"1'], [\"foo\", \"2'], [\"bar\", \"1\"]])\n\nThe top level groups correspond to ``\"foo\"` and ``\"bar\"``, and the\ngroup padding will be applied between the factors ``[\"foo\", \"2']`` and\n``[\"bar\", \"1\"]``",
        "default": 1.4
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta))))",
        "desc": "The bounds (in synthetic coordinates) that the range is allowed to go to.\nTypically used to prevent the user from panning/zooming/etc away from the\ndata.\n\n.. note::\n    Synthetic coordinates are only computed in the browser, based on the\n    factors and various padding properties. Some experimentation may be\n    required to arrive at bounds suitable for specific situations.\n\nBy default, the bounds will be None, allowing your plot to pan/zoom as far\nas you want. If bounds are 'auto' they will be computed to be the same as\nthe start and end of the ``FactorRange``.",
        "default": null
      },
      {
        "name": "factor_padding",
        "type": "Float",
        "desc": "How much padding to add in between all lowest-level factors. When\n``factor_padding`` is non-zero, every factor in every group will have the\npadding value applied.",
        "default": 0.0
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval in synthetic coordinates.. Note that ``bounds``\ncan impose an implicit constraint on the maximum interval as well.\n\nThe default \"width\" of a category is 1.0 in synthetic coordinates.\nHowever, the distance between factors is affected by the various\npadding properties and whether or not factors are grouped.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "end",
        "type": "Readonly(Float)",
        "desc": "The end of the range, in synthetic coordinates.\n\n.. note::\n    Synthetic coordinates are only computed in the browser, based on the\n    factors and various padding properties. The value of ``end`` will only\n    be available in situations where bidirectional communication is\n    available (e.g. server, notebook).",
        "default": 0.0
      },
      {
        "name": "range_padding",
        "type": "Float",
        "desc": "How much padding to add around the outside of computed range bounds.\n\nWhen ``range_padding_units`` is set to ``\"percent\"``, the span of the\nrange span is expanded to make the range ``range_padding`` percent larger.\n\nWhen ``range_padding_units`` is set to ``\"absolute\"``, the start and end\nof the range span are extended by the amount ``range_padding``.",
        "default": 0
      },
      {
        "name": "range_padding_units",
        "type": "Enum('percent', 'absolute')",
        "desc": "Whether the ``range_padding`` should be interpreted as a percentage, or\nas an absolute quantity. (default: ``\"percent\"``)",
        "default": "percent"
      }
    ]
  },
  {
    "name": "FileInput",
    "fullname": "bokeh.models.widgets.inputs.FileInput",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": "Present a file-chooser dialog to users and return the contents of the\nselected files.",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "Readonly(Either(String, List(String)))",
        "desc": "The base64-enconded contents of the file or files that were loaded.\n\nIf `mulitiple` is set to False (default), this value is a single string with the contents\nof the single file that was chosen.\n\nIf `multiple` is True, this value is a list of strings, each containing the contents of\none of the multiple files that were chosen.\n\nThe sequence of files is given by the list of filenames (see below)",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "accept",
        "type": "String",
        "desc": "Comma-separated list of standard HTML file input filters that restrict what\nfiles the user can pick from. Values can be:\n\n`<file extension>`:\n    Specific file extension(s) (e.g: .gif, .jpg, .png, .doc) are pickable\n\n`audio/*`:\n    all sound files are pickable\n\n`video/*`:\n    all video files are pickable\n\n`image/*`:\n    all image files are pickable\n\n`<media type>`:\n    A valid `IANA Media Type`_, with no parameters.\n\n.. _IANA Media Type: https://www.iana.org/assignments/media-types/media-types.xhtml\n\n.. note::\n    A bug in some versions of Chrome on macOS Big Sur may limit\n    how you can set a file input filter for those users. In those cases,\n    it is impossible to limit the user's selection to specific file\n    extensions - instead, the browser will limit users to predefined sets of\n    file types, such as ``Text/*`` or ``Image/*``. See :bokeh-issue:`10888`\n    for more information.",
        "default": ""
      },
      {
        "name": "multiple",
        "type": "Bool",
        "desc": "set multiple=False (default) for single file selection, set multiple=True if\nselection of more than one file at a time should be possible.",
        "default": false
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "mime_type",
        "type": "Readonly(Either(String, List(String)))",
        "desc": "The mime-type of the file or files that were loaded.\n\nIf `mulitiple` is set to False (default), this value is a single string with the\nmime-type of the single file that was chosen.\n\nIf `multiple` is True, this value is a list of strings, each containing the\nmime-type of one of the multiple files that were chosen.\n\nThe sequence of files is given by the list of filename (see below)",
        "default": ""
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "filename",
        "type": "Readonly(Either(String, List(String)))",
        "desc": "The name(s) of the file or files that were loaded.\n\nIf `mulitiple` is set to False (default), this value is a single string with the\nname of the single file that was chosen.\n\nIf `multiple` is True, this value is a list of strings, each containing the\nname of one of the multiple files that were chosen.\n\nThis list provides the sequence of files for the respective lists in value and mime-type\n\n.. note::\n    The full file path is not included since browsers will not provide\n    access to that information for security reasons.",
        "default": ""
      }
    ]
  },
  {
    "name": "FillGlyph",
    "fullname": "bokeh.models.glyph.FillGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": "Glyphs with fill properties\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Filter",
    "fullname": "bokeh.models.filters.Filter",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A Filter model represents a filtering operation that returns a row-wise subset of\ndata when applied to a ``ColumnDataSource``.\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "FixedTicker",
    "fullname": "bokeh.models.tickers.FixedTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": "Generate ticks at fixed, explicitly supplied locations.\n\n.. note::\n    The ``desired_num_ticks`` property is ignored by this Ticker.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "minor_ticks",
        "type": "Seq(Float)",
        "desc": "List of minor tick locations.",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "ticks",
        "type": "Seq(Float)",
        "desc": "List of major tick locations.",
        "default": []
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "FreehandDrawTool",
    "fullname": "bokeh.models.tools.FreehandDrawTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": "*toolbar icon*: |freehand_draw_icon|\n\nAllows freehand drawing of ``Patches`` and ``MultiLine`` glyphs. The glyph\nto draw may be defined via the ``renderers`` property.\n\nThe tool will modify the columns on the data source corresponding to the\n``xs`` and ``ys`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared ``empty_value``, when adding a new\npoint.\n\nThe supported actions include:\n\n* Draw vertices: Click and drag to draw a line\n\n* Delete patch/multi-line: Tap a patch/multi-line to select it then press\n  <<backspace>> key while the mouse is within the plot area.\n\n.. |freehand_draw_icon| image:: /_images/icons/FreehandDraw.png\n    :height: 24px",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "Defines a limit on the number of patches or multi-lines that can be drawn.\nBy default there is no limit on the number of objects, but if enabled the\noldest drawn patch or multi-line will be overwritten when the limit is\nreached.",
        "default": 0
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "FuncTickFormatter",
    "fullname": "bokeh.models.formatters.FuncTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": "Display tick values that are formatted by a user-defined function.\n\n.. warning::\n    The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n    code* for a browser to execute. If any part of the code is derived\n    from untrusted user inputs, then you must take appropriate care to\n    sanitize the user input prior to passing to Bokeh.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "code",
        "type": "String",
        "desc": "A snippet of JavaScript code that reformats a single tick to the desired\nformat. The variable ``tick`` will contain the unformatted tick value and\ncan be expected to be present in the code snippet namespace at render time.\n\nAdditionally available variables are:\n\n  * ``ticks``, an array of all axis ticks as positioned by the ticker,\n  * ``index``, the position of ``tick`` within ``ticks``, and\n  * the keys of ``args`` mapping, if any.\n\nFinding yourself needing to cache an expensive ``ticks``-dependent\ncomputation, you can store it on the ``this`` variable.\n\nExample:\n\n    .. code-block:: javascript\n\n        code = '''\n        this.precision = this.precision || (ticks.length > 5 ? 1 : 2);\n        return Math.floor(tick) + \" + \" + (tick % 1).toFixed(this.precision);\n        '''",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "A mapping of names to Python objects. In particular those can be bokeh's models.\nThese objects are made available to the formatter's code snippet as the values of\nnamed parameters to the callback.",
        "default": {}
      }
    ]
  },
  {
    "name": "GMapOptions",
    "fullname": "bokeh.models.map_plots.GMapOptions",
    "bases": [
      "bokeh.models.map_plots.MapOptions"
    ],
    "desc": "Options for ``GMapPlot`` objects.\n\n    ",
    "props": [
      {
        "name": "zoom",
        "type": "Int",
        "desc": "The initial zoom level to use when displaying the map.",
        "default": 12
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "lng",
        "type": "NonNullable(Float)",
        "desc": "The longitude where the map should be centered.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "lat",
        "type": "NonNullable(Float)",
        "desc": "The latitude where the map should be centered.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "map_type",
        "type": "Enum('satellite', 'roadmap', 'terrain', 'hybrid')",
        "desc": "The `map type`_ to use for the ``GMapPlot``.\n\n.. _map type: https://developers.google.com/maps/documentation/javascript/reference#MapTypeId",
        "default": "roadmap"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "tilt",
        "type": "Int",
        "desc": "`Tilt`_ angle of the map. The only allowed values are 0 and 45.\nOnly has an effect on 'satellite' and 'hybrid' map types.\nA value of 0 causes the map to always use a 0 degree overhead view.\nA value of 45 causes the tilt angle to switch to 45 imagery if available.\n\n.. _Tilt: https://developers.google.com/maps/documentation/javascript/reference/3/map#MapOptions.tilt",
        "default": 45
      },
      {
        "name": "scale_control",
        "type": "Bool",
        "desc": "Whether the Google map should display its distance scale control.",
        "default": false
      },
      {
        "name": "styles",
        "type": "NonNullable(JSON)",
        "desc": "A JSON array of `map styles`_ to use for the ``GMapPlot``. Many example styles can\n`be found here`_.\n\n.. _map styles: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n.. _be found here: https://snazzymaps.com",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "GMapPlot",
    "fullname": "bokeh.models.map_plots.GMapPlot",
    "bases": [
      "bokeh.models.map_plots.MapPlot"
    ],
    "desc": "A Bokeh Plot with a `Google Map`_ displayed underneath.\n\nData placed on this plot should be specified in decimal lat/lon coordinates\ne.g. ``(37.123, -122.404)``. It will be automatically converted into the\nweb mercator projection to display properly over google maps tiles.\n\nThe ``api_key`` property must be configured with a Google API Key in order\nfor ``GMapPlot`` to function. The key will be stored in the Bokeh Document\nJSON.\n\nNote that Google Maps exert explicit control over aspect ratios at all\ntimes, which imposes some limitations on ``GMapPlot``:\n\n* Only ``Range1d`` ranges are supported. Attempting to use other range\n  types will result in an error.\n\n* Usage of ``BoxZoomTool`` is incompatible with ``GMapPlot``. Adding a\n  ``BoxZoomTool`` will have no effect.\n\n.. _Google Map: https://www.google.com/maps/",
    "props": [
      {
        "name": "below",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area below of the plot.",
        "default": []
      },
      {
        "name": "x_range",
        "type": "Instance(Range)",
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "default": "{\"__type__\": \"bokeh.models.ranges.Range1d\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "outline_line_dash",
        "type": "DashPattern",
        "desc": "The line dash for the plot border outline.",
        "default": []
      },
      {
        "name": "toolbar_sticky",
        "type": "Bool",
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\nthe toolbar will be outside of the axes, titles etc.",
        "default": true
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "min_border_top",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region above the top of the\ncentral plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outer_width",
        "type": "Readonly(Int)",
        "desc": "This is the exact width of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "extra_x_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "Additional named scales to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.",
        "default": {}
      },
      {
        "name": "map_options",
        "type": "Instance(GMapOptions)",
        "desc": "Options for displaying the plot.",
        "default": "<Undefined>"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "toolbar_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "Where the toolbar will be located. If set to None, no toolbar\nwill be attached to the plot.",
        "default": "right"
      },
      {
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "desc": "A list of all renderers for this plot, including guides and annotations\nin addition to glyphs.\n\nThis property can be manipulated by hand, but the ``add_glyph`` and\n``add_layout`` methods are recommended to help make sure all necessary\nsetup is performed.",
        "default": []
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "The toolbar associated with this plot which holds all the tools. It is\nautomatically created with the plot if necessary.",
        "default": "{\"__type__\": \"bokeh.models.tools.Toolbar\"}"
      },
      {
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the plot border outline.",
        "default": "butt"
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "y_range",
        "type": "Instance(Range)",
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "default": "{\"__type__\": \"bokeh.models.ranges.Range1d\"}"
      },
      {
        "name": "min_border_left",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region to the left of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outline_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset for the plot border outline.",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": 600
      },
      {
        "name": "outline_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha for the plot border outline.",
        "default": 1.0
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Either(Null, Instance(Title))",
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "default": "{\"__type__\": \"bokeh.models.annotations.Title\"}"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "lod_interval",
        "type": "Int",
        "desc": "Interval (in ms) during which an interactive tool event will enable\nlevel-of-detail downsampling.",
        "default": 300
      },
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\nthe ratio of width over height. This property controls whether Bokeh should\nattempt to match the (width/height) of *data space* to the (width/height)\nin pixels of *screen space*.\n\nDefault is ``False`` which indicates that the *data* aspect ratio and the\n*screen* aspect ratio vary independently. ``True`` indicates that the plot\naspect ratio of the axes will match the aspect ratio of the pixel extent\nthe axes. The end result is that a 1x1 area in data space is a square in\npixels, and conversely that a 1x1 pixel is a square in data units.\n\n.. note::\n    This setting only takes effect when there are two dataranges. This\n    setting only sets the initial plot draw and subsequent resets. It is\n    possible for tools (single axis zoom, unconstrained box zoom) to\n    change the aspect ratio.\n\n.. warning::\n    This setting is incompatible with linking dataranges across multiple\n    plots. Doing so may result in undefined behavior.",
        "default": false
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert x-coordinates in data space\ninto x-coordinates in screen space.",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.",
        "default": {}
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "reset_policy",
        "type": "Enum('standard', 'event_only')",
        "desc": "How a plot should respond to being reset. By deafult, the standard actions\nare to clear any tool state history, return plot ranges to their original\nvalues, undo all selections, and emit a ``Reset`` event. If customization\nis desired, this property may be set to ``\"event_only\"``, which will\nsuppress all of the actions except the Reset event.",
        "default": "standard"
      },
      {
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n.. note::\n    When set to ``webgl``, glyphs without a WebGL rendering implementation\n    will fall back to rendering onto 2D canvas.",
        "default": "canvas"
      },
      {
        "name": "extra_y_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "Additional named scales to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.",
        "default": {}
      },
      {
        "name": "inner_width",
        "type": "Readonly(Int)",
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "border_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the plot border style.",
        "default": 1.0
      },
      {
        "name": "border_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the plot border style.",
        "default": "#ffffff"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "frame_width",
        "type": "Nullable(Int)",
        "desc": "The width of a plot frame or the inner width of a plot, excluding any\naxes, titles, border padding, etc.",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the plot background style.",
        "default": "#ffffff"
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the plot background style.",
        "default": 1.0
      },
      {
        "name": "center",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the center area (frame) of the plot.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": 600
      },
      {
        "name": "hidpi",
        "type": "Bool",
        "desc": "Whether to use HiDPI mode when available.",
        "default": true
      },
      {
        "name": "min_border_bottom",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region below the bottom of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outline_line_width",
        "type": "Float",
        "desc": "The line width for the plot border outline.",
        "default": 1
      },
      {
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the plot border outline.",
        "default": "bevel"
      },
      {
        "name": "right",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "default": []
      },
      {
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.",
        "default": {}
      },
      {
        "name": "frame_height",
        "type": "Nullable(Int)",
        "desc": "The height of a plot frame or the inner height of a plot, excluding any\naxes, titles, border padding, etc.",
        "default": null
      },
      {
        "name": "lod_timeout",
        "type": "Int",
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\noccurring. Once level-of-detail mode is enabled, a check is made every\n``lod_timeout`` ms. If no interactive tool events have happened,\nlevel-of-detail mode is disabled.",
        "default": 500
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "api_key",
        "type": "NonNullable(Base64String)",
        "desc": "Google Maps API requires an API key. See https://developers.google.com/maps/documentation/javascript/get-api-key\nfor more information on how to obtain your own.",
        "default": "<Undefined>"
      },
      {
        "name": "inner_height",
        "type": "Readonly(Int)",
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "outer_height",
        "type": "Readonly(Int)",
        "desc": "This is the exact height of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "min_border_right",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region to the right of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "lod_threshold",
        "type": "Nullable(Int)",
        "desc": "A number of data points, above which level-of-detail downsampling may\nbe performed by glyph renderers. Set to ``None`` to disable any\nlevel-of-detail downsampling.",
        "default": 2000
      },
      {
        "name": "left",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "default": []
      },
      {
        "name": "api_version",
        "type": "String",
        "desc": "The version of Google Maps API to use. See https://developers.google.com/maps/documentation/javascript/versions\nfor more information.\n\n.. note::\n    Changing this value may result in broken map rendering.",
        "default": "3.43"
      },
      {
        "name": "above",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area above of the plot.",
        "default": []
      },
      {
        "name": "outline_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color for the plot border outline.",
        "default": "#e5e5e5"
      },
      {
        "name": "lod_factor",
        "type": "Int",
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "default": 10
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert y-coordinates in data space\ninto y-coordinates in screen space.",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "A value to be given for increased aspect ratio control. This value is added\nmultiplicatively to the calculated value required for ``match_aspect``.\n``aspect_scale`` is defined as the ratio of width over height of the figure.\n\nFor example, a plot with ``aspect_scale`` value of 2 will result in a\nsquare in *data units* to be drawn on the screen as a rectangle with a\npixel width twice as long as its pixel height.\n\n.. note::\n    This setting only takes effect if ``match_aspect`` is set to ``True``.",
        "default": 1
      },
      {
        "name": "title_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "Where the title will be located. Titles on the left or right side\nwill be rotated.",
        "default": "above"
      },
      {
        "name": "min_border",
        "type": "Nullable(Int)",
        "desc": "A convenience property to set all all the ``min_border_X`` properties\nto the same value. If an individual border property is explicitly set,\nit will override ``min_border``.",
        "default": 5
      }
    ]
  },
  {
    "name": "GeoJSONDataSource",
    "fullname": "bokeh.models.sources.GeoJSONDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "geojson",
        "type": "NonNullable(JSON)",
        "desc": "GeoJSON that contains features for plotting. Currently\n``GeoJSONDataSource`` can only process a ``FeatureCollection`` or\n``GeometryCollection``.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "An instance of a ``SelectionPolicy`` that determines how selections are set.",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      }
    ]
  },
  {
    "name": "GestureTool",
    "fullname": "bokeh.models.tools.GestureTool",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "desc": "A base class for tools that respond to drag events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "Glyph",
    "fullname": "bokeh.models.glyph.Glyph",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for all glyph models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "GlyphRenderer",
    "fullname": "bokeh.models.renderers.GlyphRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "data_source",
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "default": "<Undefined>"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "A view into the data source to use when rendering glyphs. A default view\nof the entire data source is created when a view is not passed in during\ninitialization.\n\n.. note:\n    Only the default (filterless) CDSView is compatible with glyphs that\n    have connected topology, such as Line and Patch. Setting filters on\n    views for these glyphs will result in a warning and undefined behavior.",
        "default": "<Undefined>"
      },
      {
        "name": "nonselection_glyph",
        "type": "Nullable(Either(Auto, Instance(Glyph)))",
        "desc": "\"\nAn optional glyph used for explicitly non-selected points\n(i.e., non-selected when there are other points that are selected,\nbut not when no points at all are selected.)\n\nIf set to \"auto\" then a glyph with a low alpha value (0.1) will\nbe used for non-selected points.",
        "default": "auto"
      },
      {
        "name": "muted",
        "type": "Bool",
        "desc": "    ",
        "default": false
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "hover_glyph",
        "type": "Nullable(Instance(Glyph))",
        "desc": "An optional glyph used for inspected points, e.g., those that are\nbeing hovered over by a ``HoverTool``.",
        "default": null
      },
      {
        "name": "glyph",
        "type": "Instance(Glyph)",
        "desc": "The glyph to render, in conjunction with the supplied data source\nand ranges.",
        "default": "<Undefined>"
      },
      {
        "name": "selection_glyph",
        "type": "Nullable(Either(Auto, Instance(Glyph)))",
        "desc": "\"\nAn optional glyph used for selected points.\n\nIf set to \"auto\" then the standard glyph will be used for selected\npoints.",
        "default": "auto"
      },
      {
        "name": "muted_glyph",
        "type": "Nullable(Either(Auto, Instance(Glyph)))",
        "desc": "\"\n    ",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "glyph"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "GraphCoordinates",
    "fullname": "bokeh.models.graphs.GraphCoordinates",
    "bases": [
      "bokeh.models.expressions.CoordinateTransform"
    ],
    "desc": "Abstract class for coordinate transform expression obtained from ``LayoutProvider``\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "layout",
        "type": "Instance(LayoutProvider)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "GraphHitTestPolicy",
    "fullname": "bokeh.models.graphs.GraphHitTestPolicy",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "GraphRenderer",
    "fullname": "bokeh.models.renderers.GraphRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "layout_provider",
        "type": "Instance(LayoutProvider)",
        "desc": "An instance of a ``LayoutProvider`` that supplies the layout of the network\ngraph in cartesian space.",
        "default": "<Undefined>"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "edge_renderer",
        "type": "Instance(GlyphRenderer)",
        "desc": "Instance of a ``GlyphRenderer`` containing an ``MultiLine`` Glyph that will be\nrendered as the graph edges.",
        "default": "{\"__type__\": \"bokeh.models.renderers.GlyphRenderer\", \"data_source\": {\"id\": \"3230\"}, \"glyph\": {\"id\": \"3229\"}, \"view\": {\"id\": \"3232\"}}"
      },
      {
        "name": "node_renderer",
        "type": "Instance(GlyphRenderer)",
        "desc": "Instance of a ``GlyphRenderer`` containing an ``XYGlyph`` that will be rendered\nas the graph nodes.",
        "default": "{\"__type__\": \"bokeh.models.renderers.GlyphRenderer\", \"data_source\": {\"id\": \"3235\"}, \"glyph\": {\"id\": \"3234\"}, \"view\": {\"id\": \"3237\"}}"
      },
      {
        "name": "inspection_policy",
        "type": "Instance(GraphHitTestPolicy)",
        "desc": "An instance of a ``GraphHitTestPolicy`` that provides the logic for inspection\nof graph components.",
        "default": "{\"__type__\": \"bokeh.models.graphs.NodesOnly\"}"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "selection_policy",
        "type": "Instance(GraphHitTestPolicy)",
        "desc": "An instance of a ``GraphHitTestPolicy`` that provides the logic for selection\nof graph components.",
        "default": "{\"__type__\": \"bokeh.models.graphs.NodesOnly\"}"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "glyph"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "Grid",
    "fullname": "bokeh.models.grids.Grid",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "desc": "Display horizontal or vertical grid lines at locations\ngiven by a supplied ``Ticker``.",
    "props": [
      {
        "name": "band_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha of alternating bands between Grid lines.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "band_hatch_alpha",
        "type": "Alpha",
        "desc": "The hatch alpha of alternating bands between Grid lines.",
        "default": 1.0
      },
      {
        "name": "band_hatch_color",
        "type": "Nullable(Color)",
        "desc": "The hatch color of alternating bands between Grid lines.",
        "default": "black"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "minor_grid_line_width",
        "type": "Float",
        "desc": "The line width of the minor Grid lines.",
        "default": 1
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float))",
        "desc": "Bounds for the rendered grid lines. By default, a grid will look for a\ncorresponding axis to ask for bounds. If one cannot be found, the grid\nwill span the entire visible range.",
        "default": "auto"
      },
      {
        "name": "dimension",
        "type": "Int",
        "desc": "Which dimension the Axis Grid lines will intersect. The\nx-axis is dimension 0 (vertical Grid lines) and the y-axis\nis dimension 1 (horizontal Grid lines).",
        "default": 0
      },
      {
        "name": "band_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color of alternating bands between Grid lines.",
        "default": null
      },
      {
        "name": "grid_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the Grid lines.",
        "default": "butt"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "band_hatch_scale",
        "type": "Size",
        "desc": "The hatch scale of alternating bands between Grid lines.",
        "default": 12.0
      },
      {
        "name": "ticker",
        "type": "Nullable(Instance(Ticker))",
        "desc": "A Ticker to use for computing locations for the Grid lines.",
        "default": null
      },
      {
        "name": "grid_line_width",
        "type": "Float",
        "desc": "The line width of the Grid lines.",
        "default": 1
      },
      {
        "name": "minor_grid_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor Grid lines.",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_grid_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor Grid lines.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "minor_grid_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor Grid lines.",
        "default": "bevel"
      },
      {
        "name": "grid_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the Grid lines.",
        "default": []
      },
      {
        "name": "minor_grid_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor Grid lines.",
        "default": 0
      },
      {
        "name": "minor_grid_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor Grid lines.",
        "default": null
      },
      {
        "name": "band_hatch_weight",
        "type": "Size",
        "desc": "The hatch weight of alternating bands between Grid lines.",
        "default": 1.0
      },
      {
        "name": "grid_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the Grid lines.",
        "default": 1.0
      },
      {
        "name": "grid_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the Grid lines.",
        "default": 0
      },
      {
        "name": "band_hatch_pattern",
        "type": "Nullable(String)",
        "desc": "The hatch pattern of alternating bands between Grid lines.",
        "default": null
      },
      {
        "name": "axis",
        "type": "Nullable(Instance(Axis))",
        "desc": "An Axis to delegate ticking to. If the ticker property is None, then the\nGrid will use the ticker on the specified axis for computing where to draw\ngrid lines. Otherwise, it ticker is not None, it will take precedence over\nany Axis.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "minor_grid_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor Grid lines.",
        "default": []
      },
      {
        "name": "band_hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra of alternating bands between Grid lines.",
        "default": {}
      },
      {
        "name": "grid_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the Grid lines.",
        "default": "bevel"
      },
      {
        "name": "grid_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the Grid lines.",
        "default": "#e5e5e5"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "underlay"
      }
    ]
  },
  {
    "name": "GridBox",
    "fullname": "bokeh.models.layouts.GridBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "rows",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), height=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "Describes how the grid should maintain its rows' heights.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion.",
        "default": "auto"
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "spacing",
        "type": "Either(Int, Tuple(Int, Int))",
        "desc": "The gap between children (in pixels).\n\nEither a number, if spacing is the same for both dimensions, or a pair\nof numbers indicating spacing in the vertical and horizontal dimensions\nrespectively.",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "cols",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), width=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "Describes how the grid should maintain its columns' widths.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion.",
        "default": "auto"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(Tuple(Instance(LayoutDOM), Int, Int), Tuple(Instance(LayoutDOM), Int, Int, Int, Int)))",
        "desc": "A list of children with their associated position in the grid (row, column).",
        "default": []
      }
    ]
  },
  {
    "name": "Group",
    "fullname": "bokeh.models.widgets.groups.Group",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup"
    ],
    "desc": "Abstract base class for groups with items rendered as check/radio\nboxes.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "Should items be arrange vertically (``False``) or horizontally\nin-line (``True``).",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "GroupFilter",
    "fullname": "bokeh.models.filters.GroupFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": "A ``GroupFilter`` represents the rows of a ``ColumnDataSource`` where the values of the categorical\ncolumn column_name match the group variable.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "column_name",
        "type": "NonNullable(String)",
        "desc": "The name of the column to perform the group filtering operation on.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "NonNullable(String)",
        "desc": "The value of the column indicating the rows of data to keep.",
        "default": "<Undefined>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "GroupingInfo",
    "fullname": "bokeh.models.widgets.tables.GroupingInfo",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Describes how to calculate totals and sub-totals\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "collapsed",
        "type": "Bool",
        "desc": "Whether the corresponding sub-total is expanded or collapsed by default.",
        "default": false
      },
      {
        "name": "getter",
        "type": "String",
        "desc": "References the column which generates the unique keys of this sub-total (groupby).",
        "default": ""
      },
      {
        "name": "aggregators",
        "type": "List(Instance(RowAggregator))",
        "desc": "Describes how to aggregate the columns which will populate this sub-total.",
        "default": []
      }
    ]
  },
  {
    "name": "GuideRenderer",
    "fullname": "bokeh.models.renderers.GuideRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": "A base class for all guide renderer types. ``GuideRenderer`` is\nnot generally useful to instantiate on its own.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "HArea",
    "fullname": "bokeh.models.glyphs.HArea",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render a horizontally directed area between two equal length sequences\nof x-coordinates with the same y-coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/HArea.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the horizontal directed area.",
        "default": 1.0
      },
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for the points of one side of the area.",
        "default": {
          "field": "x1"
        }
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the horizontal directed area.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the horizontal directed area.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the horizontal directed area.",
        "default": 1.0
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the horizontal directed area.",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for the points of the area.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the horizontal directed area.",
        "default": "black"
      },
      {
        "name": "x2",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for the points of the other side of the area.",
        "default": {
          "field": "x2"
        }
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the horizontal directed area.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the horizontal directed area.",
        "default": "gray"
      }
    ]
  },
  {
    "name": "HBar",
    "fullname": "bokeh.models.glyphs.HBar",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render horizontal bars, given a center coordinate, ``height`` and\n(``left``, ``right``) coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/HBar.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the horizontal bars.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the horizontal bars.",
        "default": {}
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the horizontal bars.",
        "default": 1.0
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the horizontal bars.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the horizontal bars.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the horizontal bars.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the horizontal bars.",
        "default": 1.0
      },
      {
        "name": "left",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the left edges.",
        "default": 0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the horizontal bars.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the horizontal bars.",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the centers of the horizontal bars.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the horizontal bars.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the horizontal bars.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the horizontal bars.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the horizontal bars.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The heights of the vertical bars.",
        "default": 1
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the horizontal bars.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the horizontal bars.",
        "default": "gray"
      },
      {
        "name": "right",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the right edges.",
        "default": {
          "field": "right"
        }
      }
    ]
  },
  {
    "name": "HTMLBox",
    "fullname": "bokeh.models.layouts.HTMLBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "A component which size is determined by its HTML content.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "HTMLTemplateFormatter",
    "fullname": "bokeh.models.widgets.tables.HTMLTemplateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "desc": "HTML formatter using a template.\nThis uses Underscore's `template` method and syntax.  http://underscorejs.org/#template\nThe formatter has access other items in the row via the `dataContext` object passed to the formatter.\nSo, for example, if another column in the datasource was named `url`, the template could access it as:\n\n.. code-block:: jinja\n\n    <a href=\"<%= url %>\"><%= value %></a>\n\nTo use a different set of template delimiters, pass the appropriate values for `evaluate`, `interpolate',\nor `escape`.  See the Underscore `template` documentation for more information.  http://underscorejs.org/#template\n\nExample: Simple HTML template to format the column value as code.\n\n.. code-block:: python\n\n    HTMLTemplateFormatter(template='<code><%= value %></code>')\n\nExample: Use values from other columns (`manufacturer` and `model`) to build a hyperlink.\n\n.. code-block:: python\n\n    HTMLTemplateFormatter(template=\n        '<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>'\n    )",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "template",
        "type": "String",
        "desc": "Template string to be used by Underscore's template method.",
        "default": "<%= value %>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "HatchGlyph",
    "fullname": "bokeh.models.glyph.HatchGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": "Glyphs with Hatch properties\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "HelpTool",
    "fullname": "bokeh.models.tools.HelpTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "A button tool to provide a \"help\" link to users.\n\nThe hover text can be customized through the ``help_tooltip`` attribute\nand the redirect site overridden as well.",
    "props": [
      {
        "name": "redirect",
        "type": "String",
        "desc": "Site to be redirected through upon click.",
        "default": "https://docs.bokeh.org/en/latest/docs/user_guide/tools.html"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": "Click the question mark to learn more about Bokeh plot tools."
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "HexTile",
    "fullname": "bokeh.models.glyphs.HexTile",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render horizontal tiles on a regular hexagonal grid.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/HexTile.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the hex tiles.",
        "default": 1.0
      },
      {
        "name": "orientation",
        "type": "String",
        "desc": "    ",
        "default": "pointytop"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the hex tiles.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the hex tiles.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the hex tiles.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "size",
        "type": "Float",
        "desc": "The radius (in |data units|) of the hex tiling.\n\nThe radius is always measured along the cartesian y-axis for \"pointy_top\"\norientation, and along the cartesian x-axis for \"flat_top\" orientation. If\nthe aspect ratio of the underlying cartesian system is not 1-1, then the\ntiles may be \"squished\" in one direction. To ensure that the tiles are\nalways regular hexagons, consider setting the ``match_aspect`` property of\nthe plot to True.",
        "default": 1.0
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the hex tiles.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "q",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The \"column\" axial coordinates of the tile centers.",
        "default": {
          "field": "q"
        }
      },
      {
        "name": "r",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The \"row\" axial coordinates of the tile centers.",
        "default": {
          "field": "r"
        }
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the hex tiles.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the hex tiles.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the hex tiles.",
        "default": null
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the hex tiles.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the hex tiles.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the hex tiles.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the hex tiles.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the hex tiles.",
        "default": "gray"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the hex tiles.",
        "default": null
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "    ",
        "default": 1.0
      },
      {
        "name": "scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "A scale factor for individual tiles.",
        "default": 1.0
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the hex tiles.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "HoverTool",
    "fullname": "bokeh.models.tools.HoverTool",
    "bases": [
      "bokeh.models.tools.InspectTool"
    ],
    "desc": "*toolbar icon*: |hover_icon|\n\nThe hover tool is a passive inspector tool. It is generally on at all\ntimes, but can be configured in the inspector's menu associated with the\n*toolbar icon* shown above.\n\nBy default, the hover tool displays informational tooltips whenever the\ncursor is directly over a glyph. The data to show comes from the glyph's\ndata source, and what to display is configurable with the ``tooltips``\nproperty that maps display names to columns in the data source, or to\nspecial known variables.\n\nHere is an example of how to configure and use the hover tool::\n\n    # Add tooltip (name, field) pairs to the tool. See below for a\n    # description of possible field values.\n    hover.tooltips = [\n        (\"index\", \"$index\"),\n        (\"(x,y)\", \"($x, $y)\"),\n        (\"radius\", \"@radius\"),\n        (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n        (\"fill color\", \"$color[hex]:fill_color\"),\n        (\"fill color\", \"$color:fill_color\"),\n        (\"fill color\", \"$swatch:fill_color\"),\n        (\"foo\", \"@foo\"),\n        (\"bar\", \"@bar\"),\n        (\"baz\", \"@baz{safe}\"),\n        (\"total\", \"@total{$0,0.00}\"\n    ]\n\nYou can also supply a ``Callback`` to the ``HoverTool``, to build custom\ninteractions on hover. In this case you may want to turn the tooltips\noff by setting ``tooltips=None``.\n\n.. warning::\n    When supplying a callback or custom template, the explicit intent\n    of this Bokeh Model is to embed *raw HTML and  JavaScript code* for\n    a browser to execute. If any part of the code is derived from untrusted\n    user inputs, then you must take appropriate care to sanitize the user\n    input prior to passing to Bokeh.\n\nHover tool does not currently work with the following glyphs:\n\n    .. hlist::\n        :columns: 3\n\n        * annulus\n        * arc\n        * bezier\n        * image_url\n        * oval\n        * patch\n        * quadratic\n        * ray\n        * step\n        * text\n\n.. |hover_icon| image:: /_images/icons/Hover.png\n    :height: 24px",
    "props": [
      {
        "name": "toggleable",
        "type": "Bool",
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\ninspection tool. If ``False``, the viewers of a plot will not be able to\ntoggle the inspector on or off using the toolbar.",
        "default": true
      },
      {
        "name": "muted_policy",
        "type": "Enum('show', 'ignore')",
        "desc": "Whether to avoid showing tooltips on muted glyphs.",
        "default": "show"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.",
        "default": "auto"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "point_policy",
        "type": "Enum('snap_to_data', 'follow_mouse', 'none')",
        "desc": "Whether the tooltip position should snap to the \"center\" (or other anchor)\nposition of the associated glyph, or always follow the current mouse cursor\nposition.",
        "default": "snap_to_data"
      },
      {
        "name": "mode",
        "type": "Enum('mouse', 'hline', 'vline')",
        "desc": "Whether to consider hover pointer as a point (x/y values), or a\nspan on h or v directions.",
        "default": "mouse"
      },
      {
        "name": "line_policy",
        "type": "Enum('prev', 'next', 'nearest', 'interp', 'none')",
        "desc": "When showing tooltips for lines, designates whether the tooltip position\nshould be the \"previous\" or \"next\" points on the line, the \"nearest\" point\nto the current mouse position, or \"interpolate\" along the line to the\ncurrent mouse position.",
        "default": "nearest"
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that have a matching\nvalue for their ``name`` attribute will be used.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "formatters",
        "type": "Dict(String, Either(Enum('numeral', 'datetime', 'printf'), Instance(CustomJSHover)))",
        "desc": "Specify the formatting scheme for data source columns, e.g.\n\n.. code-block:: python\n\n    tool.formatters = {\"@date\": \"datetime\"}\n\nwill cause format specifications for the \"date\" column to be interpreted\naccording to the \"datetime\" formatting scheme. The following schemes are\navailable:\n\n:``\"numeral\"``:\n    Provides a wide variety of formats for numbers, currency, bytes, times,\n    and percentages. The full set of formats can be found in the\n    |NumeralTickFormatter| reference documentation.\n\n:``\"datetime\"``:\n    Provides formats for date and time values. The full set of formats is\n    listed in the |DatetimeTickFormatter| reference documentation.\n\n:``\"printf\"``:\n    Provides formats similar to C-style \"printf\" type specifiers. See the\n    |PrintfTickFormatter| reference documentation for complete details.\n\nIf no formatter is specified for a column name, the default ``\"numeral\"``\nformatter is assumed.\n\n.. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`\n.. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`\n.. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`",
        "default": {}
      },
      {
        "name": "anchor",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom')",
        "desc": "If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\npoint of a tooltip. The default is to attach to the center of a glyph.",
        "default": "center"
      },
      {
        "name": "callback",
        "type": "Nullable(Instance(Callback))",
        "desc": "A callback to run in the browser whenever the input's value changes. The\n``cb_data`` parameter that is available to the Callback code will contain two\n``HoverTool`` specific fields:\n\n:index: object containing the indices of the hovered points in the data source\n:geometry: object containing the coordinates of the hover cursor",
        "default": null
      },
      {
        "name": "attachment",
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')",
        "desc": "Whether the tooltip should be displayed to the left or right of the cursor\nposition or above or below it, or if it should be automatically placed\nin the horizontal or vertical dimension.",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tooltips",
        "type": "Either(Null, Instance(Template), String, List(Tuple(String, String)))",
        "desc": "The (name, field) pairs describing what the hover tool should\ndisplay when there is a hit.\n\nField names starting with \"@\" are interpreted as columns on the\ndata source. For instance, \"@temp\" would look up values to display\nfrom the \"temp\" column of the data source.\n\nField names starting with \"$\" are special, known fields:\n\n:$index: index of hovered point in the data source\n:$name: value of the ``name`` property of the hovered glyph renderer\n:$x: x-coordinate under the cursor in data space\n:$y: y-coordinate under the cursor in data space\n:$sx: x-coordinate under the cursor in screen (canvas) space\n:$sy: y-coordinate under the cursor in screen (canvas) space\n:$color: color data from data source, with the syntax:\n    ``$color[options]:field_name``. The available options\n    are: ``hex`` (to display the color as a hex value), ``swatch``\n    (color data from data source displayed as a small color box)\n:$swatch: color data from data source displayed as a small color box\n\nField names that begin with ``@`` are associated with columns in a\n``ColumnDataSource``. For instance the field name ``\"@price\"`` will\ndisplay values from the ``\"price\"`` column whenever a hover is triggered.\nIf the hover is for the 17th glyph, then the hover tooltip will\ncorrespondingly display the 17th price value.\n\nNote that if a column name contains spaces, the it must be supplied by\nsurrounding it in curly braces, e.g. ``@{adjusted close}`` will display\nvalues from a column named ``\"adjusted close\"``.\n\nSometimes (especially with stacked charts) it is desirable to allow the\nname of the column be specified indirectly. The field name ``@$name`` is\ndistinguished in that it will look up the ``name`` field on the hovered\nglyph renderer, and use that value as the column name. For instance, if\na user hovers with the name ``\"US East\"``, then ``@$name`` is equivalent to\n``@{US East}``.\n\nBy default, values for fields (e.g. ``@foo``) are displayed in a basic\nnumeric format. However it is possible to control the formatting of values\nmore precisely. Fields can be modified by appending a format specified to\nthe end in curly braces. Some examples are below.\n\n.. code-block:: python\n\n    \"@foo{0,0.000}\"    # formats 10000.1234 as: 10,000.123\n\n    \"@foo{(.00)}\"      # formats -10000.1234 as: (10000.123)\n\n    \"@foo{($ 0.00 a)}\" # formats 1230974 as: $ 1.23 m\n\nSpecifying a format ``{safe}`` after a field name will override automatic\nescaping of the tooltip data source. Any HTML tags in the data tags will\nbe rendered as HTML in the resulting HoverTool output. See\n:ref:`custom_hover_tooltip` for a more detailed example.\n\n``None`` is also a valid value for tooltips. This turns off the\nrendering of tooltips. This is mostly useful when supplying other\nactions on hover via the callback property.\n\n.. note::\n    The tooltips attribute can also be configured with a mapping type,\n    e.g. ``dict`` or ``OrderedDict``.",
        "default": [
          [
            "index",
            "$index"
          ],
          [
            "data (x, y)",
            "($x, $y)"
          ],
          [
            "screen (x, y)",
            "($sx, $sy)"
          ]
        ]
      },
      {
        "name": "show_arrow",
        "type": "Bool",
        "desc": "Whether tooltip's arrow should be shown.",
        "default": true
      }
    ]
  },
  {
    "name": "Image",
    "fullname": "bokeh.models.glyphs.Image",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": "Render images given as scalar data together with a color mapper.\n\nIn addition to the defined model properties, ``Image`` also can accept\na keyword argument ``palette`` in place of an explicit ``color_mapper``.\nThe value should be a list of colors, or the name of one of the built-in\npalettes in ``bokeh.palettes``. This palette will be used to automatically\nconstruct a ``ColorMapper`` model for the ``color_mapper`` property.\n\nIf both ``palette`` and ``color_mapper`` are passed, a ``ValueError``\nexception will be raised. If neither is passed, then the ``Greys9``\npalette will be used as a default.",
    "props": [
      {
        "name": "dw_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "dh_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "color_mapper",
        "type": "Instance(ColorMapper)",
        "desc": "A ``ColorMapper`` to use to map the scalar data from ``image``\ninto RGBA values for display.\n\n.. note::\n    The color mapping step happens on the client.",
        "default": "{\"__type__\": \"bokeh.models.mappers.LinearColorMapper\", \"palette\": [\"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#bdbdbd\", \"#d9d9d9\", \"#f0f0f0\", \"#ffffff\"]}"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "dw",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The widths of the plot regions that the images will occupy.\n\n.. note::\n    This is not the number of pixels that an image is wide.\n    That number is fixed by the image itself.",
        "default": {
          "field": "dw"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to locate the image anchors.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "dh",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The height of the plot region that the image will occupy.\n\n.. note::\n    This is not the number of pixels that an image is tall.\n    That number is fixed by the image itself.",
        "default": {
          "field": "dh"
        }
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to locate the image anchors.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\nas to make the images bigger.\n\nThis setting may be useful if pixel rounding errors are causing\nimages to have a gap between them, when they should appear flush.",
        "default": false
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "image",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The arrays of scalar data for the images to be colormapped.",
        "default": {
          "field": "image"
        }
      },
      {
        "name": "global_alpha",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "An overall opacity that each image is rendered with (in addition\nto any alpha values applied explicitly in a color mapper).",
        "default": 1.0
      }
    ]
  },
  {
    "name": "ImageRGBA",
    "fullname": "bokeh.models.glyphs.ImageRGBA",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": "Render images given as RGBA data.\n\n    ",
    "props": [
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to locate the image anchors.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\nas to make the images bigger.\n\nThis setting may be useful if pixel rounding errors are causing\nimages to have a gap between them, when they should appear flush.",
        "default": false
      },
      {
        "name": "dw_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "dh_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "dw",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The widths of the plot regions that the images will occupy.\n\n.. note::\n    This is not the number of pixels that an image is wide.\n    That number is fixed by the image itself.",
        "default": {
          "field": "dw"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to locate the image anchors.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "image",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The arrays of RGBA data for the images.",
        "default": {
          "field": "image"
        }
      },
      {
        "name": "dh",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The height of the plot region that the image will occupy.\n\n.. note::\n    This is not the number of pixels that an image is tall.\n    That number is fixed by the image itself.",
        "default": {
          "field": "dh"
        }
      },
      {
        "name": "global_alpha",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "An overall opacity that each image is rendered with (in addition\nto any inherent alpha values in the image itself).",
        "default": 1.0
      }
    ]
  },
  {
    "name": "ImageURL",
    "fullname": "bokeh.models.glyphs.ImageURL",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": "Render images loaded from given URLs.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/ImageURL.py\n    :source-position: below",
    "props": [
      {
        "name": "url",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "The URLs to retrieve images from.\n\n.. note::\n    The actual retrieving and loading of the images happens on\n    the client.",
        "default": {
          "field": "url"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "h_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to locate the image anchors.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "w_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the images, as measured from the horizontal.",
        "default": 0
      },
      {
        "name": "anchor",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom')",
        "desc": "What position of the image should be anchored at the `x`, `y`\ncoordinates.",
        "default": "top_left"
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to locate the image anchors.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\nas to make the images bigger.\n\nThis setting may be useful if pixel rounding errors are causing\nimages to have a gap between them, when they should appear flush.",
        "default": false
      },
      {
        "name": "retry_timeout",
        "type": "Int",
        "desc": "Timeout (in ms) between retry attempts to load the image from the\nspecified URL. Default is zero ms.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "w",
        "type": "NullDistanceSpec(units_default='data')",
        "desc": "The width of the plot region that the image will occupy in data space.\n\nThe default value is ``None``, in which case the image will be displayed\nat its actual image size (regardless of the units specified here).",
        "default": null
      },
      {
        "name": "h",
        "type": "NullDistanceSpec(units_default='data')",
        "desc": "The height of the plot region that the image will occupy in data space.\n\nThe default value is ``None``, in which case the image will be displayed\nat its actual image size (regardless of the units specified here).",
        "default": null
      },
      {
        "name": "retry_attempts",
        "type": "Int",
        "desc": "Number of attempts to retry loading the images from the specified URL.\nDefault is zero.",
        "default": 0
      },
      {
        "name": "global_alpha",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "An overall opacity that each image is rendered with (in addition\nto any inherent alpha values in the image itself).",
        "default": 1.0
      }
    ]
  },
  {
    "name": "ImageURLTexture",
    "fullname": "bokeh.models.textures.ImageURLTexture",
    "bases": [
      "bokeh.models.textures.Texture"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "repetition",
        "type": "Enum('repeat', 'repeat_x', 'repeat_y', 'no_repeat')",
        "desc": "    ",
        "default": "repeat"
      },
      {
        "name": "url",
        "type": "NonNullable(String)",
        "desc": "A URL to a drawable resource like image, video, etc.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "IndexFilter",
    "fullname": "bokeh.models.filters.IndexFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": "An ``IndexFilter`` filters data by returning the subset of data at a given set of indices.\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "indices",
        "type": "Nullable(Seq(Int))",
        "desc": "A list of integer indices representing the subset of data to select.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "InputWidget",
    "fullname": "bokeh.models.widgets.inputs.InputWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": "Abstract base class for input widgets.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "InspectTool",
    "fullname": "bokeh.models.tools.InspectTool",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": "A base class for tools that perform \"inspections\", e.g. ``HoverTool``.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "toggleable",
        "type": "Bool",
        "desc": "Whether an on/off toggle button should appear in the toolbar for this\ninspection tool. If ``False``, the viewers of a plot will not be able to\ntoggle the inspector on or off using the toolbar.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "IntEditor",
    "fullname": "bokeh.models.widgets.tables.IntEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Spinner-based integer cell editor.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "step",
        "type": "Int",
        "desc": "The major step value.",
        "default": 1
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Interpolator",
    "fullname": "bokeh.models.transforms.Interpolator",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": "Base class for interpolator transforms.\n\nInterpolators return the value of a function which has been evaluated\nbetween specified (x, y) pairs of data.  As an example, if two control\npoint pairs were provided to the interpolator, a linear interpolaction\nat a specific value of 'x' would result in the value of 'y' which existed\non the line connecting the two control points.\n\nThe control point pairs for the interpolators can be specified through either\n\n* A literal sequence of values:\n\n.. code-block:: python\n\n    interp = Interpolator(x=[1, 2, 3, 4, 5], y=[2, 5, 10, 12, 16])\n\n* or a pair of columns defined in a ``ColumnDataSource`` object:\n\n.. code-block:: python\n\n    interp = Interpolator(x=\"year\", y=\"earnings\", data=jewlery_prices))\n\n\nThis is the base class and is not intended to end use.  Please see the\ndocumentation for the final derived classes (``Jitter``, ``LineraInterpolator``,\n``StepInterpolator``) for more information on their specific methods of\ninterpolation.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "y",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "default": "<Undefined>"
      },
      {
        "name": "clip",
        "type": "Bool",
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\nIf this is set to False, it will return the most value of the closest point.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "data",
        "type": "Nullable(Instance(ColumnarDataSource))",
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "Independent coordinate denoting the location of a point.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "IntersectRenderers",
    "fullname": "bokeh.models.selections.IntersectRenderers",
    "bases": [
      "bokeh.models.selections.SelectionPolicy"
    ],
    "desc": "When a data source is shared between multiple renderers, a row in the data\nsource will only be selected if that point for each renderer is selected. The\nselection is made from the intersection of hit test results from all renderers.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Jitter",
    "fullname": "bokeh.models.transforms.Jitter",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": "Apply either a uniform or normally sampled random jitter to data.\n\n    ",
    "props": [
      {
        "name": "range",
        "type": "Nullable(Instance(Range))",
        "desc": "When applying Jitter to Categorical data values, the corresponding\n``FactorRange`` must be supplied as the ``range`` property.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "mean",
        "type": "Float",
        "desc": "The central value for the random sample",
        "default": 0
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "distribution",
        "type": "Enum('uniform', 'normal')",
        "desc": "The random distribution upon which to pull the random scatter",
        "default": "uniform"
      },
      {
        "name": "width",
        "type": "Float",
        "desc": "The width (absolute for uniform distribution and sigma for the normal\ndistribution) of the random sample.",
        "default": 1
      }
    ]
  },
  {
    "name": "Label",
    "fullname": "bokeh.models.annotations.Label",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "desc": "Render a single text label as an annotation.\n\n``Label`` will render a single text label at given ``x`` and ``y``\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space.\n\nThe label can also be configured with a screen space offset from ``x`` and\n``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\nAdditionally, the label can be rotated with the ``angle`` property.\n\nThere are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border.\n\nSee :ref:`userguide_annotations_labels` for information on plotting labels.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "x_offset",
        "type": "Float",
        "desc": "Offset value to apply to the x-coordinate.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.",
        "default": 0
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NonNullable(Float)",
        "desc": "The x-coordinate in screen coordinates to locate the text anchors.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.",
        "default": "<Undefined>"
      },
      {
        "name": "text_line_height",
        "type": "Float",
        "desc": "The text line height values for the text.",
        "default": 1.2
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the text bounding box.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the text bounding box.",
        "default": null
      },
      {
        "name": "text_alpha",
        "type": "Alpha",
        "desc": "The text alpha values for the text.",
        "default": 1.0
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the text bounding box.",
        "default": 1.0
      },
      {
        "name": "y",
        "type": "NonNullable(Float)",
        "desc": "The y-coordinate in screen coordinates to locate the text anchors.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.",
        "default": "<Undefined>"
      },
      {
        "name": "text_font",
        "type": "String",
        "desc": "The text font values for the text.",
        "default": "helvetica"
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the text bounding box.",
        "default": 1.0
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "The text color values for the text.",
        "default": "#444444"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "The line width values for the text bounding box.",
        "default": 1
      },
      {
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style values for the text.",
        "default": "normal"
      },
      {
        "name": "y_offset",
        "type": "Float",
        "desc": "Offset value to apply to the y-coordinate.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.",
        "default": 0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the text bounding box.",
        "default": 0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the text bounding box.",
        "default": "bevel"
      },
      {
        "name": "angle",
        "type": "Angle",
        "desc": "The angle to rotate the text, as measured from the horizontal.",
        "default": 0
      },
      {
        "name": "x_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the x attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Acceptable values for units are ``\"rad\"`` and ``\"deg\"``",
        "default": "rad"
      },
      {
        "name": "text_font_size",
        "type": "FontSize",
        "desc": "The text font size values for the text.",
        "default": "16px"
      },
      {
        "name": "text",
        "type": "String",
        "desc": "The text value to render.",
        "default": ""
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align values for the text.",
        "default": "left"
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the text bounding box.",
        "default": "butt"
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the text bounding box.",
        "default": null
      },
      {
        "name": "text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline values for the text.",
        "default": "bottom"
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the contents are rendered to a canvas or as a\nHTML element overlaid on the canvas. The default mode is \"canvas\".\n\n.. note::\n    This property is deprecated and will be removed in bokeh 3.0.\n\n.. note::\n    The HTML labels won't be present in the output using the \"save\" tool.\n\n.. warning::\n    Not all visual styling properties are supported if the render_mode is\n    set to \"css\". The border_line_dash property isn't fully supported and\n    border_line_dash_offset isn't supported at all. Setting text_alpha will\n    modify the opacity of the entire background box and border in addition\n    to the text. Finally, clipping Label annotations inside of the plot\n    area isn't supported in \"css\" mode.",
        "default": "canvas"
      },
      {
        "name": "y_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the y attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      }
    ]
  },
  {
    "name": "LabelSet",
    "fullname": "bokeh.models.annotations.LabelSet",
    "bases": [
      "bokeh.models.annotations.DataAnnotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": "Render multiple text labels as annotations.\n\n``LabelSet`` will render multiple text labels at given ``x`` and ``y``\ncoordinates, which can be in either screen (pixel) space, or data (axis\nrange) space. In this case (as opposed to the single ``Label`` model),\n``x`` and ``y`` can also be the name of a column from a\n:class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\nwill be \"vectorized\" using coordinate values from the specified columns.\n\nThe label can also be configured with a screen space offset from ``x`` and\n``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\nmay be vectorized by giving the name of a data source column.\n\nAdditionally, the label can be rotated with the ``angle`` property (which\nmay also be a column name.)\n\nThere are also standard text, fill, and line properties to control the\nappearance of the text, its background, as well as the rectangular bounding\nbox border.\n\nThe data source is provided by setting the ``source`` property.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "x_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "Offset values to apply to the x-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.",
        "default": 0
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to locate the text anchors.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "text_line_height",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The text line height values for the text.",
        "default": 1.2
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "border_line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the text bounding box.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the text bounding box.",
        "default": null
      },
      {
        "name": "text_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The text alpha values for the text.",
        "default": 1.0
      },
      {
        "name": "border_line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the text bounding box.",
        "default": 1.0
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to locate the text anchors.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "text_font",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "The text font values for the text.",
        "default": {
          "value": "helvetica"
        }
      },
      {
        "name": "background_fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the text bounding box.",
        "default": 1.0
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The text color values for the text.",
        "default": "#444444"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the text bounding box.",
        "default": 1
      },
      {
        "name": "text_font_style",
        "type": "FontStyleSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('normal', 'italic', 'bold', 'bold italic'))), Enum('normal', 'italic', 'bold', 'bold italic'))",
        "desc": "The text font style values for the text.",
        "default": "normal"
      },
      {
        "name": "y_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "Offset values to apply to the y-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.",
        "default": 0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "border_line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the text bounding box.",
        "default": 0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the text bounding box.",
        "default": "bevel"
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the text, as measured from the horizontal.",
        "default": 0
      },
      {
        "name": "x_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the ``xs`` attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)",
        "desc": "The text font size values for the text.",
        "default": {
          "value": "16px"
        }
      },
      {
        "name": "text",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "The text values to render.",
        "default": {
          "field": "text"
        }
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "text_align",
        "type": "TextAlignSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('left', 'right', 'center'))), Enum('left', 'right', 'center'))",
        "desc": "The text align values for the text.",
        "default": "left"
      },
      {
        "name": "border_line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the text bounding box.",
        "default": "butt"
      },
      {
        "name": "border_line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the text bounding box.",
        "default": null
      },
      {
        "name": "text_baseline",
        "type": "TextBaselineSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))",
        "desc": "The text baseline values for the text.",
        "default": "bottom"
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the contents are rendered to a canvas or as a\nHTML element overlaid on the canvas. The default mode is \"canvas\".\n\n.. note::\n    This property is deprecated and will be removed in bokeh 3.0.\n\n.. note::\n    The HTML labels won't be present in the output using the \"save\" tool.\n\n.. warning::\n    Not all visual styling properties are supported if the render_mode is\n    set to \"css\". The border_line_dash property isn't fully supported and\n    border_line_dash_offset isn't supported at all. Setting text_alpha will\n    modify the opacity of the entire background box and border in addition\n    to the text. Finally, clipping Label annotations inside of the plot\n    area isn't supported in \"css\" mode.",
        "default": "canvas"
      },
      {
        "name": "y_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the ``ys`` attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      }
    ]
  },
  {
    "name": "LabelingPolicy",
    "fullname": "bokeh.models.labeling.LabelingPolicy",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for labeling policies. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "LassoSelectTool",
    "fullname": "bokeh.models.tools.LassoSelectTool",
    "bases": [
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": "*toolbar icon*: |lasso_select_icon|\n\nThe lasso selection tool allows users to make selections on a Plot by\nindicating a free-drawn \"lasso\" region by dragging the mouse or a finger\nover the plot region. The end of the drag event indicates the selection\nregion is ready.\n\nSee :ref:`userguide_styling_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n.. note::\n    Selections can be comprised of multiple regions, even those made by\n    different selection tools. Hold down the <<shift>> key while making a\n    selection to append the new selection to any previous selection that\n    might exist.\n\n.. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n    :height: 24px",
    "props": [
      {
        "name": "overlay",
        "type": "Instance(PolyAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "default": "{\"__type__\": \"bokeh.models.annotations.PolyAnnotation\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"syncable\": false, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.",
        "default": "auto"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "select_every_mousemove",
        "type": "Bool",
        "desc": "Whether a selection computation should happen on every mouse event, or only\nonce, when the selection region is completed.",
        "default": true
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "Defines what should happen when a new selection is made. The default\nis to replace the existing selection. Other options are to append to\nthe selection, intersect with it or subtract from it.",
        "default": "replace"
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that have a matching\nvalue for their ``name`` attribute will be used.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "LayoutDOM",
    "fullname": "bokeh.models.layouts.LayoutDOM",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "The base class for layoutable components.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "LayoutProvider",
    "fullname": "bokeh.models.graphs.LayoutProvider",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Legend",
    "fullname": "bokeh.models.annotations.Legend",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": "Render informational legends for a plot.\n\nSee :ref:`userguide_annotations_legends` for information on plotting legends.",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Whether the legend entries should be placed vertically or horizontally\nwhen they are drawn.",
        "default": "vertical"
      },
      {
        "name": "label_standoff",
        "type": "Int",
        "desc": "The distance (in pixels) to separate the label from its associated glyph.",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "title_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color values for the title text.",
        "default": "#444444"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "label_height",
        "type": "Int",
        "desc": "The minimum height (in pixels) of the area that legend labels should occupy.",
        "default": 20
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "title_text_font",
        "type": "String",
        "desc": "The text font values for the title text.",
        "default": "helvetica"
      },
      {
        "name": "click_policy",
        "type": "Enum('none', 'hide', 'mute')",
        "desc": "Defines what happens when a lengend's item is clicked.",
        "default": "none"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "Amount of spacing (in pixels) between legend entries.",
        "default": 3
      },
      {
        "name": "title_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align values for the title text.",
        "default": "left"
      },
      {
        "name": "title_standoff",
        "type": "Int",
        "desc": "The distance (in pixels) to separate the title from the legend.",
        "default": 5
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "The line dash for the legend border outline.",
        "default": []
      },
      {
        "name": "label_text_font",
        "type": "String",
        "desc": "The text font for the legend labels.",
        "default": "helvetica"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the legend background style.",
        "default": "#ffffff"
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha for the legend border outline.",
        "default": 0.5
      },
      {
        "name": "title_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha values for the title text.",
        "default": 1.0
      },
      {
        "name": "label_width",
        "type": "Int",
        "desc": "The minimum width (in pixels) of the area that legend labels should occupy.",
        "default": 20
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the legend background style.",
        "default": 0.95
      },
      {
        "name": "label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style for the legend labels.",
        "default": "normal"
      },
      {
        "name": "label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline for the legend labels.",
        "default": "middle"
      },
      {
        "name": "title_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style values for the title text.",
        "default": "italic"
      },
      {
        "name": "title_text_line_height",
        "type": "Float",
        "desc": "The text line height values for the title text.",
        "default": 1.2
      },
      {
        "name": "title_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline values for the title text.",
        "default": "bottom"
      },
      {
        "name": "inactive_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the legend item style when inactive. These control an overlay\non the item that can be used to obscure it when the corresponding glyph\nis inactive (e.g. by making it semi-transparent).",
        "default": 0.7
      },
      {
        "name": "label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align for the legend labels.",
        "default": "left"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "The line width for the legend border outline.",
        "default": 1
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "items",
        "type": "List(Instance(LegendItem))",
        "desc": "A list of :class:`~bokeh.model.annotations.LegendItem` instances to be\nrendered in the legend.\n\nThis can be specified explicitly, for instance:\n\n.. code-block:: python\n\n    legend = Legend(items=[\n        LegendItem(label=\"sin(x)\"   , renderers=[r0, r1]),\n        LegendItem(label=\"2*sin(x)\" , renderers=[r2]),\n        LegendItem(label=\"3*sin(x)\" , renderers=[r3, r4])\n    ])\n\nBut as a convenience, can also be given more compactly as a list of tuples:\n\n.. code-block:: python\n\n    legend = Legend(items=[\n        (\"sin(x)\"   , [r0, r1]),\n        (\"2*sin(x)\" , [r2]),\n        (\"3*sin(x)\" , [r3, r4])\n    ])\n\nwhere each tuple is of the form: *(label, renderers)*.",
        "default": []
      },
      {
        "name": "label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size for the legend labels.",
        "default": "13px"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset for the legend border outline.",
        "default": 0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "location",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Float, Float))",
        "desc": "The location where the legend should draw itself. It's either one of\n``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\ntuple indicating an absolute location absolute location in screen\ncoordinates (pixels from the bottom-left corner).",
        "default": "top_right"
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the legend border outline.",
        "default": "bevel"
      },
      {
        "name": "label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color for the legend labels.",
        "default": "#444444"
      },
      {
        "name": "glyph_height",
        "type": "Int",
        "desc": "The height (in pixels) that the rendered legend glyph should occupy.",
        "default": 20
      },
      {
        "name": "glyph_width",
        "type": "Int",
        "desc": "The width (in pixels) that the rendered legend glyph should occupy.",
        "default": 20
      },
      {
        "name": "inactive_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the legend item style when inactive. These control an overlay\non the item that can be used to obscure it when the corresponding glyph\nis inactive (e.g. by making it semi-transparent).",
        "default": "white"
      },
      {
        "name": "title_text_font_size",
        "type": "FontSize",
        "desc": "The text font size values for the title text.",
        "default": "13px"
      },
      {
        "name": "padding",
        "type": "Int",
        "desc": "Amount of padding around the contents of the legend. Only applicable when\nborder is visible, otherwise collapses to 0.",
        "default": 10
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "The title text to render.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "margin",
        "type": "Int",
        "desc": "Amount of margin around the legend.",
        "default": 10
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the legend border outline.",
        "default": "butt"
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color for the legend border outline.",
        "default": "#e5e5e5"
      },
      {
        "name": "label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha for the legend labels.",
        "default": 1.0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "label_text_line_height",
        "type": "Float",
        "desc": "The text line height for the legend labels.",
        "default": 1.2
      }
    ]
  },
  {
    "name": "LegendItem",
    "fullname": "bokeh.models.annotations.LegendItem",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "label",
        "type": "NullStringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(List(String)))), Nullable(List(String)))",
        "desc": "A label for this legend. Can be a string, or a column of a\nColumnDataSource. If ``label`` is a field, then it must\nbe in the renderers' data_source.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "A list of the glyph renderers to draw in the legend. If ``label`` is a field,\nthen all data_sources of renderers must be the same.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "index",
        "type": "Nullable(Int)",
        "desc": "The column data index to use for drawing the representative items.\n\nIf None (the default), then Bokeh will automatically choose an index to\nuse. If the label does not refer to a data column name, this is typically\nthe first data point in the data source. Otherwise, if the label does\nrefer to a column name, the legend will have \"groupby\" behavior, and will\nchoose and display representative points from every \"group\" in the column.\n\nIf set to a number, Bokeh will use that number as the index in all cases.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the legend item should be displayed. See\n:ref:`userguide_annotations_legends_item_visibility` in the user guide.",
        "default": true
      }
    ]
  },
  {
    "name": "Line",
    "fullname": "bokeh.models.glyphs.Line",
    "bases": [
      "bokeh.models.glyph.ConnectedXYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render a single line.\n\nThe ``Line`` glyph is different from most other glyphs in that the vector\nof values only produces one glyph on the Plot.\n\n.. note::\n    Due to limitations in the underlying HTML canvas, it is possible that a\n    line is not drawn when one or more of its coordinates is very far outside\n    the viewport. This behavior is different for different browsers. See\n    :bokeh-issue:`11498` for more information.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Line.py\n    :source-position: below",
    "props": [
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for the points of the line.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the line.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the line.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the line.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for the points of the line.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the line.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the line.",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the line.",
        "default": "bevel"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the line.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "LineEditTool",
    "fullname": "bokeh.models.tools.LineEditTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": "*toolbar icon*: |line_edit_icon|\n\nThe LineEditTool allows editing the intersection points of one or more ``Line`` glyphs.\nGlyphs to be edited are defined via the ``renderers``\nproperty and a renderer for the intersections is set via the ``intersection_renderer``\nproperty (must render a point-like Glyph (a subclass of ``XYGlyph``).\n\nThe tool will modify the columns on the data source corresponding to the\n``x`` and ``y`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared``empty_value``, when adding a new\npoint.\n\nThe supported actions include:\n\n* Show intersections: Double tap an existing line\n\n* Move point: Drag an existing point and let go of the mouse button to\n  release it.\n\n.. |line_edit_icon| image:: /_images/icons/LineEdit.png\n    :height: 24px\n ",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions this edit tool is constrained to act in. By default\nthe line edit tool allows moving points in any dimension, but can be\nconfigured to only allow horizontal movement across the width of the\nplot, or vertical across the height of the plot.",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "intersection_renderer",
        "type": "Instance(GlyphRenderer)",
        "desc": "The renderer used to render the intersections of a selected line",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "LineGlyph",
    "fullname": "bokeh.models.glyph.LineGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": "Glyphs with line properties\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "LinearAxis",
    "fullname": "bokeh.models.axes.LinearAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "desc": "An axis that picks nice numbers for tick locations on a\nlinear scale. Configured with a ``BasicTickFormatter`` by default.",
    "props": [
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 4
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "The line width of the axis line.",
        "default": 1
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.",
        "default": "auto"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.",
        "default": "horizontal"
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "default": []
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "alphabetic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.",
        "default": 2
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the axis line.",
        "default": "black"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the axis label.",
        "default": "italic"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.",
        "default": 5
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": "black"
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.",
        "default": null
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "default": "{\"__type__\": \"bokeh.models.tickers.BasicTicker\"}"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the axis label.",
        "default": 1.0
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the axis line.",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "default": "bottom"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the axis label.",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.",
        "default": "{\"__type__\": \"bokeh.models.formatters.BasicTickFormatter\"}"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the axis label.",
        "default": "13px"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "The text font of the axis label.",
        "default": "helvetica"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "center"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 6
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.",
        "default": 5
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the axis label.",
        "default": "#444444"
      }
    ]
  },
  {
    "name": "LinearColorMapper",
    "fullname": "bokeh.models.mappers.LinearColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "desc": "Map numbers in a range [*low*, *high*] linearly into a sequence of\ncolors (a palette).\n\nFor example, if the range is [0, 99] and the palette is\n``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n         x < 0  : 'red'     # values < low are clamped\n    0 <= x < 33 : 'red'\n   33 <= x < 66 : 'green'\n   66 <= x < 99 : 'blue'\n   99 <= x      : 'blue'    # values > high are clamped",
    "props": [
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "A collection of glyph renderers to pool data from for establishing data metrics.\nIf empty, mapped data will be used instead.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is higher than ``high`` value. If None,\nvalues higher than ``high`` are mapped to the last color in the palette.",
        "default": null
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\nvalues lower than ``low`` are mapped to the first color in the palette.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "gray"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "The minimum value of the range to map into the palette. Values below\nthis are clamped to ``low``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "The maximum value of the range to map into the palette. Values above\nthis are clamped to ``high``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "LinearInterpolator",
    "fullname": "bokeh.models.transforms.LinearInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "desc": "Compute a linear interpolation between the control points provided through\nthe ``x``, ``y``, and ``data`` parameters.",
    "props": [
      {
        "name": "y",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "default": "<Undefined>"
      },
      {
        "name": "clip",
        "type": "Bool",
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\nIf this is set to False, it will return the most value of the closest point.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "data",
        "type": "Nullable(Instance(ColumnarDataSource))",
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "Independent coordinate denoting the location of a point.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "LinearScale",
    "fullname": "bokeh.models.scales.LinearScale",
    "bases": [
      "bokeh.models.scales.ContinuousScale"
    ],
    "desc": "Represent a linear scale transformation between continuous ranges.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "LogAxis",
    "fullname": "bokeh.models.axes.LogAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "desc": "An axis that picks nice numbers for tick locations on a\nlog scale. Configured with a ``LogTickFormatter`` by default.",
    "props": [
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 4
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "The line width of the axis line.",
        "default": 1
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.",
        "default": "auto"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.",
        "default": "horizontal"
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "default": []
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "alphabetic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.",
        "default": 2
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the axis line.",
        "default": "black"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the axis label.",
        "default": "italic"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.",
        "default": 5
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": "black"
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.",
        "default": null
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "default": "{\"__type__\": \"bokeh.models.tickers.LogTicker\"}"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the axis label.",
        "default": 1.0
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the axis line.",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "default": "bottom"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the axis label.",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.",
        "default": "{\"__type__\": \"bokeh.models.formatters.LogTickFormatter\"}"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the axis label.",
        "default": "13px"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "The text font of the axis label.",
        "default": "helvetica"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "center"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 6
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.",
        "default": 5
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the axis label.",
        "default": "#444444"
      }
    ]
  },
  {
    "name": "LogColorMapper",
    "fullname": "bokeh.models.mappers.LogColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "desc": "Map numbers in a range [*low*, *high*] into a sequence of colors\n(a palette) on a natural logarithm scale.\n\nFor example, if the range is [0, 25] and the palette is\n``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n            x < 0     : 'red'     # values < low are clamped\n   0     <= x < 2.72  : 'red'     # math.e ** 1\n   2.72  <= x < 7.39  : 'green'   # math.e ** 2\n   7.39  <= x < 20.09 : 'blue'    # math.e ** 3\n   20.09 <= x         : 'blue'    # values > high are clamped\n\n.. warning::\n    The ``LogColorMapper`` only works for images with scalar values that are\n    non-negative.",
    "props": [
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "A collection of glyph renderers to pool data from for establishing data metrics.\nIf empty, mapped data will be used instead.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is higher than ``high`` value. If None,\nvalues higher than ``high`` are mapped to the last color in the palette.",
        "default": null
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\nvalues lower than ``low`` are mapped to the first color in the palette.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "gray"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "The minimum value of the range to map into the palette. Values below\nthis are clamped to ``low``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "The maximum value of the range to map into the palette. Values above\nthis are clamped to ``high``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "LogScale",
    "fullname": "bokeh.models.scales.LogScale",
    "bases": [
      "bokeh.models.scales.ContinuousScale"
    ],
    "desc": "Represent a log scale transformation between continuous ranges.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "LogTickFormatter",
    "fullname": "bokeh.models.formatters.LogTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": "Display tick values from continuous ranges as powers\nof some base.\n\nMost often useful in conjunction with a ``LogTicker``.",
    "props": [
      {
        "name": "ticker",
        "type": "Nullable(Instance(Ticker))",
        "desc": "The corresponding ``LogTicker``, used to determine the correct\nbase to use. If unset, the formatter will use base 10 as a default.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "min_exponent",
        "type": "Int",
        "desc": "Minimum exponent to format in scientific notation. If not zero\nall ticks in range from base^-min_expont to base^min_exponent\nare displayed without exponential notation.",
        "default": 0
      }
    ]
  },
  {
    "name": "LogTicker",
    "fullname": "bokeh.models.tickers.LogTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "desc": "Generate ticks on a log scale.\n\n    ",
    "props": [
      {
        "name": "base",
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "default": 10.0
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "default": 0.0
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n.. note::\n    To specify an unbounded interval, set to ``None``.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "default": [
          1,
          5
        ]
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "MapOptions",
    "fullname": "bokeh.models.map_plots.MapOptions",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Abstract base class for map options' models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "zoom",
        "type": "Int",
        "desc": "The initial zoom level to use when displaying the map.",
        "default": 12
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "lng",
        "type": "NonNullable(Float)",
        "desc": "The longitude where the map should be centered.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "lat",
        "type": "NonNullable(Float)",
        "desc": "The latitude where the map should be centered.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "MapPlot",
    "fullname": "bokeh.models.map_plots.MapPlot",
    "bases": [
      "bokeh.models.plots.Plot"
    ],
    "desc": "Abstract base class for map plot models.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "below",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area below of the plot.",
        "default": []
      },
      {
        "name": "x_range",
        "type": "Instance(Range)",
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "outline_line_dash",
        "type": "DashPattern",
        "desc": "The line dash for the plot border outline.",
        "default": []
      },
      {
        "name": "toolbar_sticky",
        "type": "Bool",
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\nthe toolbar will be outside of the axes, titles etc.",
        "default": true
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "min_border_top",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region above the top of the\ncentral plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outer_width",
        "type": "Readonly(Int)",
        "desc": "This is the exact width of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "extra_x_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "Additional named scales to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.",
        "default": {}
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "toolbar_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "Where the toolbar will be located. If set to None, no toolbar\nwill be attached to the plot.",
        "default": "right"
      },
      {
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "desc": "A list of all renderers for this plot, including guides and annotations\nin addition to glyphs.\n\nThis property can be manipulated by hand, but the ``add_glyph`` and\n``add_layout`` methods are recommended to help make sure all necessary\nsetup is performed.",
        "default": []
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "The toolbar associated with this plot which holds all the tools. It is\nautomatically created with the plot if necessary.",
        "default": "{\"__type__\": \"bokeh.models.tools.Toolbar\"}"
      },
      {
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the plot border outline.",
        "default": "butt"
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "y_range",
        "type": "Instance(Range)",
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "min_border_left",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region to the left of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outline_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset for the plot border outline.",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": 600
      },
      {
        "name": "outline_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha for the plot border outline.",
        "default": 1.0
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Either(Null, Instance(Title))",
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "default": "{\"__type__\": \"bokeh.models.annotations.Title\"}"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "lod_interval",
        "type": "Int",
        "desc": "Interval (in ms) during which an interactive tool event will enable\nlevel-of-detail downsampling.",
        "default": 300
      },
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\nthe ratio of width over height. This property controls whether Bokeh should\nattempt to match the (width/height) of *data space* to the (width/height)\nin pixels of *screen space*.\n\nDefault is ``False`` which indicates that the *data* aspect ratio and the\n*screen* aspect ratio vary independently. ``True`` indicates that the plot\naspect ratio of the axes will match the aspect ratio of the pixel extent\nthe axes. The end result is that a 1x1 area in data space is a square in\npixels, and conversely that a 1x1 pixel is a square in data units.\n\n.. note::\n    This setting only takes effect when there are two dataranges. This\n    setting only sets the initial plot draw and subsequent resets. It is\n    possible for tools (single axis zoom, unconstrained box zoom) to\n    change the aspect ratio.\n\n.. warning::\n    This setting is incompatible with linking dataranges across multiple\n    plots. Doing so may result in undefined behavior.",
        "default": false
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert x-coordinates in data space\ninto x-coordinates in screen space.",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.",
        "default": {}
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "reset_policy",
        "type": "Enum('standard', 'event_only')",
        "desc": "How a plot should respond to being reset. By deafult, the standard actions\nare to clear any tool state history, return plot ranges to their original\nvalues, undo all selections, and emit a ``Reset`` event. If customization\nis desired, this property may be set to ``\"event_only\"``, which will\nsuppress all of the actions except the Reset event.",
        "default": "standard"
      },
      {
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n.. note::\n    When set to ``webgl``, glyphs without a WebGL rendering implementation\n    will fall back to rendering onto 2D canvas.",
        "default": "canvas"
      },
      {
        "name": "extra_y_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "Additional named scales to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.",
        "default": {}
      },
      {
        "name": "inner_width",
        "type": "Readonly(Int)",
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "border_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the plot border style.",
        "default": 1.0
      },
      {
        "name": "border_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the plot border style.",
        "default": "#ffffff"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "frame_width",
        "type": "Nullable(Int)",
        "desc": "The width of a plot frame or the inner width of a plot, excluding any\naxes, titles, border padding, etc.",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the plot background style.",
        "default": "#ffffff"
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the plot background style.",
        "default": 1.0
      },
      {
        "name": "center",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the center area (frame) of the plot.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": 600
      },
      {
        "name": "hidpi",
        "type": "Bool",
        "desc": "Whether to use HiDPI mode when available.",
        "default": true
      },
      {
        "name": "min_border_bottom",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region below the bottom of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outline_line_width",
        "type": "Float",
        "desc": "The line width for the plot border outline.",
        "default": 1
      },
      {
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the plot border outline.",
        "default": "bevel"
      },
      {
        "name": "right",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "default": []
      },
      {
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.",
        "default": {}
      },
      {
        "name": "frame_height",
        "type": "Nullable(Int)",
        "desc": "The height of a plot frame or the inner height of a plot, excluding any\naxes, titles, border padding, etc.",
        "default": null
      },
      {
        "name": "lod_timeout",
        "type": "Int",
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\noccurring. Once level-of-detail mode is enabled, a check is made every\n``lod_timeout`` ms. If no interactive tool events have happened,\nlevel-of-detail mode is disabled.",
        "default": 500
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "inner_height",
        "type": "Readonly(Int)",
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "outer_height",
        "type": "Readonly(Int)",
        "desc": "This is the exact height of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "min_border_right",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region to the right of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "lod_threshold",
        "type": "Nullable(Int)",
        "desc": "A number of data points, above which level-of-detail downsampling may\nbe performed by glyph renderers. Set to ``None`` to disable any\nlevel-of-detail downsampling.",
        "default": 2000
      },
      {
        "name": "left",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "default": []
      },
      {
        "name": "above",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area above of the plot.",
        "default": []
      },
      {
        "name": "outline_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color for the plot border outline.",
        "default": "#e5e5e5"
      },
      {
        "name": "lod_factor",
        "type": "Int",
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "default": 10
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert y-coordinates in data space\ninto y-coordinates in screen space.",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "A value to be given for increased aspect ratio control. This value is added\nmultiplicatively to the calculated value required for ``match_aspect``.\n``aspect_scale`` is defined as the ratio of width over height of the figure.\n\nFor example, a plot with ``aspect_scale`` value of 2 will result in a\nsquare in *data units* to be drawn on the screen as a rectangle with a\npixel width twice as long as its pixel height.\n\n.. note::\n    This setting only takes effect if ``match_aspect`` is set to ``True``.",
        "default": 1
      },
      {
        "name": "title_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "Where the title will be located. Titles on the left or right side\nwill be rotated.",
        "default": "above"
      },
      {
        "name": "min_border",
        "type": "Nullable(Int)",
        "desc": "A convenience property to set all all the ``min_border_X`` properties\nto the same value. If an individual border property is explicitly set,\nit will override ``min_border``.",
        "default": 5
      }
    ]
  },
  {
    "name": "Mapper",
    "fullname": "bokeh.models.mappers.Mapper",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": "Base class for mappers.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Marker",
    "fullname": "bokeh.models.glyphs.Marker",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Base class for glyphs that are simple markers with line and\nfill properties, located at an (x, y) location with a specified\nsize.\n\n.. note::\n    For simplicity, all markers have both line and fill properties\n    declared, however some marker types (`asterisk`, `cross`, `x`)\n    only draw lines. For these markers, the fill values are simply\n    ignored.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the markers.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the markers.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the markers.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the markers.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "size",
        "type": "SizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "default": 4
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the markers.",
        "default": "butt"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "default": 0.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the markers.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the markers.",
        "default": null
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the markers.",
        "default": []
      },
      {
        "name": "hit_dilation",
        "type": "Size",
        "desc": "The factor by which to dilate the hit radius\nwhich is responsible for defining the range in which a\nmarker responds to interactions with the Hover and Tap\ntools.",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the markers.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the markers.",
        "default": 1.0
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the markers.",
        "default": "black"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the markers.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the markers.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Markup",
    "fullname": "bokeh.models.widgets.markups.Markup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": "Base class for Bokeh models that represent HTML markup elements.\n\nMarkups include e.g., ``<div>``, ``<p>``, and ``<pre>``.\n\nContent can be interpreted as `TeX and LaTeX input`_ when rendering as HTML.\nTeX/LaTeX processing can be disabled by setting ``disable_math`` to True.\n\n.. _`TeX and LaTeX input`: https://docs.mathjax.org/en/latest/basic/mathematics.html#tex-and-latex-input\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "Raw CSS style declaration. Note this may be web browser dependent.",
        "default": {}
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "Whether the contents should not be processed as TeX/LaTeX input.",
        "default": false
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "text",
        "type": "String",
        "desc": "The text or HTML contents of the widget.\n\n.. note::\n    If the HTML content contains elements which size depends on\n    on external, asynchronously loaded resources, the size of\n    the widget may be computed incorrectly. This is in particular\n    an issue with images (``<img>``). To remedy this problem, one\n    either has to set explicit dimensions using CSS properties,\n    HTML attributes or model's ``width`` and ``height`` properties,\n    or inline images' contents using data URIs.",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "MathML",
    "fullname": "bokeh.models.text.MathML",
    "bases": [
      "bokeh.models.text.MathText"
    ],
    "desc": "Render mathematical content using `MathML <https://www.w3.org/Math/>`_\nnotation. See :ref:`userguide_styling_math` in the |user guide| for more\ninformation.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "The text value to render.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "MathText",
    "fullname": "bokeh.models.text.MathText",
    "bases": [
      "bokeh.models.text.BaseText"
    ],
    "desc": "Base class for renderers of mathematical content.\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "The text value to render.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "MaxAggregator",
    "fullname": "bokeh.models.widgets.tables.MaxAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": "Largest value across multiple rows.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "Refers to the table column being aggregated",
        "default": ""
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Maximum",
    "fullname": "bokeh.models.expressions.Maximum",
    "bases": [
      "bokeh.models.expressions.ScalarExpression"
    ],
    "desc": "Computes maximum value of a data source's column. ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "initial",
        "type": "Nullable(Float)",
        "desc": "",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "MercatorAxis",
    "fullname": "bokeh.models.axes.MercatorAxis",
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ],
    "desc": "An axis that picks nice numbers for tick locations on a\nMercator scale. Configured with a ``MercatorTickFormatter`` by default.\n\nArgs:\n    dimension ('lat' or 'lon', optional) :\n        Whether this axis will display latitude or longitude values.\n        (default: 'lat')",
    "props": [
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the major ticks.",
        "default": 1.0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the major ticks.",
        "default": []
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 4
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "The line width of the axis line.",
        "default": 1
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the axis line.",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the major ticks.",
        "default": 0
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the major ticks.",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "A text or LaTeX notation label for the axis, displayed parallel to the axis rule.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "Bounds for the rendered axis. If unset, the axis will span the\nentire plot in the given dimension.",
        "default": "auto"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the major tick labels.",
        "default": "#444444"
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "What direction the major label text should be oriented. If a\nnumber is supplied, the angle of the text is measured from horizontal.",
        "default": "horizontal"
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the axis line.",
        "default": []
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the minor ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the major tick labels.",
        "default": "alphabetic"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend into the\nmain plot area.",
        "default": 2
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the axis line.",
        "default": "black"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the axis label.",
        "default": "italic"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the minor ticks.",
        "default": 0
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "Provide explicit tick label values for specific tick locations that\noverride normal formatting.",
        "default": {}
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "The text font of the major tick labels.",
        "default": "helvetica"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the major tick labels should be\noffset from the associated ticks.",
        "default": 5
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "The line dash of the minor ticks.",
        "default": []
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "The distance in pixels that minor ticks should extend into the\nmain plot area.",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color of the minor ticks.",
        "default": "black"
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "Set to specify a fixed coordinate location to draw the axis. The direction\nof ticks and major labels is determined by the side panel that the axis\nbelongs to.\n\n.. note::\n    Axes labels are suppressed when axes are positioned at fixed locations\n    inside the central plot area.",
        "default": null
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "A Ticker to use for computing locations of axis components.\n\nThe property may also be passed a sequence of floating point numbers as\na shorthand for creating and configuring a ``FixedTicker``, e.g. the\nfollowing code\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n\n    p = figure()\n    p.xaxis.ticker = [10, 20, 37.4]\n\nis equivalent to:\n\n.. code-block:: python\n\n    from bokeh.plotting import figure\n    from bokeh.models import FixedTicker\n\n    p = figure()\n    p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])",
        "default": "{\"__type__\": \"bokeh.models.tickers.MercatorTicker\"}"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the axis label.",
        "default": 1.0
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the axis line.",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the minor ticks.",
        "default": "butt"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "The text font style of the major tick labels.",
        "default": "normal"
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the major tick labels.",
        "default": 1.2
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset of the axis line.",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "The text baseline of the axis label.",
        "default": "bottom"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the axis line.",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "The line width of the minor ticks.",
        "default": 1
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "The text line height of the axis label.",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "guide"
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha of the minor ticks.",
        "default": 1.0
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "Allows to filter out labels, e.g. declutter labels to avoid overlap.",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "A ``TickFormatter`` to use for formatting the visual appearance\nof ticks.",
        "default": "{\"__type__\": \"bokeh.models.formatters.MercatorTickFormatter\"}"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the axis label.",
        "default": "13px"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "The text font size of the major tick labels.",
        "default": "11px"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap of the major ticks.",
        "default": "butt"
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "The text font of the axis label.",
        "default": "helvetica"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the major tick labels.",
        "default": "center"
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join of the major ticks.",
        "default": "bevel"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "The text alpha of the major tick labels.",
        "default": 1.0
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "The distance in pixels that major ticks should extend out of the\nmain plot area.",
        "default": 6
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "The text align of the axis label.",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "The line width of the major ticks.",
        "default": 1
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "The distance in pixels that the axis labels should be offset\nfrom the tick labels.",
        "default": 5
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "The text color of the axis label.",
        "default": "#444444"
      }
    ]
  },
  {
    "name": "MercatorTickFormatter",
    "fullname": "bokeh.models.formatters.MercatorTickFormatter",
    "bases": [
      "bokeh.models.formatters.BasicTickFormatter"
    ],
    "desc": "A ``TickFormatter`` for values in WebMercator units.\n\nSome map plot types internally use WebMercator to describe coordinates,\nplot bounds, etc. These units are not very human-friendly. This tick\nformatter will convert WebMercator units into Latitude and Longitude\nfor display on axes.",
    "props": [
      {
        "name": "dimension",
        "type": "Nullable(Enum('lat', 'lon'))",
        "desc": "Specify whether to format ticks for Latitude or Longitude.\n\nProjected coordinates are not separable, computing Latitude and Longitude\ntick labels from Web Mercator requires considering coordinates from both\ndimensions together. Use this property to specify which result should be\nused for display.\n\nTypically, if the formatter is for an x-axis, then dimension should be\n``\"lon\"`` and if the formatter is for a y-axis, then the dimension\nshould be `\"lat\"``.\n\nIn order to prevent hard to debug errors, there is no default value for\ndimension. Using an un-configured ``MercatorTickFormatter`` will result in\na validation error and a JavaScript console error.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "power_limit_low",
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n    log(x) <= power_limit_low",
        "default": -3
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "precision",
        "type": "Either(Auto, Int)",
        "desc": "How many digits of precision to display in tick labels.",
        "default": "auto"
      },
      {
        "name": "use_scientific",
        "type": "Bool",
        "desc": "Whether to ever display scientific notation. If ``True``, then\nwhen to use scientific notation is controlled by ``power_limit_low``\nand ``power_limit_high``.",
        "default": true
      },
      {
        "name": "power_limit_high",
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n\n    log(x) >= power_limit_high",
        "default": 5
      }
    ]
  },
  {
    "name": "MercatorTicker",
    "fullname": "bokeh.models.tickers.MercatorTicker",
    "bases": [
      "bokeh.models.tickers.BasicTicker"
    ],
    "desc": "Generate nice lat/lon ticks form underlying WebMercator coordinates.\n\n    ",
    "props": [
      {
        "name": "base",
        "type": "Float",
        "desc": "The multiplier to use for scaling mantissas.",
        "default": 10.0
      },
      {
        "name": "dimension",
        "type": "Nullable(Enum('lat', 'lon'))",
        "desc": "Specify whether to generate ticks for Latitude or Longitude.\n\nProjected coordinates are not separable, computing Latitude and Longitude\ntick locations from Web Mercator requires considering coordinates from\nboth dimensions together. Use this property to specify which result should\nbe returned.\n\nTypically, if the ticker is for an x-axis, then dimension should be\n``\"lon\"`` and if the ticker is for a y-axis, then the dimension\nshould be `\"lat\"``.\n\nIn order to prevent hard to debug errors, there is no default value for\ndimension. Using an un-configured ``MercatorTicker`` will result in a\nvalidation error and a JavaScript console error.",
        "default": null
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "The smallest allowable interval between two adjacent ticks.",
        "default": 0.0
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "The largest allowable interval between two adjacent ticks.\n\n.. note::\n    To specify an unbounded interval, set to ``None``.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "The acceptable list numbers to generate multiples of.",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "MercatorTileSource",
    "fullname": "bokeh.models.tiles.MercatorTileSource",
    "bases": [
      "bokeh.models.tiles.TileSource"
    ],
    "desc": "A base class for Mercator tile services (e.g. ``WMTSTileSource``).\n\n    ",
    "props": [
      {
        "name": "url",
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "default": ""
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute.",
        "default": 156543.03392804097
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "default": ""
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\nThese variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name).",
        "default": {}
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\nbounds of map.\n\n..note::\n    Axis coordinates are not wrapped. To toggle axis label visibility,\n    use ``plot.axis.visible = False``.",
        "default": true
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "An x-offset in plot coordinates",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "default": 256
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "default": 30
      },
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "A y-offset in plot coordinates",
        "default": 20037508.34
      }
    ]
  },
  {
    "name": "MinAggregator",
    "fullname": "bokeh.models.widgets.tables.MinAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": "Smallest value across multiple rows.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "Refers to the table column being aggregated",
        "default": ""
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Minimum",
    "fullname": "bokeh.models.expressions.Minimum",
    "bases": [
      "bokeh.models.expressions.ScalarExpression"
    ],
    "desc": "Computes minimum value of a data source's column. ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "initial",
        "type": "Nullable(Float)",
        "desc": "",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "Model",
    "fullname": "bokeh.model.model.Model",
    "bases": [],
    "desc": "Base class for all objects stored in Bokeh  |Document| instances.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "MonthsTicker",
    "fullname": "bokeh.models.tickers.MonthsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "desc": "Generate ticks spaced apart by specific, even multiples of months.\n\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "The interval between adjacent ticks.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "months",
        "type": "Seq(Int)",
        "desc": "The intervals of months to use.",
        "default": []
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "MultiChoice",
    "fullname": "bokeh.models.widgets.inputs.MultiChoice",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": "MultiChoice widget.\n\n    ",
    "props": [
      {
        "name": "solid",
        "type": "Bool",
        "desc": "Specify whether the choices should be solidly filled.",
        "default": true
      },
      {
        "name": "search_option_limit",
        "type": "Nullable(Int)",
        "desc": "The number of choices that will be rendered in the dropdown\nwhen search string is entered.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "options",
        "type": "List(Either(String, Tuple(String, String)))",
        "desc": "Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n``(value, label)``. In the latter case, the visible widget text for each\nvalue will be corresponding given label.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "delete_button",
        "type": "Bool",
        "desc": "Whether to add a button to remove a selected option.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "option_limit",
        "type": "Nullable(Int)",
        "desc": "The number of choices that will be rendered in the dropdown.",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "max_items",
        "type": "Nullable(Int)",
        "desc": "The maximum number of items that can be selected.",
        "default": null
      },
      {
        "name": "value",
        "type": "List(String)",
        "desc": "Initial or selected values.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "Nullable(String)",
        "desc": "A string that is displayed if not item is added.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "MultiLine",
    "fullname": "bokeh.models.glyphs.MultiLine",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render several lines.\n\nThe data for the ``MultiLine`` glyph is different in that the vector of\nvalues is not a vector of scalars. Rather, it is a \"list of lists\".\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/MultiLine.py\n    :source-position: below",
    "props": [
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the lines.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the lines.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the lines.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for all the lines, given as a \"list of lists\".",
        "default": {
          "field": "xs"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the lines.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for all the lines, given as a \"list of lists\".",
        "default": {
          "field": "ys"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the lines.",
        "default": "bevel"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the lines.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the lines.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "MultiPolygons",
    "fullname": "bokeh.models.glyphs.MultiPolygons",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render several MultiPolygon.\n\nModeled on geoJSON - the data for the ``MultiPolygons`` glyph is\ndifferent in that the vector of values is not a vector of scalars.\nRather, it is a \"list of lists of lists of lists\".\n\nDuring box selection only multi-polygons entirely contained in the\nselection box will be included.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/MultiPolygons.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the multipolygons.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the multipolygons.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the multipolygons.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the multipolygons.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the multipolygons.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the multipolygons.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the multipolygons.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the multipolygons.",
        "default": null
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the multipolygons.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the multipolygons.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the multipolygons.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the multipolygons.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for all the patches, given as a nested list.\n\n.. note::\n    Each item in ``MultiPolygons`` represents one MultiPolygon and each\n    MultiPolygon is comprised of ``n`` Polygons. Each Polygon is made of\n    one exterior ring optionally followed by ``m`` interior rings (holes).",
        "default": {
          "field": "xs"
        }
      },
      {
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n.. note::\n    Each item in ``MultiPolygons`` represents one MultiPolygon and each\n    MultiPolygon is comprised of ``n`` Polygons. Each Polygon is made of\n    one exterior ring optionally followed by ``m`` interior rings (holes).",
        "default": {
          "field": "ys"
        }
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the multipolygons.",
        "default": "gray"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the multipolygons.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the multipolygons.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "MultiSelect",
    "fullname": "bokeh.models.widgets.inputs.MultiSelect",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": "Multi-select widget.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "List(String)",
        "desc": "Initial or selected values.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "size",
        "type": "Int",
        "desc": "The number of visible options in the dropdown list. (This uses the\n``select`` HTML element's ``size`` attribute. Some browsers might not\nshow less than 3 options.)",
        "default": 4
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "options",
        "type": "List(Either(String, Tuple(String, String)))",
        "desc": "Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n``(value, label)``. In the latter case, the visible widget text for each\nvalue will be corresponding given label.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "NoOverlap",
    "fullname": "bokeh.models.labeling.NoOverlap",
    "bases": [
      "bokeh.models.labeling.LabelingPolicy"
    ],
    "desc": "Basic labeling policy avoiding label overlap. ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "min_distance",
        "type": "Int",
        "desc": "Minimum distance between labels in pixels.",
        "default": 5
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "NodeCoordinates",
    "fullname": "bokeh.models.graphs.NodeCoordinates",
    "bases": [
      "bokeh.models.graphs.GraphCoordinates"
    ],
    "desc": "Node coordinate expression obtained from ``LayoutProvider``",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "layout",
        "type": "Instance(LayoutProvider)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "NodesAndLinkedEdges",
    "fullname": "bokeh.models.graphs.NodesAndLinkedEdges",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "With the ``NodesAndLinkedEdges`` policy, inspection or selection of graph\nnodes will result in the inspection or selection of the node and of the\nlinked graph edges. There is no direct selection or inspection of graph\nedges.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "NodesOnly",
    "fullname": "bokeh.models.graphs.NodesOnly",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "With the ``NodesOnly`` policy, only graph nodes are able to be selected and\ninspected. There is no selection or inspection of graph edges.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "NormalHead",
    "fullname": "bokeh.models.arrow_heads.NormalHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": "Render a closed-body arrow head.\n\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size, in pixels, of the arrow head.",
        "default": 25
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the arrow head outline.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the arrow head interior.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the arrow head outline.",
        "default": "bevel"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the arrow head outline.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the arrow head outline.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the arrow head outline.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the arrow head interior.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "NumberEditor",
    "fullname": "bokeh.models.widgets.tables.NumberEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Spinner-based number cell editor.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "step",
        "type": "Float",
        "desc": "The major step value.",
        "default": 0.01
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "NumberFormatter",
    "fullname": "bokeh.models.widgets.tables.NumberFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "desc": "Number cell formatter.\n\n    ",
    "props": [
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "An optional text font style, e.g. bold, italic.",
        "default": "normal"
      },
      {
        "name": "format",
        "type": "String",
        "desc": "The number format, as defined in the following tables:\n\n**NUMBERS**:\n\n============ ============== ===============\nNumber       Format         String\n============ ============== ===============\n10000        '0,0.0000'     10,000.0000\n10000.23     '0,0'          10,000\n10000.23     '+0,0'         +10,000\n-10000       '0,0.0'        -10,000.0\n10000.1234   '0.000'        10000.123\n10000.1234   '0[.]00000'    10000.12340\n-10000       '(0,0.0000)'   (10,000.0000)\n-0.23        '.00'          -.23\n-0.23        '(.00)'        (.23)\n0.23         '0.00000'      0.23000\n0.23         '0.0[0000]'    0.23\n1230974      '0.0a'         1.2m\n1460         '0 a'          1 k\n-104000      '0a'           -104k\n1            '0o'           1st\n52           '0o'           52nd\n23           '0o'           23rd\n100          '0o'           100th\n============ ============== ===============\n\n**CURRENCY**:\n\n=========== =============== =============\nNumber      Format          String\n=========== =============== =============\n1000.234    '$0,0.00'       $1,000.23\n1000.2      '0,0[.]00 $'    1,000.20 $\n1001        '$ 0,0[.]00'    $ 1,001\n-1000.234   '($0,0)'        ($1,000)\n-1000.234   '$0.00'         -$1000.23\n1230974     '($ 0.00 a)'    $ 1.23 m\n=========== =============== =============\n\n**BYTES**:\n\n=============== =========== ============\nNumber          Format      String\n=============== =========== ============\n100             '0b'        100B\n2048            '0 b'       2 KB\n7884486213      '0.0b'      7.3GB\n3467479682787   '0.000 b'   3.154 TB\n=============== =========== ============\n\n**PERCENTAGES**:\n\n============= ============= ===========\nNumber        Format        String\n============= ============= ===========\n1             '0%'          100%\n0.974878234   '0.000%'      97.488%\n-0.43         '0 %'         -43 %\n0.43          '(0.000 %)'   43.000 %\n============= ============= ===========\n\n**TIME**:\n\n============ ============== ============\nNumber       Format         String\n============ ============== ============\n25           '00:00:00'     0:00:25\n238          '00:00:00'     0:03:58\n63846        '00:00:00'     17:44:06\n============ ============== ============\n\nFor the complete specification, see http://numbrojs.com/format.html",
        "default": "0,0"
      },
      {
        "name": "language",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "default": "en"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "An optional text align, i.e. left, center or right.",
        "default": "left"
      },
      {
        "name": "rounding",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "default": "round"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "nan_format",
        "type": "Nullable(String)",
        "desc": "Formatting to apply to NaN and None values (falls back to Numbro formatting if not set).",
        "default": null
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "An optional text color.",
        "default": null
      }
    ]
  },
  {
    "name": "NumeralTickFormatter",
    "fullname": "bokeh.models.formatters.NumeralTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": "Tick formatter based on a human-readable format string. ",
    "props": [
      {
        "name": "format",
        "type": "String",
        "desc": "The number format, as defined in the following tables:\n\n**NUMBERS**:\n\n============ ============== ===============\nNumber       Format         String\n============ ============== ===============\n10000        '0,0.0000'     10,000.0000\n10000.23     '0,0'          10,000\n10000.23     '+0,0'         +10,000\n-10000       '0,0.0'        -10,000.0\n10000.1234   '0.000'        10000.123\n10000.1234   '0[.]00000'    10000.12340\n-10000       '(0,0.0000)'   (10,000.0000)\n-0.23        '.00'          -.23\n-0.23        '(.00)'        (.23)\n0.23         '0.00000'      0.23000\n0.23         '0.0[0000]'    0.23\n1230974      '0.0a'         1.2m\n1460         '0 a'          1 k\n-104000      '0a'           -104k\n1            '0o'           1st\n52           '0o'           52nd\n23           '0o'           23rd\n100          '0o'           100th\n============ ============== ===============\n\n**CURRENCY**:\n\n=========== =============== =============\nNumber      Format          String\n=========== =============== =============\n1000.234    '$0,0.00'       $1,000.23\n1000.2      '0,0[.]00 $'    1,000.20 $\n1001        '$ 0,0[.]00'    $ 1,001\n-1000.234   '($0,0)'        ($1,000)\n-1000.234   '$0.00'         -$1000.23\n1230974     '($ 0.00 a)'    $ 1.23 m\n=========== =============== =============\n\n**BYTES**:\n\n=============== =========== ============\nNumber          Format      String\n=============== =========== ============\n100             '0b'        100B\n2048            '0 b'       2 KB\n7884486213      '0.0b'      7.3GB\n3467479682787   '0.000 b'   3.154 TB\n=============== =========== ============\n\n**PERCENTAGES**:\n\n============= ============= ===========\nNumber        Format        String\n============= ============= ===========\n1             '0%'          100%\n0.974878234   '0.000%'      97.488%\n-0.43         '0 %'         -43 %\n0.43          '(0.000 %)'   43.000 %\n============= ============= ===========\n\n**TIME**:\n\n============ ============== ============\nNumber       Format         String\n============ ============== ============\n25           '00:00:00'     0:00:25\n238          '00:00:00'     0:03:58\n63846        '00:00:00'     17:44:06\n============ ============== ============\n\nFor the complete specification, see http://numbrojs.com/format.html",
        "default": "0,0"
      },
      {
        "name": "language",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "desc": "The language to use for formatting language-specific features (e.g. thousands separator).",
        "default": "en"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "rounding",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "desc": "Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).",
        "default": "round"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "NumericInput",
    "fullname": "bokeh.models.widgets.inputs.NumericInput",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": "Numeric input widget.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "Either(Null, Float, Int)",
        "desc": "Initial or entered value.\n\nChange events are triggered whenever <enter> is pressed.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('int', 'float')",
        "desc": "Define the type of number which can be enter in the input\n\nexample\nmode int: 1, -1, 156\nmode float: 1, -1.2, 1.1e-25",
        "default": "int"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "low",
        "type": "Either(Null, Float, Int)",
        "desc": "Optional lowest allowable value.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "Placeholder for empty input field.",
        "default": ""
      },
      {
        "name": "high",
        "type": "Either(Null, Float, Int)",
        "desc": "Optional highest allowable value.",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(Null, String, Instance(TickFormatter))",
        "desc": "    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "OpenHead",
    "fullname": "bokeh.models.arrow_heads.OpenHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": "Render an open-body arrow head.\n\n    ",
    "props": [
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the arrow head outline.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the arrow head outline.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size, in pixels, of the arrow head.",
        "default": 25
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the arrow head outline.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the arrow head outline.",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the arrow head outline.",
        "default": "bevel"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "OpenURL",
    "fullname": "bokeh.models.callbacks.OpenURL",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "desc": "Open a URL in a new or current tab or window.\n\n    ",
    "props": [
      {
        "name": "url",
        "type": "String",
        "desc": "The URL to direct the web browser to. This can be a template string,\nwhich will be formatted with data from the data source.",
        "default": "http://"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "same_tab",
        "type": "Bool",
        "desc": "Open URL in a new (`False`, default) or current (`True`) tab or window.\nFor `same_tab=False`, whether tab or window will be opened is browser\ndependent.",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "Oval",
    "fullname": "bokeh.models.glyphs.Oval",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render ovals.\n\nThis glyph renders ovals using Bezier curves, which are similar,\nbut not identical to ellipses. In particular, widths equal to heights\nwill not render circles. Use the ``Ellipse`` glyph for that.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Oval.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the ovals.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the ovals.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the ovals.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the ovals.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the centers of the ovals.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the ovals.",
        "default": "butt"
      },
      {
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angle the ovals are rotated from horizontal. [rad]",
        "default": 0.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the ovals.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the ovals.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the ovals.",
        "default": null
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall widths of each oval.",
        "default": {
          "field": "width"
        }
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the centers of the ovals.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the ovals.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the ovals.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the ovals.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the ovals.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall height of each oval.",
        "default": {
          "field": "height"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the ovals.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the ovals.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the ovals.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "PanTool",
    "fullname": "bokeh.models.tools.PanTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "desc": "*toolbar icon*: |pan_icon|\n\nThe pan tool allows the user to pan a Plot by left-dragging a mouse, or on\ntouch devices by dragging a finger or stylus, across the plot region.\n\nThe pan tool also activates the border regions of a Plot for \"single axis\"\npanning. For instance, dragging in the vertical border or axis will effect\na pan in the vertical direction only, with horizontal dimension kept fixed.\n\n.. |pan_icon| image:: /_images/icons/Pan.png\n    :height: 24px",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the pan tool is constrained to act in. By default\nthe pan tool will pan in any dimension, but can be configured to only\npan horizontally across the width of the plot, or vertically across the\nheight of the plot.",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "Panel",
    "fullname": "bokeh.models.layouts.Panel",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A single-widget container with title bar and controls.\n\n    ",
    "props": [
      {
        "name": "title",
        "type": "String",
        "desc": "The text title of the panel.",
        "default": ""
      },
      {
        "name": "child",
        "type": "Instance(LayoutDOM)",
        "desc": "The child widget. If you need more children, use a layout widget, e.g. a ``Column``.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "closable",
        "type": "Bool",
        "desc": "Whether this panel is closable or not. If True, an \"x\" button will appear.\n\nClosing a panel is equivalent to removing it from its parent container (e.g. tabs).",
        "default": false
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget is responsive to UI events.",
        "default": false
      }
    ]
  },
  {
    "name": "Paragraph",
    "fullname": "bokeh.models.widgets.markups.Paragraph",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "desc": "A block (paragraph) of text.\n\nThis Bokeh model corresponds to an HTML ``<p>`` element.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_paragraph.py\n    :source-position: below",
    "props": [
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "Raw CSS style declaration. Note this may be web browser dependent.",
        "default": {}
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "Whether the contents should not be processed as TeX/LaTeX input.",
        "default": false
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "text",
        "type": "String",
        "desc": "The text or HTML contents of the widget.\n\n.. note::\n    If the HTML content contains elements which size depends on\n    on external, asynchronously loaded resources, the size of\n    the widget may be computed incorrectly. This is in particular\n    an issue with images (``<img>``). To remedy this problem, one\n    either has to set explicit dimensions using CSS properties,\n    HTML attributes or model's ``width`` and ``height`` properties,\n    or inline images' contents using data URIs.",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "PasswordInput",
    "fullname": "bokeh.models.widgets.inputs.PasswordInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ],
    "desc": "Single-line password input widget.\n\nThis widget hides the input value so that it is not visible in the browser.\n\n.. warning::\n    Secure transmission of the password to Bokeh server application code\n    requires configuring the server for SSL (i.e. HTTPS) termination.",
    "props": [
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "Max count of characters in field",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "Initial or entered text value.\n\nChange events are triggered whenever <enter> is pressed.",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "Placeholder for empty input field.",
        "default": ""
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "value_input",
        "type": "String",
        "desc": "Initial or current value.\n\nChange events are triggered whenever any update happens, i.e. on every\nkeypress.",
        "default": ""
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Patch",
    "fullname": "bokeh.models.glyphs.Patch",
    "bases": [
      "bokeh.models.glyph.ConnectedXYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render a single patch.\n\nThe ``Patch`` glyph is different from most other glyphs in that the vector\nof values only produces one glyph on the Plot.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Patch.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "Alpha",
        "desc": "The hatch alpha values for the patch.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the patch.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "Size",
        "desc": "The hatch scale values for the patch.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the patch.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for the points of the patch.\n\n.. note::\n    A patch may comprise multiple polygons. In this case the\n    x-coordinates for each polygon should be separated by NaN\n    values in the sequence.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the patch.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the patch.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the patch.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "Nullable(String)",
        "desc": "The hatch pattern values for the patch.",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for the points of the patch.\n\n.. note::\n    A patch may comprise multiple polygons. In this case the\n    y-coordinates for each polygon should be separated by NaN\n    values in the sequence.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the patch.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "Nullable(Color)",
        "desc": "The hatch color values for the patch.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the patch.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "Size",
        "desc": "The hatch weight values for the patch.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the patch.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the patch.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the patch.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Patches",
    "fullname": "bokeh.models.glyphs.Patches",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render several patches.\n\nThe data for the ``Patches`` glyph is different in that the vector of\nvalues is not a vector of scalars. Rather, it is a \"list of lists\".\n\nDuring box selection only patches entirely contained in the\nselection box will be included.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Patches.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the patches.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the patches.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the patches.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the patches.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the patches.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the patches.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the patches.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the patches.",
        "default": null
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the patches.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the patches.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the patches.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the patches.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for all the patches, given as a \"list of lists\".\n\n.. note::\n    Individual patches may comprise multiple polygons. In this case\n    the x-coordinates for each polygon should be separated by NaN\n    values in the sublists.",
        "default": {
          "field": "xs"
        }
      },
      {
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for all the patches, given as a \"list of lists\".\n\n.. note::\n    Individual patches may comprise multiple polygons. In this case\n    the y-coordinates for each polygon should be separated by NaN\n    values in the sublists.",
        "default": {
          "field": "ys"
        }
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the patches.",
        "default": "gray"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the patches.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the patches.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "PercentEditor",
    "fullname": "bokeh.models.widgets.tables.PercentEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "``IntEditor`` optimized for editing percentages.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "PlainText",
    "fullname": "bokeh.models.text.PlainText",
    "bases": [
      "bokeh.models.text.BaseText"
    ],
    "desc": "Represents plain text in contexts where text parsing is allowed.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "The text value to render.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Plot",
    "fullname": "bokeh.models.plots.Plot",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "Model representing a plot, containing glyphs, guides, annotations.\n\n    ",
    "props": [
      {
        "name": "below",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area below of the plot.",
        "default": []
      },
      {
        "name": "x_range",
        "type": "Instance(Range)",
        "desc": "The (default) data range of the horizontal dimension of the plot.",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "outline_line_dash",
        "type": "DashPattern",
        "desc": "The line dash for the plot border outline.",
        "default": []
      },
      {
        "name": "toolbar_sticky",
        "type": "Bool",
        "desc": "Stick the toolbar to the edge of the plot. Default: True. If False,\nthe toolbar will be outside of the axes, titles etc.",
        "default": true
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "min_border_top",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region above the top of the\ncentral plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outer_width",
        "type": "Readonly(Int)",
        "desc": "This is the exact width of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "extra_x_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "Additional named scales to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.",
        "default": {}
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "toolbar_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "Where the toolbar will be located. If set to None, no toolbar\nwill be attached to the plot.",
        "default": "right"
      },
      {
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "desc": "A list of all renderers for this plot, including guides and annotations\nin addition to glyphs.\n\nThis property can be manipulated by hand, but the ``add_glyph`` and\n``add_layout`` methods are recommended to help make sure all necessary\nsetup is performed.",
        "default": []
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "The toolbar associated with this plot which holds all the tools. It is\nautomatically created with the plot if necessary.",
        "default": "{\"__type__\": \"bokeh.models.tools.Toolbar\"}"
      },
      {
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap for the plot border outline.",
        "default": "butt"
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "y_range",
        "type": "Instance(Range)",
        "desc": "The (default) data range of the vertical dimension of the plot.",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "min_border_left",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region to the left of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outline_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset for the plot border outline.",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": 600
      },
      {
        "name": "outline_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha for the plot border outline.",
        "default": 1.0
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Either(Null, Instance(Title))",
        "desc": "A title for the plot. Can be a text string or a Title annotation.",
        "default": "{\"__type__\": \"bokeh.models.annotations.Title\"}"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "lod_interval",
        "type": "Int",
        "desc": "Interval (in ms) during which an interactive tool event will enable\nlevel-of-detail downsampling.",
        "default": 300
      },
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\nthe ratio of width over height. This property controls whether Bokeh should\nattempt to match the (width/height) of *data space* to the (width/height)\nin pixels of *screen space*.\n\nDefault is ``False`` which indicates that the *data* aspect ratio and the\n*screen* aspect ratio vary independently. ``True`` indicates that the plot\naspect ratio of the axes will match the aspect ratio of the pixel extent\nthe axes. The end result is that a 1x1 area in data space is a square in\npixels, and conversely that a 1x1 pixel is a square in data units.\n\n.. note::\n    This setting only takes effect when there are two dataranges. This\n    setting only sets the initial plot draw and subsequent resets. It is\n    possible for tools (single axis zoom, unconstrained box zoom) to\n    change the aspect ratio.\n\n.. warning::\n    This setting is incompatible with linking dataranges across multiple\n    plots. Doing so may result in undefined behavior.",
        "default": false
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert x-coordinates in data space\ninto x-coordinates in screen space.",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping x-coordinates.\n\nThis is useful for adding additional axes.",
        "default": {}
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "reset_policy",
        "type": "Enum('standard', 'event_only')",
        "desc": "How a plot should respond to being reset. By deafult, the standard actions\nare to clear any tool state history, return plot ranges to their original\nvalues, undo all selections, and emit a ``Reset`` event. If customization\nis desired, this property may be set to ``\"event_only\"``, which will\nsuppress all of the actions except the Reset event.",
        "default": "standard"
      },
      {
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n.. note::\n    When set to ``webgl``, glyphs without a WebGL rendering implementation\n    will fall back to rendering onto 2D canvas.",
        "default": "canvas"
      },
      {
        "name": "extra_y_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "Additional named scales to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.\n\n.. note:: This feature is experimental and may change in the short term.",
        "default": {}
      },
      {
        "name": "inner_width",
        "type": "Readonly(Int)",
        "desc": "This is the exact width of the plotting canvas, i.e. the width of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "border_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the plot border style.",
        "default": 1.0
      },
      {
        "name": "border_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the plot border style.",
        "default": "#ffffff"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "frame_width",
        "type": "Nullable(Int)",
        "desc": "The width of a plot frame or the inner width of a plot, excluding any\naxes, titles, border padding, etc.",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color for the plot background style.",
        "default": "#ffffff"
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha for the plot background style.",
        "default": 1.0
      },
      {
        "name": "center",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the center area (frame) of the plot.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": 600
      },
      {
        "name": "hidpi",
        "type": "Bool",
        "desc": "Whether to use HiDPI mode when available.",
        "default": true
      },
      {
        "name": "min_border_bottom",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region below the bottom of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "outline_line_width",
        "type": "Float",
        "desc": "The line width for the plot border outline.",
        "default": 1
      },
      {
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join for the plot border outline.",
        "default": "bevel"
      },
      {
        "name": "right",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the right of the plot.",
        "default": []
      },
      {
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "Additional named ranges to make available for mapping y-coordinates.\n\nThis is useful for adding additional axes.",
        "default": {}
      },
      {
        "name": "frame_height",
        "type": "Nullable(Int)",
        "desc": "The height of a plot frame or the inner height of a plot, excluding any\naxes, titles, border padding, etc.",
        "default": null
      },
      {
        "name": "lod_timeout",
        "type": "Int",
        "desc": "Timeout (in ms) for checking whether interactive tool events are still\noccurring. Once level-of-detail mode is enabled, a check is made every\n``lod_timeout`` ms. If no interactive tool events have happened,\nlevel-of-detail mode is disabled.",
        "default": 500
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "inner_height",
        "type": "Readonly(Int)",
        "desc": "This is the exact height of the plotting canvas, i.e. the height of\nthe actual plot, without toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "outer_height",
        "type": "Readonly(Int)",
        "desc": "This is the exact height of the layout, i.e. the height of\nthe actual plot, with toolbars etc. Note this is computed in a\nweb browser, so this property will work only in backends capable of\nbidirectional communication (server, notebook).\n\n.. note::\n    This is an experimental feature and the API may change in near future.",
        "default": 0
      },
      {
        "name": "min_border_right",
        "type": "Nullable(Int)",
        "desc": "Minimum size in pixels of the padding region to the right of\nthe central plot region.\n\n.. note::\n    This is a *minimum*. The padding region may expand as needed to\n    accommodate titles or axes, etc.",
        "default": null
      },
      {
        "name": "lod_threshold",
        "type": "Nullable(Int)",
        "desc": "A number of data points, above which level-of-detail downsampling may\nbe performed by glyph renderers. Set to ``None`` to disable any\nlevel-of-detail downsampling.",
        "default": 2000
      },
      {
        "name": "left",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area to the left of the plot.",
        "default": []
      },
      {
        "name": "above",
        "type": "List(Instance(Renderer))",
        "desc": "A list of renderers to occupy the area above of the plot.",
        "default": []
      },
      {
        "name": "outline_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color for the plot border outline.",
        "default": "#e5e5e5"
      },
      {
        "name": "lod_factor",
        "type": "Int",
        "desc": "Decimation factor to use when applying level-of-detail decimation.",
        "default": 10
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": "What kind of scale to use to convert y-coordinates in data space\ninto y-coordinates in screen space.",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "A value to be given for increased aspect ratio control. This value is added\nmultiplicatively to the calculated value required for ``match_aspect``.\n``aspect_scale`` is defined as the ratio of width over height of the figure.\n\nFor example, a plot with ``aspect_scale`` value of 2 will result in a\nsquare in *data units* to be drawn on the screen as a rectangle with a\npixel width twice as long as its pixel height.\n\n.. note::\n    This setting only takes effect if ``match_aspect`` is set to ``True``.",
        "default": 1
      },
      {
        "name": "title_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "Where the title will be located. Titles on the left or right side\nwill be rotated.",
        "default": "above"
      },
      {
        "name": "min_border",
        "type": "Nullable(Int)",
        "desc": "A convenience property to set all all the ``min_border_X`` properties\nto the same value. If an individual border property is explicitly set,\nit will override ``min_border``.",
        "default": 5
      }
    ]
  },
  {
    "name": "PointDrawTool",
    "fullname": "bokeh.models.tools.PointDrawTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": "*toolbar icon*: |point_draw_icon|\n\nThe PointDrawTool allows adding, dragging and deleting point-like glyphs\n(i.e subclasses of``XYGlyph``) on one or more renderers by editing the\nunderlying ``ColumnDataSource`` data. Like other drawing tools, the\nrenderers that are to be edited must be supplied explicitly as a list. Any\nnewly added points will be inserted on the ``ColumnDataSource`` of the\nfirst supplied renderer.\n\nThe tool will modify the columns on the data source corresponding to the\n``x`` and ``y`` values of the glyph. Any additional columns in the data\nsource will be padded with the given ``empty_value`` when adding a new\npoint.\n\n.. note::\n    The data source updates will trigger data change events continuously\n    throughout the edit operations on the BokehJS side. In Bokeh server\n    apps, the data source will only be synced once, when the edit operation\n    finishes.\n\nThe supported actions include:\n\n* Add point: Tap anywhere on the plot\n\n* Move point: Tap and drag an existing point, the point will be\n  dropped once you let go of the mouse button.\n\n* Delete point: Tap a point to select it then press <<backspace>>\n  key while the mouse is within the plot area.\n\n.. |point_draw_icon| image:: /_images/icons/PointDraw.png\n    :height: 24px",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "Defines a limit on the number of points that can be drawn. By default there\nis no limit on the number of objects, but if enabled the oldest drawn point\nwill be dropped to make space for the new point.",
        "default": 0
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "drag",
        "type": "Bool",
        "desc": "Enables dragging of existing points on pan events.",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "add",
        "type": "Bool",
        "desc": "Enables adding of new points on tap events.",
        "default": true
      }
    ]
  },
  {
    "name": "PolarTransform",
    "fullname": "bokeh.models.expressions.PolarTransform",
    "bases": [
      "bokeh.models.expressions.CoordinateTransform"
    ],
    "desc": "Transform from polar to cartesian coordinates. ",
    "props": [
      {
        "name": "radius",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The radial coordinate (i.e. the distance from the origin).\n\nNegative radius is allowed, which is equivalent to using positive radius\nand changing ``direction`` to the opposite value.",
        "default": {
          "field": "radius"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angular coordinate (i.e. the angle from the reference axis).",
        "default": {
          "field": "angle"
        }
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "Whether ``angle`` measures clockwise or anti-clockwise from the reference axis.",
        "default": "anticlock"
      }
    ]
  },
  {
    "name": "PolyAnnotation",
    "fullname": "bokeh.models.annotations.PolyAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": "Render a shaded polygonal region as an annotation.\n\nSee :ref:`userguide_annotations_polygon_annotations` for information on\nplotting polygon annotations.",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "Alpha",
        "desc": "The hatch alpha values for the polygon.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the polygon.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "Size",
        "desc": "The hatch scale values for the polygon.",
        "default": 12.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the polygon.",
        "default": 1
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the polygon.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the polygon.",
        "default": 0.4
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the polygon.",
        "default": "bevel"
      },
      {
        "name": "xs_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the ``xs`` attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "hatch_pattern",
        "type": "Nullable(String)",
        "desc": "The hatch pattern values for the polygon.",
        "default": null
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the polygon.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "Nullable(Color)",
        "desc": "The hatch color values for the polygon.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the polygon.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "Size",
        "desc": "The hatch weight values for the polygon.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "xs",
        "type": "Seq(Float)",
        "desc": "The x-coordinates of the region to draw.",
        "default": []
      },
      {
        "name": "ys_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the ``ys`` attribute. Interpreted as |data units| by\ndefault.",
        "default": "data"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "ys",
        "type": "Seq(Float)",
        "desc": "The y-coordinates of the region to draw.",
        "default": []
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the polygon.",
        "default": "#fff9ba"
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the polygon.",
        "default": "#cccccc"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the polygon.",
        "default": 0.3
      }
    ]
  },
  {
    "name": "PolyDrawTool",
    "fullname": "bokeh.models.tools.PolyDrawTool",
    "bases": [
      "bokeh.models.tools.PolyTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": "*toolbar icon*: |poly_draw_icon|\n\nThe PolyDrawTool allows drawing, selecting and deleting ``Patches`` and\n``MultiLine`` glyphs on one or more renderers by editing the underlying\n``ColumnDataSource`` data. Like other drawing tools, the renderers that\nare to be edited must be supplied explicitly.\n\nThe tool will modify the columns on the data source corresponding to the\n``xs`` and ``ys`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared ``empty_value``, when adding a new\npoint.\n\nIf a ``vertex_renderer`` with an point-like glyph is supplied then the\n``PolyDrawTool`` will use it to display the vertices of the multi-lines or\npatches on all supplied renderers. This also enables the ability to snap\nto existing vertices while drawing.\n\nThe supported actions include:\n\n* Add patch or multi-line: Double tap to add the first vertex, then use tap\n  to add each subsequent vertex, to finalize the draw action double tap to\n  insert the final vertex or press the <<esc> key.\n\n* Move patch or ulti-line: Tap and drag an existing patch/multi-line, the\n  point will be dropped once you let go of the mouse button.\n\n* Delete patch or multi-line: Tap a patch/multi-line to select it then\n  press <<backspace>> key while the mouse is within the plot area.\n\n.. |poly_draw_icon| image:: /_images/icons/PolyDraw.png\n    :height: 24px",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "vertex_renderer",
        "type": "Nullable(Instance(GlyphRenderer))",
        "desc": "The renderer used to render the vertices of a selected line or polygon.",
        "default": null
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "Defines a limit on the number of patches or multi-lines that can be drawn.\nBy default there is no limit on the number of objects, but if enabled the\noldest drawn patch or multi-line will be dropped to make space for the new\npatch or multi-line.",
        "default": 0
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "drag",
        "type": "Bool",
        "desc": "Enables dragging of existing patches and multi-lines on pan events.",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "PolyEditTool",
    "fullname": "bokeh.models.tools.PolyEditTool",
    "bases": [
      "bokeh.models.tools.PolyTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": "*toolbar icon*: |poly_edit_icon|\n\nThe PolyEditTool allows editing the vertices of one or more ``Patches`` or\n``MultiLine`` glyphs. Glyphs to be edited are defined via the ``renderers``\nproperty and a renderer for the vertices is set via the ``vertex_renderer``\nproperty (must render a point-like Glyph (a subclass of ``XYGlyph``).\n\nThe tool will modify the columns on the data source corresponding to the\n``xs`` and ``ys`` values of the glyph. Any additional columns in the data\nsource will be padded with the declared``empty_value``, when adding a new\npoint.\n\nThe supported actions include:\n\n* Show vertices: Double tap an existing patch or multi-line\n\n* Add vertex: Double tap an existing vertex to select it, the tool will\n  draw the next point, to add it tap in a new location. To finish editing\n  and add a point double tap otherwise press the <<esc> key to cancel.\n\n* Move vertex: Drag an existing vertex and let go of the mouse button to\n  release it.\n\n* Delete vertex: After selecting one or more vertices press <<backspace>>\n  while the mouse cursor is within the plot area.\n\n.. |poly_edit_icon| image:: /_images/icons/PolyEdit.png\n    :height: 24px",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "vertex_renderer",
        "type": "Nullable(Instance(GlyphRenderer))",
        "desc": "The renderer used to render the vertices of a selected line or polygon.",
        "default": null
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "PolySelectTool",
    "fullname": "bokeh.models.tools.PolySelectTool",
    "bases": [
      "bokeh.models.tools.Tap",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": "*toolbar icon*: |poly_select_icon|\n\nThe polygon selection tool allows users to make selections on a\nPlot by indicating a polygonal region with mouse clicks. single\nclicks (or taps) add successive points to the definition of the\npolygon, and a double click (or tap) indicates the selection\nregion is ready.\n\nSee :ref:`userguide_styling_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n.. note::\n    Selections can be comprised of multiple regions, even those\n    made by different selection tools. Hold down the <<shift>> key\n    while making a selection to append the new selection to any\n    previous selection that might exist.\n\n.. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n    :height: 24px",
    "props": [
      {
        "name": "overlay",
        "type": "Instance(PolyAnnotation)",
        "desc": "A shaded annotation drawn to indicate the selection region.",
        "default": "{\"__type__\": \"bokeh.models.annotations.PolyAnnotation\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"syncable\": false, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.",
        "default": "auto"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "Defines what should happen when a new selection is made. The default\nis to replace the existing selection. Other options are to append to\nthe selection, intersect with it or subtract from it.",
        "default": "replace"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that have a matching\nvalue for their ``name`` attribute will be used.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      }
    ]
  },
  {
    "name": "PolyTool",
    "fullname": "bokeh.models.tools.PolyTool",
    "bases": [
      "bokeh.models.tools.EditTool"
    ],
    "desc": "A base class for polygon draw/edit tools. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "An icon to display in the toolbar.\n\nThe icon can provided as a string filename for an image, a PIL ``Image``\nobject, or an RGB(A) NumPy array.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "vertex_renderer",
        "type": "Nullable(Instance(GlyphRenderer))",
        "desc": "The renderer used to render the vertices of a selected line or polygon.",
        "default": null
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "An explicit list of renderers corresponding to scatter glyphs that may\nbe edited.",
        "default": []
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "Defines the value to insert on non-coordinate columns when a new\nglyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\ncircle glyph defines 'x', 'y' and 'color' columns, adding a new\npoint will add the x and y-coordinates to 'x' and 'y' columns and\nthe color column will be filled with the defined empty value.",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "PreText",
    "fullname": "bokeh.models.widgets.markups.PreText",
    "bases": [
      "bokeh.models.widgets.markups.Paragraph"
    ],
    "desc": "A block (paragraph) of pre-formatted text.\n\nThis Bokeh model corresponds to an HTML ``<pre>`` element.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_pretext.py\n    :source-position: below",
    "props": [
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "Raw CSS style declaration. Note this may be web browser dependent.",
        "default": {}
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "Whether the contents should not be processed as TeX/LaTeX input.",
        "default": false
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "text",
        "type": "String",
        "desc": "The text or HTML contents of the widget.\n\n.. note::\n    If the HTML content contains elements which size depends on\n    on external, asynchronously loaded resources, the size of\n    the widget may be computed incorrectly. This is in particular\n    an issue with images (``<img>``). To remedy this problem, one\n    either has to set explicit dimensions using CSS properties,\n    HTML attributes or model's ``width`` and ``height`` properties,\n    or inline images' contents using data URIs.",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "PrintfTickFormatter",
    "fullname": "bokeh.models.formatters.PrintfTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": "Tick formatter based on a printf-style format string. ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "format",
        "type": "String",
        "desc": "The number format, as defined as follows: the placeholder in the format\nstring is marked by % and is followed by one or more of these elements,\nin this order:\n\n* An optional ``+`` sign\n    Causes the result to be preceded with a plus or minus sign on numeric\n    values. By default, only the ``-`` sign is used on negative numbers.\n\n* An optional padding specifier\n    Specifies what (if any) character to use for padding. Possible values\n    are 0 or any other character preceded by a ``'`` (single quote). The\n    default is to pad with spaces.\n\n* An optional ``-`` sign\n    Causes sprintf to left-align the result of this placeholder. The default\n    is to right-align the result.\n\n* An optional number\n    Specifies how many characters the result should have. If the value to be\n    returned is shorter than this number, the result will be padded.\n\n* An optional precision modifier\n    Consists of a ``.`` (dot) followed by a number, specifies how many digits\n    should be displayed for floating point numbers. When used on a string, it\n    causes the result to be truncated.\n\n* A type specifier\n    Can be any of:\n\n    - ``%`` --- yields a literal ``%`` character\n    - ``b`` --- yields an integer as a binary number\n    - ``c`` --- yields an integer as the character with that ASCII value\n    - ``d`` or ``i`` --- yields an integer as a signed decimal number\n    - ``e`` --- yields a float using scientific notation\n    - ``u`` --- yields an integer as an unsigned decimal number\n    - ``f`` --- yields a float as is\n    - ``o`` --- yields an integer as an octal number\n    - ``s`` --- yields a string as is\n    - ``x`` --- yields an integer as a hexadecimal number (lower-case)\n    - ``X`` --- yields an integer as a hexadecimal number (upper-case)",
        "default": "%s"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "ProxyToolbar",
    "fullname": "bokeh.models.tools.ProxyToolbar",
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ],
    "desc": "A toolbar that allow to merge and proxy tools of toolbars in multiple\nplots.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "logo",
        "type": "Nullable(Enum('normal', 'grey'))",
        "desc": "What version of the Bokeh logo to display on the toolbar. If\nset to None, no logo will be displayed.",
        "default": "normal"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "toolbars",
        "type": "List(Instance(Toolbar))",
        "desc": "    ",
        "default": []
      },
      {
        "name": "tools",
        "type": "List(Instance(Tool))",
        "desc": "A list of tools to add to the plot.",
        "default": []
      },
      {
        "name": "autohide",
        "type": "Bool",
        "desc": "Whether the toolbar will be hidden by default. Default: False.\nIf True, hides toolbar when cursor is not in canvas.",
        "default": false
      }
    ]
  },
  {
    "name": "QUADKEYTileSource",
    "fullname": "bokeh.models.tiles.QUADKEYTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": "Has the same tile origin as the ``WMTSTileSource`` but requests tiles using\na `quadkey` argument instead of X, Y, Z e.g.\n``http://your.quadkey.tile.host/{Q}.png``",
    "props": [
      {
        "name": "url",
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "default": ""
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute.",
        "default": 156543.03392804097
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "default": ""
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\nThese variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name).",
        "default": {}
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\nbounds of map.\n\n..note::\n    Axis coordinates are not wrapped. To toggle axis label visibility,\n    use ``plot.axis.visible = False``.",
        "default": true
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "An x-offset in plot coordinates",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "default": 256
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "default": 30
      },
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "A y-offset in plot coordinates",
        "default": 20037508.34
      }
    ]
  },
  {
    "name": "Quad",
    "fullname": "bokeh.models.glyphs.Quad",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render axis-aligned quads.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Quad.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the quads.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the quads.",
        "default": {}
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the quads.",
        "default": 1.0
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the quads.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the quads.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the quads.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the quads.",
        "default": 1.0
      },
      {
        "name": "left",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the left edges.",
        "default": {
          "field": "left"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the quads.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the quads.",
        "default": null
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the quads.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the quads.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the quads.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the quads.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "top",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the top edges.",
        "default": {
          "field": "top"
        }
      },
      {
        "name": "bottom",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the bottom edges.",
        "default": {
          "field": "bottom"
        }
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the quads.",
        "default": "gray"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the quads.",
        "default": "black"
      },
      {
        "name": "right",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the right edges.",
        "default": {
          "field": "right"
        }
      }
    ]
  },
  {
    "name": "Quadratic",
    "fullname": "bokeh.models.glyphs.Quadratic",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render parabolas.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Quadratic.py\n    :source-position: below",
    "props": [
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the ending points.",
        "default": {
          "field": "x1"
        }
      },
      {
        "name": "cx",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the control points.",
        "default": {
          "field": "cx"
        }
      },
      {
        "name": "cy",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the control points.",
        "default": {
          "field": "cy"
        }
      },
      {
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the starting points.",
        "default": {
          "field": "y0"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the parabolas.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the parabolas.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the ending points.",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the starting points.",
        "default": {
          "field": "x0"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the parabolas.",
        "default": "bevel"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the parabolas.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the parabolas.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the parabolas.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the parabolas.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "RadioButtonGroup",
    "fullname": "bokeh.models.widgets.groups.RadioButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "desc": "A group of radio boxes rendered as toggle buttons.\n\n    ",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the button group either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "A style for the button, signifying it's role.",
        "default": "default"
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "active",
        "type": "Nullable(Int)",
        "desc": "The index of the selected radio box, or ``None`` if nothing is\nselected.",
        "default": null
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "RadioGroup",
    "fullname": "bokeh.models.widgets.groups.RadioGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "desc": "A group of radio boxes.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "List of text labels contained in this group.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "active",
        "type": "Nullable(Int)",
        "desc": "The index of the selected radio box, or ``None`` if nothing is selected.",
        "default": null
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "Should items be arrange vertically (``False``) or horizontally\nin-line (``True``).",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Range",
    "fullname": "bokeh.models.ranges.Range",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A base class for all range types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Range1d",
    "fullname": "bokeh.models.ranges.Range1d",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "desc": "A fixed, closed range [start, end] in a continuous scalar\ndimension.\n\nIn addition to supplying ``start`` and ``end`` keyword arguments\nto the ``Range1d`` initializer, you can also instantiate with\nthe convenience syntax::\n\n    Range(0, 10) # equivalent to Range(start=0, end=10)",
    "props": [
      {
        "name": "start",
        "type": "Either(Float, Datetime, TimeDelta)",
        "desc": "The start of the range.",
        "default": 0
      },
      {
        "name": "min_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "The level that the range is allowed to zoom in, expressed as the\nminimum visible interval. If set to ``None`` (default), the minimum\ninterval is not bound. Can be a ``TimeDelta``. ",
        "default": null
      },
      {
        "name": "max_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "The level that the range is allowed to zoom out, expressed as the\nmaximum visible interval. Can be a ``TimeDelta``. Note that ``bounds`` can\nimpose an implicit constraint on the maximum interval as well. ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "reset_end",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "The end of the range to apply when resetting. If set to ``None`` defaults\nto the ``end`` value during initialization.",
        "default": null
      },
      {
        "name": "end",
        "type": "Either(Float, Datetime, TimeDelta)",
        "desc": "The end of the range.",
        "default": 1
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta)), Tuple(Datetime, Datetime), Tuple(Nullable(Datetime), Datetime), Tuple(Datetime, Nullable(Datetime))))",
        "desc": "The bounds that the range is allowed to go to. Typically used to prevent\nthe user from panning/zooming/etc away from the data.\n\nIf set to ``'auto'``, the bounds will be computed to the start and end of the Range.\n\nBounds are provided as a tuple of ``(min, max)`` so regardless of whether your range is\nincreasing or decreasing, the first item should be the minimum value of the range and the\nsecond item should be the maximum. Setting min > max will result in a ``ValueError``.\n\nBy default, bounds are ``None`` and your plot to pan/zoom as far as you want. If you only\nwant to constrain one end of the plot, you can set min or max to None.\n\nExamples:\n\n.. code-block:: python\n\n    Range1d(0, 1, bounds='auto')  # Auto-bounded to 0 and 1 (Default behavior)\n    Range1d(start=0, end=1, bounds=(0, None))  # Maximum is unbounded, minimum bounded to 0",
        "default": null
      },
      {
        "name": "reset_start",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "The start of the range to apply after reset. If set to ``None`` defaults\nto the ``start`` value during initialization.",
        "default": null
      }
    ]
  },
  {
    "name": "RangeSlider",
    "fullname": "bokeh.models.widgets.sliders.RangeSlider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": "Range-slider based number range selection widget. ",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "Acceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "#e6e6e6"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Float)",
        "desc": "The maximum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "start",
        "type": "NonNullable(Float)",
        "desc": "The minimum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Tuple(Float, Float)))",
        "desc": "Initial or selected value, throttled according to report only on mouseup.",
        "default": "<Undefined>"
      },
      {
        "name": "value",
        "type": "NonNullable(Tuple(Float, Float))",
        "desc": "Initial or selected range.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "Whether or not show slider's value.",
        "default": true
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "    ",
        "default": "ltr"
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "step",
        "type": "Float",
        "desc": "The step between consecutive values.",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "Slider's label.",
        "default": ""
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "    ",
        "default": "0[.]00"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "    ",
        "default": true
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "RangeTool",
    "fullname": "bokeh.models.tools.RangeTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "desc": "*toolbar icon*: |range_icon|\n\nThe range tool allows the user to update range objects for either or both\nof the x- or y-dimensions by dragging a corresponding shaded annotation to\nmove it or change its boundaries.\n\nA common use case is to add this tool to a plot with a large fixed range,\nbut to configure the tool range from a different plot. When the user\nmanipulates the overlay, the range of the second plot will be updated\nautomatically.\n\n.. |range_icon| image:: /_images/icons/Range.png\n    :height: 24px",
    "props": [
      {
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "desc": "A shaded annotation drawn to indicate the configured ranges.",
        "default": "{\"__type__\": \"bokeh.models.annotations.BoxAnnotation\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [2, 2], \"line_width\": 0.5, \"syncable\": false}"
      },
      {
        "name": "x_range",
        "type": "Nullable(Instance(Range1d))",
        "desc": "A range synchronized to the x-dimension of the overlay. If None, the overlay\nwill span the entire x-dimension.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "x_interaction",
        "type": "Bool",
        "desc": "Whether to respond to horizontal pan motions when an ``x_range`` is present.\n\nBy default, when an ``x_range`` is specified, it is possible to adjust the\nhorizontal position of the range box by panning horizontally inside the\nbox, or along the top or bottom edge of the box. To disable this, and fix\nthe  range box in place horizontally, set to False. (The box will still\nupdate if the ``x_range`` is updated programmatically.)",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "y_range",
        "type": "Nullable(Instance(Range1d))",
        "desc": "A range synchronized to the y-dimension of the overlay. If None, the overlay\nwill span the entire y-dimension.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "y_interaction",
        "type": "Bool",
        "desc": "Whether to respond to vertical pan motions when a ``y_range`` is present.\n\nBy default, when a ``y_range`` is specified, it is possible to adjust the\nvertical position of the range box by panning vertically inside the box, or\nalong the top or bottom edge of the box. To disable this, and fix the range\nbox in place vertically, set to False. (The box will still update if the\n``y_range`` is updated programmatically.)",
        "default": true
      }
    ]
  },
  {
    "name": "Ray",
    "fullname": "bokeh.models.glyphs.Ray",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render rays.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Ray.py\n    :source-position: below",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the rays.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to start the rays.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "length",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The length to extend the ray. Note that this ``length`` defaults\nto |data units| (measured in the x-direction).",
        "default": 0
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the rays.",
        "default": "butt"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles in radians to extend the rays, as measured from the horizontal.",
        "default": 0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the rays.",
        "default": "bevel"
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to start the rays.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the rays.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the rays.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "length_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the rays.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the rays.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Rect",
    "fullname": "bokeh.models.glyphs.Rect",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render rectangles.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Rect.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the rectangles.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the rectangles.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the rectangles.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the rectangles.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the centers of the rectangles.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the rectangles.",
        "default": "butt"
      },
      {
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the rectangles, as measured from the horizontal.",
        "default": 0.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the rectangles.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the rectangles.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the rectangles.",
        "default": null
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall widths of the rectangles.",
        "default": {
          "field": "width"
        }
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the centers of the rectangles.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "Whether to always round fractional pixel locations in such a way\nas to make the rectangles bigger.\n\nThis setting may be useful if pixel rounding errors are causing\nrectangles to have a gap between them, when they should appear\nflush.",
        "default": false
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the rectangles.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the rectangles.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the rectangles.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the rectangles.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "desc": "The overall heights of the rectangles.",
        "default": {
          "field": "height"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the rectangles.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the rectangles.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the rectangles.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "RedoTool",
    "fullname": "bokeh.models.tools.RedoTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "*toolbar icon*: |redo_icon|\n\nRedo tool reverses the last action performed by undo tool.\n\n.. |redo_icon| image:: /_images/icons/Redo.png\n    :height: 24px",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "Renderer",
    "fullname": "bokeh.models.renderers.Renderer",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "An abstract base class for renderer types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "image"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "RendererGroup",
    "fullname": "bokeh.models.renderers.RendererGroup",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A collection of renderers.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Makes all groupped renderers visible or not.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "ResetTool",
    "fullname": "bokeh.models.tools.ResetTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "*toolbar icon*: |reset_icon|\n\nThe reset tool is an action. When activated in the toolbar, the tool resets\nthe data bounds of the plot to their values when the plot was initially\ncreated.\n\n.. |reset_icon| image:: /_images/icons/Reset.png\n    :height: 24px",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "Row",
    "fullname": "bokeh.models.layouts.Row",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "desc": "Lay out child components in a single horizontal row.\n\nChildren can be specified as positional arguments, as a single argument\nthat is a sequence, or using the ``children`` keyword argument.",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "The gap between children (in pixels).",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "cols",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), width=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "Describes how the component should maintain its columns' widths.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion.",
        "default": "auto"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "default": []
      }
    ]
  },
  {
    "name": "RowAggregator",
    "fullname": "bokeh.models.widgets.tables.RowAggregator",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Abstract base class for data cube's row formatters.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "Refers to the table column being aggregated",
        "default": ""
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "SaveTool",
    "fullname": "bokeh.models.tools.SaveTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "*toolbar icon*: |save_icon|\n\nThe save tool is an action. When activated, the tool opens a download dialog\nwhich allows to save an image reproduction of the plot in PNG format. If\nautomatic download is not support by a web browser, the tool falls back to\nopening the generated image in a new tab or window. User then can manually\nsave it by right clicking on the image and choosing \"Save As\" (or similar)\nmenu item.\n\n.. |save_icon| image:: /_images/icons/Save.png\n    :height: 24px",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "ScalarExpression",
    "fullname": "bokeh.models.expressions.ScalarExpression",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for for scalar expressions. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Scale",
    "fullname": "bokeh.models.scales.Scale",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": "Base class for ``Scale`` models that represent an invertible\ncomputation to be carried out on the client-side.\n\nJavaScript implementations should implement the following methods:\n\n.. code-block\n\n    compute(x: number): number {\n        # compute and return the transform of a single value\n    }\n\n    v_compute(xs: Arrayable<number>): Arrayable<number> {\n        # compute and return the transform of an array of values\n    }\n\n    invert(sx: number): number {\n        # compute and return the inverse transform of a single value\n    }\n\n    v_invert(sxs: Arrayable<number>): Arrayable<number> {\n        # compute and return the inverse transform of an array of values\n    }\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "ScanningColorMapper",
    "fullname": "bokeh.models.mappers.ScanningColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "desc": "",
    "props": [
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "A collection of glyph renderers to pool data from for establishing data metrics.\nIf empty, mapped data will be used instead.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is higher than ``high`` value. If None,\nvalues higher than ``high`` are mapped to the last color in the palette.",
        "default": null
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "Color to be used if data is lower than ``low`` value. If None,\nvalues lower than ``low`` are mapped to the first color in the palette.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "Color to be used if data is NaN or otherwise not mappable.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "gray"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "The minimum value of the range to map into the palette. Values below\nthis are clamped to ``low``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "The maximum value of the range to map into the palette. Values above\nthis are clamped to ``high``. If ``None``, the value is inferred from data.",
        "default": null
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "A sequence of colors to use as the target palette for mapping.\n\nThis property can also be set as a ``String``, to the name of any of the\npalettes shown in :ref:`bokeh.palettes`.",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "Scatter",
    "fullname": "bokeh.models.glyphs.Scatter",
    "bases": [
      "bokeh.models.glyphs.Marker"
    ],
    "desc": "Render scatter markers selected from a predefined list of designs.\n\nUse ``Scatter`` to draw any of Bokeh's built-in marker types:\n``asterisk``, ``circle``, ``circle_cross``, ``circle_dot``, ``circle_x``,\n``circle_y``, ``cross``, ``dash``, ``diamond``, ``diamond_cross``,\n``diamond_dot``, ``dot``, ``hex``, ``hex_dot``, ``inverted_triangle``,\n``plus``, ``square``, ``square_cross``, ``square_dot``, ``square_pin``,\n``square_x``, ``star``, ``star_dot``, ``triangle``, ``triangle_dot``,\n``triangle_pin``, ``x``, or ``y``. This collection is available in\n:class:`~bokeh.core.enums.MarkerType`.\n\nBokeh's built-in markers consist of a set of base markers, most of which can\nbe combined with different kinds of additional visual features:\n\n.. bokeh-plot:: docs/user_guide/examples/plotting_markertypes.py\n    :source-position: none\n\nYou can select marker types in two ways:\n\n* To draw the **same marker for all values**, use the ``marker`` attribute\n  to specify the name of a specific marker. For example:\n\n  .. code-block:: python\n\n      glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"square\")\n      plot.add_glyph(source, glyph)\n\n  This will render square markers for all points.\n\n* Alternatively, to use **marker types specified in a data source column**,\n  assign the column name to the ``marker`` attribute. For example:\n\n  .. code-block:: python\n\n      # source.data['markers'] = [\"circle\", \"square\", \"circle\", ... ]\n\n      glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"markers\")\n      plot.add_glyph(source, glyph)\n\n.. note::\n    When you draw ``circle`` markers with ``Scatter``, you can only assign a\n    size in |screen units| (by passing a number of pixels to the ``size``\n    property). In case you want to define the radius of circles in\n    |data units|, use the :class:`~bokeh.models.glyphs.Circle` glyph instead\n    of the ``Scatter`` glyph.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Scatter.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the markers.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the markers.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the markers.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the markers.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-axis coordinates for the center of the markers.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "size",
        "type": "SizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size (diameter) values for the markers in screen space units.",
        "default": 4
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the markers.",
        "default": "butt"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the markers.",
        "default": 0.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the markers.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the markers.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the markers.",
        "default": null
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-axis coordinates for the center of the markers.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the markers.",
        "default": []
      },
      {
        "name": "hit_dilation",
        "type": "Size",
        "desc": "The factor by which to dilate the hit radius\nwhich is responsible for defining the range in which a\nmarker responds to interactions with the Hover and Tap\ntools.",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the markers.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the markers.",
        "default": 1.0
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the markers.",
        "default": "black"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "marker",
        "type": "MarkerSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'))), MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'))",
        "desc": "Which marker to render. This can be the name of any built in marker,\ne.g. \"circle\", or a reference to a data column containing such names.",
        "default": "circle"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the markers.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the markers.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the markers.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "ScientificFormatter",
    "fullname": "bokeh.models.widgets.tables.ScientificFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "desc": "Display numeric values from continuous ranges as \"basic numbers\",\nusing scientific notation when appropriate by default.",
    "props": [
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "An optional text font style, e.g. bold, italic.",
        "default": "normal"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "An optional text align, i.e. left, center or right.",
        "default": "left"
      },
      {
        "name": "power_limit_low",
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n    log(x) <= power_limit_low",
        "default": -3
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "precision",
        "type": "Int",
        "desc": "How many digits of precision to display.",
        "default": 10
      },
      {
        "name": "nan_format",
        "type": "Nullable(String)",
        "desc": "Formatting to apply to NaN and None values (falls back to scientific formatting if not set).",
        "default": null
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "An optional text color.",
        "default": null
      },
      {
        "name": "power_limit_high",
        "type": "Int",
        "desc": "Limit the use of scientific notation to when::\n    log(x) >= power_limit_high",
        "default": 5
      }
    ]
  },
  {
    "name": "Scroll",
    "fullname": "bokeh.models.tools.Scroll",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": "A base class for tools that respond to scroll events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "Segment",
    "fullname": "bokeh.models.glyphs.Segment",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render segments.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Segment.py\n    :source-position: below",
    "props": [
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the ending points.",
        "default": {
          "field": "x1"
        }
      },
      {
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the starting points.",
        "default": {
          "field": "y0"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the segments.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the segments.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the ending points.",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the starting points.",
        "default": {
          "field": "x0"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the segments.",
        "default": "bevel"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the segments.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the segments.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the segments.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the segments.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Select",
    "fullname": "bokeh.models.widgets.inputs.Select",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": "Single-select widget.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "Initial or selected value.",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "options",
        "type": "Either(List(Either(String, Tuple(String, String))), Dict(String, List(Either(String, Tuple(String, String)))))",
        "desc": "Available selection options. Options may be provided either as a list of\npossible string values, or as a list of tuples, each of the form\n``(value, label)``. In the latter case, the visible widget text for each\nvalue will be corresponding given label. Option groupings can be provided\nby supplying a dictionary object whose values are in the aforementioned\nlist format",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "SelectEditor",
    "fullname": "bokeh.models.widgets.tables.SelectEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Select cell editor.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "options",
        "type": "List(String)",
        "desc": "The list of options to select from.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "SelectTool",
    "fullname": "bokeh.models.tools.SelectTool",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": "A base class for tools that perfrom \"selections\", e.g. ``BoxSelectTool``.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.",
        "default": "auto"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "Defines what should happen when a new selection is made. The default\nis to replace the existing selection. Other options are to append to\nthe selection, intersect with it or subtract from it.",
        "default": "replace"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that have a matching\nvalue for their ``name`` attribute will be used.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      }
    ]
  },
  {
    "name": "Selection",
    "fullname": "bokeh.models.selections.Selection",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A Selection represents a portion of the data in a ``DataSource``, which\ncan be visually manipulated in a plot.\n\nSelections are typically created by selecting points in a plot with\na ``SelectTool``, but can also be programmatically specified.\n\nFor most glyphs, the ``indices`` property is the relevant value to use.",
    "props": [
      {
        "name": "line_indices",
        "type": "Seq(Int)",
        "desc": "The point indices included in a selection on a ``Line`` glyph.\n\nThis value records the indices of the individual points on a ``Line`` that\nwere selected by a selection tool.",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "indices",
        "type": "Seq(Int)",
        "desc": "The \"scatter\" level indices included in a selection. For example, for a\nselection on a ``Circle`` glyph, this list records the indices of which\nindividual circles are selected.\n\nFor \"multi\" glyphs such as ``Patches``, ``MultiLine``, ``MultiPolygons``,\netc, this list records the indices of which entire sub-items are selected.\nFor example, which indidual polygons of a ``MultiPolygon`` are selected.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "multiline_indices",
        "type": "Dict(String, Seq(Int))",
        "desc": "The detailed point indices included in a selection on a ``MultiLine``.\n\nThis value records which points, on which lines, are part of a seletion on\na ``MulitLine``. The keys are the top level indices (i.e., which line)\nwhich map to lists of indices (i.e. which points on that line).\n\nIf you only need to know which lines are selected, without knowing what\nindividual points on those lines are selected, then you can look at the\nkeys of this dictionary (converted to ints).",
        "default": {}
      }
    ]
  },
  {
    "name": "SelectionPolicy",
    "fullname": "bokeh.models.selections.SelectionPolicy",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": ".. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "ServerSentDataSource",
    "fullname": "bokeh.models.sources.ServerSentDataSource",
    "bases": [
      "bokeh.models.sources.WebDataSource"
    ],
    "desc": "A data source that can populate columns by receiving server sent\nevents endpoints.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "max_size",
        "type": "Nullable(Int)",
        "desc": "Maximum size of the data columns. If a new fetch would result in columns\nlarger than ``max_size``, then earlier data is dropped to make room.",
        "default": null
      },
      {
        "name": "data_url",
        "type": "NonNullable(String)",
        "desc": "A URL to to fetch data from.",
        "default": "<Undefined>"
      },
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "Mapping of column names to sequences of data. The columns can be, e.g,\nPython lists or tuples, NumPy arrays, etc.\n\nThe .data attribute can also be set from Pandas DataFrames or GroupBy\nobjects. In these cases, the behaviour is identical to passing the objects\nto the ``ColumnDataSource`` initializer.",
        "default": {}
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append')",
        "desc": "Whether to append new data to existing data (up to ``max_size``), or to\nreplace existing data entirely.",
        "default": "replace"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "An instance of a ``SelectionPolicy`` that determines how selections are set.",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "adapter",
        "type": "Nullable(Instance(CustomJS))",
        "desc": "A JavaScript callback to adapt raw JSON responses to Bokeh ``ColumnDataSource``\nformat.\n\nIf provided, this callback is executes immediately after the JSON data is\nreceived, but before appending or replacing data in the data source. The\n``CustomJS`` callback will receive the ``AjaxDataSource`` as ``cb_obj`` and\nwill receive the raw JSON response as ``cb_data.response``. The callback\ncode should return a ``data`` object suitable for a Bokeh ``ColumnDataSource``\n(i.e.  a mapping of string column names to arrays of data).",
        "default": null
      }
    ]
  },
  {
    "name": "SingleIntervalTicker",
    "fullname": "bokeh.models.tickers.SingleIntervalTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": "Generate evenly spaced ticks at a fixed interval regardless of\nscale.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "The interval between adjacent ticks.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "Slider",
    "fullname": "bokeh.models.widgets.sliders.Slider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": "Slider-based number selection widget. ",
    "props": [
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "Orient the slider either horizontally (default) or vertically.",
        "default": "horizontal"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "Acceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "#e6e6e6"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Float)",
        "desc": "The maximum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "start",
        "type": "NonNullable(Float)",
        "desc": "The minimum allowable value.",
        "default": "<Undefined>"
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Float))",
        "desc": "Initial or selected value, throttled according to report only on mouseup.",
        "default": "<Undefined>"
      },
      {
        "name": "value",
        "type": "NonNullable(Float)",
        "desc": "Initial or selected value.",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "Whether or not show slider's value.",
        "default": true
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "    ",
        "default": "ltr"
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "step",
        "type": "Float",
        "desc": "The step between consecutive values.",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "Slider's label.",
        "default": ""
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "    ",
        "default": "0[.]00"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "    ",
        "default": true
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Slope",
    "fullname": "bokeh.models.annotations.Slope",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": "Render a sloped line as an annotation.\n\nSee :ref:`userguide_annotations_slope` for information on plotting slopes.",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "gradient",
        "type": "Nullable(Float)",
        "desc": "The gradient of the line, in |data units|",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the line.",
        "default": 1
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the line.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "y_intercept",
        "type": "Nullable(Float)",
        "desc": "The y intercept of the line, in |data units|",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the line.",
        "default": "bevel"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the line.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the line.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the line.",
        "default": "black"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the line.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Spacer",
    "fullname": "bokeh.models.layouts.Spacer",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "A container for space used to fill an empty spot in a row or column.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Span",
    "fullname": "bokeh.models.annotations.Span",
    "bases": [
      "bokeh.models.annotations.Annotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": "Render a horizontal or vertical line span.\n\nSee :ref:`userguide_annotations_spans` for information on plotting spans.",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the span.",
        "default": 1
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the span.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "location",
        "type": "Nullable(Float)",
        "desc": "The location of the span, along ``dimension``.\n\nDatetime values are also accepted, but note that they are immediately\nconverted to milliseconds-since-epoch.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the span.",
        "default": "bevel"
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the contents are rendered to a canvas or as a\nHTML element overlaid on the canvas. The default mode is \"canvas\".\n\n.. note::\n    This property is deprecated and will be removed in bokeh 3.0.\n\n.. note::\n    The HTML labels won't be present in the output using the \"save\" tool.\n\n.. warning::\n    Not all visual styling properties are supported if the render_mode is\n    set to \"css\". The border_line_dash property isn't fully supported and\n    border_line_dash_offset isn't supported at all. Setting text_alpha will\n    modify the opacity of the entire background box and border in addition\n    to the text. Finally, clipping Label annotations inside of the plot\n    area isn't supported in \"css\" mode.",
        "default": "canvas"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the span.",
        "default": []
      },
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "The direction of the span can be specified by setting this property\nto \"height\" (``y`` direction) or \"width\" (``x`` direction).",
        "default": "width"
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the span.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the span.",
        "default": "black"
      },
      {
        "name": "location_units",
        "type": "Enum('screen', 'data')",
        "desc": "The unit type for the location attribute. Interpreted as \"data space\"\nunits by default.",
        "default": "data"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the span.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Spinner",
    "fullname": "bokeh.models.widgets.inputs.Spinner",
    "bases": [
      "bokeh.models.widgets.inputs.NumericInput"
    ],
    "desc": "Numeric Spinner input widget.\n\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "page_step_multiplier",
        "type": "Interval(Float, 0, inf)",
        "desc": "Defines the multiplication factor applied to step when the page up and page\ndown keys are pressed",
        "default": 10
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "wheel_wait",
        "type": "Either(Int, Float)",
        "desc": "Defines the debounce time in ms before updating `value_throttled` when the\nmouse wheel is used to change the input",
        "default": 100
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "value_throttled",
        "type": "Readonly(Either(Null, Float, Int))",
        "desc": "value reported at the end of interactions",
        "default": null
      },
      {
        "name": "value",
        "type": "Either(Null, Float, Int)",
        "desc": "Initial or entered value.\n\nChange events are triggered whenever <enter> is pressed.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "mode",
        "type": "Enum('int', 'float')",
        "desc": "Define the type of number which can be enter in the input\n\nexample\nmode int: 1, -1, 156\nmode float: 1, -1.2, 1.1e-25",
        "default": "float"
      },
      {
        "name": "low",
        "type": "Either(Null, Float, Int)",
        "desc": "Optional lowest allowable value.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "Placeholder for empty input field.",
        "default": ""
      },
      {
        "name": "high",
        "type": "Either(Null, Float, Int)",
        "desc": "Optional highest allowable value.",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "step",
        "type": "Interval(Float, 1e-16, inf)",
        "desc": "The step added or subtracted to the current value",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(Null, String, Instance(TickFormatter))",
        "desc": "    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Stack",
    "fullname": "bokeh.models.expressions.Stack",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": "An expression for generating arrays by summing different columns from\na ``ColumnDataSource``.\n\nThis expression is useful for implementing stacked bar charts at a low\nlevel.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "fields",
        "type": "Seq(String)",
        "desc": "A sequence of fields from a ``ColumnDataSource`` to sum (elementwise). For\nexample:\n\n.. code-block:: python\n\n    Stack(fields=['sales', 'marketing'])\n\nWill compute an array of values (in the browser) by adding the elements\nof the ``'sales'`` and ``'marketing'`` columns of a data source.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "StaticLayoutProvider",
    "fullname": "bokeh.models.graphs.StaticLayoutProvider",
    "bases": [
      "bokeh.models.graphs.LayoutProvider"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "graph_layout",
        "type": "Dict(Either(String, Int), Seq(Any))",
        "desc": "The coordinates of the graph nodes in cartesian space. The dictionary\nkeys correspond to a node index and the values are a two element sequence\ncontaining the x and y coordinates of the node.\n\n.. code-block:: python\n\n    {\n        0 : [0.5, 0.5],\n        1 : [1.0, 0.86],\n        2 : [0.86, 1],\n    }",
        "default": {}
      }
    ]
  },
  {
    "name": "Step",
    "fullname": "bokeh.models.glyphs.Step",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": "Render step lines.\n\nStep levels can be draw before, after, or centered on each point, according\nto the value of the ``mode`` property.\n\nThe x-coordinates are assumed to be (and must be) sorted in ascending order\nfor steps to be properly rendered.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Step.py\n    :source-position: below",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "The line width values for the steps.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for the steps.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the steps.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('before', 'after', 'center')",
        "desc": "Where the step \"level\" should be drawn in relation to the x and y\ncoordinates. The parameter can assume one of three values:\n\n* ``before``: (default) Draw step levels before each x-coordinate (no step before the first point)\n* ``after``:  Draw step levels after each x-coordinate (no step after the last point)\n* ``center``: Draw step levels centered on each x-coordinate",
        "default": "before"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the steps.",
        "default": "bevel"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for the steps.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the steps.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the steps.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the steps.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the steps.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "StepInterpolator",
    "fullname": "bokeh.models.transforms.StepInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "desc": "Compute a step-wise interpolation between the points provided through\nthe ``x``, ``y``, and ``data`` parameters.",
    "props": [
      {
        "name": "y",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "Dependant coordinate denoting the value of a point at a location.",
        "default": "<Undefined>"
      },
      {
        "name": "clip",
        "type": "Bool",
        "desc": "Determine if the interpolation should clip the result to include only values inside its predefined range.\nIf this is set to False, it will return the most value of the closest point.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "data",
        "type": "Nullable(Instance(ColumnarDataSource))",
        "desc": "Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "Independent coordinate denoting the location of a point.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('before', 'after', 'center')",
        "desc": "Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:\n\n* ``after`` (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform.\n* ``before``: Assume the y-value associated with the nearest x-value which is greater than the point to transform.\n* ``center``: Assume the y-value associated with the nearest x-value to the point to transform.",
        "default": "after"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "StringEditor",
    "fullname": "bokeh.models.widgets.tables.StringEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Basic string cell editor with auto-completion.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "completions",
        "type": "List(String)",
        "desc": "An optional list of completion strings.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "StringFormatter",
    "fullname": "bokeh.models.widgets.tables.StringFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "desc": "Basic string cell formatter.\n\n    ",
    "props": [
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "An optional text font style, e.g. bold, italic.",
        "default": "normal"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "An optional text align, i.e. left, center or right.",
        "default": "left"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "An optional text color.",
        "default": null
      }
    ]
  },
  {
    "name": "SumAggregator",
    "fullname": "bokeh.models.widgets.tables.SumAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": "Simple sum across multiple rows.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "Refers to the table column being aggregated",
        "default": ""
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "TMSTileSource",
    "fullname": "bokeh.models.tiles.TMSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": "Contains tile config info and provides urls for tiles based on a\ntemplated url e.g. ``http://your.tms.server.host/{Z}/{X}/{Y}.png``. The\ndefining feature of TMS is the tile-origin in located at the bottom-left.\n\n``TMSTileSource`` can also be helpful in implementing tile renderers for\ncustom tile sets, including non-spatial datasets.",
    "props": [
      {
        "name": "url",
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "default": ""
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute.",
        "default": 156543.03392804097
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "default": ""
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\nThese variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name).",
        "default": {}
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\nbounds of map.\n\n..note::\n    Axis coordinates are not wrapped. To toggle axis label visibility,\n    use ``plot.axis.visible = False``.",
        "default": true
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "An x-offset in plot coordinates",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "default": 256
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "default": 30
      },
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "A y-offset in plot coordinates",
        "default": 20037508.34
      }
    ]
  },
  {
    "name": "TableColumn",
    "fullname": "bokeh.models.widgets.tables.TableColumn",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Table column widget.\n\n    ",
    "props": [
      {
        "name": "default_sort",
        "type": "Enum('ascending', 'descending')",
        "desc": "The default sorting order. By default ``ascending`` order is used.",
        "default": "ascending"
      },
      {
        "name": "formatter",
        "type": "Instance(CellFormatter)",
        "desc": "The cell formatter for this column. By default, a simple string\nformatter is used.",
        "default": "{\"__type__\": \"bokeh.models.widgets.tables.StringFormatter\"}"
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "The title of this column. If not set, column's data field is\nused instead.",
        "default": null
      },
      {
        "name": "sortable",
        "type": "Bool",
        "desc": "Whether this column is sortable or not. Note that data table has\nto have sorting enabled to allow sorting in general.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "editor",
        "type": "Instance(CellEditor)",
        "desc": "The cell editor for this column. By default, a simple string editor\nis used.",
        "default": "{\"__type__\": \"bokeh.models.widgets.tables.StringEditor\"}"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether this column shold be displayed or not.",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "The name of the field mapping to a column in the data source.",
        "default": "<Undefined>"
      },
      {
        "name": "width",
        "type": "Int",
        "desc": "The width or maximum width (depending on data table's configuration)\nin pixels of this column.",
        "default": 300
      }
    ]
  },
  {
    "name": "TableWidget",
    "fullname": "bokeh.models.widgets.tables.TableWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": "Abstract base class for data table (data grid) widgets.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "A view into the data source to use when rendering table rows. A default view\nof the entire data source is created if a view is not passed in during\ninitialization.",
        "default": "<Undefined>"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "The source of data for the widget.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Tabs",
    "fullname": "bokeh.models.layouts.Tabs",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "A panel widget with navigation tabs.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_tab_panes.py\n    :source-position: below",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "tabs_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "The location of the buttons that activate tabs.",
        "default": "above"
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "active",
        "type": "Int",
        "desc": "The index of the active tab.",
        "default": 0
      },
      {
        "name": "tabs",
        "type": "List(Instance(Panel))",
        "desc": "The list of child panel widgets.",
        "default": []
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Tap",
    "fullname": "bokeh.models.tools.Tap",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": "A base class for tools that respond to tap/click events.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "TapTool",
    "fullname": "bokeh.models.tools.TapTool",
    "bases": [
      "bokeh.models.tools.Tap",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": "*toolbar icon*: |tap_icon|\n\nThe tap selection tool allows the user to select at single points by\nleft-clicking a mouse, or tapping with a finger.\n\nSee :ref:`userguide_styling_selected_unselected_glyphs` for information\non styling selected and unselected glyphs.\n\n.. |tap_icon| image:: /_images/icons/Tap.png\n    :height: 24px\n\n.. note::\n    Selections can be comprised of multiple regions, even those\n    made by different selection tools. Hold down the <<shift>> key\n    while making a selection to append the new selection to any\n    previous selection that might exist.",
    "props": [
      {
        "name": "behavior",
        "type": "Enum('select', 'inspect')",
        "desc": "This tool can be configured to either make selections or inspections\non associated data sources. The difference is that selection changes\npropagate across bokeh and other components (e.g. selection glyph)\nwill be notified. Inspections don't act like this, so it's useful to\nconfigure `callback` when setting `behavior='inspect'`.",
        "default": "select"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "An explicit list of renderers to hit test against. If unset, defaults to\nall renderers on a plot.",
        "default": "auto"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "Defines what should happen when a new selection is made. The default\nis to replace the existing selection. Other options are to append to\nthe selection, intersect with it or subtract from it.",
        "default": "replace"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "gesture",
        "type": "Enum('tap', 'doubletap')",
        "desc": "Specifies which kind of gesture will be used to trigger the tool,\neither a single or double tap.",
        "default": "tap"
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "A list of names to query for. If set, only renderers that have a matching\nvalue for their ``name`` attribute will be used.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": []
      },
      {
        "name": "callback",
        "type": "Nullable(Instance(Callback))",
        "desc": "A callback to execute *whenever a glyph is \"hit\"* by a mouse click\nor tap.\n\nThis is often useful with the  :class:`~bokeh.models.callbacks.OpenURL`\nmodel to open URLs based on a user clicking or tapping a specific glyph.\n\nHowever, it may also be a :class:`~bokeh.models.callbacks.CustomJS`\nwhich can execute arbitrary JavaScript code in response to clicking or\ntapping glyphs. The callback will be executed for each individual glyph\nthat is it hit by a click or tap, and will receive the ``TapTool`` model\nas  ``cb_obj``. The optional ``cb_data`` will have the data source as\nits ``.source`` attribute and the selection geometry as its\n``.geometries`` attribute.\n\nThe ``.geometries`` attribute has 5 members.\n``.type`` is the geometry type, which always a ``.point`` for a tap event.\n``.sx`` and ``.sy`` are the screen X and Y coordinates where the tap occurred.\n``.x`` and ``.y`` are the converted data coordinates for the item that has\nbeen selected. The ``.x`` and ``.y`` values are based on the axis assigned\nto that glyph.\n\n.. note::\n    This callback does *not* execute on every tap, only when a glyph is\n    \"hit\". If you would like to execute a callback on every mouse tap,\n    please see :ref:`userguide_interaction_jscallbacks_customjs_interactions`.",
        "default": null
      }
    ]
  },
  {
    "name": "TeX",
    "fullname": "bokeh.models.text.TeX",
    "bases": [
      "bokeh.models.text.MathText"
    ],
    "desc": "Render mathematical content using `LaTeX <https://www.latex-project.org/>`_\nnotation. See :ref:`userguide_styling_math` in the |user guide| for more\ninformation.\n\n.. note::\n    Bokeh uses `MathJax <https://www.mathjax.org>`_ to render text\n    containing mathematical notation.\n\n    MathJax only supports math-mode macros (no text-mode macros). You\n    can see more about differences between standard TeX/LaTeX and MathJax\n    here: https://docs.mathjax.org/en/latest/input/tex/differences.html",
    "props": [
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "The text value to render.",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "Whether the math text is inline display or not (for TeX input). Default is False.",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "macros",
        "type": "Dict(String, Either(String, Tuple(String, Int)))",
        "desc": "User defined TeX macros.\n\nThis is a mapping from control sequence names (without leading backslash) to\neither replacement strings or tuples of a replacement string and a number\nof arguments.\n\nExample:\n\n.. code-block:: python\n\n    TeX(text=r\"\\R \\rightarrow \\R^2\", macros={\"RR\": r\"{\\bf R}\"})",
        "default": {}
      }
    ]
  },
  {
    "name": "TeeHead",
    "fullname": "bokeh.models.arrow_heads.TeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": "Render a tee-style arrow head.\n\n    ",
    "props": [
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the arrow head outline.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the arrow head outline.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size, in pixels, of the arrow head.",
        "default": 25
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the arrow head outline.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the arrow head outline.",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the arrow head outline.",
        "default": "bevel"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Text",
    "fullname": "bokeh.models.glyphs.Text",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.TextGlyph"
    ],
    "desc": "Render text.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Text.py\n    :source-position: below",
    "props": [
      {
        "name": "text_font_style",
        "type": "FontStyleSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('normal', 'italic', 'bold', 'bold italic'))), Enum('normal', 'italic', 'bold', 'bold italic'))",
        "desc": "The text font style values for the text.",
        "default": "normal"
      },
      {
        "name": "y_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "Offset values to apply to the y-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "x_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "Offset values to apply to the x-coordinates.\n\nThis is useful, for instance, if it is desired to \"float\" text a fixed\ndistance in |screen units| from a given data position.",
        "default": 0
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates to locate the text anchors.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "text_line_height",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The text line height values for the text.",
        "default": 1.2
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to rotate the text, as measured from the horizontal.",
        "default": 0
      },
      {
        "name": "text_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The text alpha values for the text.",
        "default": 1.0
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)",
        "desc": "The text font size values for the text.",
        "default": {
          "value": "16px"
        }
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates to locate the text anchors.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "text_font",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "The text font values for the text.",
        "default": {
          "value": "helvetica"
        }
      },
      {
        "name": "text",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "The text values to render.",
        "default": "text"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "text_align",
        "type": "TextAlignSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('left', 'right', 'center'))), Enum('left', 'right', 'center'))",
        "desc": "The text align values for the text.",
        "default": "left"
      },
      {
        "name": "text_baseline",
        "type": "TextBaselineSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))",
        "desc": "The text baseline values for the text.",
        "default": "bottom"
      },
      {
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The text color values for the text.",
        "default": "#444444"
      }
    ]
  },
  {
    "name": "TextAnnotation",
    "fullname": "bokeh.models.annotations.TextAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": "Base class for text annotation models such as labels and titles.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the contents are rendered to a canvas or as a\nHTML element overlaid on the canvas. The default mode is \"canvas\".\n\n.. note::\n    This property is deprecated and will be removed in bokeh 3.0.\n\n.. note::\n    The HTML labels won't be present in the output using the \"save\" tool.\n\n.. warning::\n    Not all visual styling properties are supported if the render_mode is\n    set to \"css\". The border_line_dash property isn't fully supported and\n    border_line_dash_offset isn't supported at all. Setting text_alpha will\n    modify the opacity of the entire background box and border in addition\n    to the text. Finally, clipping Label annotations inside of the plot\n    area isn't supported in \"css\" mode.",
        "default": "canvas"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "TextAreaInput",
    "fullname": "bokeh.models.widgets.inputs.TextAreaInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextLikeInput"
    ],
    "desc": "Multi-line input widget.\n\n    ",
    "props": [
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "Max count of characters in field",
        "default": 500
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "rows",
        "type": "Int",
        "desc": "Specifies the height of the text area (in lines). Default: 2",
        "default": 2
      },
      {
        "name": "value",
        "type": "String",
        "desc": "Initial or entered text value.\n\nChange events are triggered whenever <enter> is pressed.",
        "default": ""
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "Placeholder for empty input field.",
        "default": ""
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "value_input",
        "type": "String",
        "desc": "Initial or current value.\n\nChange events are triggered whenever any update happens, i.e. on every\nkeypress.",
        "default": ""
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "cols",
        "type": "Int",
        "desc": "Specifies the width of the text area (in average character width). Default: 20",
        "default": 20
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "TextEditor",
    "fullname": "bokeh.models.widgets.tables.TextEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Multi-line string cell editor.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "TextGlyph",
    "fullname": "bokeh.models.glyph.TextGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": "Glyphs with text properties\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "TextInput",
    "fullname": "bokeh.models.widgets.inputs.TextInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextLikeInput"
    ],
    "desc": "Single-line input widget.\n\n    ",
    "props": [
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "Max count of characters in field",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "Initial or entered text value.\n\nChange events are triggered whenever <enter> is pressed.",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "Placeholder for empty input field.",
        "default": ""
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "value_input",
        "type": "String",
        "desc": "Initial or current value.\n\nChange events are triggered whenever any update happens, i.e. on every\nkeypress.",
        "default": ""
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "TextLikeInput",
    "fullname": "bokeh.models.widgets.inputs.TextLikeInput",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": "Base class for text-like input widgets.\n\n    ",
    "props": [
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "Max count of characters in field",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "Initial or entered text value.\n\nChange events are triggered whenever <enter> is pressed.",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "Placeholder for empty input field.",
        "default": ""
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "Widget's label.",
        "default": ""
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "value_input",
        "type": "String",
        "desc": "Initial or current value.\n\nChange events are triggered whenever any update happens, i.e. on every\nkeypress.",
        "default": ""
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Texture",
    "fullname": "bokeh.models.textures.Texture",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for ``Texture`` models that represent fill patterns.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "repetition",
        "type": "Enum('repeat', 'repeat_x', 'repeat_y', 'no_repeat')",
        "desc": "    ",
        "default": "repeat"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "TickFormatter",
    "fullname": "bokeh.models.formatters.TickFormatter",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A base class for all tick formatter types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Ticker",
    "fullname": "bokeh.models.tickers.Ticker",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A base class for all ticker types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "TileRenderer",
    "fullname": "bokeh.models.renderers.TileRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": "    ",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tile_source",
        "type": "Instance(TileSource)",
        "desc": "Local data source to use when rendering glyphs on the plot.",
        "default": "{\"__type__\": \"bokeh.models.tiles.WMTSTileSource\"}"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "render_parents",
        "type": "Bool",
        "desc": "Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "alpha",
        "type": "Float",
        "desc": "tile opacity 0.0 - 1.0",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "smoothing",
        "type": "Bool",
        "desc": "Enable image smoothing for the rendered tiles.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "image"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "TileSource",
    "fullname": "bokeh.models.tiles.TileSource",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A base class for all tile source types.\n\nIn general, tile sources are used as a required input for ``TileRenderer``.",
    "props": [
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "default": 0
      },
      {
        "name": "url",
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "default": ""
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "An x-offset in plot coordinates",
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "default": 256
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "default": 30
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "A y-offset in plot coordinates",
        "default": "<Undefined>"
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "default": ""
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\nThese variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name).",
        "default": {}
      }
    ]
  },
  {
    "name": "TimeEditor",
    "fullname": "bokeh.models.widgets.tables.TimeEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": "Spinner-based time cell editor.\n\n    ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "Title",
    "fullname": "bokeh.models.annotations.Title",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "desc": "Render a single title box as an annotation.\n\nSee :ref:`userguide_annotations_titles` for information on plotting titles.",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "Alignment of the text in its enclosing space, *along* the direction of the text.",
        "default": "left"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "text_line_height",
        "type": "Float",
        "desc": "How much additional space should be allocated for the title. The value is provided\nas a number, but should be treated as a percentage of font size. The default is\n100%, which means no additional space will be used.",
        "default": 1.0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "The line dash values for the text bounding box.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "standoff",
        "type": "Float",
        "desc": "    ",
        "default": 10
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the text bounding box.",
        "default": null
      },
      {
        "name": "text_alpha",
        "type": "Alpha",
        "desc": "An alpha value to use to fill text with.\n\nAcceptable values are floating-point numbers between 0 and 1 (0 being\ntransparent and 1 being opaque).",
        "default": 1.0
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "The line alpha values for the text bounding box.",
        "default": 1.0
      },
      {
        "name": "text_font",
        "type": "String",
        "desc": "Name of a font to use for rendering text, e.g., ``'times'``,\n``'helvetica'``.",
        "default": "helvetica"
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the text bounding box.",
        "default": 1.0
      },
      {
        "name": "vertical_align",
        "type": "Enum('top', 'middle', 'bottom')",
        "desc": "Alignment of the text in its enclosing space, *across* the direction of the text.",
        "default": "bottom"
      },
      {
        "name": "text_color",
        "type": "Color",
        "desc": "A color to use to fill text with.\n\nAcceptable values are:\n\n- any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n- RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n- CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n  ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n- a 3-tuple of integers (r, g, b) between 0 and 255\n- a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n  and a is between 0 and 1\n- a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern",
        "default": "#444444"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "The line width values for the text bounding box.",
        "default": 1
      },
      {
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "A style to use for rendering text.\n\nAcceptable values are:\n\n- ``'normal'`` normal text\n- ``'italic'`` *italic text*\n- ``'bold'`` **bold text**",
        "default": "bold"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "The line dash offset values for the text bounding box.",
        "default": 0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "The line join values for the text bounding box.",
        "default": "bevel"
      },
      {
        "name": "text_font_size",
        "type": "String",
        "desc": "",
        "default": "13px"
      },
      {
        "name": "text",
        "type": "String",
        "desc": "The text value to render.",
        "default": ""
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "The line cap values for the text bounding box.",
        "default": "butt"
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "The line color values for the text bounding box.",
        "default": null
      },
      {
        "name": "offset",
        "type": "Float",
        "desc": "Offset the text by a number of pixels (can be positive or negative). Shifts the text in\ndifferent directions based on the location of the title:\n\n    * above: shifts title right\n    * right: shifts title down\n    * below: shifts title right\n    * left: shifts title up",
        "default": 0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "Specifies whether the contents are rendered to a canvas or as a\nHTML element overlaid on the canvas. The default mode is \"canvas\".\n\n.. note::\n    This property is deprecated and will be removed in bokeh 3.0.\n\n.. note::\n    The HTML labels won't be present in the output using the \"save\" tool.\n\n.. warning::\n    Not all visual styling properties are supported if the render_mode is\n    set to \"css\". The border_line_dash property isn't fully supported and\n    border_line_dash_offset isn't supported at all. Setting text_alpha will\n    modify the opacity of the entire background box and border in addition\n    to the text. Finally, clipping Label annotations inside of the plot\n    area isn't supported in \"css\" mode.",
        "default": "canvas"
      }
    ]
  },
  {
    "name": "Toggle",
    "fullname": "bokeh.models.widgets.buttons.Toggle",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "desc": "A two-state toggle button.\n\n    ",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "A style for the button, signifying it's role.",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "The text label for the button to display.",
        "default": "Toggle"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "active",
        "type": "Bool",
        "desc": "The initial state of a button. Also used to trigger ``on_click`` event\nhandler.",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "An optional image appearing to the left of button's text.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "Tool",
    "fullname": "bokeh.models.tools.Tool",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A base class for all interactive tool types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "Toolbar",
    "fullname": "bokeh.models.tools.Toolbar",
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ],
    "desc": "Collect tools to display for a single plot.\n\n    ",
    "props": [
      {
        "name": "active_multi",
        "type": "Either(Null, Auto, Instance(GestureTool))",
        "desc": "Specify an active multi-gesture tool, for instance an edit tool or a range\ntool.\n\nNote that activating a multi-gesture tool will deactivate any other gesture\ntools as appropriate. For example, if a pan tool is set as the active drag,\nand this property is set to a ``BoxEditTool`` instance, the pan tool will\nbe deactivated (i.e. the multi-gesture tool will take precedence).",
        "default": "auto"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "logo",
        "type": "Nullable(Enum('normal', 'grey'))",
        "desc": "What version of the Bokeh logo to display on the toolbar. If\nset to None, no logo will be displayed.",
        "default": "normal"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "active_drag",
        "type": "Either(Null, Auto, Instance(Drag))",
        "desc": "Specify a drag tool to be active when the plot is displayed.",
        "default": "auto"
      },
      {
        "name": "tools",
        "type": "List(Instance(Tool))",
        "desc": "A list of tools to add to the plot.",
        "default": []
      },
      {
        "name": "active_tap",
        "type": "Either(Null, Auto, Instance(Tap))",
        "desc": "Specify a tap/click tool to be active when the plot is displayed.",
        "default": "auto"
      },
      {
        "name": "active_scroll",
        "type": "Either(Null, Auto, Instance(Scroll))",
        "desc": "Specify a scroll/pinch tool to be active when the plot is displayed.",
        "default": "auto"
      },
      {
        "name": "active_inspect",
        "type": "Either(Null, Auto, Instance(InspectTool), Seq(Instance(InspectTool)))",
        "desc": "Specify an inspection tool or sequence of inspection tools to be active when\nthe plot is displayed.",
        "default": "auto"
      },
      {
        "name": "autohide",
        "type": "Bool",
        "desc": "Whether the toolbar will be hidden by default. Default: False.\nIf True, hides toolbar when cursor is not in canvas.",
        "default": false
      }
    ]
  },
  {
    "name": "ToolbarBase",
    "fullname": "bokeh.models.tools.ToolbarBase",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A base class for different toolbars.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "logo",
        "type": "Nullable(Enum('normal', 'grey'))",
        "desc": "What version of the Bokeh logo to display on the toolbar. If\nset to None, no logo will be displayed.",
        "default": "normal"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "tools",
        "type": "List(Instance(Tool))",
        "desc": "A list of tools to add to the plot.",
        "default": []
      },
      {
        "name": "autohide",
        "type": "Bool",
        "desc": "Whether the toolbar will be hidden by default. Default: False.\nIf True, hides toolbar when cursor is not in canvas.",
        "default": false
      }
    ]
  },
  {
    "name": "ToolbarBox",
    "fullname": "bokeh.models.tools.ToolbarBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "A layoutable toolbar that can accept the tools of multiple plots, and\ncan merge the tools into a single button for convenience.",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "toolbar_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "",
        "default": "right"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "toolbar",
        "type": "Instance(ToolbarBase)",
        "desc": "A toolbar associated with a plot which holds all its tools.",
        "default": "<Undefined>"
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "ToolbarPanel",
    "fullname": "bokeh.models.annotations.ToolbarPanel",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": "",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "A toolbar to display.",
        "default": "<Undefined>"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "annotation"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      }
    ]
  },
  {
    "name": "Tooltip",
    "fullname": "bokeh.models.annotations.Tooltip",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": "Render a tooltip.\n\n.. note::\n    This model is currently managed by BokehJS and is not useful\n    directly from python.",
    "props": [
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "overlay"
      },
      {
        "name": "show_arrow",
        "type": "Bool",
        "desc": "Whether tooltip's arrow should be shown.",
        "default": true
      },
      {
        "name": "attachment",
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')",
        "desc": "Whether the tooltip should be displayed to the left or right of the cursor\nposition or above or below it, or if it should be automatically placed\nin the horizontal or vertical dimension.",
        "default": "horizontal"
      },
      {
        "name": "inner_only",
        "type": "Bool",
        "desc": "Whether to display outside a central plot frame area.\n\n.. note:\n    This property is deprecated and will be removed in bokeh 3.0.",
        "default": true
      }
    ]
  },
  {
    "name": "Transform",
    "fullname": "bokeh.models.transforms.Transform",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Base class for ``Transform`` models that represent a computation\nto be carried out on the client-side.\n\nJavaScript implementations should implement the following methods:\n\n.. code-block\n\n    compute(x: number): number {\n        # compute and return the transform of a single value\n    }\n\n    v_compute(xs: Arrayable<number>): Arrayable<number> {\n        # compute and return the transform of an array of values\n    }\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "UndoTool",
    "fullname": "bokeh.models.tools.UndoTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "*toolbar icon*: |undo_icon|\n\nUndo tool allows to restore previous state of the plot.\n\n.. |undo_icon| image:: /_images/icons/Undo.png\n    :height: 24px",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  },
  {
    "name": "UnionRenderers",
    "fullname": "bokeh.models.selections.UnionRenderers",
    "bases": [
      "bokeh.models.selections.SelectionPolicy"
    ],
    "desc": "When a data source is shared between multiple renderers, selecting a point on\nfrom any renderer will cause that row in the data source to be selected. The\nselection is made from the union of hit test results from all renderers.",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "VArea",
    "fullname": "bokeh.models.glyphs.VArea",
    "bases": [
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render a vertically directed area between two equal length sequences\nof y-coordinates with the same x-coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/VArea.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the vertical directed area.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the vertical directed area.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the vertical directed area.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates for the points of the area.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "The fill alpha values for the vertical directed area.",
        "default": 1.0
      },
      {
        "name": "y2",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for the points of the other side of the area.",
        "default": {
          "field": "y2"
        }
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates for the points of one side of the area.",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the vertical directed area.",
        "default": null
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the vertical directed area.",
        "default": "black"
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the vertical directed area.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "The fill color values for the vertical directed area.",
        "default": "gray"
      }
    ]
  },
  {
    "name": "VBar",
    "fullname": "bokeh.models.glyphs.VBar",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render vertical bars, given a center coordinate, width and (top, bottom) coordinates.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/VBar.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the vertical bars.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the vertical bars.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the vertical bars.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the vertical bars.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the centers of the vertical bars.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the vertical bars.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the vertical bars.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the vertical bars.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the vertical bars.",
        "default": null
      },
      {
        "name": "width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The widths of the vertical bars.",
        "default": 1
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the vertical bars.",
        "default": []
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the vertical bars.",
        "default": "black"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the vertical bars.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the vertical bars.",
        "default": 1.0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "top",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the top edges.",
        "default": {
          "field": "top"
        }
      },
      {
        "name": "bottom",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the bottom edges.",
        "default": 0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the vertical bars.",
        "default": "gray"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the vertical bars.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the vertical bars.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "VeeHead",
    "fullname": "bokeh.models.arrow_heads.VeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": "Render a vee-style arrow head.\n\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the arrow head outline.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The size, in pixels, of the arrow head.",
        "default": 25
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the arrow head outline.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the arrow head interior.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the arrow head outline.",
        "default": "bevel"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the arrow head outline.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the arrow head outline.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the arrow head outline.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the arrow head interior.",
        "default": "black"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the arrow head outline.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "WMTSTileSource",
    "fullname": "bokeh.models.tiles.WMTSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": "Behaves much like ``TMSTileSource`` but has its tile-origin in the\ntop-left.\n\nThis is the most common used tile source for web mapping applications.\nSuch companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\nservice which use the WMTS specification e.g. ``http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png``.",
    "props": [
      {
        "name": "url",
        "type": "String",
        "desc": "Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png",
        "default": ""
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "Resolution (plot_units / pixels) of minimum zoom level of tileset\nprojection. None to auto-compute.",
        "default": 156543.03392804097
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "Data provider attribution content. This can include HTML content.",
        "default": ""
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "A dictionary that maps url variable template keys to values.\n\nThese variables are useful for parts of tile urls which do not change from\ntile to tile (e.g. server host name, or layer name).",
        "default": {}
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "Enables continuous horizontal panning by wrapping the x-axis based on\nbounds of map.\n\n..note::\n    Axis coordinates are not wrapped. To toggle axis label visibility,\n    use ``plot.axis.visible = False``.",
        "default": true
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "A minimum zoom level for the tile layer. This is the most zoomed-out level.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "An x-offset in plot coordinates",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "Tile size in pixels (e.g. 256)",
        "default": 256
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "A maximum zoom level for the tile layer. This is the most zoomed-in level.",
        "default": 30
      },
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "A y-offset in plot coordinates",
        "default": 20037508.34
      }
    ]
  },
  {
    "name": "WebDataSource",
    "fullname": "bokeh.models.sources.WebDataSource",
    "bases": [
      "bokeh.models.sources.ColumnDataSource"
    ],
    "desc": "Base class for web column data sources that can update from data\nURLs.\n\n.. note::\n    This base class is typically not useful to instantiate on its own.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "max_size",
        "type": "Nullable(Int)",
        "desc": "Maximum size of the data columns. If a new fetch would result in columns\nlarger than ``max_size``, then earlier data is dropped to make room.",
        "default": null
      },
      {
        "name": "data_url",
        "type": "NonNullable(String)",
        "desc": "A URL to to fetch data from.",
        "default": "<Undefined>"
      },
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "Mapping of column names to sequences of data. The columns can be, e.g,\nPython lists or tuples, NumPy arrays, etc.\n\nThe .data attribute can also be set from Pandas DataFrames or GroupBy\nobjects. In these cases, the behaviour is identical to passing the objects\nto the ``ColumnDataSource`` initializer.",
        "default": {}
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\nThis is a read-only property. You may only change the attributes of this object\nto change the selection (e.g., ``selected.indices``).",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append')",
        "desc": "Whether to append new data to existing data (up to ``max_size``), or to\nreplace existing data entirely.",
        "default": "replace"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "An instance of a ``SelectionPolicy`` that determines how selections are set.",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "adapter",
        "type": "Nullable(Instance(CustomJS))",
        "desc": "A JavaScript callback to adapt raw JSON responses to Bokeh ``ColumnDataSource``\nformat.\n\nIf provided, this callback is executes immediately after the JSON data is\nreceived, but before appending or replacing data in the data source. The\n``CustomJS`` callback will receive the ``AjaxDataSource`` as ``cb_obj`` and\nwill receive the raw JSON response as ``cb_data.response``. The callback\ncode should return a ``data`` object suitable for a Bokeh ``ColumnDataSource``\n(i.e.  a mapping of string column names to arrays of data).",
        "default": null
      }
    ]
  },
  {
    "name": "Wedge",
    "fullname": "bokeh.models.glyphs.Wedge",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": "Render wedges.\n\n\n\nExample\n-------\n\n.. bokeh-plot:: ../../examples/reference/models/Wedge.py\n    :source-position: below",
    "props": [
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch alpha values for the wedges.",
        "default": 1.0
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "The hatch extra values for the wedges.",
        "default": {}
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch scale values for the wedges.",
        "default": 12.0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the wedges.",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The x-coordinates of the points of the wedges.",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the wedges.",
        "default": "butt"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The fill alpha values for the wedges.",
        "default": 1.0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the wedges.",
        "default": "bevel"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "The hatch pattern values for the wedges.",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "Which direction to stroke between the start and end angles.",
        "default": "anticlock"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The y-coordinates of the points of the wedges.",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "Radii of the wedges.",
        "default": {
          "field": "radius"
        }
      },
      {
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the wedges.",
        "default": []
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the wedges.",
        "default": 0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The hatch weight values for the wedges.",
        "default": 1.0
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The hatch color values for the wedges.",
        "default": "black"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to start the wedges, as measured from the horizontal.",
        "default": {
          "field": "start_angle"
        }
      },
      {
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "The angles to end the wedges, as measured from the horizontal.",
        "default": {
          "field": "end_angle"
        }
      },
      {
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "Units to use for the associated property: deg, rad, grad or turn",
        "default": "rad"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the wedges.",
        "default": "black"
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The fill color values for the wedges.",
        "default": "gray"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the wedges.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "WheelPanTool",
    "fullname": "bokeh.models.tools.WheelPanTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "desc": "*toolbar icon*: |wheel_pan_icon|\n\nThe wheel pan tool allows the user to pan the plot along the configured\ndimension using the scroll wheel.\n\n.. |wheel_pan_icon| image:: /_images/icons/WheelPan.png\n    :height: 24px",
    "props": [
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "Which dimension the wheel pan tool is constrained to act in. By default the\nwheel pan tool will pan the plot along the x-axis.",
        "default": "width"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "WheelZoomTool",
    "fullname": "bokeh.models.tools.WheelZoomTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "desc": "*toolbar icon*: |wheel_zoom_icon|\n\nThe wheel zoom tool will zoom the plot in and out, centered on the\ncurrent mouse location.\n\nThe wheel zoom tool also activates the border regions of a Plot for\n\"single axis\" zooming. For instance, zooming in the vertical border or\naxis will effect a zoom in the vertical direction only, with the\nhorizontal dimension kept fixed.\n\n.. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n    :height: 24px",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "zoom_on_axis",
        "type": "Bool",
        "desc": "Whether scrolling on an axis (outside the central plot area) should zoom\nthat dimension.",
        "default": true
      },
      {
        "name": "speed",
        "type": "Float",
        "desc": "Speed at which the wheel zooms. Default is 1/600. Optimal range is between\n0.001 and 0.09. High values will be clipped. Speed may very between browsers.",
        "default": 0.0016666666666666668
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the wheel zoom tool is constrained to act in. By default\nthe wheel zoom tool will zoom in any dimension, but can be configured to\nonly zoom horizontally across the width of the plot, or vertically across\nthe height of the plot.",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "maintain_focus",
        "type": "Bool",
        "desc": "If True, then hitting a range bound in any one dimension will prevent all\nfurther zooming all dimensions. If False, zooming can continue\nindependently in any dimension that has not yet reached its bounds, even if\nthat causes overall focus or aspect ratio to change.",
        "default": true
      }
    ]
  },
  {
    "name": "Whisker",
    "fullname": "bokeh.models.annotations.Whisker",
    "bases": [
      "bokeh.models.annotations.DataAnnotation"
    ],
    "desc": "Render a whisker along a dimension.\n\nSee :ref:`userguide_annotations_whiskers` for information on plotting whiskers.",
    "props": [
      {
        "name": "base",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "The orthogonal coordinates of the upper and lower values.",
        "default": {
          "field": "base"
        }
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "A particular (named) x-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default x-range.",
        "default": "default"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": "",
        "default": null
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line width values for the whisker body.",
        "default": 1
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "lower_head",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "Instance of ``ArrowHead``.",
        "default": "{\"__type__\": \"bokeh.models.arrow_heads.TeeHead\", \"size\": {\"value\": 10}}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "The line cap values for the whisker body.",
        "default": "butt"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Is the renderer visible.",
        "default": true
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "The line join values for the whisker body.",
        "default": "bevel"
      },
      {
        "name": "lower_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "The direction of the whisker can be specified by setting this property\nto \"height\" (``y`` direction) or \"width\" (``x`` direction).",
        "default": "height"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "The line dash values for the whisker body.",
        "default": []
      },
      {
        "name": "base_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "The line dash offset values for the whisker body.",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "A particular (named) y-range to use for computing screen locations when\nrendering glyphs on the plot. If unset, use the default y-range.",
        "default": "default"
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "Local data source to use when rendering annotations on the plot.",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "Specifies the level in which to paint this renderer.",
        "default": "underlay"
      },
      {
        "name": "upper_units",
        "type": "Enum('screen', 'data')",
        "desc": "Units to use for the associated property: screen or data",
        "default": "data"
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "The line color values for the whisker body.",
        "default": "black"
      },
      {
        "name": "upper_head",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "Instance of ``ArrowHead``.",
        "default": "{\"__type__\": \"bokeh.models.arrow_heads.TeeHead\", \"size\": {\"value\": 10}}"
      },
      {
        "name": "upper",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "The coordinates of the upper end of the whiskers.",
        "default": {
          "field": "upper"
        }
      },
      {
        "name": "lower",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "The coordinates of the lower end of the whiskers.",
        "default": {
          "field": "lower"
        }
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "The line alpha values for the whisker body.",
        "default": 1.0
      }
    ]
  },
  {
    "name": "Widget",
    "fullname": "bokeh.models.widgets.widget.Widget",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": "A base class for all interactive widget types.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "The default size (width or height) in the dominating dimension.\n\nThe dominating dimension is determined by widget orientation.",
        "default": 300
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      }
    ]
  },
  {
    "name": "WidgetBox",
    "fullname": "bokeh.models.layouts.WidgetBox",
    "bases": [
      "bokeh.models.layouts.Column"
    ],
    "desc": "Create a column of bokeh widgets with predefined styling.\n\nWidgetBox is DEPRECATED and will beremoved in Bokeh 3.0, use 'Column' instead.",
    "props": [
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "rows",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), height=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "Describes how the component should maintain its rows' heights.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion.",
        "default": "auto"
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "The alignment point within the parent container.\n\nThis property is useful only if this component is a child element of a layout\n(e.g. a grid). Self alignment can be overridden by the parent container (e.g.\ngrid track align).",
        "default": "start"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its width.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n    available horizontal space.\n\n``\"fit\"``\n    Use component's preferred width (if set) and allow it to fit into the available\n    horizontal space within the minimum and maximum width bounds (if set). Component's\n    width neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little horizontal space as possible, not less than the minimum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much horizontal space as possible, not more than the maximum width (if set).\n    The starting point is the preferred width (if set). The width of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "A list of CSS class names to add to this DOM element. Note: the class names are\nsimply added as-is, no other guarantees are provided.\n\nIt is also permissible to assign from tuples, however these are adapted -- the\nproperty will always contain a list.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "The gap between children (in pixels).",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal width of the component (in pixels) if width is adjustable.",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "Whether the component will be visible and a part of a layout.",
        "default": true
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "Whether the widget will be disabled when rendered.\n\nIf ``True``, the widget will be greyed-out and not responsive to UI events.",
        "default": false
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "Background color of the component.",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "Describes the proportional relationship between component's width and height.\n\nThis works if any of component's dimensions are flexible in size. If set to\na number, ``width / height = aspect_ratio`` relationship will be maintained.\nOtherwise, if set to ``\"auto\"``, component's preferred width and height will\nbe used to determine the aspect (if not set, no aspect will be preserved).",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The width of the component (in pixels).\n\nThis can be either fixed or preferred width, depending on width sizing policy.",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Minimal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "Describes how the component should maintain its height.\n\n``\"auto\"``\n    Use component's preferred sizing policy.\n\n``\"fixed\"``\n    Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n    available vertical space.\n\n``\"fit\"``\n    Use component's preferred height (if set) and allow to fit into the available\n    vertical space within the minimum and maximum height bounds (if set). Component's\n    height neither will be aggressively minimized nor maximized.\n\n``\"min\"``\n    Use as little vertical space as possible, not less than the minimum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n``\"max\"``\n    Use as much vertical space as possible, not more than the maximum height (if set).\n    The starting point is the preferred height (if set). The height of the component may\n    shrink or grow depending on the parent layout, aspect management and other factors.\n\n.. note::\n    This is an experimental feature and may change in future. Use it at your\n    own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n    strictly necessary.",
        "default": "auto"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "Allows to create additional space around the component.\nThe values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\nsimilar to CSS standards.\nNegative margin values may be used to shrink the space from any direction.",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "Maximal height of the component (in pixels) if height is adjustable.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "The height of the component (in pixels).\n\nThis can be either fixed or preferred height, depending on height sizing policy.",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "How the component should size itself.\n\nThis is a high-level setting for maintaining width and height of the component. To\ngain more fine grained control over sizing, use ``width_policy``, ``height_policy``\nand ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\nPossible scenarios:\n\n``\"fixed\"``\n    Component is not responsive. It will retain its original width and height\n    regardless of any subsequent browser window resize events.\n\n``\"stretch_width\"``\n    Component will responsively resize to stretch to the available width, without\n    maintaining any aspect ratio. The height of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_height\"``\n    Component will responsively resize to stretch to the available height, without\n    maintaining any aspect ratio. The width of the component depends on the type\n    of the component and may be fixed or fit to component's contents.\n\n``\"stretch_both\"``\n    Component is completely responsive, independently in width and height, and\n    will occupy all the available horizontal and vertical space, even if this\n    changes the aspect ratio of the component.\n\n``\"scale_width\"``\n    Component will responsively resize to stretch to the available width, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_height\"``\n    Component will responsively resize to stretch to the available height, while\n    maintaining the original or provided aspect ratio.\n\n``\"scale_both\"``\n    Component will responsively resize to both the available width and height, while\n    maintaining the original or provided aspect ratio.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "The list of children, which can be other components including plots, rows, columns, and widgets.",
        "default": []
      }
    ]
  },
  {
    "name": "XComponent",
    "fullname": "bokeh.models.expressions.XComponent",
    "bases": [
      "bokeh.models.expressions.XYComponent"
    ],
    "desc": "X-component of a coordinate system transform to cartesian coordinates. ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "transform",
        "type": "Instance(CoordinateTransform)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "XYComponent",
    "fullname": "bokeh.models.expressions.XYComponent",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": "Base class for bi-variate expressions. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "transform",
        "type": "Instance(CoordinateTransform)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "XYGlyph",
    "fullname": "bokeh.models.glyph.XYGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": "Base class of glyphs with `x` and `y` coordinate attributes.\n\n\n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "YComponent",
    "fullname": "bokeh.models.expressions.YComponent",
    "bases": [
      "bokeh.models.expressions.XYComponent"
    ],
    "desc": "Y-component of a coordinate system transform to cartesian coordinates. ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "transform",
        "type": "Instance(CoordinateTransform)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "YearsTicker",
    "fullname": "bokeh.models.tickers.YearsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "desc": "Generate ticks spaced apart even numbers of years.\n\n    ",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "The number of minor tick positions to generate between\nadjacent major tick values.",
        "default": 5
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "The interval between adjacent ticks.",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "A desired target number of major tick positions to generate across\nthe plot range.\n\n.. note:\n    This value is a suggestion, and ticker subclasses may ignore\n    it entirely, or use it only as an ideal goal to approach as well\n    as can be, in the context of a specific ticking strategy.",
        "default": 6
      }
    ]
  },
  {
    "name": "ZoomInTool",
    "fullname": "bokeh.models.tools.ZoomInTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "*toolbar icon*: |zoom_in_icon|\n\nThe zoom-in tool allows users to click a button to zoom in\nby a fixed amount.\n\n.. |zoom_in_icon| image:: /_images/icons/ZoomIn.png\n    :height: 24px",
    "props": [
      {
        "name": "factor",
        "type": "Percent",
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "default": 0.1
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the zoom-in tool is constrained to act in. By default the\nzoom-in zoom tool will zoom in any dimension, but can be configured to only\nzoom horizontally across the width of the plot, or vertically across the\nheight of the plot.",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      }
    ]
  },
  {
    "name": "ZoomOutTool",
    "fullname": "bokeh.models.tools.ZoomOutTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": "*toolbar icon*: |zoom_out_icon|\n\nThe zoom-out tool allows users to click a button to zoom out\nby a fixed amount.\n\n.. |zoom_out_icon| image:: /_images/icons/ZoomOut.png\n    :height: 24px",
    "props": [
      {
        "name": "factor",
        "type": "Percent",
        "desc": "Percentage to zoom for each click of the zoom-in tool.",
        "default": 0.1
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "A string describing the purpose of this tool. If not defined, an auto-generated\ndescription will be used. This description will be typically presented in the\nuser interface as a tooltip.",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "Which dimensions the zoom-out tool is constrained to act in. By default the\nzoom-out tool will zoom in any dimension, but can be configured to only\nzoom horizontally across the width of the plot, or vertically across the\nheight of the plot.",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "maintain_focus",
        "type": "Bool",
        "desc": "If True, then hitting a range bound in any one dimension will prevent all\nfurther zooming all dimensions. If False, zooming can continue\nindependently in any dimension that has not yet reached its bounds, even if\nthat causes overall focus or aspect ratio to change.",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.css.Styles",
    "fullname": "bokeh.models.css.Styles",
    "bases": [
      "bokeh.model.model.Model",
      "bokeh.model.util.Qualified"
    ],
    "desc": "Allows to configure style attribute of DOM elements. ",
    "props": [
      {
        "name": "align_content",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_stretch",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transform_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "fill_rule",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_emphasis_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "fill",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "mask_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "outline_offset",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "ruby_align",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_gap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_top_right_radius",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_block_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_left",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "shape_rendering",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_end_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "all",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_start_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "counter_reset",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transform_box",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_start_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "row_gap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "dominant_baseline",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin_inline_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_template_rows",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "top",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "list_style_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_top_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_start_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "outline_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "clip",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_left_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_column_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "css_text",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_justify",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "counter_increment",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_overflow",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "min_inline_size",
        "type": "Nullable(String)",
        "desc": "The `min-inline-size`_ CSS property defines the horizontal or vertical\nminimal size of an element's block, depending on its writing mode. It\ncorresponds to either the ``min-width`` or the ``min-height`` property,\ndepending on the value of ``writing-mode``.\n\n.. _min-inline-size: https://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-size",
        "default": null
      },
      {
        "name": "text_transform",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flex",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "tab_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_top_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "cursor",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "height",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overscroll_behavior_x",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "mask",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "justify_content",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transition_property",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "clip_rule",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_spacing",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_origin",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_iteration_count",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flex_flow",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_count",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "font_feature_settings",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke_linejoin",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_direction",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_decoration_line",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "left",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "user_select",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "quotes",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "page_break_before",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_image",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "gap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flood_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_image_outset",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "page_break_inside",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transform_origin",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "word_wrap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "image_rendering",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "white_space",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_bottom",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flex_shrink",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "outline_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_emphasis_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_end_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "image_orientation",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_end_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transition",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_combine_upright",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transition_timing_function",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "pointer_events",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "table_layout",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "caption_side",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "list_style_type",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_play_state",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_right_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "object_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_variant_caps",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "vertical_align",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_bottom_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "marker_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "bottom",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_position_x",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flex_grow",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_family",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "visibility",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_variant_east_asian",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_variant_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_inline_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_image",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_decoration",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_row_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_left",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_bottom_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "list_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "outline",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "place_content",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_left_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_rule_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_orientation",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_template",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_variant_numeric",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "grid_row",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "empty_cells",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "will_change",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_collapse",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "max_inline_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "box_sizing",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_start_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_image_repeat",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "page_break_after",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "place_items",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "min_block_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "css_float",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "block_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_decoration_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_row_gap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_start_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "lighting_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "filter",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flex_basis",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_column_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "justify_items",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_indent",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke_dasharray",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_auto_rows",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_emphasis",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke_miterlimit",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "touch_action",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "z_index",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "mask_type",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_align",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "max_block_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "perspective",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overscroll_behavior",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke_dashoffset",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overscroll_behavior_y",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_end_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "unicode_bidi",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "box_shadow",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "color_interpolation",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "float",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overscroll_behavior_block",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "content",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_column_gap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "align_self",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke_linecap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_bottom_right_radius",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_shadow",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_image_source",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_clip",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin_inline_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_decoration_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "color_interpolation_filters",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_inline_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stroke_opacity",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "fill_opacity",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flex_wrap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_weight",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin_left",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "opacity",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "backface_visibility",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transform",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_size_adjust",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "marker_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "writing_mode",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin_bottom",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_synthesis",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "word_spacing",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_row_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_gap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "word_break",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "clip_path",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_kerning",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "caret_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_radius",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_top",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overscroll_behavior_inline",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overflow_wrap",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_right",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "justify_self",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_duration",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_rendering",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_auto_columns",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "widows",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overflow_anchor",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "columns",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_start_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "mask_repeat",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_auto_flow",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_column",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_end_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transition_delay",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_timing_function",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_image_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_template_areas",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_rule",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "direction",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "display",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "order",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "alignment_baseline",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "glyph_orientation_vertical",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_attachment",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_right_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_emphasis_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "scale",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "clear",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin_block_end",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "rotate",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin_right",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stop_opacity",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "overflow_x",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "translate",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_top_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "place_self",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "scroll_behavior",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "ruby_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "transition_duration",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_rule_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "mask_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_bottom_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_fill",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overflow_y",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_image_slice",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "paint_order",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_underline_position",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "break_after",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "hyphens",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_name",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_repeat",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "marker_mid",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_right",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_block_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "break_inside",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "line_break",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_template_columns",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "outline_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "margin_block_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "perspective_origin",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "mask_composite",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_delay",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "break_before",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_bottom",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_align_last",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "resize",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_block_start",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_inline_end_style",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "orphans",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "padding_top",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "text_anchor",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_variant_ligatures",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "align_items",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "grid_area",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "overflow",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "background_position_y",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "inline_size",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flex_direction",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "right",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "animation_fill_mode",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "letter_spacing",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_bottom_left_radius",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "list_style_image",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_top_left_radius",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_span",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "column_rule_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "mask_image",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "baseline_shift",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "flood_opacity",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "font_variant",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "margin_top",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_right_width",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "object_fit",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "border_left_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "marker",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "stop_color",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      },
      {
        "name": "line_height",
        "type": "Nullable(String)",
        "desc": "",
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Action",
    "fullname": "bokeh.models.dom.Action",
    "bases": [
      "bokeh.model.model.Model",
      "bokeh.model.util.Qualified"
    ],
    "desc": "",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "bokeh.models.dom.ColorRef",
    "fullname": "bokeh.models.dom.ColorRef",
    "bases": [
      "bokeh.models.dom.ValueRef"
    ],
    "desc": "",
    "props": [
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "hex",
        "type": "Bool",
        "desc": "",
        "default": true
      },
      {
        "name": "swatch",
        "type": "Bool",
        "desc": "",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.dom.DOMElement",
    "fullname": "bokeh.models.dom.DOMElement",
    "bases": [
      "bokeh.models.dom.DOMNode"
    ],
    "desc": "Base class for DOM elements. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": "",
        "default": []
      }
    ]
  },
  {
    "name": "bokeh.models.dom.DOMNode",
    "fullname": "bokeh.models.dom.DOMNode",
    "bases": [
      "bokeh.model.model.Model",
      "bokeh.model.util.Qualified"
    ],
    "desc": "Base class for DOM nodes. \n.. note::\n    This is an abstract base class used to help organize the hierarchy of Bokeh\n    model types. **It is not useful to instantiate on its own.**",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Div",
    "fullname": "bokeh.models.dom.Div",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": "",
    "props": [
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": "",
        "default": []
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Index",
    "fullname": "bokeh.models.dom.Index",
    "bases": [
      "bokeh.models.dom.Placeholder"
    ],
    "desc": "",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Placeholder",
    "fullname": "bokeh.models.dom.Placeholder",
    "bases": [
      "bokeh.models.dom.DOMNode"
    ],
    "desc": "",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Span",
    "fullname": "bokeh.models.dom.Span",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": "",
    "props": [
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": "",
        "default": []
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Table",
    "fullname": "bokeh.models.dom.Table",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": "",
    "props": [
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": "",
        "default": []
      }
    ]
  },
  {
    "name": "bokeh.models.dom.TableRow",
    "fullname": "bokeh.models.dom.TableRow",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": "",
    "props": [
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": "",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": "",
        "default": []
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Template",
    "fullname": "bokeh.models.dom.Template",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": "",
    "props": [
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": "",
        "default": null
      },
      {
        "name": "actions",
        "type": "List(Instance(Action))",
        "desc": "",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": "",
        "default": []
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Text",
    "fullname": "bokeh.models.dom.Text",
    "bases": [
      "bokeh.models.dom.DOMNode"
    ],
    "desc": "DOM text node. ",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "content",
        "type": "String",
        "desc": "",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "bokeh.models.dom.ToggleGroup",
    "fullname": "bokeh.models.dom.ToggleGroup",
    "bases": [
      "bokeh.models.dom.Action"
    ],
    "desc": "",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "groups",
        "type": "List(Instance(RendererGroup))",
        "desc": "",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      }
    ]
  },
  {
    "name": "bokeh.models.dom.ValueRef",
    "fullname": "bokeh.models.dom.ValueRef",
    "bases": [
      "bokeh.models.dom.Placeholder"
    ],
    "desc": "",
    "props": [
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "List of events that are subscribed to by Python callbacks. This is\nthe set of events that will be communicated from BokehJS back to\nPython for this model.",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "An arbitrary, user-supplied name for this model.\n\nThis name can be useful when querying the document to retrieve specific\nBokeh models.\n\n.. code:: python\n\n    >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n    >>> plot.select(name=\"temp\")\n    [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any names\n    that are provided, nor is the name used directly by Bokeh for any\n    reason.",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of event names to lists of ``CustomJS`` callbacks.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_event`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('tap event occurred')\")\n    plot.js_on_event('tap', callback)",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "Indicates whether this model should be synchronized back to a Bokeh server when\nupdated in a web browser. Setting to ``False`` may be useful to reduce network\ntraffic when dealing with frequently updated objects whose updated values we\ndon't need.\n\n.. note::\n    Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n    on this object from triggering. However, any JS-side callbacks will still\n    work.",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\nBokehJS side when the document is created.\n\nTypically, rather then modifying this property directly, callbacks should be\nadded using the ``Model.js_on_change`` method:\n\n.. code:: python\n\n    callback = CustomJS(code=\"console.log('stuff')\")\n    plot.x_range.js_on_change('start', callback)",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "An optional list of arbitrary, user-supplied values to attach to this\nmodel.\n\nThis data can be useful when querying the document to retrieve specific\nBokeh models:\n\n.. code:: python\n\n    >>> r = plot.circle([1,2,3], [4,5,6])\n    >>> r.tags = [\"foo\", 10]\n    >>> plot.select(tags=['foo', 10])\n    [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\nOr simply a convenient way to attach any necessary metadata to a model\nthat can be accessed by ``CustomJS`` callbacks, etc.\n\n.. note::\n    No uniqueness guarantees or other conditions are enforced on any tags\n    that are provided, nor are the tags used directly by Bokeh for any\n    reason.",
        "default": []
      }
    ]
  }
]