[
  {
    "name": "AbstractButton",
    "fullname": "bokeh.models.widgets.buttons.AbstractButton",
    "bases": [
      "bokeh.models.widgets.widget.Widget",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "desc": " A base class that defines common properties for all button types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "\n    A style for the button, signifying it's role.\n    ",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "\n    The text label for the button to display.\n    ",
        "default": "Button"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "\n    An optional image appearing to the left of button's text.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "AbstractGroup",
    "fullname": "bokeh.models.widgets.groups.AbstractGroup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": " Abstract base class for all kinds of groups.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "\n    List of text labels contained in this group.\n    ",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "AbstractIcon",
    "fullname": "bokeh.models.widgets.icons.AbstractIcon",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " An abstract base class for icon widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "AbstractSlider",
    "fullname": "bokeh.models.widgets.sliders.AbstractSlider",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": " \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "\n    Whether or not show slider's value.\n    ",
        "default": true
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "\n    ",
        "default": "ltr"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "\n    ",
        "default": ""
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "#e6e6e6"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    Slider's label.\n    ",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "\n    ",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the slider either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "ActionTool",
    "fullname": "bokeh.models.tools.ActionTool",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "desc": " A base class for tools that are buttons in the toolbar.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "AdaptiveTicker",
    "fullname": "bokeh.models.tickers.AdaptiveTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": " Generate \"nice\" round ticks at any magnitude.\n\n    Creates ticks that are \"base\" multiples of a set of given\n    mantissas. For example, with ``base=10`` and\n    ``mantissas=[1, 2, 5]``, the ticker will generate the sequence::\n\n        ..., 0.1, 0.2, 0.5, 1, 2, 5, 10, 20, 50, 100, ...\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "base",
        "type": "Float",
        "desc": "\n    The multiplier to use for scaling mantissas.\n    ",
        "default": 10.0
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "\n    The smallest allowable interval between two adjacent ticks.\n    ",
        "default": 0.0
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "\n    The acceptable list numbers to generate multiples of.\n    ",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "\n    The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "AjaxDataSource",
    "fullname": "bokeh.models.sources.AjaxDataSource",
    "bases": [
      "bokeh.models.sources.WebDataSource"
    ],
    "desc": " A data source that can populate columns by making Ajax calls to REST\n    endpoints.\n\n    The ``AjaxDataSource`` can be especially useful if you want to make a\n    standalone document (i.e. not backed by the Bokeh server) that can still\n    dynamically update using an existing REST API.\n\n    The response from the REST API should match the ``.data`` property of a\n    standard ``ColumnDataSource``, i.e. a JSON dict that maps names to arrays\n    of values:\n\n    .. code-block:: python\n\n        {\n            'x' : [1, 2, 3, ...],\n            'y' : [9, 3, 2, ...]\n        }\n\n    Alternatively, if the REST API returns a different format, a ``CustomJS``\n    callback can be provided to convert the REST response into Bokeh format,\n    via the ``adapter`` property of this data source.\n\n    Initial data can be set by specifying the ``data`` property directly.\n    This is necessary when used in conjunction with a ``FactorRange``, even\n    if the columns in `data`` are empty.\n\n    A full example can be seen at :bokeh-tree:`examples/howto/ajax_source.py`\n\n    ",
    "props": [
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "\n    Mapping of column names to sequences of data. The columns can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.\n\n    The .data attribute can also be set from Pandas DataFrames or GroupBy\n    objects. In these cases, the behaviour is identical to passing the objects\n    to the ``ColumnDataSource`` initializer.\n    ",
        "default": {}
      },
      {
        "name": "polling_interval",
        "type": "Nullable(Int)",
        "desc": "\n    A polling interval (in milliseconds) for updating data source.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "http_headers",
        "type": "Dict(String, String)",
        "desc": "\n    Specify HTTP headers to set for the Ajax request.\n\n    Example:\n\n    .. code-block:: python\n\n        ajax_source.headers = { 'x-my-custom-header': 'some value' }\n\n    ",
        "default": {}
      },
      {
        "name": "adapter",
        "type": "Nullable(Instance(CustomJS))",
        "desc": "\n    A JavaScript callback to adapt raw JSON responses to Bokeh ``ColumnDataSource``\n    format.\n\n    If provided, this callback is executes immediately after the JSON data is\n    received, but before appending or replacing data in the data source. The\n    ``CustomJS`` callback will receive the ``AjaxDataSource`` as ``cb_obj`` and\n    will receive the raw JSON response as ``cb_data.response``. The callback\n    code should return a ``data`` object suitable for a Bokeh ``ColumnDataSource``\n    (i.e.  a mapping of string column names to arrays of data).\n    ",
        "default": null
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "\n    An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\n    This is a read-only property. You may only change the attributes of this object\n    to change the selection (e.g., ``selected.indices``).\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "max_size",
        "type": "Nullable(Int)",
        "desc": "\n    Maximum size of the data columns. If a new fetch would result in columns\n    larger than ``max_size``, then earlier data is dropped to make room.\n    ",
        "default": null
      },
      {
        "name": "data_url",
        "type": "NonNullable(String)",
        "desc": "\n    A URL to to fetch data from.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "\n    An instance of a ``SelectionPolicy`` that determines how selections are set.\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append')",
        "desc": "\n    Whether to append new data to existing data (up to ``max_size``), or to\n    replace existing data entirely.\n    ",
        "default": "replace"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "method",
        "type": "Enum('POST', 'GET')",
        "desc": "\n    Specify the HTTP method to use for the Ajax request (GET or POST)\n    ",
        "default": "POST"
      },
      {
        "name": "content_type",
        "type": "String",
        "desc": "\n    Set the \"contentType\" parameter for the Ajax request.\n    ",
        "default": "application/json"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "if_modified",
        "type": "Bool",
        "desc": "\n    Whether to include an ``If-Modified-Since`` header in Ajax requests\n    to the server. If this header is supported by the server, then only\n    new data since the last request will be returned.\n    ",
        "default": false
      }
    ]
  },
  {
    "name": "AllLabels",
    "fullname": "bokeh.models.labeling.AllLabels",
    "bases": [
      "bokeh.models.labeling.LabelingPolicy"
    ],
    "desc": " Select all labels even if they overlap. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Annotation",
    "fullname": "bokeh.models.annotations.Annotation",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": " Base class for all annotation models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "AnnularWedge",
    "fullname": "bokeh.models.glyphs.AnnularWedge",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render annular wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/AnnularWedge.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "\n    Which direction to stroke between the start and end angles.\n    ",
        "default": "anticlock"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the annular wedges.\n    ",
        "default": []
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the annular wedges.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the annular wedges.\n    ",
        "default": "black"
      },
      {
        "name": "inner_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to start the annular wedges, as measured from the horizontal.\n    ",
        "default": {
          "field": "start_angle"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the center of the annular wedges.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "outer_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the annular wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the annular wedges.\n    ",
        "default": "butt"
      },
      {
        "name": "outer_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The outer radii of the annular wedges.\n    ",
        "default": {
          "field": "outer_radius"
        }
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the annular wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the annular wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the annular wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the annular wedges.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the annular wedges.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the annular wedges.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "inner_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The inner radii of the annular wedges.\n    ",
        "default": {
          "field": "inner_radius"
        }
      },
      {
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to end the annular wedges, as measured from the horizontal.\n    ",
        "default": {
          "field": "end_angle"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the annular wedges.\n    ",
        "default": null
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the center of the annular wedges.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the annular wedges.\n    ",
        "default": 1
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the annular wedges.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the annular wedges.\n    ",
        "default": 12.0
      },
      {
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      }
    ]
  },
  {
    "name": "Annulus",
    "fullname": "bokeh.models.glyphs.Annulus",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render annuli.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Annulus.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the annuli.\n    ",
        "default": "butt"
      },
      {
        "name": "outer_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The outer radii of the annuli.\n    ",
        "default": {
          "field": "outer_radius"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the annuli.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the annuli.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the annuli.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the annuli.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the annuli.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the annuli.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the annuli.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the annuli.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the annuli.\n    ",
        "default": "black"
      },
      {
        "name": "inner_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "inner_radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The inner radii of the annuli.\n    ",
        "default": {
          "field": "inner_radius"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the annuli.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the center of the annuli.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the center of the annuli.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the annuli.\n    ",
        "default": 1
      },
      {
        "name": "outer_radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the annuli.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the annuli.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the annuli.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "Arc",
    "fullname": "bokeh.models.glyphs.Arc",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render arcs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Arc.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the arcs.\n    ",
        "default": "butt"
      },
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "\n    Which direction to stroke between the start and end angles.\n    ",
        "default": "anticlock"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the arcs.\n    ",
        "default": []
      },
      {
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the arcs.\n    ",
        "default": "bevel"
      },
      {
        "name": "radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    Radius of the arc.\n    ",
        "default": {
          "field": "radius"
        }
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the arcs.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to start the arcs, as measured from the horizontal.\n    ",
        "default": {
          "field": "start_angle"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to end the arcs, as measured from the horizontal.\n    ",
        "default": {
          "field": "end_angle"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the center of the arcs.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the center of the arcs.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the arcs.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the arcs.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the arcs.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      }
    ]
  },
  {
    "name": "Arrow",
    "fullname": "bokeh.models.annotations.Arrow",
    "bases": [
      "bokeh.models.annotations.DataAnnotation"
    ],
    "desc": " Render arrows as an annotation.\n\n    See :ref:`userguide_annotations_arrows` for information on plotting arrows.\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "end",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "\n    Instance of ``ArrowHead``.\n    ",
        "default": "{\"__type__\": \"bokeh.models.arrow_heads.OpenHead\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the arrow body.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the arrow body.\n    ",
        "default": []
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_end",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to locate the end of the arrows.\n    ",
        "default": {
          "field": "x_end"
        }
      },
      {
        "name": "start",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "\n    Instance of ``ArrowHead``.\n    ",
        "default": null
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    Local data source to use when rendering annotations on the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "x_start",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to locate the start of the arrows.\n    ",
        "default": {
          "field": "x_start"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the arrow body.\n    ",
        "default": "bevel"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "y_end",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to locate the end of the arrows.\n    ",
        "default": {
          "field": "y_end"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the arrow body.\n    ",
        "default": "black"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "end_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the end_x and end_y attributes. Interpreted as \"data\n    space\" units by default.\n    ",
        "default": "data"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_start",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to locate the start of the arrows.\n    ",
        "default": {
          "field": "y_start"
        }
      },
      {
        "name": "start_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the start_x and start_y attributes. Interpreted as \"data\n    space\" units by default.\n    ",
        "default": "data"
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the arrow body.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the arrow body.\n    ",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the arrow body.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "ArrowHead",
    "fullname": "bokeh.models.arrow_heads.ArrowHead",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for arrow heads.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size, in pixels, of the arrow head.\n    ",
        "default": 25
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Ascii",
    "fullname": "bokeh.models.text.Ascii",
    "bases": [
      "bokeh.models.text.MathText"
    ],
    "desc": "\n    Render mathematical content using `AsciiMath <http://asciimath.org/>`_\n    notation.\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "\n    The text value to render.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "AutocompleteInput",
    "fullname": "bokeh.models.widgets.inputs.AutocompleteInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ],
    "desc": " Single-line input widget with auto-completion.\n\n    ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "completions",
        "type": "List(String)",
        "desc": "\n    A list of completion strings. This will be used to guide the\n    user upon typing the beginning of a desired value.\n    ",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_characters",
        "type": "PositiveInt",
        "desc": "\n    The number of characters a user must type before completions are presented.\n    ",
        "default": 2
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "\n    Max count of characters in field\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "value_input",
        "type": "String",
        "desc": "\n    Initial or current value.\n\n    Change events are triggered whenever any update happens, i.e. on every\n    keypress.\n    ",
        "default": ""
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "restrict",
        "type": "Bool",
        "desc": "\n    Set to False in order to allow users to enter text that is not present in the list of completion strings.\n    ",
        "default": true
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "\n    Placeholder for empty input field.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "case_sensitive",
        "type": "Bool",
        "desc": "Enable or disable case sensitivity",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "String",
        "desc": "\n    Initial or entered text value.\n\n    Change events are triggered whenever <enter> is pressed.\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "AvgAggregator",
    "fullname": "bokeh.models.widgets.tables.AvgAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": " Simple average across multiple rows.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "\n    Refers to the table column being aggregated\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "Axis",
    "fullname": "bokeh.models.axes.Axis",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "desc": " A base class that defines common properties for all axis types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "alphabetic"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the major tick labels should be\n    offset from the associated ticks.\n    ",
        "default": 5
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the axis line.\n    ",
        "default": []
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the axis label.\n    ",
        "default": "italic"
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "\n    A text or LaTeX notation label for the axis, displayed parallel to the axis rule.\n    ",
        "default": null
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the axis label.\n    ",
        "default": 1.0
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "\n    Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.\n    ",
        "default": "auto"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the axis labels should be offset\n    from the tick labels.\n    ",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the axis label.\n    ",
        "default": "bottom"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the axis line.\n    ",
        "default": "butt"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance\n    of ticks.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": "black"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the axis line.\n    ",
        "default": "bevel"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the axis label.\n    ",
        "default": "13px"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 4
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "\n    What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.\n    ",
        "default": "horizontal"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the axis label.\n    ",
        "default": "helvetica"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the axis label.\n    ",
        "default": "#444444"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])\n\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 6
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the axis line.\n    ",
        "default": 1.0
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the axis line.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "center"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the axis line.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "\n    The line width of the axis line.\n    ",
        "default": 1
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "\n    Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area.\n    ",
        "default": null
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the axis label.\n    ",
        "default": "left"
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the axis label.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend into the\n    main plot area.\n    ",
        "default": 2
      }
    ]
  },
  {
    "name": "BBoxTileSource",
    "fullname": "bokeh.models.tiles.BBoxTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": " Has the same default tile origin as the ``WMTSTileSource`` but requested\n    tiles use a ``{XMIN}``, ``{YMIN}``, ``{XMAX}``, ``{YMAX}`` e.g.\n    ``http://your.custom.tile.service?bbox={XMIN},{YMIN},{XMAX},{YMAX}``.\n\n    ",
    "props": [
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    A y-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "\n    Tile size in pixels (e.g. 256)\n    ",
        "default": 256
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "\n    Data provider attribution content. This can include HTML content.\n    ",
        "default": ""
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "\n    A minimum zoom level for the tile layer. This is the most zoomed-out level.\n    ",
        "default": 0
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "\n    Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.\n    ",
        "default": 156543.03392804097
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "String",
        "desc": "\n    Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png\n    ",
        "default": ""
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "\n    Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.\n\n    ",
        "default": true
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "\n    A maximum zoom level for the tile layer. This is the most zoomed-in level.\n    ",
        "default": 30
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "\n    Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    An x-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "use_latlon",
        "type": "Bool",
        "desc": "\n    Flag which indicates option to output ``{XMIN}``, ``{YMIN}``, ``{XMAX}``, ``{YMAX}`` in meters or latitude and longitude.\n    ",
        "default": false
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "\n    A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).\n    ",
        "default": {}
      }
    ]
  },
  {
    "name": "Band",
    "fullname": "bokeh.models.annotations.Band",
    "bases": [
      "bokeh.models.annotations.DataAnnotation"
    ],
    "desc": " Render a filled area band along a dimension.\n\n    See :ref:`userguide_annotations_bands` for information on plotting bands.\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "upper_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the band.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the band.\n    ",
        "default": []
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the band.\n    ",
        "default": 0.4
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    Local data source to use when rendering annotations on the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the band.\n    ",
        "default": "#fff9ba"
      },
      {
        "name": "lower_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "base_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the band.\n    ",
        "default": "bevel"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the band.\n    ",
        "default": "#cccccc"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "lower",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "\n    The coordinates of the lower portion of the filled area band.\n    ",
        "default": {
          "field": "lower"
        }
      },
      {
        "name": "base",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "\n    The orthogonal coordinates of the upper and lower values.\n    ",
        "default": {
          "field": "base"
        }
      },
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "\n    The direction of the band can be specified by setting this property\n    to \"height\" (``y`` direction) or \"width\" (``x`` direction).\n    ",
        "default": "height"
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the band.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the band.\n    ",
        "default": 0.3
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the band.\n    ",
        "default": 0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "upper",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "\n    The coordinates of the upper portion of the filled area band.\n    ",
        "default": {
          "field": "upper"
        }
      }
    ]
  },
  {
    "name": "BaseText",
    "fullname": "bokeh.models.text.BaseText",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "\n    Base class for renderers of text content of various kinds.\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "\n    The text value to render.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "BasicTickFormatter",
    "fullname": "bokeh.models.formatters.BasicTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": " Display tick values from continuous ranges as \"basic numbers\",\n    using scientific notation when appropriate by default.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "use_scientific",
        "type": "Bool",
        "desc": "\n    Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.\n    ",
        "default": true
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "precision",
        "type": "Either(Auto, Int)",
        "desc": "\n    How many digits of precision to display in tick labels.\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "power_limit_low",
        "type": "Int",
        "desc": "\n    Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low\n\n    ",
        "default": -3
      },
      {
        "name": "power_limit_high",
        "type": "Int",
        "desc": "\n    Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high\n\n    ",
        "default": 5
      }
    ]
  },
  {
    "name": "BasicTicker",
    "fullname": "bokeh.models.tickers.BasicTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "desc": " Generate ticks on a linear scale.\n\n    .. note::\n        This class may be renamed to ``LinearTicker`` in the future.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "base",
        "type": "Float",
        "desc": "\n    The multiplier to use for scaling mantissas.\n    ",
        "default": 10.0
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "\n    The smallest allowable interval between two adjacent ticks.\n    ",
        "default": 0.0
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "\n    The acceptable list numbers to generate multiples of.\n    ",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "\n    The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Bezier",
    "fullname": "bokeh.models.glyphs.Bezier",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render Bezier curves.\n\n    For more information consult the `Wikipedia article for Bezier curve`_.\n\n    .. _Wikipedia article for Bezier curve: http://en.wikipedia.org/wiki/Bezier_curve\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Bezier.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "cx0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of first control points.\n    ",
        "default": {
          "field": "cx0"
        }
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the Bezier curves.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the Bezier curves.\n    ",
        "default": []
      },
      {
        "name": "cy0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of first control points.\n    ",
        "default": {
          "field": "cy0"
        }
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the ending points.\n    ",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the Bezier curves.\n    ",
        "default": "bevel"
      },
      {
        "name": "cy1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of second control points.\n    ",
        "default": {
          "field": "cy1"
        }
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the starting points.\n    ",
        "default": {
          "field": "x0"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the Bezier curves.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "cx1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of second control points.\n    ",
        "default": {
          "field": "cx1"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the starting points.\n    ",
        "default": {
          "field": "y0"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the Bezier curves.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the Bezier curves.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the Bezier curves.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the ending points.\n    ",
        "default": {
          "field": "x1"
        }
      }
    ]
  },
  {
    "name": "BinnedTicker",
    "fullname": "bokeh.models.tickers.BinnedTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "desc": "Ticker that aligns ticks exactly at bin boundaries of a scanning color mapper. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "num_major_ticks",
        "type": "Either(Int, Auto)",
        "desc": "\n    The number of major tick positions to show or \"auto\" to use the\n    number of bins provided by the mapper.\n    ",
        "default": 8
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "mapper",
        "type": "Instance(ScanningColorMapper)",
        "desc": "\n    A scanning color mapper (e.g. ``EqHistColorMapper``) to use.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "BooleanFilter",
    "fullname": "bokeh.models.filters.BooleanFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": " A ``BooleanFilter`` filters data by returning the subset of data corresponding to indices\n    where the values of the booleans array is True.\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "booleans",
        "type": "Nullable(Seq(Bool))",
        "desc": "\n    A list of booleans indicating which rows of data to select.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "BooleanFormatter",
    "fullname": "bokeh.models.widgets.tables.BooleanFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "desc": " Boolean (check mark) cell formatter.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "icon",
        "type": "Enum('check', 'check-circle', 'check-circle-o', 'check-square', 'check-square-o')",
        "desc": "\n    The icon visualizing the check mark.\n    ",
        "default": "check"
      }
    ]
  },
  {
    "name": "Box",
    "fullname": "bokeh.models.layouts.Box",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": " Abstract base class for Row and Column. Do not use directly.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "\n    The list of children, which can be other components including plots, rows, columns, and widgets.\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "\n    The gap between children (in pixels).\n    ",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "BoxAnnotation",
    "fullname": "bokeh.models.annotations.BoxAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": " Render a shaded rectangular region as an annotation.\n\n    See :ref:`userguide_annotations_box_annotations` for information on plotting box annotations.\n\n    ",
    "props": [
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the box.\n    ",
        "default": []
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the box.\n    ",
        "default": "bevel"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the box.\n    ",
        "default": "#cccccc"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "top",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "\n    The y-coordinates of the top edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.\n    ",
        "default": null
      },
      {
        "name": "bottom",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "\n    The y-coordinates of the bottom edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.\n    ",
        "default": null
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the box.\n    ",
        "default": 0.3
      },
      {
        "name": "left_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the left attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "right",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "\n    The x-coordinates of the right edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.\n    ",
        "default": null
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the box.\n    ",
        "default": "butt"
      },
      {
        "name": "hatch_alpha",
        "type": "Alpha",
        "desc": "\n    The hatch alpha values for the box.\n    ",
        "default": 1.0
      },
      {
        "name": "top_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the top attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "hatch_weight",
        "type": "Size",
        "desc": "\n    The hatch weight values for the box.\n    ",
        "default": 1.0
      },
      {
        "name": "left",
        "type": "Either(Null, Auto, NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float))",
        "desc": "\n    The x-coordinates of the left edge of the box annotation.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.\n    ",
        "default": null
      },
      {
        "name": "bottom_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the bottom attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the box.\n    ",
        "default": 0.4
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the box.\n    ",
        "default": "#fff9ba"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the box.\n    ",
        "default": {}
      },
      {
        "name": "right_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the right attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "hatch_color",
        "type": "Nullable(Color)",
        "desc": "\n    The hatch color values for the box.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "Nullable(String)",
        "desc": "\n    The hatch pattern values for the box.\n    ",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the box.\n    ",
        "default": 1
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the box.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "Size",
        "desc": "\n    The hatch scale values for the box.\n    ",
        "default": 12.0
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "\n    Specifies whether the contents are rendered to a canvas or as a\n    HTML element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    .. note::\n        The HTML labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.\n\n    ",
        "default": "canvas"
      }
    ]
  },
  {
    "name": "BoxEditTool",
    "fullname": "bokeh.models.tools.BoxEditTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": " *toolbar icon*: |box_edit_icon|\n\n    Allows drawing, dragging and deleting ``Rect`` glyphs on one or more\n    renderers by editing the underlying ``ColumnDataSource`` data. Like other\n    drawing tools, the renderers that are to be edited must be supplied\n    explicitly as a list. When drawing a new box the data will always be added\n    to the ``ColumnDataSource`` on the first supplied renderer.\n\n    The tool will modify the columns on the data source corresponding to the\n    ``x``, ``y``, ``width`` and ``height`` values of the glyph. Any additional\n    columns in the data source will be padded with ``empty_value``, when adding\n    a new box.\n\n    The supported actions include:\n\n    * Add box: Hold shift then click and drag anywhere on the plot or double\n      tap once to start drawing, move the mouse and double tap again to finish\n      drawing.\n\n    * Move box: Click and drag an existing box, the box will be dropped once\n      you let go of the mouse button.\n\n    * Delete box: Tap a box to select it then press <<backspace>> key while the\n      mouse is within the plot area.\n\n    To **Move** or **Delete** multiple boxes at once:\n\n    * Move selection: Select box(es) with <<shift>>+tap (or another selection\n      tool) then drag anywhere on the plot. Selecting and then dragging on a\n      specific box will move both.\n\n    * Delete selection: Select box(es) with <<shift>>+tap (or another selection\n      tool) then press <<backspace>> while the mouse is within the plot area.\n\n    .. |box_edit_icon| image:: /_images/icons/BoxEdit.png\n        :height: 24px\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the box drawing is to be free in. By default, users may\n    freely draw boxes with any dimensions. If only \"width\" is set, the box will\n    be constrained to span the entire vertical space of the plot, only the\n    horizontal dimension can be controlled. If only \"height\" is set, the box\n    will be constrained to span the entire horizontal space of the plot, and the\n    vertical dimension can be controlled.\n    ",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "\n    Defines a limit on the number of boxes that can be drawn. By default there\n    is no limit on the number of objects, but if enabled the oldest drawn box\n    will be dropped to make space for the new box being added.\n    ",
        "default": 0
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "BoxSelectTool",
    "fullname": "bokeh.models.tools.BoxSelectTool",
    "bases": [
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": " *toolbar icon*: |box_select_icon|\n\n    The box selection tool allows users to make selections on a Plot by showing\n    a rectangular region by dragging the mouse or a finger over the plot area.\n    The end of the drag event indicates the selection region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n\n    .. |box_select_icon| image:: /_images/icons/BoxSelect.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "\n    Defines what should happen when a new selection is made. The default\n    is to replace the existing selection. Other options are to append to\n    the selection, intersect with it or subtract from it.\n    ",
        "default": "replace"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the box selection is to be free in. By default, users may\n    freely draw selections boxes with any dimensions. If only \"width\" is set,\n    the box will be constrained to span the entire vertical space of the plot,\n    only the horizontal dimension can be controlled. If only \"height\" is set,\n    the box will be constrained to span the entire horizontal space of the\n    plot, and the vertical dimension can be controlled.\n    ",
        "default": "both"
      },
      {
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "desc": "\n    A shaded annotation drawn to indicate the selection region.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.BoxAnnotation\", \"bottom_units\": \"screen\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"right_units\": \"screen\", \"syncable\": false, \"top_units\": \"screen\"}"
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "\n    An explicit list of renderers to hit test against. If unset, defaults to\n    all renderers on a plot.\n    ",
        "default": "auto"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "origin",
        "type": "Enum('corner', 'center')",
        "desc": "\n    Indicates whether the rectangular selection area should originate from a corner\n    (top-left or bottom-right depending on direction) or the center of the box.\n    ",
        "default": "corner"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that have a matching\n    value for their ``name`` attribute will be used.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      },
      {
        "name": "select_every_mousemove",
        "type": "Bool",
        "desc": "\n    Whether a selection computation should happen on every mouse event, or only\n    once, when the selection region is completed. Default: False\n    ",
        "default": false
      }
    ]
  },
  {
    "name": "BoxZoomTool",
    "fullname": "bokeh.models.tools.BoxZoomTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "desc": " *toolbar icon*: |box_zoom_icon|\n\n    The box zoom tool allows users to define a rectangular egion of a Plot to\n    zoom to by dragging he mouse or a finger over the plot region. The end of\n    the drag event indicates the selection region is ready.\n\n    .. |box_zoom_icon| image:: /_images/icons/BoxZoom.png\n        :height: 24px\n\n    .. note::\n        ``BoxZoomTool`` is incompatible with ``GMapPlot`` due to the manner in\n        which Google Maps exert explicit control over aspect ratios. Adding\n        this tool to a ``GMapPlot`` will have no effect.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the zoom box is to be free in. By default, users may\n    freely draw zoom boxes with any dimensions. If only \"width\" is supplied,\n    the box will be constrained to span the entire vertical space of the plot,\n    only the horizontal dimension can be controlled. If only \"height\" is\n    supplied, the box will be constrained to span the entire horizontal space\n    of the plot, and the vertical dimension can be controlled.\n    ",
        "default": "both"
      },
      {
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "desc": "\n    A shaded annotation drawn to indicate the selection region.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.BoxAnnotation\", \"bottom_units\": \"screen\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"left_units\": \"screen\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"right_units\": \"screen\", \"syncable\": false, \"top_units\": \"screen\"}"
      },
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "\n    Whether the box zoom region should be restricted to have the same\n    aspect ratio as the plot region.\n\n    .. note::\n        If the tool is restricted to one dimension, this value has\n        no effect.\n\n    ",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "origin",
        "type": "Enum('corner', 'center')",
        "desc": "\n    Indicates whether the rectangular zoom area should originate from a corner\n    (top-left or bottom-right depending on direction) or the center of the box.\n    ",
        "default": "corner"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Button",
    "fullname": "bokeh.models.widgets.buttons.Button",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "desc": " A click button.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "\n    A style for the button, signifying it's role.\n    ",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "\n    The text label for the button to display.\n    ",
        "default": "Button"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "\n    An optional image appearing to the left of button's text.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "ButtonGroup",
    "fullname": "bokeh.models.widgets.groups.ButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup",
      "bokeh.models.widgets.buttons.ButtonLike"
    ],
    "desc": " Abstract base class for groups with items rendered as buttons.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "\n    A style for the button, signifying it's role.\n    ",
        "default": "default"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "\n    List of text labels contained in this group.\n    ",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the button group either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "CDSView",
    "fullname": "bokeh.models.sources.CDSView",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A view into a ``ColumnDataSource`` that represents a row-wise subset.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "filters",
        "type": "List(Instance(Filter))",
        "desc": "\n    List of filters that the view comprises.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "source",
        "type": "Instance(ColumnarDataSource)",
        "desc": "\n    The ``ColumnDataSource`` associated with this view. Used to determine\n    the length of the columns.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "Callback",
    "fullname": "bokeh.models.callbacks.Callback",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for interactive callback.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CanvasTexture",
    "fullname": "bokeh.models.textures.CanvasTexture",
    "bases": [
      "bokeh.models.textures.Texture"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "repetition",
        "type": "Enum('repeat', 'repeat_x', 'repeat_y', 'no_repeat')",
        "desc": "\n\n    ",
        "default": "repeat"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "code",
        "type": "NonNullable(String)",
        "desc": "\n    A snippet of JavaScript code to execute in the browser.\n\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "CategoricalAxis",
    "fullname": "bokeh.models.axes.CategoricalAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "desc": " An axis that displays ticks and labels for categorical ranges.\n\n    The ``CategoricalAxis`` can handle factor ranges with up to two levels of\n    nesting, including drawing a separator line between top-level groups of\n    factors.\n\n    ",
    "props": [
      {
        "name": "separator_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting.\n    ",
        "default": 0
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the axis line.\n    ",
        "default": []
      },
      {
        "name": "subgroup_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": 1.2
      },
      {
        "name": "group_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": "bottom"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the axis label.\n    ",
        "default": "italic"
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the axis label.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the axis labels should be offset\n    from the tick labels.\n    ",
        "default": 5
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "subgroup_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)",
        "desc": "\n    What direction the subgroup label text should be oriented.\n\n    If a number is supplied, the angle of the text is measured from horizontal.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": "parallel"
      },
      {
        "name": "separator_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance\n    of ticks.\n    ",
        "default": "{\"__type__\": \"bokeh.models.formatters.CategoricalTickFormatter\"}"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 4
      },
      {
        "name": "separator_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting.\n    ",
        "default": 1.0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "\n    What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.\n    ",
        "default": "horizontal"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the axis label.\n    ",
        "default": "helvetica"
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the axis label.\n    ",
        "default": "#444444"
      },
      {
        "name": "group_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical', 'parallel', 'normal'), Float)",
        "desc": "\n    What direction the group label text should be oriented.\n\n    If a number is supplied, the angle of the text is measured from horizontal.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": "parallel"
      },
      {
        "name": "group_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": "bold"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "group_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the axis line.\n    ",
        "default": 1.0
      },
      {
        "name": "separator_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "\n    The line width of the axis line.\n    ",
        "default": 1
      },
      {
        "name": "separator_line_width",
        "type": "Float",
        "desc": "\n    The line width of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting.\n    ",
        "default": 2
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the axis label.\n    ",
        "default": 1.2
      },
      {
        "name": "group_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": "grey"
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "subgroup_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "alphabetic"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the major tick labels should be\n    offset from the associated ticks.\n    ",
        "default": 5
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "\n    A text or LaTeX notation label for the axis, displayed parallel to the axis rule.\n    ",
        "default": null
      },
      {
        "name": "subgroup_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": "left"
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "\n    Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.\n    ",
        "default": "auto"
      },
      {
        "name": "group_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": 1.2
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "subgroup_text_font",
        "type": "String",
        "desc": "\n    The text font of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": "helvetica"
      },
      {
        "name": "separator_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting.\n    ",
        "default": "butt"
      },
      {
        "name": "group_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the axis label.\n    ",
        "default": "bottom"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the axis line.\n    ",
        "default": "butt"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": "black"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the axis line.\n    ",
        "default": "bevel"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the axis label.\n    ",
        "default": "13px"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "subgroup_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": "#444444"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "subgroup_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": "bold"
      },
      {
        "name": "subgroup_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": "bottom"
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])\n\n    ",
        "default": "{\"__type__\": \"bokeh.models.tickers.CategoricalTicker\"}"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 6
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the axis line.\n    ",
        "default": "black"
      },
      {
        "name": "separator_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the separator line between top-level categorical groups.\n\n    This property always applies to factors in the outermost level of nesting.\n    ",
        "default": "lightgrey"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "subgroup_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the subgroup categorical labels.\n\n    This property always applies to factors in the middle level of nesting.\n    If the list of categorical factors is has only zero or one levels of nesting,\n    then this property has no effect.\n    ",
        "default": "11px"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "center"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "group_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": "left"
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the axis line.\n    ",
        "default": 0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "\n    Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area.\n    ",
        "default": null
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the axis label.\n    ",
        "default": "left"
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend into the\n    main plot area.\n    ",
        "default": 2
      },
      {
        "name": "group_text_font",
        "type": "String",
        "desc": "\n    The text font of the group categorical labels.\n\n    This property always applies to factors in the outermost level of nesting.\n    If the list of categorical factors is flat (i.e. no nesting) then this\n    property has no effect.\n    ",
        "default": "helvetica"
      }
    ]
  },
  {
    "name": "CategoricalColorMapper",
    "fullname": "bokeh.models.mappers.CategoricalColorMapper",
    "bases": [
      "bokeh.models.mappers.CategoricalMapper",
      "bokeh.models.mappers.ColorMapper"
    ],
    "desc": " Map categorical factors to colors.\n\n    Values that are passed to this mapper that are not in the factors list\n    will be mapped to ``nan_color``.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n    ``end=1`` will perform color mapping only based on the first sub-factor\n    (i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\n    If ``None`` then all sub-factors from ``start`` to the end of the\n    factor will be used for color mapping.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "start",
        "type": "Int",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n    ``start=1`` will perform color mapping only based on the second sub-factor\n    (i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)\n    ",
        "default": 0
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "\n    Color to be used if data is NaN or otherwise not mappable.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "gray"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "\n    A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "\n    A sequence of factors / categories that map to the some target range. For\n    example the following color mapper:\n\n    .. code-block:: python\n\n        mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\n    will map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "CategoricalMapper",
    "fullname": "bokeh.models.mappers.CategoricalMapper",
    "bases": [
      "bokeh.models.mappers.Mapper"
    ],
    "desc": " Base class for mappers that map categorical factors to other values.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n    ``end=1`` will perform color mapping only based on the first sub-factor\n    (i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\n    If ``None`` then all sub-factors from ``start`` to the end of the\n    factor will be used for color mapping.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "start",
        "type": "Int",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n    ``start=1`` will perform color mapping only based on the second sub-factor\n    (i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "\n    A sequence of factors / categories that map to the some target range. For\n    example the following color mapper:\n\n    .. code-block:: python\n\n        mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\n    will map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "CategoricalMarkerMapper",
    "fullname": "bokeh.models.mappers.CategoricalMarkerMapper",
    "bases": [
      "bokeh.models.mappers.CategoricalMapper"
    ],
    "desc": " Map categorical factors to marker types.\n\n    Values that are passed to this mapper that are not in the factors list\n    will be mapped to ``default_value``.\n\n    .. note::\n        This mappers is primarily only useful with the ``Scatter`` marker\n        glyph that be parameterized by marker type.\n\n    ",
    "props": [
      {
        "name": "default_value",
        "type": "MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y')",
        "desc": "\n    A marker type to use in case an unrecognized factor is passed in to be\n    mapped.\n    ",
        "default": "circle"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n    ``end=1`` will perform color mapping only based on the first sub-factor\n    (i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\n    If ``None`` then all sub-factors from ``start`` to the end of the\n    factor will be used for color mapping.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "markers",
        "type": "Seq(MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'))",
        "desc": "\n    A sequence of marker types to use as the target for mapping.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "start",
        "type": "Int",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n    ``start=1`` will perform color mapping only based on the second sub-factor\n    (i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "\n    A sequence of factors / categories that map to the some target range. For\n    example the following color mapper:\n\n    .. code-block:: python\n\n        mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\n    will map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "CategoricalPatternMapper",
    "fullname": "bokeh.models.mappers.CategoricalPatternMapper",
    "bases": [
      "bokeh.models.mappers.CategoricalMapper"
    ],
    "desc": " Map categorical factors to hatch fill patterns.\n\n    Values that are passed to this mapper that are not in the factors list\n    will be mapped to ``default_value``.\n\n    Added in version 1.1.1\n\n    ",
    "props": [
      {
        "name": "default_value",
        "type": "HatchPatternType",
        "desc": "\n    A hatch pattern to use in case an unrecognized factor is passed in to be\n    mapped.\n    ",
        "default": " "
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "end",
        "type": "Nullable(Int)",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2017\", \"marketing\"]``, then setting\n    ``end=1`` will perform color mapping only based on the first sub-factor\n    (i.e. in this case based on the year ``\"2016\"`` or ``\"2017\"``)\n\n    If ``None`` then all sub-factors from ``start`` to the end of the\n    factor will be used for color mapping.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "patterns",
        "type": "Seq(HatchPatternType)",
        "desc": "\n    A sequence of marker types to use as the target for mapping.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "start",
        "type": "Int",
        "desc": "\n    A start index to \"slice\" data factors with before mapping.\n\n    For example, if the data to color map consists of 2-level factors such\n    as ``[\"2016\", \"sales\"]`` and ``[\"2016\", \"marketing\"]``, then setting\n    ``start=1`` will perform color mapping only based on the second sub-factor\n    (i.e. in this case based on the department ``\"sales\"`` or ``\"marketing\"``)\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "\n    A sequence of factors / categories that map to the some target range. For\n    example the following color mapper:\n\n    .. code-block:: python\n\n        mapper = CategoricalColorMapper(palette=[\"red\", \"blue\"], factors=[\"foo\", \"bar\"])\n\n    will map the factor ``\"foo\"`` to red and the factor ``\"bar\"`` to blue.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "CategoricalScale",
    "fullname": "bokeh.models.scales.CategoricalScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "desc": " Represent a scale transformation between a categorical source range and\n    continuous target range.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CategoricalTickFormatter",
    "fullname": "bokeh.models.formatters.CategoricalTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": " Display tick values from categorical ranges as string\n    values.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CategoricalTicker",
    "fullname": "bokeh.models.tickers.CategoricalTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "desc": " Generate ticks for categorical ranges.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CellEditor",
    "fullname": "bokeh.models.widgets.tables.CellEditor",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Abstract base class for data table's cell editors.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CellFormatter",
    "fullname": "bokeh.models.widgets.tables.CellFormatter",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Abstract base class for data table's cell formatters.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CheckboxButtonGroup",
    "fullname": "bokeh.models.widgets.groups.CheckboxButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "desc": " A group of check boxes rendered as toggle buttons.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "\n    A style for the button, signifying it's role.\n    ",
        "default": "default"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "\n    List of text labels contained in this group.\n    ",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the button group either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "active",
        "type": "List(Int)",
        "desc": "\n    The list of indices of selected check boxes.\n    ",
        "default": []
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "CheckboxEditor",
    "fullname": "bokeh.models.widgets.tables.CheckboxEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Boolean value cell editor.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CheckboxGroup",
    "fullname": "bokeh.models.widgets.groups.CheckboxGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "desc": " A group of check boxes.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "\n    List of text labels contained in this group.\n    ",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "\n    Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).\n    ",
        "default": false
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "active",
        "type": "List(Int)",
        "desc": "\n    The list of indices of selected check boxes.\n    ",
        "default": []
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Circle",
    "fullname": "bokeh.models.glyphs.Circle",
    "bases": [
      "bokeh.models.glyphs.Marker"
    ],
    "desc": " Render circle markers. \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Circle.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "hit_dilation",
        "type": "Size",
        "desc": "\n    The factor by which to dilate the hit radius\n    which is responsible for defining the range in which a\n    marker responds to interactions with the Hover and Tap\n    tools.\n    ",
        "default": 1.0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the markers.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the markers.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to rotate the markers.\n    ",
        "default": 0.0
      },
      {
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the markers.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the markers.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the markers.\n    ",
        "default": "black"
      },
      {
        "name": "radius_dimension",
        "type": "Enum('x', 'y', 'max', 'min')",
        "desc": "\n    What dimension to measure circle radii along.\n\n    When the data space aspect ratio is not 1-1, then the size of the drawn\n    circles depends on what direction is used to measure the \"distance\" of\n    the radius. This property allows that direction to be controlled.\n\n    Setting this dimension to 'max' will calculate the radius on both the x\n    and y dimensions and use the maximum of the two, 'min' selects the minimum.\n    ",
        "default": "x"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the markers.\n    ",
        "default": "bevel"
      },
      {
        "name": "radius",
        "type": "NullDistanceSpec(units_default='data')",
        "desc": "\n    The radius values for circle markers (in |data units|, by default).\n\n    .. note::\n        Circle markers are slightly unusual in that they support specifying\n        a radius in addition to a size. Only one of ``radius`` or ``size``\n        should be given.\n\n    .. warning::\n        Note that ``Circle`` glyphs are always drawn as circles on the screen,\n        even in cases where the data space aspect ratio is not 1-1. In all\n        cases where radius values are specified, the \"distance\" for the radius\n        is measured along the dimension specified by ``radius_dimension``. If\n        the aspect ratio is very large or small, the drawn circles may appear\n        much larger or smaller than expected. See :bokeh-issue:`626` for more\n        information.\n\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the markers.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the markers.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-axis coordinates for the center of the markers.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-axis coordinates for the center of the markers.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the markers.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the markers.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "SizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size (diameter) values for the markers in screen space units.\n    ",
        "default": 4
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the markers.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "ColorBar",
    "fullname": "bokeh.models.annotations.ColorBar",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": " Render a color bar based on a color mapper.\n\n    See :ref:`userguide_annotations_color_bars` for information on plotting color bars.\n\n    ",
    "props": [
      {
        "name": "title_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height values for the title text.\n    ",
        "default": 1.2
      },
      {
        "name": "title_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha values for the title text.\n    ",
        "default": 1.0
      },
      {
        "name": "title_standoff",
        "type": "Int",
        "desc": "\n    The distance (in pixels) to separate the title from the color bar.\n    ",
        "default": 2
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the color bar background style.\n    ",
        "default": 0.95
      },
      {
        "name": "title_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align values for the title text.\n    ",
        "default": "left"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "formatter",
        "type": "Either(Instance(TickFormatter), Auto)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance of ticks.\n    ",
        "default": "auto"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance (in pixels) that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "height",
        "type": "Either(Auto, Int)",
        "desc": "\n    The height (in pixels) that the color scale should occupy.\n    ",
        "default": "auto"
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join for the color bar border outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "bar_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash for the color scale bar outline.\n    ",
        "default": []
      },
      {
        "name": "padding",
        "type": "Int",
        "desc": "\n    Amount of padding (in pixels) between the color scale and color bar border.\n    ",
        "default": 10
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "bar_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color for the color scale bar outline.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    The title text to render.\n    ",
        "default": null
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "bar_line_width",
        "type": "Float",
        "desc": "\n    The line width for the color scale bar outline.\n    ",
        "default": 1
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "bar_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset for the color scale bar outline.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the color bar background style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "color_mapper",
        "type": "Instance(ColorMapper)",
        "desc": "\n    A color mapper containing a color palette to render.\n\n    .. warning::\n        If the `low` and `high` attributes of the ``ColorMapper`` aren't set, ticks\n        and tick labels won't be rendered. Additionally, if a ``LogTicker`` is\n        passed to the `ticker` argument and either or both of the logarithms\n        of `low` and `high` values of the color_mapper are non-numeric\n        (i.e. `low=0`), the tick and tick labels won't be rendered.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "bottom"
      },
      {
        "name": "bar_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join for the color scale bar outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "bar_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha for the color scale bar outline.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color for the color bar border outline.\n    ",
        "default": null
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha for the color bar border outline.\n    ",
        "default": 1.0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "bar_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap for the color scale bar outline.\n    ",
        "default": "butt"
      },
      {
        "name": "title_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style values for the title text.\n    ",
        "default": "italic"
      },
      {
        "name": "title_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline values for the title text.\n    ",
        "default": "bottom"
      },
      {
        "name": "label_standoff",
        "type": "Int",
        "desc": "\n    The distance (in pixels) to separate the tick labels from the color bar.\n    ",
        "default": 5
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": null
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap for the color bar border outline.\n    ",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "margin",
        "type": "Int",
        "desc": "\n    Amount of margin (in pixels) around the outside of the color bar.\n    ",
        "default": 30
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance (in pixels) that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset for the color bar border outline.\n    ",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "\n    The line width for the color bar border outline.\n    ",
        "default": 1
      },
      {
        "name": "title_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size values for the title text.\n    ",
        "default": "13px"
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Either(Instance(Ticker), Auto)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n    ",
        "default": "auto"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.NoOverlap\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance (in pixels) that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "width",
        "type": "Either(Auto, Int)",
        "desc": "\n    The width (in pixels) that the color scale should occupy.\n    ",
        "default": "auto"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "location",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Float, Float))",
        "desc": "\n    The location where the color bar should draw itself. It's either one of\n    ``bokeh.core.enums.Anchor``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).\n\n    .. warning::\n        If the color bar is placed in a side panel, the location will likely\n        have to be set to `(0,0)`.\n    ",
        "default": "top_right"
      },
      {
        "name": "orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Auto)",
        "desc": "\n    Whether the color bar should be oriented vertically or horizontally.\n    ",
        "default": "auto"
      },
      {
        "name": "title_text_font",
        "type": "String",
        "desc": "\n    The text font values for the title text.\n    ",
        "default": "helvetica"
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "left"
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "scale_alpha",
        "type": "Float",
        "desc": "\n    The alpha with which to render the color scale.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash for the color bar border outline.\n    ",
        "default": []
      },
      {
        "name": "title_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color values for the title text.\n    ",
        "default": "#444444"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance (in pixels) that major ticks should extend into the\n    main plot area.\n    ",
        "default": 5
      }
    ]
  },
  {
    "name": "ColorMapper",
    "fullname": "bokeh.models.mappers.ColorMapper",
    "bases": [
      "bokeh.models.mappers.Mapper"
    ],
    "desc": " Base class for color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "\n    Color to be used if data is NaN or otherwise not mappable.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "gray"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "\n    A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "ColorPicker",
    "fullname": "bokeh.models.widgets.inputs.ColorPicker",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": " Color picker widget\n\n    .. warning::\n        This widget as a limited support on *Internet Explorer* (it will be displayed\n        as a simple text input).\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "color",
        "type": "ColorHex",
        "desc": "\n    The initial color of the picked color (named or hexadecimal)\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "#000000"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Column",
    "fullname": "bokeh.models.layouts.Column",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "desc": " Lay out child components in a single vertical row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "rows",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), height=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "\n    Describes how the component should maintain its rows' heights.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion.\n\n    ",
        "default": "auto"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "\n    The list of children, which can be other components including plots, rows, columns, and widgets.\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "\n    The gap between children (in pixels).\n    ",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "ColumnDataSource",
    "fullname": "bokeh.models.sources.ColumnDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "desc": " Maps names of columns to sequences or arrays.\n\n    The ``ColumnDataSource`` is a fundamental data structure of Bokeh. Most\n    plots, data tables, etc. will be driven by a ``ColumnDataSource``.\n\n    If the ``ColumnDataSource`` initializer is called with a single argument that\n    can be any of the following:\n\n    * A Python ``dict`` that maps string names to sequences of values, e.g.\n      lists, arrays, etc.\n\n      .. code-block:: python\n\n          data = {'x': [1,2,3,4], 'y': np.array([10.0, 20.0, 30.0, 40.0])}\n\n          source = ColumnDataSource(data)\n\n    .. note::\n        ``ColumnDataSource`` only creates a shallow copy of ``data``. Use e.g.\n        ``ColumnDataSource(copy.deepcopy(data))`` if initializing from another\n        ``ColumnDataSource.data`` object that you want to keep independent.\n\n    * A Pandas ``DataFrame`` object\n\n      .. code-block:: python\n\n          source = ColumnDataSource(df)\n\n      In this case the CDS will have columns corresponding to the columns of\n      the ``DataFrame``. If the ``DataFrame`` columns have multiple levels,\n      they will be flattened using an underscore (e.g. level_0_col_level_1_col).\n      The index of the ``DataFrame`` will be flattened to an ``Index`` of tuples\n      if it's a ``MultiIndex``, and then reset using ``reset_index``. The result\n      will be a column with the same name if the index was named, or\n      level_0_name_level_1_name if it was a named ``MultiIndex``. If the\n      ``Index`` did not have a name or the ``MultiIndex`` name could not be\n      flattened/determined, the ``reset_index`` function will name the index column\n      ``index``, or ``level_0`` if the name ``index`` is not available.\n\n    * A Pandas ``GroupBy`` object\n\n      .. code-block:: python\n\n          group = df.groupby(('colA', 'ColB'))\n\n      In this case the CDS will have columns corresponding to the result of\n      calling ``group.describe()``. The ``describe`` method generates columns\n      for statistical measures such as ``mean`` and ``count`` for all the\n      non-grouped original columns. The CDS columns are formed by joining\n      original column names with the computed measure. For example, if a\n      ``DataFrame`` has columns ``'year'`` and ``'mpg'``. Then passing\n      ``df.groupby('year')`` to a CDS will result in columns such as\n      ``'mpg_mean'``\n\n      If the ``GroupBy.describe`` result has a named index column, then\n      CDS will also have a column with this name. However, if the index name\n      (or any subname of a ``MultiIndex``) is ``None``, then the CDS will have\n      a column generically named ``index`` for the index.\n\n      Note this capability to adapt ``GroupBy`` objects may only work with\n      Pandas ``>=0.20.0``.\n\n    .. note::\n        There is an implicit assumption that all the columns in a given\n        ``ColumnDataSource`` all have the same length at all times. For this\n        reason, it is usually preferable to update the ``.data`` property\n        of a data source \"all at once\".\n\n    ",
    "props": [
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "\n    Mapping of column names to sequences of data. The columns can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.\n\n    The .data attribute can also be set from Pandas DataFrames or GroupBy\n    objects. In these cases, the behaviour is identical to passing the objects\n    to the ``ColumnDataSource`` initializer.\n    ",
        "default": {}
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "\n    An instance of a ``SelectionPolicy`` that determines how selections are set.\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "\n    An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\n    This is a read-only property. You may only change the attributes of this object\n    to change the selection (e.g., ``selected.indices``).\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "ColumnarDataSource",
    "fullname": "bokeh.models.sources.ColumnarDataSource",
    "bases": [
      "bokeh.models.sources.DataSource"
    ],
    "desc": " A base class for data source types, which can be mapped onto\n    a columnar format.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "\n    An instance of a ``SelectionPolicy`` that determines how selections are set.\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "\n    An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\n    This is a read-only property. You may only change the attributes of this object\n    to change the selection (e.g., ``selected.indices``).\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "CompositeTicker",
    "fullname": "bokeh.models.tickers.CompositeTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": " Combine different tickers at different scales.\n\n    Uses the ``min_interval`` and ``max_interval`` interval attributes\n    of the tickers to select the appropriate ticker at different\n    scales.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "tickers",
        "type": "Seq(Instance(Ticker))",
        "desc": "\n    A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()\n\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "ConnectedXYGlyph",
    "fullname": "bokeh.models.glyph.ConnectedXYGlyph",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": " Base class of glyphs with `x` and `y` coordinate attributes and\n    a connected topology.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "ContinuousAxis",
    "fullname": "bokeh.models.axes.ContinuousAxis",
    "bases": [
      "bokeh.models.axes.Axis"
    ],
    "desc": " A base class for all numeric, non-categorical axes types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "alphabetic"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the major tick labels should be\n    offset from the associated ticks.\n    ",
        "default": 5
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the axis line.\n    ",
        "default": []
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the axis label.\n    ",
        "default": "italic"
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "\n    A text or LaTeX notation label for the axis, displayed parallel to the axis rule.\n    ",
        "default": null
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the axis label.\n    ",
        "default": 1.0
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "\n    Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.\n    ",
        "default": "auto"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the axis labels should be offset\n    from the tick labels.\n    ",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the axis label.\n    ",
        "default": "bottom"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the axis line.\n    ",
        "default": "butt"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance\n    of ticks.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": "black"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the axis line.\n    ",
        "default": "bevel"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the axis label.\n    ",
        "default": "13px"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 4
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "\n    What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.\n    ",
        "default": "horizontal"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the axis label.\n    ",
        "default": "helvetica"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the axis label.\n    ",
        "default": "#444444"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])\n\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 6
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the axis line.\n    ",
        "default": 1.0
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the axis line.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "center"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the axis line.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "\n    The line width of the axis line.\n    ",
        "default": 1
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "\n    Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area.\n    ",
        "default": null
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the axis label.\n    ",
        "default": "left"
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the axis label.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend into the\n    main plot area.\n    ",
        "default": 2
      }
    ]
  },
  {
    "name": "ContinuousColorMapper",
    "fullname": "bokeh.models.mappers.ContinuousColorMapper",
    "bases": [
      "bokeh.models.mappers.ColorMapper"
    ],
    "desc": " Base class for continuous color mapper types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "\n    A collection of glyph renderers to pool data from for establishing data metrics.\n    If empty, mapped data will be used instead.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.\n    ",
        "default": null
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette.\n    ",
        "default": null
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "\n    Color to be used if data is NaN or otherwise not mappable.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "gray"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "\n    A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "\n    The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "\n    The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "ContinuousScale",
    "fullname": "bokeh.models.scales.ContinuousScale",
    "bases": [
      "bokeh.models.scales.Scale"
    ],
    "desc": " Represent a scale transformation between continuous ranges.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "ContinuousTicker",
    "fullname": "bokeh.models.tickers.ContinuousTicker",
    "bases": [
      "bokeh.models.tickers.Ticker"
    ],
    "desc": " A base class for non-categorical ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "CoordinateMapping",
    "fullname": "bokeh.models.canvas.CoordinateMapping",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A mapping between two coordinate systems. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "y_source",
        "type": "Instance(Range)",
        "desc": null,
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "x_target",
        "type": "Instance(Range)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": null,
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "x_source",
        "type": "Instance(Range)",
        "desc": null,
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "y_target",
        "type": "Instance(Range)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": null,
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      }
    ]
  },
  {
    "name": "CoordinateTransform",
    "fullname": "bokeh.models.expressions.CoordinateTransform",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": " Base class for coordinate transforms. \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "CrosshairTool",
    "fullname": "bokeh.models.tools.CrosshairTool",
    "bases": [
      "bokeh.models.tools.InspectTool"
    ],
    "desc": " *toolbar icon*: |crosshair_icon|\n\n    The crosshair tool is a passive inspector tool. It is generally on at all\n    times, but can be configured in the inspector's menu associated with the\n    *toolbar icon* shown above.\n\n    The crosshair tool draws a crosshair annotation over the plot, centered on\n    the current mouse position. The crosshair tool may be configured to draw\n    across only one dimension by setting the ``dimension`` property to only\n    ``width`` or ``height``.\n\n    .. |crosshair_icon| image:: /_images/icons/Crosshair.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Color",
        "desc": "\n    A color to use to stroke paths with.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "black"
      },
      {
        "name": "toggleable",
        "type": "Bool",
        "desc": "\n    Whether an on/off toggle button should appear in the toolbar for this\n    inspection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.\n    ",
        "default": true
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the crosshair tool is to track. By default, both vertical\n    and horizontal lines will be drawn. If only \"width\" is supplied, only a\n    horizontal line will be drawn. If only \"height\" is supplied, only a\n    vertical line will be drawn.\n    ",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    Stroke width in units of pixels.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    An alpha value to use to stroke paths with.\n    \n    Acceptable values are floating-point numbers between 0 and 1 (0 being\n    transparent and 1 being opaque).\n    ",
        "default": 1.0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "CumSum",
    "fullname": "bokeh.models.expressions.CumSum",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": " An expression for generating arrays by cumulatively summing a single\n    column from a ``ColumnDataSource``.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "\n    The name of a ``ColumnDataSource`` column to cumulatively sum for new values.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "include_zero",
        "type": "Bool",
        "desc": "\n    Whether to include zero at the start of the result. Note that the length\n    of the result is always the same as the input column. Therefore if this\n    property is True, then the last value of the column will not be included\n    in the sum.\n\n    .. code-block:: python\n\n        source = ColumnDataSource(data=dict(foo=[1, 2, 3, 4]))\n\n        CumSum(field='foo')\n        # -> [1, 3, 6, 10]\n\n        CumSum(field='foo', include_zero=True)\n        # -> [0, 1, 3, 6]\n\n    ",
        "default": false
      }
    ]
  },
  {
    "name": "CustomAction",
    "fullname": "bokeh.models.tools.CustomAction",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " Execute a custom action, e.g. ``CustomJS`` callback when a toolbar\n    icon is activated.\n\n    Example:\n\n        .. code-block:: python\n\n            tool = CustomAction(icon=\"icon.png\",\n                                callback=CustomJS(code='alert(\"foo\")'))\n\n            plot.add_tools(tool)\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": "Perform a Custom Action"
      },
      {
        "name": "callback",
        "type": "Nullable(Instance(Callback))",
        "desc": "\n    A Bokeh callback to execute when the custom action icon is activated.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "icon",
        "type": "Image",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "CustomJS",
    "fullname": "bokeh.models.callbacks.CustomJS",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "desc": " Execute a JavaScript function.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "\n    A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the callback's code snippet as the values of\n    named parameters to the callback.\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "code",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code to execute in the browser. The\n    code is made into the body of a function, and all of of the named objects in\n    ``args`` are available as parameters that the code can use. Additionally,\n    a ``cb_obj`` parameter contains the object that triggered the callback\n    and an optional ``cb_data`` parameter that contains any tool-specific data\n    (i.e. mouse coordinates and hovered glyph indices for the ``HoverTool``).\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "CustomJSExpr",
    "fullname": "bokeh.models.expressions.CustomJSExpr",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": " Evaluate a JavaScript function/generator.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "\n    A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the callback's code snippet as the values of\n    named parameters to the callback. There is no need to manually include the data\n    source of the associated glyph renderer, as it is available within the scope of\n    the code via `this` keyword (e.g. `this.data` will give access to raw data).\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "code",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code to execute in the browser. The code is made into\n    the body of a generator function, and all of of the named objects in ``args``\n    are available as parameters that the code can use. One can either return an\n    array-like object (array, typed array, nd-array), an iterable (which will\n    be converted to an array) or a scalar value (which will be converted into\n    an array of an appropriate length), or alternatively yield values that will\n    be collected into an array.\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "CustomJSFilter",
    "fullname": "bokeh.models.filters.CustomJSFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": " Filter data sources with a custom defined JavaScript function.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "args",
        "type": "RestrictedDict(String, AnyRef)",
        "desc": "\n    A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the callback's code snippet as the values of\n    named parameters to the callback.\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "code",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code to filter data contained in a columnar data source.\n    The code is made into the body of a function, and all of of the named objects in\n    ``args`` are available as parameters that the code can use. The variable\n    ``source`` will contain the data source that is associated with the ``CDSView`` this\n    filter is added to.\n\n    The code should either return the indices of the subset or an array of booleans\n    to use to subset data source rows.\n\n    Example:\n\n        .. code-block\n\n            code = '''\n            const indices = []\n            for (let i = 0; i <= source.data['some_column'].length; i++) {\n                if (source.data['some_column'][i] == 'some_value') {\n                    indices.push(i)\n                }\n            }\n            return indices\n            '''\n\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "CustomJSHover",
    "fullname": "bokeh.models.tools.CustomJSHover",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Define a custom formatter to apply to a hover tool field.\n\n    This model can be configured with JavaScript code to format hover tooltips.\n    The JavaScript code has access to the current value to format, some special\n    variables, and any format configured on the tooltip. The variable ``value``\n    will contain the untransformed value. The variable ``special_vars`` will\n    provide a dict with the following contents:\n\n    * ``x`` data-space x-coordinate of the mouse\n    * ``y`` data-space y-coordinate of the mouse\n    * ``sx`` screen-space x-coordinate of the mouse\n    * ``sy`` screen-space y-coordinate of the mouse\n    * ``data_x`` data-space x-coordinate of the hovered glyph\n    * ``data_y`` data-space y-coordinate of the hovered glyph\n    * ``indices`` column indices of all currently hovered glyphs\n    * ``name`` value of the ``name`` property of the hovered glyph renderer\n\n    If the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\n    then a ``segment_index`` key will also be present.\n\n    Finally, the value of the format passed in the tooltip specification is\n    available as the ``format`` variable.\n\n    Example:\n\n        As an example, the following code adds a custom formatter to format\n        WebMercator northing coordinates (in meters) as a latitude:\n\n        .. code-block:: python\n\n            lat_custom = CustomJSHover(code=\"\"\"\n                const projections = Bokeh.require(\"core/util/projections\");\n                const x = special_vars.x\n                const y = special_vars.y\n                const coords = projections.wgs84_mercator.invert(x, y)\n                return \"\" + coords[1]\n            \"\"\")\n\n            p.add_tools(HoverTool(\n                tooltips=[( 'lat','@y{custom}' )],\n                formatters={'@y':lat_custom}\n            ))\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "args",
        "type": "Dict(String, Instance(Model))",
        "desc": "\n    A mapping of names to Bokeh plot objects. These objects are made available\n    to the callback code snippet as the values of named parameters to the\n    callback.\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "code",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code to transform a single value. The variable\n    ``value`` will contain the untransformed value and can be expected to be\n    present in the function namespace at render time. Additionally, the\n    variable ``special_vars`` will be available, and will provide a dict\n    with the following contents:\n\n    * ``x`` data-space x-coordinate of the mouse\n    * ``y`` data-space y-coordinate of the mouse\n    * ``sx`` screen-space x-coordinate of the mouse\n    * ``sy`` screen-space y-coordinate of the mouse\n    * ``data_x`` data-space x-coordinate of the hovered glyph\n    * ``data_y`` data-space y-coordinate of the hovered glyph\n    * ``indices`` column indices of all currently hovered glyphs\n\n    If the hover is over a \"multi\" glyph such as ``Patches`` or ``MultiLine``\n    then a ``segment_index`` key will also be present.\n\n    Finally, the value of the format passed in the tooltip specification is\n    available as the ``format`` variable.\n\n    The snippet will be made into the body of a function and therefore requires\n    a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            return value + \" total\"\n            '''\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "CustomJSTransform",
    "fullname": "bokeh.models.transforms.CustomJSTransform",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": " Apply a custom defined transform to data.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "\n    A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the transform' code snippet as the values of\n    named parameters to the callback.\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "func",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code to transform a single value. The variable\n    ``x`` will contain the untransformed value and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            func = '''\n            return Math.floor(x) + 0.5\n            '''\n    ",
        "default": ""
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "v_func",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code to transform an array of values. The variable\n    ``xs`` will contain the untransformed array and can be expected to be\n    present in the function namespace at render time. The snippet will be\n    into the body of a function and therefore requires a return statement.\n\n    Example:\n\n        .. code-block:: javascript\n\n            v_func = '''\n            const new_xs = new Array(xs.length)\n            for(let i = 0; i < xs.length; i++) {\n                new_xs[i] = xs[i] + 0.5\n            }\n            return new_xs\n            '''\n\n    .. warning::\n        The vectorized function, ``v_func``, must return an array of the\n        same length as the input ``xs`` array.\n    ",
        "default": ""
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "CustomLabelingPolicy",
    "fullname": "bokeh.models.labeling.CustomLabelingPolicy",
    "bases": [
      "bokeh.models.labeling.LabelingPolicy"
    ],
    "desc": " Select labels based on a user-defined policy function.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing it to Bokeh.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "\n    A mapping of names to Python objects. In particular, those can be Bokeh's models.\n    These objects are made available to the labeling policy's code snippet as the\n    values of named parameters to the callback.\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "code",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code that selects a subset of labels for display.\n\n    The following arguments a are available:\n\n      * ``indices``, a set-like object containing label indices to filter\n      * ``bboxes``, an array of bounding box objects per label\n      * ``distance(i, j)``, a function computing distance (in axis dimensions)\n          between labels. If labels i and j overlap, then ``distance(i, j) <= 0``.\n      * the keys of ``args`` mapping, if any\n\n    Example:\n\n        Only display labels at even indices:\n\n        .. code-block:: javascript\n\n            code = '''\n            for (const i of indices)\n              if (i % 2 == 1)\n                indices.unset(i)\n            '''\n\n        Alternatively, as a generator:\n\n        .. code-block:: javascript\n\n            code = '''\n            for (const i of indices)\n              if (i % 2 == 0)\n                yield i\n            '''\n\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "DataAnnotation",
    "fullname": "bokeh.models.annotations.DataAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": " Base class for annotations that utilize a data source.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    Local data source to use when rendering annotations on the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      }
    ]
  },
  {
    "name": "DataCube",
    "fullname": "bokeh.models.widgets.tables.DataCube",
    "bases": [
      "bokeh.models.widgets.tables.DataTable"
    ],
    "desc": "Specialized DataTable with collapsing groups, totals, and sub-totals.\n    ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "fit_columns",
        "type": "Nullable(Bool)",
        "desc": "\n    **This is a legacy parameter.** For new development, use the\n    ``autosize_mode`` parameter.\n\n    Whether columns should be fit to the available width. This results in\n    no horizontal scrollbar showing up, but data can get unreadable if there\n    is not enough space available. If set to ``True``, each column's width is\n    understood as maximum width.\n    ",
        "default": null
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "\n    A view into the data source to use when rendering table rows. A default view\n    of the entire data source is created if a view is not passed in during\n    initialization.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "index_header",
        "type": "String",
        "desc": "\n    The column header to display for the index column, if it is present.\n    ",
        "default": "#"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "index_width",
        "type": "Int",
        "desc": "\n    The width of the index column, if present.\n    ",
        "default": 40
      },
      {
        "name": "auto_edit",
        "type": "Bool",
        "desc": "\n    When enabled editing mode is enabled after a single click on a\n    table cell.\n    ",
        "default": false
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "grouping",
        "type": "List(Instance(GroupingInfo))",
        "desc": "\n    Describe what aggregation operations used to define sub-totals and totals\n    ",
        "default": []
      },
      {
        "name": "frozen_columns",
        "type": "Nullable(Int)",
        "desc": "\n    Integer indicating the number of columns to freeze. If set the first N\n    columns will be frozen which prevents them from scrolling out of frame.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "sortable",
        "type": "Bool",
        "desc": "\n    Allows to sort table's contents. By default natural order is preserved.\n    To sort a column, click on it's header. Clicking one more time changes\n    sort direction. Use Ctrl + click to return to natural order. Use\n    Shift + click to sort multiple columns simultaneously.\n    ",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "header_row",
        "type": "Bool",
        "desc": "\n    Whether to show a header row with column names at the top of the table.\n    ",
        "default": true
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "target",
        "type": "Instance(DataSource)",
        "desc": "\n    Two column datasource (row_indices & labels) describing which rows of the\n    data cubes are expanded or collapsed\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": 400
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "row_height",
        "type": "Int",
        "desc": "\n    The height of each row in pixels.\n    ",
        "default": 25
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "editable",
        "type": "Bool",
        "desc": "\n    Allows to edit table's contents. Needs cell editors to be configured on\n    columns that are required to be editable.\n    ",
        "default": false
      },
      {
        "name": "scroll_to_selection",
        "type": "Bool",
        "desc": "\n    Whenever a selection is made on the data source, scroll the selected\n    rows into the table's viewport if none of the selected rows are already\n    in the viewport.\n    ",
        "default": true
      },
      {
        "name": "frozen_rows",
        "type": "Nullable(Int)",
        "desc": "\n    Integer indicating the number of rows to freeze. If set the first N\n    rows will be frozen which prevents them from scrolling out of frame,\n    if set to a negative value last N rows will be frozen.\n    ",
        "default": null
      },
      {
        "name": "index_position",
        "type": "Nullable(Int)",
        "desc": "\n    Where among the list of columns to insert a column displaying the row\n    index. Negative indices are supported, and specify an index position\n    from the end of the list of columns (i.e. standard Python behaviour).\n\n    To prevent the index column from being added, set to None.\n\n    If the absolute value of index_position  is larger than the length of\n    the columns, then the index will appear at the beginning or end, depending\n    on the sign.\n    ",
        "default": 0
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    The source of data for the widget.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "autosize_mode",
        "type": "Enum('fit_columns', 'fit_viewport', 'force_fit', 'none')",
        "desc": "\n    Describes the column autosizing mode with one of the following options:\n\n    ``\"fit_columns\"``\n        Compute column widths based on cell contents but ensure the\n        table fits into the available viewport. This results in no\n        horizontal scrollbar showing up, but data can get unreadable\n        if there is not enough space available.\n\n    ``\"fit_viewport\"``\n        Adjust the viewport size after computing columns widths based\n        on cell contents.\n\n    ``\"force_fit\"``\n        Fit columns into available space dividing the table width across\n        the columns equally (equivalent to `fit_columns=True`).\n        This results in no horizontal scrollbar showing up, but data\n        can get unreadable if there is not enough space available.\n\n    ``\"none\"``\n        Do not automatically compute column widths.\n    ",
        "default": "force_fit"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "columns",
        "type": "List(Instance(TableColumn))",
        "desc": "\n    The list of child column widgets.\n    ",
        "default": []
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "reorderable",
        "type": "Bool",
        "desc": "\n    Allows the reordering of a table's columns. To reorder a column,\n    click and drag a table's header to the desired location in the table.\n    The columns on either side will remain in their previous order.\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "selectable",
        "type": "Either(Bool, Enum('checkbox'))",
        "desc": "\n    Whether a table's rows can be selected or not. Using ``checkbox`` is\n    equivalent  to ``True``, but makes selection visible through a checkbox\n    for each row,  instead of highlighting rows. Multiple selection is\n    allowed and can be achieved by either clicking multiple checkboxes (if\n    enabled) or using Shift + click on rows.\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "DataModel",
    "fullname": "bokeh.model.data_model.DataModel",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "DataRange",
    "fullname": "bokeh.models.ranges.DataRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "desc": " A base class for all data range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "Either(List(Instance(Model)), Auto)",
        "desc": "\n    An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "DataRange1d",
    "fullname": "bokeh.models.ranges.DataRange1d",
    "bases": [
      "bokeh.models.ranges.DataRange"
    ],
    "desc": " An auto-fitting range in a continuous scalar dimension.\n\n    By default the ``start`` and ``end`` of the range automatically\n    assume min and max values of the data for associated renderers.\n\n    ",
    "props": [
      {
        "name": "end",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "\n    An explicitly supplied range end. If provided, will override\n    automatically computed end value.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "Either(List(Instance(Model)), Auto)",
        "desc": "\n    An explicit list of renderers to autorange against. If unset,\n    defaults to all renderers on a plot.\n    ",
        "default": []
      },
      {
        "name": "start",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "\n    An explicitly supplied range start. If provided, will override\n    automatically computed start value.\n    ",
        "default": null
      },
      {
        "name": "range_padding_units",
        "type": "Enum('percent', 'absolute')",
        "desc": "\n    Whether the ``range_padding`` should be interpreted as a percentage, or\n    as an absolute quantity. (default: ``\"percent\"``)\n    ",
        "default": "percent"
      },
      {
        "name": "max_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "\n    The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Note that ``bounds`` can impose an\n    implicit constraint on the maximum interval as well.",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta)), Tuple(Datetime, Datetime), Tuple(Nullable(Datetime), Datetime), Tuple(Datetime, Nullable(Datetime))))",
        "desc": "\n    The bounds that the range is allowed to go to. Typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    By default, the bounds will be None, allowing your plot to pan/zoom as far\n    as you want. If bounds are 'auto' they will be computed to be the same as\n    the start and end of the ``DataRange1d``.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether\n    your range is increasing or decreasing, the first item should be the\n    minimum value of the range and the second item should be the maximum.\n    Setting ``min > max`` will result in a ``ValueError``.\n\n    If you only want to constrain one end of the plot, you can set ``min`` or\n    ``max`` to ``None`` e.g. ``DataRange1d(bounds=(None, 12))``\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "min_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "\n    The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound.",
        "default": null
      },
      {
        "name": "range_padding",
        "type": "Either(Float, TimeDelta)",
        "desc": "\n    How much padding to add around the computed data bounds.\n\n    When ``range_padding_units`` is set to ``\"percent\"``, the span of the\n    range span is expanded to make the range ``range_padding`` percent larger.\n\n    When ``range_padding_units`` is set to ``\"absolute\"``, the start and end\n    of the range span are extended by the amount ``range_padding``.\n    ",
        "default": 0.1
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "flipped",
        "type": "Bool",
        "desc": "\n    Whether the range should be \"flipped\" from its normal direction when\n    auto-ranging.\n    ",
        "default": false
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that\n    have a matching value for their ``name`` attribute will be used\n    for autoranging.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      },
      {
        "name": "default_span",
        "type": "Either(Float, TimeDelta)",
        "desc": "\n    A default width for the interval, in case ``start`` is equal to ``end``\n    (if used with a log axis, default_span is in powers of 10).\n    ",
        "default": 2.0
      },
      {
        "name": "only_visible",
        "type": "Bool",
        "desc": "\n    If True, renderers that that are not visible will be excluded from automatic\n    bounds computations.\n    ",
        "default": false
      },
      {
        "name": "follow",
        "type": "Nullable(Enum('start', 'end'))",
        "desc": "\n    Configure the data to follow one or the other data extreme, with a\n    maximum range size of ``follow_interval``.\n\n    If set to ``\"start\"`` then the range will adjust so that ``start`` always\n    corresponds to the minimum data value (or maximum, if ``flipped`` is\n    ``True``).\n\n    If set to ``\"end\"`` then the range will adjust so that ``end`` always\n    corresponds to the maximum data value (or minimum, if ``flipped`` is\n    ``True``).\n\n    If set to ``None`` (default), then auto-ranging does not follow, and\n    the range will encompass both the minimum and maximum data values.\n\n    ``follow`` cannot be used with bounds, and if set, bounds will be set to\n    ``None``.\n    ",
        "default": null
      },
      {
        "name": "follow_interval",
        "type": "Nullable(Either(Float, TimeDelta))",
        "desc": "\n    If ``follow`` is set to ``\"start\"`` or ``\"end\"`` then the range will\n    always be constrained to that::\n\n         abs(r.start - r.end) <= follow_interval\n\n    is maintained.\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "DataRenderer",
    "fullname": "bokeh.models.renderers.DataRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": " An abstract base class for data renderer types (e.g. ``GlyphRenderer``, ``GraphRenderer``).\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "glyph"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "DataSource",
    "fullname": "bokeh.models.sources.DataSource",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A base class for data source types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "\n    An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\n    This is a read-only property. You may only change the attributes of this object\n    to change the selection (e.g., ``selected.indices``).\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "DataTable",
    "fullname": "bokeh.models.widgets.tables.DataTable",
    "bases": [
      "bokeh.models.widgets.tables.TableWidget"
    ],
    "desc": " Two-dimensional grid for visualization and editing large amounts\n    of data.\n\n    ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "fit_columns",
        "type": "Nullable(Bool)",
        "desc": "\n    **This is a legacy parameter.** For new development, use the\n    ``autosize_mode`` parameter.\n\n    Whether columns should be fit to the available width. This results in\n    no horizontal scrollbar showing up, but data can get unreadable if there\n    is not enough space available. If set to ``True``, each column's width is\n    understood as maximum width.\n    ",
        "default": null
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "\n    A view into the data source to use when rendering table rows. A default view\n    of the entire data source is created if a view is not passed in during\n    initialization.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "index_header",
        "type": "String",
        "desc": "\n    The column header to display for the index column, if it is present.\n    ",
        "default": "#"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "index_width",
        "type": "Int",
        "desc": "\n    The width of the index column, if present.\n    ",
        "default": 40
      },
      {
        "name": "auto_edit",
        "type": "Bool",
        "desc": "\n    When enabled editing mode is enabled after a single click on a\n    table cell.\n    ",
        "default": false
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "frozen_columns",
        "type": "Nullable(Int)",
        "desc": "\n    Integer indicating the number of columns to freeze. If set the first N\n    columns will be frozen which prevents them from scrolling out of frame.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "sortable",
        "type": "Bool",
        "desc": "\n    Allows to sort table's contents. By default natural order is preserved.\n    To sort a column, click on it's header. Clicking one more time changes\n    sort direction. Use Ctrl + click to return to natural order. Use\n    Shift + click to sort multiple columns simultaneously.\n    ",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "header_row",
        "type": "Bool",
        "desc": "\n    Whether to show a header row with column names at the top of the table.\n    ",
        "default": true
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": 400
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "row_height",
        "type": "Int",
        "desc": "\n    The height of each row in pixels.\n    ",
        "default": 25
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "editable",
        "type": "Bool",
        "desc": "\n    Allows to edit table's contents. Needs cell editors to be configured on\n    columns that are required to be editable.\n    ",
        "default": false
      },
      {
        "name": "scroll_to_selection",
        "type": "Bool",
        "desc": "\n    Whenever a selection is made on the data source, scroll the selected\n    rows into the table's viewport if none of the selected rows are already\n    in the viewport.\n    ",
        "default": true
      },
      {
        "name": "frozen_rows",
        "type": "Nullable(Int)",
        "desc": "\n    Integer indicating the number of rows to freeze. If set the first N\n    rows will be frozen which prevents them from scrolling out of frame,\n    if set to a negative value last N rows will be frozen.\n    ",
        "default": null
      },
      {
        "name": "index_position",
        "type": "Nullable(Int)",
        "desc": "\n    Where among the list of columns to insert a column displaying the row\n    index. Negative indices are supported, and specify an index position\n    from the end of the list of columns (i.e. standard Python behaviour).\n\n    To prevent the index column from being added, set to None.\n\n    If the absolute value of index_position  is larger than the length of\n    the columns, then the index will appear at the beginning or end, depending\n    on the sign.\n    ",
        "default": 0
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    The source of data for the widget.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "autosize_mode",
        "type": "Enum('fit_columns', 'fit_viewport', 'force_fit', 'none')",
        "desc": "\n    Describes the column autosizing mode with one of the following options:\n\n    ``\"fit_columns\"``\n        Compute column widths based on cell contents but ensure the\n        table fits into the available viewport. This results in no\n        horizontal scrollbar showing up, but data can get unreadable\n        if there is not enough space available.\n\n    ``\"fit_viewport\"``\n        Adjust the viewport size after computing columns widths based\n        on cell contents.\n\n    ``\"force_fit\"``\n        Fit columns into available space dividing the table width across\n        the columns equally (equivalent to `fit_columns=True`).\n        This results in no horizontal scrollbar showing up, but data\n        can get unreadable if there is not enough space available.\n\n    ``\"none\"``\n        Do not automatically compute column widths.\n    ",
        "default": "force_fit"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "columns",
        "type": "List(Instance(TableColumn))",
        "desc": "\n    The list of child column widgets.\n    ",
        "default": []
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "reorderable",
        "type": "Bool",
        "desc": "\n    Allows the reordering of a table's columns. To reorder a column,\n    click and drag a table's header to the desired location in the table.\n    The columns on either side will remain in their previous order.\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "selectable",
        "type": "Either(Bool, Enum('checkbox'))",
        "desc": "\n    Whether a table's rows can be selected or not. Using ``checkbox`` is\n    equivalent  to ``True``, but makes selection visible through a checkbox\n    for each row,  instead of highlighting rows. Multiple selection is\n    allowed and can be achieved by either clicking multiple checkboxes (if\n    enabled) or using Shift + click on rows.\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "DateEditor",
    "fullname": "bokeh.models.widgets.tables.DateEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Calendar-based date cell editor.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "DateFormatter",
    "fullname": "bokeh.models.widgets.tables.DateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "desc": " Date cell formatter.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    An optional text font style, e.g. bold, italic.\n    ",
        "default": "normal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "nan_format",
        "type": "Nullable(String)",
        "desc": "\n    Formatting to apply to NaN and None values (falls back to regular date formatting if not set).\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "format",
        "type": "Either(Enum('ATOM', 'W3C', 'RFC-3339', 'ISO-8601', 'COOKIE', 'RFC-822', 'RFC-850', 'RFC-1036', 'RFC-1123', 'RFC-2822', 'RSS', 'TIMESTAMP'), String)",
        "desc": "\n    The date format can be any standard  `strftime`_ format string, as well\n    as any of the following predefined format names:\n\n    ================================================ ================== ===================\n    Format name(s)                                   Format string      Example Output\n    ================================================ ================== ===================\n    ``ATOM`` / ``W3C`` / ``RFC-3339`` / ``ISO-8601`` ``\"%Y-%m-%d\"``     2014-03-01\n    ``COOKIE``                                       ``\"%a, %d %b %Y\"`` Sat, 01 Mar 2014\n    ``RFC-850``                                      ``\"%A, %d-%b-%y\"`` Saturday, 01-Mar-14\n    ``RFC-1123`` / ``RFC-2822``                      ``\"%a, %e %b %Y\"`` Sat, 1 Mar 2014\n    ``RSS`` / ``RFC-822`` / ``RFC-1036``             ``\"%a, %e %b %y\"`` Sat, 1 Mar 14\n    ``TIMESTAMP``                                    (ms since epoch)   1393632000000\n    ================================================ ================== ===================\n\n    Note that in the table some of the format names are synonymous, with\n    identical format names separated by slashes.\n\n    This list of supported `strftime`_ format codes is reproduced below.\n\n    %a\n        The abbreviated name of the day of the week according to the\n        current locale.\n\n    %A\n        The full name of the day of the week according to the current\n        locale.\n\n    %b\n        The abbreviated month name according to the current locale.\n\n    %B\n        The full month name according to the current locale.\n\n    %c\n        The preferred date and time representation for the current\n        locale.\n\n    %C\n        The century number (year/100) as a 2-digit integer.\n\n    %d\n        The day of the month as a decimal number (range 01 to 31).\n\n    %D\n        Equivalent to %m/%d/%y.  (Americans should note that in many\n        other countries %d/%m/%y is rather common. This means that in\n        international context this format is ambiguous and should not\n        be used.)\n\n    %e\n        Like %d, the day of the month as a decimal number, but a\n        leading zero is replaced by a space.\n\n    %f\n        Microsecond as a decimal number, zero-padded on the left (range\n        000000-999999). This is an extension to the set of directives\n        available to `timezone`_.\n\n    %F\n        Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n    %G\n        The ISO 8601 week-based year with century as a decimal number.\n        The 4-digit year corresponding to the ISO week number (see %V).\n        This has the same format and value as %Y, except that if the\n        ISO week number belongs to the previous or next year, that year\n        is used instead.\n\n    %g\n        Like %G, but without century, that is, with a 2-digit year (00-99).\n\n    %h\n        Equivalent to %b.\n\n    %H\n        The hour as a decimal number using a 24-hour clock (range 00\n        to 23).\n\n    %I\n        The hour as a decimal number using a 12-hour clock (range 01\n        to 12).\n\n    %j\n        The day of the year as a decimal number (range 001 to 366).\n\n    %k\n        The hour (24-hour clock) as a decimal number (range 0 to 23).\n        Single digits are preceded by a blank.  (See also %H.)\n\n    %l\n        The hour (12-hour clock) as a decimal number (range 1 to 12).\n        Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n    %m\n        The month as a decimal number (range 01 to 12).\n\n    %M\n        The minute as a decimal number (range 00 to 59).\n\n    %n\n        A newline character. Bokeh text does not currently support\n        newline characters.\n\n    %N\n        Nanosecond as a decimal number, zero-padded on the left (range\n        000000000-999999999). Supports a padding width specifier, i.e.\n        %3N displays 3 leftmost digits. However, this is only accurate\n        to the millisecond level of precision due to limitations of\n        `timezone`_.\n\n    %p\n        Either \"AM\" or \"PM\" according to the given time value, or the\n        corresponding strings for the current locale.  Noon is treated\n        as \"PM\" and midnight as \"AM\".\n\n    %P\n        Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n        string for the current locale.\n\n    %r\n        The time in a.m. or p.m. notation.  In the POSIX locale this\n        is equivalent to %I:%M:%S %p.\n\n    %R\n        The time in 24-hour notation (%H:%M). For a version including\n        the seconds, see %T below.\n\n    %s\n        The number of seconds since the Epoch, 1970-01-01 00:00:00\n        +0000 (UTC).\n\n    %S\n        The second as a decimal number (range 00 to 60).  (The range\n        is up to 60 to allow for occasional leap seconds.)\n\n    %t\n        A tab character. Bokeh text does not currently support tab\n        characters.\n\n    %T\n        The time in 24-hour notation (%H:%M:%S).\n\n    %u\n        The day of the week as a decimal, range 1 to 7, Monday being 1.\n        See also %w.\n\n    %U\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Sunday as the first day of\n        week 01.  See also %V and %W.\n\n    %V\n        The ISO 8601 week number (see NOTES) of the current year as a\n        decimal number, range 01 to 53, where week 1 is the first week\n        that has at least 4 days in the new year.  See also %U and %W.\n\n    %w\n        The day of the week as a decimal, range 0 to 6, Sunday being 0.\n        See also %u.\n\n    %W\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Monday as the first day of\n        week 01.\n\n    %x\n        The preferred date representation for the current locale\n        without the time.\n\n    %X\n        The preferred time representation for the current locale\n        without the date.\n\n    %y\n        The year as a decimal number without a century (range 00 to 99).\n\n    %Y\n        The year as a decimal number including the century.\n\n    %z\n        The +hhmm or -hhmm numeric timezone (that is, the hour and\n        minute offset from UTC).\n\n    %Z\n        The timezone name or abbreviation.\n\n    %%\n        A literal '%' character.\n\n    .. warning::\n        The client library BokehJS uses the `timezone`_ library to\n        format datetimes. The inclusion of the list below is based on the\n        claim that `timezone`_ makes to support \"the full compliment\n        of GNU date format specifiers.\" However, this claim has not\n        been tested exhaustively against this list. If you find formats\n        that do not function as expected, please submit a `github issue`_,\n        so that the documentation can be updated appropriately.\n\n    .. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n    .. _timezone: http://bigeasy.github.io/timezone/\n    .. _github issue: https://github.com/bokeh/bokeh/issues\n\n    ",
        "default": "ISO-8601"
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    An optional text align, i.e. left, center or right.\n    ",
        "default": "left"
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "\n    An optional text color.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "DatePicker",
    "fullname": "bokeh.models.widgets.inputs.DatePicker",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": " Calendar-based date picker widget.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_date",
        "type": "Nullable(Date)",
        "desc": "\n    Optional latest allowable date.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "position",
        "type": "Enum('auto', 'above', 'below')",
        "desc": "\n    Where the calendar is rendered relative to the input when ``inline`` is False.\n    ",
        "default": "auto"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "disabled_dates",
        "type": "List(Either(Date, Tuple(Date, Date)))",
        "desc": "\n    A list of dates of ``(start, end)`` date ranges to make unavailable for\n    selection. All other dates will be avalable.\n\n    .. note::\n        Only one of ``disabled_dates`` and ``enabled_dates`` should be specified.\n    ",
        "default": []
      },
      {
        "name": "enabled_dates",
        "type": "List(Either(Date, Tuple(Date, Date)))",
        "desc": "\n    A list of dates of ``(start, end)`` date ranges to make available for\n    selection. All other dates will be unavailable.\n\n    .. note::\n        Only one of ``disabled_dates`` and ``enabled_dates`` should be specified.\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "\n    Whether the calendar sholud be displayed inline.\n    ",
        "default": false
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "Date",
        "desc": "\n    The initial or picked date.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "min_date",
        "type": "Nullable(Date)",
        "desc": "\n    Optional earliest allowable date.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "DateRangeSlider",
    "fullname": "bokeh.models.widgets.sliders.DateRangeSlider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": " Slider-based date range selection widget. ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "\n    Whether or not show slider's value.\n    ",
        "default": true
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "\n    ",
        "default": "ltr"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Tuple(Datetime, Datetime)))",
        "desc": "\n    Initial or selected value, throttled to report only on mouseup.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "#e6e6e6"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "step",
        "type": "Int",
        "desc": "\n    The step between consecutive values.\n    ",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "\n    ",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Datetime)",
        "desc": "\n    The maximum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "start",
        "type": "NonNullable(Datetime)",
        "desc": "\n    The minimum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "\n    ",
        "default": "%d %b %Y"
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    Slider's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the slider either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "NonNullable(Tuple(Datetime, Datetime))",
        "desc": "\n    Initial or selected range.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "DateSlider",
    "fullname": "bokeh.models.widgets.sliders.DateSlider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": " Slider-based date selection widget. ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "\n    Whether or not show slider's value.\n    ",
        "default": true
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "\n    ",
        "default": "ltr"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Datetime))",
        "desc": "\n    Initial or selected value, throttled to report only on mouseup.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "#e6e6e6"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "step",
        "type": "Int",
        "desc": "\n    The step between consecutive values.\n    ",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "\n    ",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Datetime)",
        "desc": "\n    The maximum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "start",
        "type": "NonNullable(Datetime)",
        "desc": "\n    The minimum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "\n    ",
        "default": "%d %b %Y"
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    Slider's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the slider either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "NonNullable(Datetime)",
        "desc": "\n    Initial or selected value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "DatetimeAxis",
    "fullname": "bokeh.models.axes.DatetimeAxis",
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ],
    "desc": " A ``LinearAxis`` that picks nice numbers for tick locations on\n    a datetime scale. Configured with a ``DatetimeTickFormatter`` by\n    default.\n\n    ",
    "props": [
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "alphabetic"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the major tick labels should be\n    offset from the associated ticks.\n    ",
        "default": 5
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the axis line.\n    ",
        "default": []
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the axis label.\n    ",
        "default": "italic"
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "\n    A text or LaTeX notation label for the axis, displayed parallel to the axis rule.\n    ",
        "default": null
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the axis label.\n    ",
        "default": 1.0
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "\n    Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.\n    ",
        "default": "auto"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the axis labels should be offset\n    from the tick labels.\n    ",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the axis label.\n    ",
        "default": "bottom"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the axis line.\n    ",
        "default": "butt"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance\n    of ticks.\n    ",
        "default": "{\"__type__\": \"bokeh.models.formatters.DatetimeTickFormatter\"}"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": "black"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the axis line.\n    ",
        "default": "bevel"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the axis label.\n    ",
        "default": "13px"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 4
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "\n    What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.\n    ",
        "default": "horizontal"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the axis label.\n    ",
        "default": "helvetica"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the axis label.\n    ",
        "default": "#444444"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])\n\n    ",
        "default": "{\"__type__\": \"bokeh.models.tickers.DatetimeTicker\"}"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 6
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the axis line.\n    ",
        "default": 1.0
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the axis line.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "center"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the axis line.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "\n    The line width of the axis line.\n    ",
        "default": 1
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "\n    Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area.\n    ",
        "default": null
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the axis label.\n    ",
        "default": "left"
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the axis label.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend into the\n    main plot area.\n    ",
        "default": 2
      }
    ]
  },
  {
    "name": "DatetimeTickFormatter",
    "fullname": "bokeh.models.formatters.DatetimeTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": " A ``TickFormatter`` for displaying datetime values nicely across a\n    range of scales.\n\n    ``DatetimeTickFormatter`` has the following properties (listed together\n    with their default values) that can be used to control the formatting\n    of axis ticks at different scales scales:\n\n    .. code-block:: python\n\n        microseconds = ['%fus']\n\n        milliseconds = ['%3Nms', '%S.%3Ns']\n\n        seconds = ['%Ss']\n\n        minsec = [':%M:%S']\n\n        minutes = [':%M', '%Mm']\n\n        hourmin = ['%H:%M']\n\n        hours = ['%Hh', '%H:%M']\n\n        days = ['%m/%d', '%a%d']\n\n        months = ['%m/%Y', '%b %Y']\n\n        years = ['%Y']\n\n    Each scale property can be set to format or list of formats to use for\n    formatting datetime tick values that fall in in that \"time scale\".\n    By default, only the first format string passed for each time scale\n    will be used. By default, all leading zeros are stripped away from\n    the formatted labels.\n\n    This list of supported `strftime`_ formats is reproduced below.\n\n    %a\n        The abbreviated name of the day of the week according to the\n        current locale.\n\n    %A\n        The full name of the day of the week according to the current\n        locale.\n\n    %b\n        The abbreviated month name according to the current locale.\n\n    %B\n        The full month name according to the current locale.\n\n    %c\n        The preferred date and time representation for the current\n        locale.\n\n    %C\n        The century number (year/100) as a 2-digit integer.\n\n    %d\n        The day of the month as a decimal number (range 01 to 31).\n\n    %D\n        Equivalent to %m/%d/%y.  (Americans should note that in many\n        other countries %d/%m/%y is rather common. This means that in\n        international context this format is ambiguous and should not\n        be used.)\n\n    %e\n        Like %d, the day of the month as a decimal number, but a\n        leading zero is replaced by a space.\n\n    %f\n        Microsecond as a decimal number, zero-padded on the left (range\n        000000-999999). This is an extension to the set of directives\n        available to `timezone`_.\n\n    %F\n        Equivalent to %Y-%m-%d (the ISO 8601 date format).\n\n    %G\n        The ISO 8601 week-based year with century as a decimal number.\n        The 4-digit year corresponding to the ISO week number (see %V).\n        This has the same format and value as %Y, except that if the\n        ISO week number belongs to the previous or next year, that year\n        is used instead.\n\n    %g\n        Like %G, but without century, that is, with a 2-digit year (00-99).\n\n    %h\n        Equivalent to %b.\n\n    %H\n        The hour as a decimal number using a 24-hour clock (range 00\n        to 23).\n\n    %I\n        The hour as a decimal number using a 12-hour clock (range 01\n        to 12).\n\n    %j\n        The day of the year as a decimal number (range 001 to 366).\n\n    %k\n        The hour (24-hour clock) as a decimal number (range 0 to 23).\n        Single digits are preceded by a blank.  (See also %H.)\n\n    %l\n        The hour (12-hour clock) as a decimal number (range 1 to 12).\n        Single digits are preceded by a blank.  (See also %I.)  (TZ)\n\n    %m\n        The month as a decimal number (range 01 to 12).\n\n    %M\n        The minute as a decimal number (range 00 to 59).\n\n    %n\n        A newline character. Bokeh text does not currently support\n        newline characters.\n\n    %N\n        Nanosecond as a decimal number, zero-padded on the left (range\n        000000000-999999999). Supports a padding width specifier, i.e.\n        %3N displays 3 leftmost digits. However, this is only accurate\n        to the millisecond level of precision due to limitations of\n        `timezone`_.\n\n    %p\n        Either \"AM\" or \"PM\" according to the given time value, or the\n        corresponding strings for the current locale.  Noon is treated\n        as \"PM\" and midnight as \"AM\".\n\n    %P\n        Like %p but in lowercase: \"am\" or \"pm\" or a corresponding\n        string for the current locale.\n\n    %r\n        The time in a.m. or p.m. notation.  In the POSIX locale this\n        is equivalent to %I:%M:%S %p.\n\n    %R\n        The time in 24-hour notation (%H:%M). For a version including\n        the seconds, see %T below.\n\n    %s\n        The number of seconds since the Epoch, 1970-01-01 00:00:00\n        +0000 (UTC).\n\n    %S\n        The second as a decimal number (range 00 to 60).  (The range\n        is up to 60 to allow for occasional leap seconds.)\n\n    %t\n        A tab character. Bokeh text does not currently support tab\n        characters.\n\n    %T\n        The time in 24-hour notation (%H:%M:%S).\n\n    %u\n        The day of the week as a decimal, range 1 to 7, Monday being 1.\n        See also %w.\n\n    %U\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Sunday as the first day of\n        week 01.  See also %V and %W.\n\n    %V\n        The ISO 8601 week number (see NOTES) of the current year as a\n        decimal number, range 01 to 53, where week 1 is the first week\n        that has at least 4 days in the new year.  See also %U and %W.\n\n    %w\n        The day of the week as a decimal, range 0 to 6, Sunday being 0.\n        See also %u.\n\n    %W\n        The week number of the current year as a decimal number, range\n        00 to 53, starting with the first Monday as the first day of\n        week 01.\n\n    %x\n        The preferred date representation for the current locale\n        without the time.\n\n    %X\n        The preferred time representation for the current locale\n        without the date.\n\n    %y\n        The year as a decimal number without a century (range 00 to 99).\n\n    %Y\n        The year as a decimal number including the century.\n\n    %z\n        The +hhmm or -hhmm numeric timezone (that is, the hour and\n        minute offset from UTC).\n\n    %Z\n        The timezone name or abbreviation.\n\n    %%\n        A literal '%' character.\n\n    .. warning::\n        The client library BokehJS uses the `timezone`_ library to\n        format datetimes. The inclusion of the list below is based on the\n        claim that `timezone`_ makes to support \"the full compliment\n        of GNU date format specifiers.\" However, this claim has not\n        been tested exhaustively against this list. If you find formats\n        that do not function as expected, please submit a `github issue`_,\n        so that the documentation can be updated appropriately.\n\n    .. _strftime: http://man7.org/linux/man-pages/man3/strftime.3.html\n    .. _timezone: http://bigeasy.github.io/timezone/\n    .. _github issue: https://github.com/bokeh/bokeh/issues\n\n    ",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "hours",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``hours`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%Hh",
          "%H:%M"
        ]
      },
      {
        "name": "seconds",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``seconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%Ss"
        ]
      },
      {
        "name": "milliseconds",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``milliseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%3Nms",
          "%S.%3Ns"
        ]
      },
      {
        "name": "days",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``days`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%m/%d",
          "%a%d"
        ]
      },
      {
        "name": "minsec",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``minsec`` (for combined minutes and seconds) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          ":%M:%S"
        ]
      },
      {
        "name": "months",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``months`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%m/%Y",
          "%b %Y"
        ]
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "years",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``years`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%Y"
        ]
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "minutes",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``minutes`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          ":%M",
          "%Mm"
        ]
      },
      {
        "name": "hourmin",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``hourmin`` (for combined hours and minutes) range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%H:%M"
        ]
      },
      {
        "name": "microseconds",
        "type": "List(String)",
        "desc": "\n    Formats for displaying datetime values in the ``microseconds`` range.\n\n    See the :class:`~bokeh.models.formatters.DatetimeTickFormatter` help for a list of all supported formats.\n    ",
        "default": [
          "%fus"
        ]
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "DatetimeTicker",
    "fullname": "bokeh.models.tickers.DatetimeTicker",
    "bases": [
      "bokeh.models.tickers.CompositeTicker"
    ],
    "desc": " Generate nice ticks across different date and time scales.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "tickers",
        "type": "Seq(Instance(Ticker))",
        "desc": "\n    A list of Ticker objects to combine at different scales in order\n    to generate tick values. The supplied tickers should be in order.\n    Specifically, if S comes before T, then it should be the case that::\n\n        S.get_max_interval() < T.get_min_interval()\n\n    ",
        "default": [
          "{\"__type__\": \"bokeh.models.tickers.AdaptiveTicker\", \"mantissas\": [1, 2, 5], \"max_interval\": 500.0, \"num_minor_ticks\": 0}",
          "{\"__type__\": \"bokeh.models.tickers.AdaptiveTicker\", \"base\": 60, \"mantissas\": [1, 2, 5, 10, 15, 20, 30], \"max_interval\": 1800000.0, \"min_interval\": 1000.0, \"num_minor_ticks\": 0}",
          "{\"__type__\": \"bokeh.models.tickers.AdaptiveTicker\", \"base\": 24, \"mantissas\": [1, 2, 4, 6, 8, 12], \"max_interval\": 43200000.0, \"min_interval\": 3600000.0, \"num_minor_ticks\": 0}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 4, 7, 10, 13, 16, 19, 22, 25, 28]}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 8, 15, 22]}",
          "{\"__type__\": \"bokeh.models.tickers.DaysTicker\", \"days\": [1, 15]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 2, 4, 6, 8, 10]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 4, 8]}",
          "{\"__type__\": \"bokeh.models.tickers.MonthsTicker\", \"months\": [0, 6]}",
          "{\"__type__\": \"bokeh.models.tickers.YearsTicker\"}"
        ]
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "DaysTicker",
    "fullname": "bokeh.models.tickers.DaysTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "desc": " Generate ticks spaced apart by specific, even multiples of days.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "\n    The interval between adjacent ticks.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "days",
        "type": "Seq(Int)",
        "desc": "\n    The intervals of days to use.\n    ",
        "default": []
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Div",
    "fullname": "bokeh.models.widgets.markups.Div",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "desc": " A block (div) of text.\n\n    This Bokeh model corresponds to an HTML ``<div>`` element.\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_div.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "render_as_text",
        "type": "Bool",
        "desc": "\n    Whether the contents should be rendered as raw text or as interpreted HTML.\n    The default value is False, meaning contents are rendered as HTML.\n    ",
        "default": false
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "text",
        "type": "String",
        "desc": "\n    The text or HTML contents of the widget.\n\n    .. note::\n        If the HTML content contains elements which size depends on\n        on external, asynchronously loaded resources, the size of\n        the widget may be computed incorrectly. This is in particular\n        an issue with images (``<img>``). To remedy this problem, one\n        either has to set explicit dimensions using CSS properties,\n        HTML attributes or model's ``width`` and ``height`` properties,\n        or inline images' contents using data URIs.\n    ",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "\n    Raw CSS style declaration. Note this may be web browser dependent.\n    ",
        "default": {}
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "\n    Whether the contents should not be processed as TeX/LaTeX input.\n    ",
        "default": false
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Dodge",
    "fullname": "bokeh.models.transforms.Dodge",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": " Apply either fixed dodge amount to data.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "Float",
        "desc": "\n    The amount to dodge the input data.\n    ",
        "default": 0
      },
      {
        "name": "range",
        "type": "Nullable(Instance(Range))",
        "desc": "\n    When applying ``Dodge`` to categorical data values, the corresponding\n    ``FactorRange`` must be supplied as the ``range`` property.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Drag",
    "fullname": "bokeh.models.tools.Drag",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": " A base class for tools that respond to drag events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Dropdown",
    "fullname": "bokeh.models.widgets.buttons.Dropdown",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "desc": " A dropdown button.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "\n    A style for the button, signifying it's role.\n    ",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "\n    The text label for the button to display.\n    ",
        "default": "Dropdown"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "split",
        "type": "Bool",
        "desc": "\n    ",
        "default": false
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "menu",
        "type": "List(Either(Null, String, Tuple(String, Either(String, Instance(Callback)))))",
        "desc": "\n    Button's dropdown menu consisting of entries containing item's text and\n    value name. Use ``None`` as a menu separator.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "\n    An optional image appearing to the left of button's text.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "EdgeCoordinates",
    "fullname": "bokeh.models.graphs.EdgeCoordinates",
    "bases": [
      "bokeh.models.graphs.GraphCoordinates"
    ],
    "desc": "\n    Node coordinate expression obtained from ``LayoutProvider``\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "layout",
        "type": "Instance(LayoutProvider)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "EdgesAndLinkedNodes",
    "fullname": "bokeh.models.graphs.EdgesAndLinkedNodes",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "\n    With the ``EdgesAndLinkedNodes`` policy, inspection or selection of graph\n    edges will result in the inspection or selection of the edge and of the\n    linked graph nodes. There is no direct selection or inspection of graph\n    nodes.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "EdgesOnly",
    "fullname": "bokeh.models.graphs.EdgesOnly",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "\n    With the ``EdgesOnly`` policy, only graph edges are able to be selected and\n    inspected. There is no selection or inspection of graph nodes.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "EditTool",
    "fullname": "bokeh.models.tools.EditTool",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": " A base class for all interactive draw tool types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "Ellipse",
    "fullname": "bokeh.models.glyphs.Ellipse",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render ellipses.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Ellipse.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The heights of each ellipse.\n    ",
        "default": {
          "field": "height"
        }
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the ellipses.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the ellipses.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the ellipses.\n    ",
        "default": 1.0
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angle the ellipses are rotated from horizontal. [rad]\n    ",
        "default": 0.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the ellipses.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the ellipses.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the ellipses.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the ellipses.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the ellipses.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the ellipses.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the ellipses.\n    ",
        "default": "black"
      },
      {
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The widths of each ellipse.\n    ",
        "default": {
          "field": "width"
        }
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the ellipses.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the centers of the ellipses.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the centers of the ellipses.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the ellipses.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the ellipses.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the ellipses.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the ellipses.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "EqHistColorMapper",
    "fullname": "bokeh.models.mappers.EqHistColorMapper",
    "bases": [
      "bokeh.models.mappers.ScanningColorMapper"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "bins",
        "type": "Int",
        "desc": "Number of histogram bins",
        "default": 65536
      },
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "\n    A collection of glyph renderers to pool data from for establishing data metrics.\n    If empty, mapped data will be used instead.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.\n    ",
        "default": null
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette.\n    ",
        "default": null
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "\n    Color to be used if data is NaN or otherwise not mappable.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "gray"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "\n    A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "\n    The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "\n    The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Expression",
    "fullname": "bokeh.models.expressions.Expression",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for ``Expression`` models that represent a computation\n    to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block\n\n        v_compute(source: ColumnarDataSource): Arrayable {\n            # compute and return array of values\n        }\n\n    .. note::\n        If you wish for results to be cached per source and updated only if\n        the source changes, implement ``_v_compute: (source)`` instead.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "FactorRange",
    "fullname": "bokeh.models.ranges.FactorRange",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "desc": " A Range of values for a categorical dimension.\n\n    In addition to supplying ``factors`` as a keyword argument to the\n    ``FactorRange`` initializer, you may also instantiate with a sequence of\n    positional arguments:\n\n    .. code-block:: python\n\n        FactorRange(\"foo\", \"bar\") # equivalent to FactorRange(factors=[\"foo\", \"bar\"])\n\n    Users will normally supply categorical values directly:\n\n    .. code-block:: python\n\n        p.circle(x=[\"foo\", \"bar\"], ...)\n\n    BokehJS will create a mapping from ``\"foo\"`` and ``\"bar\"`` to a numerical\n    coordinate system called *synthetic coordinates*. In the simplest cases,\n    factors are separated by a distance of 1.0 in synthetic coordinates,\n    however the exact mapping from factors to synthetic coordinates is\n    affected by he padding properties as well as whether the number of levels\n    the factors have.\n\n    Users typically do not need to worry about the details of this mapping,\n    however it can be useful to fine tune positions by adding offsets. When\n    supplying factors as coordinates or values, it is possible to add an\n    offset in the synthetic coordinate space by adding a final number value\n    to a factor tuple. For example:\n\n    .. code-block:: python\n\n        p.circle(x=[(\"foo\", 0.3), ...], ...)\n\n    will position the first circle at an ``x`` position that is offset by\n    adding 0.3 to the synthetic coordinate for ``\"foo\"``.\n\n    ",
    "props": [
      {
        "name": "end",
        "type": "Readonly(Float)",
        "desc": "\n    The end of the range, in synthetic coordinates.\n\n    .. note::\n        Synthetic coordinates are only computed in the browser, based on the\n        factors and various padding properties. The value of ``end`` will only\n        be available in situations where bidirectional communication is\n        available (e.g. server, notebook).\n    ",
        "default": 0.0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "start",
        "type": "Readonly(Float)",
        "desc": "\n    The start of the range, in synthetic coordinates.\n\n        Synthetic coordinates are only computed in the browser, based on the\n        factors and various padding properties. The value of ``start`` will only\n        be available in situations where bidirectional communication is\n        available (e.g. server, notebook).\n    ",
        "default": 0.0
      },
      {
        "name": "range_padding_units",
        "type": "Enum('percent', 'absolute')",
        "desc": "\n    Whether the ``range_padding`` should be interpreted as a percentage, or\n    as an absolute quantity. (default: ``\"percent\"``)\n    ",
        "default": "percent"
      },
      {
        "name": "factor_padding",
        "type": "Float",
        "desc": "\n    How much padding to add in between all lowest-level factors. When\n    ``factor_padding`` is non-zero, every factor in every group will have the\n    padding value applied.\n    ",
        "default": 0.0
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "\n    The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval in synthetic coordinates.. Note that ``bounds``\n    can impose an implicit constraint on the maximum interval as well.\n\n    The default \"width\" of a category is 1.0 in synthetic coordinates.\n    However, the distance between factors is affected by the various\n    padding properties and whether or not factors are grouped.\n    ",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta))))",
        "desc": "\n    The bounds (in synthetic coordinates) that the range is allowed to go to.\n    Typically used to prevent the user from panning/zooming/etc away from the\n    data.\n\n    .. note::\n        Synthetic coordinates are only computed in the browser, based on the\n        factors and various padding properties. Some experimentation may be\n        required to arrive at bounds suitable for specific situations.\n\n    By default, the bounds will be None, allowing your plot to pan/zoom as far\n    as you want. If bounds are 'auto' they will be computed to be the same as\n    the start and end of the ``FactorRange``.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "subgroup_padding",
        "type": "Float",
        "desc": "\n    How much padding to add in between mid-level groups of factors. This\n    property only applies when the overall factors have three levels. For\n    example with:\n\n    .. code-block:: python\n\n        FactorRange(factors=[\n            ['foo', 'A', '1'],  ['foo', 'A', '2'], ['foo', 'A', '3'],\n            ['foo', 'B', '2'],\n            ['bar', 'A', '1'],  ['bar', 'A', '2']\n        ])\n\n    This property dictates how much padding to add between the three factors\n    in the `['foo', 'A']` group, and between the two factors in the the\n    [`bar`]\n    ",
        "default": 0.8
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "min_interval",
        "type": "Nullable(Float)",
        "desc": "\n    The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval in synthetic coordinates. If set to ``None``\n    (default), the minimum interval is not bounded.\n\n    The default \"width\" of a category is 1.0 in synthetic coordinates.\n    However, the distance between factors is affected by the various\n    padding properties and whether or not factors are grouped.\n    ",
        "default": null
      },
      {
        "name": "group_padding",
        "type": "Float",
        "desc": "\n    How much padding to add in between top-level groups of factors. This\n    property only applies when the overall range factors have either two or\n    three levels. For example, with:\n\n    .. code-block:: python\n\n        FactorRange(factors=[[\"foo\", \"1'], [\"foo\", \"2'], [\"bar\", \"1\"]])\n\n    The top level groups correspond to ``\"foo\"` and ``\"bar\"``, and the\n    group padding will be applied between the factors ``[\"foo\", \"2']`` and\n    ``[\"bar\", \"1\"]``\n    ",
        "default": 1.4
      },
      {
        "name": "range_padding",
        "type": "Float",
        "desc": "\n    How much padding to add around the outside of computed range bounds.\n\n    When ``range_padding_units`` is set to ``\"percent\"``, the span of the\n    range span is expanded to make the range ``range_padding`` percent larger.\n\n    When ``range_padding_units`` is set to ``\"absolute\"``, the start and end\n    of the range span are extended by the amount ``range_padding``.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "factors",
        "type": "FactorSeq(Either(Seq(String), Seq(Tuple(String, String)), Seq(Tuple(String, String, String))))",
        "desc": "\n    A sequence of factors to define this categorical range.\n\n    Factors may have 1, 2, or 3 levels. For 1-level factors, each factor is\n    simply a string. For example:\n\n    .. code-block:: python\n\n        FactorRange(factors=[\"sales\", \"marketing\", \"engineering\"])\n\n    defines a range with three simple factors that might represent different\n    units of a business.\n\n    For 2- and 3- level factors, each factor is a tuple of strings:\n\n    .. code-block:: python\n\n        FactorRange(factors=[\n            [\"2016\", \"sales'], [\"2016\", \"marketing'], [\"2016\", \"engineering\"],\n            [\"2017\", \"sales'], [\"2017\", \"marketing'], [\"2017\", \"engineering\"],\n        ])\n\n    defines a range with six 2-level factors that might represent the three\n    business units, grouped by year.\n\n    Note that factors and sub-factors *may only be strings*.\n\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "FileInput",
    "fullname": "bokeh.models.widgets.inputs.FileInput",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": " Present a file-chooser dialog to users and return the contents of the\n    selected files.\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "accept",
        "type": "String",
        "desc": "\n    Comma-separated list of standard HTML file input filters that restrict what\n    files the user can pick from. Values can be:\n\n    `<file extension>`:\n        Specific file extension(s) (e.g: .gif, .jpg, .png, .doc) are pickable\n\n    `audio/*`:\n        all sound files are pickable\n\n    `video/*`:\n        all video files are pickable\n\n    `image/*`:\n        all image files are pickable\n\n    `<media type>`:\n        A valid `IANA Media Type`_, with no parameters.\n\n    .. _IANA Media Type: https://www.iana.org/assignments/media-types/media-types.xhtml\n\n    .. note::\n        A bug in some versions of Chrome on macOS Big Sur may limit\n        how you can set a file input filter for those users. In those cases,\n        it is impossible to limit the user's selection to specific file\n        extensions - instead, the browser will limit users to predefined sets of\n        file types, such as ``Text/*`` or ``Image/*``. See :bokeh-issue:`10888`\n        for more information.\n    ",
        "default": ""
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "filename",
        "type": "Readonly(Either(String, List(String)))",
        "desc": "\n    The name(s) of the file or files that were loaded.\n\n    If `mulitiple` is set to False (default), this value is a single string with the\n    name of the single file that was chosen.\n\n    If `multiple` is True, this value is a list of strings, each containing the\n    name of one of the multiple files that were chosen.\n\n    This list provides the sequence of files for the respective lists in value and mime-type\n\n    .. note::\n        The full file path is not included since browsers will not provide\n        access to that information for security reasons.\n    ",
        "default": ""
      },
      {
        "name": "multiple",
        "type": "Bool",
        "desc": "\n    set multiple=False (default) for single file selection, set multiple=True if\n    selection of more than one file at a time should be possible.\n    ",
        "default": false
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "mime_type",
        "type": "Readonly(Either(String, List(String)))",
        "desc": "\n    The mime-type of the file or files that were loaded.\n\n    If `mulitiple` is set to False (default), this value is a single string with the\n    mime-type of the single file that was chosen.\n\n    If `multiple` is True, this value is a list of strings, each containing the\n    mime-type of one of the multiple files that were chosen.\n\n    The sequence of files is given by the list of filename (see below)\n    ",
        "default": ""
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "Readonly(Either(String, List(String)))",
        "desc": "\n    The base64-enconded contents of the file or files that were loaded.\n\n    If `mulitiple` is set to False (default), this value is a single string with the contents\n    of the single file that was chosen.\n\n    If `multiple` is True, this value is a list of strings, each containing the contents of\n    one of the multiple files that were chosen.\n\n    The sequence of files is given by the list of filenames (see below)\n    ",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "FillGlyph",
    "fullname": "bokeh.models.glyph.FillGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": " Glyphs with fill properties\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Filter",
    "fullname": "bokeh.models.filters.Filter",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A Filter model represents a filtering operation that returns a row-wise subset of\n    data when applied to a ``ColumnDataSource``.\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "FixedTicker",
    "fullname": "bokeh.models.tickers.FixedTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": " Generate ticks at fixed, explicitly supplied locations.\n\n    .. note::\n        The ``desired_num_ticks`` property is ignored by this Ticker.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "minor_ticks",
        "type": "Seq(Float)",
        "desc": "\n    List of minor tick locations.\n    ",
        "default": []
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "ticks",
        "type": "Seq(Float)",
        "desc": "\n    List of major tick locations.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "FreehandDrawTool",
    "fullname": "bokeh.models.tools.FreehandDrawTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": " *toolbar icon*: |freehand_draw_icon|\n\n    Allows freehand drawing of ``Patches`` and ``MultiLine`` glyphs. The glyph\n    to draw may be defined via the ``renderers`` property.\n\n    The tool will modify the columns on the data source corresponding to the\n    ``xs`` and ``ys`` values of the glyph. Any additional columns in the data\n    source will be padded with the declared ``empty_value``, when adding a new\n    point.\n\n    The supported actions include:\n\n    * Draw vertices: Click and drag to draw a line\n\n    * Delete patch/multi-line: Tap a patch/multi-line to select it then press\n      <<backspace>> key while the mouse is within the plot area.\n\n    .. |freehand_draw_icon| image:: /_images/icons/FreehandDraw.png\n        :height: 24px\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "\n    Defines a limit on the number of patches or multi-lines that can be drawn.\n    By default there is no limit on the number of objects, but if enabled the\n    oldest drawn patch or multi-line will be overwritten when the limit is\n    reached.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "FuncTickFormatter",
    "fullname": "bokeh.models.formatters.FuncTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": " Display tick values that are formatted by a user-defined function.\n\n    .. warning::\n        The explicit purpose of this Bokeh Model is to embed *raw JavaScript\n        code* for a browser to execute. If any part of the code is derived\n        from untrusted user inputs, then you must take appropriate care to\n        sanitize the user input prior to passing to Bokeh.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "args",
        "type": "Dict(String, AnyRef)",
        "desc": "\n    A mapping of names to Python objects. In particular those can be bokeh's models.\n    These objects are made available to the formatter's code snippet as the values of\n    named parameters to the callback.\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "code",
        "type": "String",
        "desc": "\n    A snippet of JavaScript code that reformats a single tick to the desired\n    format. The variable ``tick`` will contain the unformatted tick value and\n    can be expected to be present in the code snippet namespace at render time.\n\n    Additionally available variables are:\n\n      * ``ticks``, an array of all axis ticks as positioned by the ticker,\n      * ``index``, the position of ``tick`` within ``ticks``, and\n      * the keys of ``args`` mapping, if any.\n\n    Finding yourself needing to cache an expensive ``ticks``-dependent\n    computation, you can store it on the ``this`` variable.\n\n    Example:\n\n        .. code-block:: javascript\n\n            code = '''\n            this.precision = this.precision || (ticks.length > 5 ? 1 : 2);\n            return Math.floor(tick) + \" + \" + (tick % 1).toFixed(this.precision);\n            '''\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "GMapOptions",
    "fullname": "bokeh.models.map_plots.GMapOptions",
    "bases": [
      "bokeh.models.map_plots.MapOptions"
    ],
    "desc": " Options for ``GMapPlot`` objects.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "tilt",
        "type": "Int",
        "desc": "\n    `Tilt`_ angle of the map. The only allowed values are 0 and 45.\n    Only has an effect on 'satellite' and 'hybrid' map types.\n    A value of 0 causes the map to always use a 0 degree overhead view.\n    A value of 45 causes the tilt angle to switch to 45 imagery if available.\n\n    .. _Tilt: https://developers.google.com/maps/documentation/javascript/reference/3/map#MapOptions.tilt\n\n    ",
        "default": 45
      },
      {
        "name": "styles",
        "type": "NonNullable(JSON)",
        "desc": "\n    A JSON array of `map styles`_ to use for the ``GMapPlot``. Many example styles can\n    `be found here`_.\n\n    .. _map styles: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle\n    .. _be found here: https://snazzymaps.com\n\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "scale_control",
        "type": "Bool",
        "desc": "\n    Whether the Google map should display its distance scale control.\n    ",
        "default": false
      },
      {
        "name": "lat",
        "type": "NonNullable(Float)",
        "desc": "\n    The latitude where the map should be centered.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "lng",
        "type": "NonNullable(Float)",
        "desc": "\n    The longitude where the map should be centered.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "zoom",
        "type": "Int",
        "desc": "\n    The initial zoom level to use when displaying the map.\n    ",
        "default": 12
      },
      {
        "name": "map_type",
        "type": "Enum('satellite', 'roadmap', 'terrain', 'hybrid')",
        "desc": "\n    The `map type`_ to use for the ``GMapPlot``.\n\n    .. _map type: https://developers.google.com/maps/documentation/javascript/reference#MapTypeId\n\n    ",
        "default": "roadmap"
      }
    ]
  },
  {
    "name": "GMapPlot",
    "fullname": "bokeh.models.map_plots.GMapPlot",
    "bases": [
      "bokeh.models.map_plots.MapPlot"
    ],
    "desc": " A Bokeh Plot with a `Google Map`_ displayed underneath.\n\n    Data placed on this plot should be specified in decimal lat/lon coordinates\n    e.g. ``(37.123, -122.404)``. It will be automatically converted into the\n    web mercator projection to display properly over google maps tiles.\n\n    The ``api_key`` property must be configured with a Google API Key in order\n    for ``GMapPlot`` to function. The key will be stored in the Bokeh Document\n    JSON.\n\n    Note that Google Maps exert explicit control over aspect ratios at all\n    times, which imposes some limitations on ``GMapPlot``:\n\n    * Only ``Range1d`` ranges are supported. Attempting to use other range\n      types will result in an error.\n\n    * Usage of ``BoxZoomTool`` is incompatible with ``GMapPlot``. Adding a\n      ``BoxZoomTool`` will have no effect.\n\n    .. _Google Map: https://www.google.com/maps/\n\n    ",
    "props": [
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "\n    Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\n    the ratio of width over height. This property controls whether Bokeh should\n    attempt to match the (width/height) of *data space* to the (width/height)\n    in pixels of *screen space*.\n\n    Default is ``False`` which indicates that the *data* aspect ratio and the\n    *screen* aspect ratio vary independently. ``True`` indicates that the plot\n    aspect ratio of the axes will match the aspect ratio of the pixel extent\n    the axes. The end result is that a 1x1 area in data space is a square in\n    pixels, and conversely that a 1x1 pixel is a square in data units.\n\n    .. note::\n        This setting only takes effect when there are two dataranges. This\n        setting only sets the initial plot draw and subsequent resets. It is\n        possible for tools (single axis zoom, unconstrained box zoom) to\n        change the aspect ratio.\n\n    .. warning::\n        This setting is incompatible with linking dataranges across multiple\n        plots. Doing so may result in undefined behavior.\n    ",
        "default": false
      },
      {
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.\n    ",
        "default": []
      },
      {
        "name": "min_border_top",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "api_key",
        "type": "NonNullable(Base64String)",
        "desc": "\n    Google Maps API requires an API key. See https://developers.google.com/maps/documentation/javascript/get-api-key\n    for more information on how to obtain your own.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the plot background style.\n    ",
        "default": 1.0
      },
      {
        "name": "inner_width",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "\n    Where the title will be located. Titles on the left or right side\n    will be rotated.\n    ",
        "default": "above"
      },
      {
        "name": "min_border_bottom",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "min_border",
        "type": "Nullable(Int)",
        "desc": "\n    A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.\n    ",
        "default": 5
      },
      {
        "name": "outer_width",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join for the plot border outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "outline_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset for the plot border outline.\n    ",
        "default": 0
      },
      {
        "name": "api_version",
        "type": "String",
        "desc": "\n    The version of Google Maps API to use. See https://developers.google.com/maps/documentation/javascript/versions\n    for more information.\n\n    .. note::\n        Changing this value may result in broken map rendering.\n\n    ",
        "default": "3.43"
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "\n    Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.\n    ",
        "default": "canvas"
      },
      {
        "name": "y_range",
        "type": "Instance(Range)",
        "desc": "\n    The (default) data range of the vertical dimension of the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.ranges.Range1d\"}"
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "\n    A value to be given for increased aspect ratio control. This value is added\n    multiplicatively to the calculated value required for ``match_aspect``.\n    ``aspect_scale`` is defined as the ratio of width over height of the figure.\n\n    For example, a plot with ``aspect_scale`` value of 2 will result in a\n    square in *data units* to be drawn on the screen as a rectangle with a\n    pixel width twice as long as its pixel height.\n\n    .. note::\n        This setting only takes effect if ``match_aspect`` is set to ``True``.\n    ",
        "default": 1
      },
      {
        "name": "below",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area below of the plot.\n    ",
        "default": []
      },
      {
        "name": "left",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area to the left of the plot.\n    ",
        "default": []
      },
      {
        "name": "outer_height",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "outline_line_width",
        "type": "Float",
        "desc": "\n    The line width for the plot border outline.\n    ",
        "default": 1
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": "\n    What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.\n    ",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "title",
        "type": "Either(Null, Instance(Title))",
        "desc": "\n    A title for the plot. Can be a text string or a Title annotation.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.Title\"}"
      },
      {
        "name": "lod_threshold",
        "type": "Nullable(Int)",
        "desc": "\n    A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.\n    ",
        "default": 2000
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "border_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the plot border style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "min_border_left",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "toolbar_sticky",
        "type": "Bool",
        "desc": "\n    Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.\n    ",
        "default": true
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the plot background style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "min_border_right",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "\n    The toolbar associated with this plot which holds all the tools. It is\n    automatically created with the plot if necessary.\n    ",
        "default": "{\"__type__\": \"bokeh.models.tools.Toolbar\"}"
      },
      {
        "name": "frame_height",
        "type": "Nullable(Int)",
        "desc": "\n    The height of a plot frame or the inner height of a plot, excluding any\n    axes, titles, border padding, etc.\n    ",
        "default": null
      },
      {
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap for the plot border outline.\n    ",
        "default": "butt"
      },
      {
        "name": "inner_height",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "outline_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha for the plot border outline.\n    ",
        "default": 1.0
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "extra_x_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "\n    Additional named scales to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.\n\n    .. note:: This feature is experimental and may change in the short term.\n    ",
        "default": {}
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "center",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the center area (frame) of the plot.\n    ",
        "default": []
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "outline_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color for the plot border outline.\n    ",
        "default": "#e5e5e5"
      },
      {
        "name": "border_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the plot border style.\n    ",
        "default": 1.0
      },
      {
        "name": "right",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area to the right of the plot.\n    ",
        "default": []
      },
      {
        "name": "toolbar_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "\n    Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.\n    ",
        "default": "right"
      },
      {
        "name": "lod_interval",
        "type": "Int",
        "desc": "\n    Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.\n    ",
        "default": 300
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "hidpi",
        "type": "Bool",
        "desc": "\n    Whether to use HiDPI mode when available.\n    ",
        "default": true
      },
      {
        "name": "reset_policy",
        "type": "Enum('standard', 'event_only')",
        "desc": "\n    How a plot should respond to being reset. By deafult, the standard actions\n    are to clear any tool state history, return plot ranges to their original\n    values, undo all selections, and emit a ``Reset`` event. If customization\n    is desired, this property may be set to ``\"event_only\"``, which will\n    suppress all of the actions except the Reset event.\n    ",
        "default": "standard"
      },
      {
        "name": "outline_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash for the plot border outline.\n    ",
        "default": []
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "x_range",
        "type": "Instance(Range)",
        "desc": "\n    The (default) data range of the horizontal dimension of the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.ranges.Range1d\"}"
      },
      {
        "name": "above",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area above of the plot.\n    ",
        "default": []
      },
      {
        "name": "lod_timeout",
        "type": "Int",
        "desc": "\n    Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.\n    ",
        "default": 500
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "\n    Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.\n    ",
        "default": {}
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": "\n    What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.\n    ",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "\n    Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.\n    ",
        "default": {}
      },
      {
        "name": "extra_y_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "\n    Additional named scales to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.\n\n    .. note:: This feature is experimental and may change in the short term.\n    ",
        "default": {}
      },
      {
        "name": "map_options",
        "type": "Instance(GMapOptions)",
        "desc": "\n    Options for displaying the plot.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "frame_width",
        "type": "Nullable(Int)",
        "desc": "\n    The width of a plot frame or the inner width of a plot, excluding any\n    axes, titles, border padding, etc.\n    ",
        "default": null
      },
      {
        "name": "lod_factor",
        "type": "Int",
        "desc": "\n    Decimation factor to use when applying level-of-detail decimation.\n    ",
        "default": 10
      }
    ]
  },
  {
    "name": "GeoJSONDataSource",
    "fullname": "bokeh.models.sources.GeoJSONDataSource",
    "bases": [
      "bokeh.models.sources.ColumnarDataSource"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "\n    An instance of a ``SelectionPolicy`` that determines how selections are set.\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "geojson",
        "type": "NonNullable(JSON)",
        "desc": "\n    GeoJSON that contains features for plotting. Currently\n    ``GeoJSONDataSource`` can only process a ``FeatureCollection`` or\n    ``GeometryCollection``.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "\n    An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\n    This is a read-only property. You may only change the attributes of this object\n    to change the selection (e.g., ``selected.indices``).\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "GestureTool",
    "fullname": "bokeh.models.tools.GestureTool",
    "bases": [
      "bokeh.models.tools.Tool"
    ],
    "desc": " A base class for tools that respond to drag events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Glyph",
    "fullname": "bokeh.models.glyph.Glyph",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for all glyph models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "GlyphRenderer",
    "fullname": "bokeh.models.renderers.GlyphRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "\n    A view into the data source to use when rendering glyphs. A default view\n    of the entire data source is created when a view is not passed in during\n    initialization.\n\n    .. note:\n        Only the default (filterless) CDSView is compatible with glyphs that\n        have connected topology, such as Line and Patch. Setting filters on\n        views for these glyphs will result in a warning and undefined behavior.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "muted_glyph",
        "type": "Nullable(Either(Auto, Instance(Glyph)))",
        "desc": "\"\n    ",
        "default": "auto"
      },
      {
        "name": "selection_glyph",
        "type": "Nullable(Either(Auto, Instance(Glyph)))",
        "desc": "\"\n    An optional glyph used for selected points.\n\n    If set to \"auto\" then the standard glyph will be used for selected\n    points.\n    ",
        "default": "auto"
      },
      {
        "name": "muted",
        "type": "Bool",
        "desc": "\n    ",
        "default": false
      },
      {
        "name": "nonselection_glyph",
        "type": "Nullable(Either(Auto, Instance(Glyph)))",
        "desc": "\"\n    An optional glyph used for explicitly non-selected points\n    (i.e., non-selected when there are other points that are selected,\n    but not when no points at all are selected.)\n\n    If set to \"auto\" then a glyph with a low alpha value (0.1) will\n    be used for non-selected points.\n    ",
        "default": "auto"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "glyph"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hover_glyph",
        "type": "Nullable(Instance(Glyph))",
        "desc": "\n    An optional glyph used for inspected points, e.g., those that are\n    being hovered over by a ``HoverTool``.\n    ",
        "default": null
      },
      {
        "name": "data_source",
        "type": "Instance(DataSource)",
        "desc": "\n    Local data source to use when rendering glyphs on the plot.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "glyph",
        "type": "Instance(Glyph)",
        "desc": "\n    The glyph to render, in conjunction with the supplied data source\n    and ranges.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "GraphCoordinates",
    "fullname": "bokeh.models.graphs.GraphCoordinates",
    "bases": [
      "bokeh.models.expressions.CoordinateTransform"
    ],
    "desc": "\n    Abstract class for coordinate transform expression obtained from ``LayoutProvider``\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "layout",
        "type": "Instance(LayoutProvider)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "GraphHitTestPolicy",
    "fullname": "bokeh.models.graphs.GraphHitTestPolicy",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "GraphRenderer",
    "fullname": "bokeh.models.renderers.GraphRenderer",
    "bases": [
      "bokeh.models.renderers.DataRenderer"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "node_renderer",
        "type": "Instance(GlyphRenderer)",
        "desc": "\n    Instance of a ``GlyphRenderer`` containing an ``XYGlyph`` that will be rendered\n    as the graph nodes.\n    ",
        "default": "{\"__type__\": \"bokeh.models.renderers.GlyphRenderer\", \"data_source\": {\"id\": \"3220\"}, \"glyph\": {\"id\": \"3219\"}, \"view\": {\"id\": \"3222\"}}"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "glyph"
      },
      {
        "name": "selection_policy",
        "type": "Instance(GraphHitTestPolicy)",
        "desc": "\n    An instance of a ``GraphHitTestPolicy`` that provides the logic for selection\n    of graph components.\n    ",
        "default": "{\"__type__\": \"bokeh.models.graphs.NodesOnly\"}"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "edge_renderer",
        "type": "Instance(GlyphRenderer)",
        "desc": "\n    Instance of a ``GlyphRenderer`` containing an ``MultiLine`` Glyph that will be\n    rendered as the graph edges.\n    ",
        "default": "{\"__type__\": \"bokeh.models.renderers.GlyphRenderer\", \"data_source\": {\"id\": \"3236\"}, \"glyph\": {\"id\": \"3235\"}, \"view\": {\"id\": \"3238\"}}"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "layout_provider",
        "type": "Instance(LayoutProvider)",
        "desc": "\n    An instance of a ``LayoutProvider`` that supplies the layout of the network\n    graph in cartesian space.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "inspection_policy",
        "type": "Instance(GraphHitTestPolicy)",
        "desc": "\n    An instance of a ``GraphHitTestPolicy`` that provides the logic for inspection\n    of graph components.\n    ",
        "default": "{\"__type__\": \"bokeh.models.graphs.NodesOnly\"}"
      }
    ]
  },
  {
    "name": "Grid",
    "fullname": "bokeh.models.grids.Grid",
    "bases": [
      "bokeh.models.renderers.GuideRenderer"
    ],
    "desc": " Display horizontal or vertical grid lines at locations\n    given by a supplied ``Ticker``.\n\n    ",
    "props": [
      {
        "name": "minor_grid_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor Grid lines.\n    ",
        "default": "butt"
      },
      {
        "name": "grid_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the Grid lines.\n    ",
        "default": 1.0
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float))",
        "desc": "\n    Bounds for the rendered grid lines. By default, a grid will look for a\n    corresponding axis to ask for bounds. If one cannot be found, the grid\n    will span the entire visible range.\n    ",
        "default": "auto"
      },
      {
        "name": "band_hatch_scale",
        "type": "Size",
        "desc": "\n    The hatch scale of alternating bands between Grid lines.\n    ",
        "default": 12.0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "underlay"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "minor_grid_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor Grid lines.\n    ",
        "default": 1
      },
      {
        "name": "grid_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the Grid lines.\n    ",
        "default": "bevel"
      },
      {
        "name": "dimension",
        "type": "Int",
        "desc": "\n    Which dimension the Axis Grid lines will intersect. The\n    x-axis is dimension 0 (vertical Grid lines) and the y-axis\n    is dimension 1 (horizontal Grid lines).\n    ",
        "default": 0
      },
      {
        "name": "minor_grid_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor Grid lines.\n    ",
        "default": null
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "grid_line_width",
        "type": "Float",
        "desc": "\n    The line width of the Grid lines.\n    ",
        "default": 1
      },
      {
        "name": "axis",
        "type": "Nullable(Instance(Axis))",
        "desc": "\n    An Axis to delegate ticking to. If the ticker property is None, then the\n    Grid will use the ticker on the specified axis for computing where to draw\n    grid lines. Otherwise, it ticker is not None, it will take precedence over\n    any Axis.\n    ",
        "default": null
      },
      {
        "name": "grid_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the Grid lines.\n    ",
        "default": []
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "band_hatch_weight",
        "type": "Size",
        "desc": "\n    The hatch weight of alternating bands between Grid lines.\n    ",
        "default": 1.0
      },
      {
        "name": "grid_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the Grid lines.\n    ",
        "default": "#e5e5e5"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "grid_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the Grid lines.\n    ",
        "default": "butt"
      },
      {
        "name": "band_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha of alternating bands between Grid lines.\n    ",
        "default": 0
      },
      {
        "name": "ticker",
        "type": "Nullable(Instance(Ticker))",
        "desc": "\n    A Ticker to use for computing locations for the Grid lines.\n    ",
        "default": null
      },
      {
        "name": "grid_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the Grid lines.\n    ",
        "default": 0
      },
      {
        "name": "band_hatch_pattern",
        "type": "Nullable(String)",
        "desc": "\n    The hatch pattern of alternating bands between Grid lines.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "minor_grid_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor Grid lines.\n    ",
        "default": 1.0
      },
      {
        "name": "minor_grid_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor Grid lines.\n    ",
        "default": "bevel"
      },
      {
        "name": "band_hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra of alternating bands between Grid lines.\n    ",
        "default": {}
      },
      {
        "name": "band_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color of alternating bands between Grid lines.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "minor_grid_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor Grid lines.\n    ",
        "default": 0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "band_hatch_alpha",
        "type": "Alpha",
        "desc": "\n    The hatch alpha of alternating bands between Grid lines.\n    ",
        "default": 1.0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "minor_grid_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor Grid lines.\n    ",
        "default": []
      },
      {
        "name": "band_hatch_color",
        "type": "Nullable(Color)",
        "desc": "\n    The hatch color of alternating bands between Grid lines.\n    ",
        "default": "black"
      }
    ]
  },
  {
    "name": "GridBox",
    "fullname": "bokeh.models.layouts.GridBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": null,
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "cols",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), width=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "\n    Describes how the grid should maintain its columns' widths.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion.\n\n    ",
        "default": "auto"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "rows",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), height=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "\n    Describes how the grid should maintain its rows' heights.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion.\n\n    ",
        "default": "auto"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(Tuple(Instance(LayoutDOM), Int, Int), Tuple(Instance(LayoutDOM), Int, Int, Int, Int)))",
        "desc": "\n    A list of children with their associated position in the grid (row, column).\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "spacing",
        "type": "Either(Int, Tuple(Int, Int))",
        "desc": "\n    The gap between children (in pixels).\n\n    Either a number, if spacing is the same for both dimensions, or a pair\n    of numbers indicating spacing in the vertical and horizontal dimensions\n    respectively.\n    ",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Group",
    "fullname": "bokeh.models.widgets.groups.Group",
    "bases": [
      "bokeh.models.widgets.groups.AbstractGroup"
    ],
    "desc": " Abstract base class for groups with items rendered as check/radio\n    boxes.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "\n    List of text labels contained in this group.\n    ",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "\n    Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).\n    ",
        "default": false
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "GroupFilter",
    "fullname": "bokeh.models.filters.GroupFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": " A ``GroupFilter`` represents the rows of a ``ColumnDataSource`` where the values of the categorical\n    column column_name match the group variable.\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "group",
        "type": "NonNullable(String)",
        "desc": "\n    The value of the column indicating the rows of data to keep.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "column_name",
        "type": "NonNullable(String)",
        "desc": "\n    The name of the column to perform the group filtering operation on.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "GroupingInfo",
    "fullname": "bokeh.models.widgets.tables.GroupingInfo",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "Describes how to calculate totals and sub-totals\n    ",
    "props": [
      {
        "name": "getter",
        "type": "String",
        "desc": "\n    References the column which generates the unique keys of this sub-total (groupby).\n    ",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "aggregators",
        "type": "List(Instance(RowAggregator))",
        "desc": "\n    Describes how to aggregate the columns which will populate this sub-total.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "collapsed",
        "type": "Bool",
        "desc": "\n    Whether the corresponding sub-total is expanded or collapsed by default.\n    ",
        "default": false
      }
    ]
  },
  {
    "name": "GuideRenderer",
    "fullname": "bokeh.models.renderers.GuideRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": " A base class for all guide renderer types. ``GuideRenderer`` is\n    not generally useful to instantiate on its own.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "HArea",
    "fullname": "bokeh.models.glyphs.HArea",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render a horizontally directed area between two equal length sequences\n    of x-coordinates with the same y-coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/HArea.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the horizontal directed area.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the horizontal directed area.\n    ",
        "default": 1.0
      },
      {
        "name": "x2",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for the points of the other side of the area.\n    ",
        "default": {
          "field": "x2"
        }
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the horizontal directed area.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the horizontal directed area.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the horizontal directed area.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the horizontal directed area.\n    ",
        "default": "black"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the horizontal directed area.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for the points of the area.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the horizontal directed area.\n    ",
        "default": 12.0
      },
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for the points of one side of the area.\n    ",
        "default": {
          "field": "x1"
        }
      }
    ]
  },
  {
    "name": "HBar",
    "fullname": "bokeh.models.glyphs.HBar",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render horizontal bars, given a center coordinate, ``height`` and\n    (``left``, ``right``) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/HBar.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "height",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The heights of the vertical bars.\n    ",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the horizontal bars.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the horizontal bars.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the horizontal bars.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the horizontal bars.\n    ",
        "default": 1.0
      },
      {
        "name": "left",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the left edges.\n    ",
        "default": 0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the horizontal bars.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the horizontal bars.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the horizontal bars.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the horizontal bars.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the horizontal bars.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the horizontal bars.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the horizontal bars.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the centers of the horizontal bars.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the horizontal bars.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the horizontal bars.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the horizontal bars.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the horizontal bars.\n    ",
        "default": 12.0
      },
      {
        "name": "right",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the right edges.\n    ",
        "default": {
          "field": "right"
        }
      }
    ]
  },
  {
    "name": "HTMLBox",
    "fullname": "bokeh.models.layouts.HTMLBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": " A component which size is determined by its HTML content.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "HTMLTemplateFormatter",
    "fullname": "bokeh.models.widgets.tables.HTMLTemplateFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "desc": " HTML formatter using a template.\n    This uses Underscore's `template` method and syntax.  http://underscorejs.org/#template\n    The formatter has access other items in the row via the `dataContext` object passed to the formatter.\n    So, for example, if another column in the datasource was named `url`, the template could access it as:\n\n    .. code-block:: jinja\n\n        <a href=\"<%= url %>\"><%= value %></a>\n\n    To use a different set of template delimiters, pass the appropriate values for `evaluate`, `interpolate',\n    or `escape`.  See the Underscore `template` documentation for more information.  http://underscorejs.org/#template\n\n    Example: Simple HTML template to format the column value as code.\n\n    .. code-block:: python\n\n        HTMLTemplateFormatter(template='<code><%= value %></code>')\n\n    Example: Use values from other columns (`manufacturer` and `model`) to build a hyperlink.\n\n    .. code-block:: python\n\n        HTMLTemplateFormatter(template=\n            '<a href=\"https:/www.google.com/search?q=<%= manufacturer %>+<%= model %>\" target=\"_blank\"><%= value %></a>'\n        )\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "template",
        "type": "String",
        "desc": "\n    Template string to be used by Underscore's template method.\n    ",
        "default": "<%= value %>"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "HatchGlyph",
    "fullname": "bokeh.models.glyph.HatchGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": " Glyphs with Hatch properties\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "HelpTool",
    "fullname": "bokeh.models.tools.HelpTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " A button tool to provide a \"help\" link to users.\n\n    The hover text can be customized through the ``help_tooltip`` attribute\n    and the redirect site overridden as well.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "redirect",
        "type": "String",
        "desc": "\n    Site to be redirected through upon click.\n    ",
        "default": "https://docs.bokeh.org/en/latest/docs/user_guide/tools.html"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": "Click the question mark to learn more about Bokeh plot tools."
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "HexTile",
    "fullname": "bokeh.models.glyphs.HexTile",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render horizontal tiles on a regular hexagonal grid.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/HexTile.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the hex tiles.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the hex tiles.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the hex tiles.\n    ",
        "default": 1.0
      },
      {
        "name": "r",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The \"row\" axial coordinates of the tile centers.\n    ",
        "default": {
          "field": "r"
        }
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "\n\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the hex tiles.\n    ",
        "default": 1.0
      },
      {
        "name": "scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    A scale factor for individual tiles.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the hex tiles.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the hex tiles.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the hex tiles.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the hex tiles.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the hex tiles.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the hex tiles.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "orientation",
        "type": "String",
        "desc": "\n\n    ",
        "default": "pointytop"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the hex tiles.\n    ",
        "default": null
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the hex tiles.\n    ",
        "default": 1
      },
      {
        "name": "q",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The \"column\" axial coordinates of the tile centers.\n    ",
        "default": {
          "field": "q"
        }
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the hex tiles.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the hex tiles.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "Float",
        "desc": "\n    The radius (in |data units|) of the hex tiling.\n\n    The radius is always measured along the cartesian y-axis for \"pointy_top\"\n    orientation, and along the cartesian x-axis for \"flat_top\" orientation. If\n    the aspect ratio of the underlying cartesian system is not 1-1, then the\n    tiles may be \"squished\" in one direction. To ensure that the tiles are\n    always regular hexagons, consider setting the ``match_aspect`` property of\n    the plot to True.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the hex tiles.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "HoverTool",
    "fullname": "bokeh.models.tools.HoverTool",
    "bases": [
      "bokeh.models.tools.InspectTool"
    ],
    "desc": " *toolbar icon*: |hover_icon|\n\n    The hover tool is a passive inspector tool. It is generally on at all\n    times, but can be configured in the inspector's menu associated with the\n    *toolbar icon* shown above.\n\n    By default, the hover tool displays informational tooltips whenever the\n    cursor is directly over a glyph. The data to show comes from the glyph's\n    data source, and what to display is configurable with the ``tooltips``\n    property that maps display names to columns in the data source, or to\n    special known variables.\n\n    Here is an example of how to configure and use the hover tool::\n\n        # Add tooltip (name, field) pairs to the tool. See below for a\n        # description of possible field values.\n        hover.tooltips = [\n            (\"index\", \"$index\"),\n            (\"(x,y)\", \"($x, $y)\"),\n            (\"radius\", \"@radius\"),\n            (\"fill color\", \"$color[hex, swatch]:fill_color\"),\n            (\"fill color\", \"$color[hex]:fill_color\"),\n            (\"fill color\", \"$color:fill_color\"),\n            (\"fill color\", \"$swatch:fill_color\"),\n            (\"foo\", \"@foo\"),\n            (\"bar\", \"@bar\"),\n            (\"baz\", \"@baz{safe}\"),\n            (\"total\", \"@total{$0,0.00}\"\n        ]\n\n    You can also supply a ``Callback`` to the ``HoverTool``, to build custom\n    interactions on hover. In this case you may want to turn the tooltips\n    off by setting ``tooltips=None``.\n\n    .. warning::\n        When supplying a callback or custom template, the explicit intent\n        of this Bokeh Model is to embed *raw HTML and  JavaScript code* for\n        a browser to execute. If any part of the code is derived from untrusted\n        user inputs, then you must take appropriate care to sanitize the user\n        input prior to passing to Bokeh.\n\n    Hover tool does not currently work with the following glyphs:\n\n        .. hlist::\n            :columns: 3\n\n            * annulus\n            * arc\n            * bezier\n            * image_url\n            * oval\n            * patch\n            * quadratic\n            * ray\n            * step\n            * text\n\n    .. |hover_icon| image:: /_images/icons/Hover.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "formatters",
        "type": "Dict(String, Either(Enum('numeral', 'datetime', 'printf'), Instance(CustomJSHover)))",
        "desc": "\n    Specify the formatting scheme for data source columns, e.g.\n\n    .. code-block:: python\n\n        tool.formatters = {\"@date\": \"datetime\"}\n\n    will cause format specifications for the \"date\" column to be interpreted\n    according to the \"datetime\" formatting scheme. The following schemes are\n    available:\n\n    :``\"numeral\"``:\n        Provides a wide variety of formats for numbers, currency, bytes, times,\n        and percentages. The full set of formats can be found in the\n        |NumeralTickFormatter| reference documentation.\n\n    :``\"datetime\"``:\n        Provides formats for date and time values. The full set of formats is\n        listed in the |DatetimeTickFormatter| reference documentation.\n\n    :``\"printf\"``:\n        Provides formats similar to C-style \"printf\" type specifiers. See the\n        |PrintfTickFormatter| reference documentation for complete details.\n\n    If no formatter is specified for a column name, the default ``\"numeral\"``\n    formatter is assumed.\n\n    .. |NumeralTickFormatter| replace:: :class:`~bokeh.models.formatters.NumeralTickFormatter`\n    .. |DatetimeTickFormatter| replace:: :class:`~bokeh.models.formatters.DatetimeTickFormatter`\n    .. |PrintfTickFormatter| replace:: :class:`~bokeh.models.formatters.PrintfTickFormatter`\n\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "\n    An explicit list of renderers to hit test against. If unset, defaults to\n    all renderers on a plot.\n    ",
        "default": "auto"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "callback",
        "type": "Nullable(Instance(Callback))",
        "desc": "\n    A callback to run in the browser whenever the input's value changes. The\n    ``cb_data`` parameter that is available to the Callback code will contain two\n    ``HoverTool`` specific fields:\n\n    :index: object containing the indices of the hovered points in the data source\n    :geometry: object containing the coordinates of the hover cursor\n    ",
        "default": null
      },
      {
        "name": "attachment",
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')",
        "desc": "\n    Whether the tooltip should be displayed to the left or right of the cursor\n    position or above or below it, or if it should be automatically placed\n    in the horizontal or vertical dimension.\n    ",
        "default": "horizontal"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('mouse', 'hline', 'vline')",
        "desc": "\n    Whether to consider hover pointer as a point (x/y values), or a\n    span on h or v directions.\n    ",
        "default": "mouse"
      },
      {
        "name": "toggleable",
        "type": "Bool",
        "desc": "\n    Whether an on/off toggle button should appear in the toolbar for this\n    inspection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.\n    ",
        "default": true
      },
      {
        "name": "tooltips",
        "type": "Either(Null, Instance(Template), String, List(Tuple(String, String)))",
        "desc": "\n    The (name, field) pairs describing what the hover tool should\n    display when there is a hit.\n\n    Field names starting with \"@\" are interpreted as columns on the\n    data source. For instance, \"@temp\" would look up values to display\n    from the \"temp\" column of the data source.\n\n    Field names starting with \"$\" are special, known fields:\n\n    :$index: index of hovered point in the data source\n    :$name: value of the ``name`` property of the hovered glyph renderer\n    :$x: x-coordinate under the cursor in data space\n    :$y: y-coordinate under the cursor in data space\n    :$sx: x-coordinate under the cursor in screen (canvas) space\n    :$sy: y-coordinate under the cursor in screen (canvas) space\n    :$color: color data from data source, with the syntax:\n        ``$color[options]:field_name``. The available options\n        are: ``hex`` (to display the color as a hex value), ``swatch``\n        (color data from data source displayed as a small color box)\n    :$swatch: color data from data source displayed as a small color box\n\n    Field names that begin with ``@`` are associated with columns in a\n    ``ColumnDataSource``. For instance the field name ``\"@price\"`` will\n    display values from the ``\"price\"`` column whenever a hover is triggered.\n    If the hover is for the 17th glyph, then the hover tooltip will\n    correspondingly display the 17th price value.\n\n    Note that if a column name contains spaces, the it must be supplied by\n    surrounding it in curly braces, e.g. ``@{adjusted close}`` will display\n    values from a column named ``\"adjusted close\"``.\n\n    Sometimes (especially with stacked charts) it is desirable to allow the\n    name of the column be specified indirectly. The field name ``@$name`` is\n    distinguished in that it will look up the ``name`` field on the hovered\n    glyph renderer, and use that value as the column name. For instance, if\n    a user hovers with the name ``\"US East\"``, then ``@$name`` is equivalent to\n    ``@{US East}``.\n\n    By default, values for fields (e.g. ``@foo``) are displayed in a basic\n    numeric format. However it is possible to control the formatting of values\n    more precisely. Fields can be modified by appending a format specified to\n    the end in curly braces. Some examples are below.\n\n    .. code-block:: python\n\n        \"@foo{0,0.000}\"    # formats 10000.1234 as: 10,000.123\n\n        \"@foo{(.00)}\"      # formats -10000.1234 as: (10000.123)\n\n        \"@foo{($ 0.00 a)}\" # formats 1230974 as: $ 1.23 m\n\n    Specifying a format ``{safe}`` after a field name will override automatic\n    escaping of the tooltip data source. Any HTML tags in the data tags will\n    be rendered as HTML in the resulting HoverTool output. See\n    :ref:`custom_hover_tooltip` for a more detailed example.\n\n    ``None`` is also a valid value for tooltips. This turns off the\n    rendering of tooltips. This is mostly useful when supplying other\n    actions on hover via the callback property.\n\n    .. note::\n        The tooltips attribute can also be configured with a mapping type,\n        e.g. ``dict`` or ``OrderedDict``.\n\n    ",
        "default": [
          [
            "index",
            "$index"
          ],
          [
            "data (x, y)",
            "($x, $y)"
          ],
          [
            "screen (x, y)",
            "($sx, $sy)"
          ]
        ]
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "point_policy",
        "type": "Enum('snap_to_data', 'follow_mouse', 'none')",
        "desc": "\n    Whether the tooltip position should snap to the \"center\" (or other anchor)\n    position of the associated glyph, or always follow the current mouse cursor\n    position.\n    ",
        "default": "snap_to_data"
      },
      {
        "name": "line_policy",
        "type": "Enum('prev', 'next', 'nearest', 'interp', 'none')",
        "desc": "\n    When showing tooltips for lines, designates whether the tooltip position\n    should be the \"previous\" or \"next\" points on the line, the \"nearest\" point\n    to the current mouse position, or \"interpolate\" along the line to the\n    current mouse position.\n    ",
        "default": "nearest"
      },
      {
        "name": "anchor",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom')",
        "desc": "\n    If point policy is set to `\"snap_to_data\"`, `anchor` defines the attachment\n    point of a tooltip. The default is to attach to the center of a glyph.\n    ",
        "default": "center"
      },
      {
        "name": "show_arrow",
        "type": "Bool",
        "desc": "\n    Whether tooltip's arrow should be shown.\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that have a matching\n    value for their ``name`` attribute will be used.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      },
      {
        "name": "muted_policy",
        "type": "Enum('show', 'ignore')",
        "desc": "\n    Whether to avoid showing tooltips on muted glyphs.\n    ",
        "default": "show"
      }
    ]
  },
  {
    "name": "Image",
    "fullname": "bokeh.models.glyphs.Image",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": " Render images given as scalar data together with a color mapper.\n\n    In addition to the defined model properties, ``Image`` also can accept\n    a keyword argument ``palette`` in place of an explicit ``color_mapper``.\n    The value should be a list of colors, or the name of one of the built-in\n    palettes in ``bokeh.palettes``. This palette will be used to automatically\n    construct a ``ColorMapper`` model for the ``color_mapper`` property.\n\n    If both ``palette`` and ``color_mapper`` are passed, a ``ValueError``\n    exception will be raised. If neither is passed, then the ``Greys9``\n    palette will be used as a default.\n\n    ",
    "props": [
      {
        "name": "global_alpha",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    An overall opacity that each image is rendered with (in addition\n    to any alpha values applied explicitly in a color mapper).\n    ",
        "default": 1.0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "color_mapper",
        "type": "Instance(ColorMapper)",
        "desc": "\n    A ``ColorMapper`` to use to map the scalar data from ``image``\n    into RGBA values for display.\n\n    .. note::\n        The color mapping step happens on the client.\n    ",
        "default": "{\"__type__\": \"bokeh.models.mappers.LinearColorMapper\", \"palette\": [\"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#bdbdbd\", \"#d9d9d9\", \"#f0f0f0\", \"#ffffff\"]}"
      },
      {
        "name": "dw_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "dw",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.\n    ",
        "default": {
          "field": "dw"
        }
      },
      {
        "name": "dh",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.\n    ",
        "default": {
          "field": "dh"
        }
      },
      {
        "name": "image",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The arrays of scalar data for the images to be colormapped.\n    ",
        "default": {
          "field": "image"
        }
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to locate the image anchors.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to locate the image anchors.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "\n    Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.\n    ",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "dh_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      }
    ]
  },
  {
    "name": "ImageRGBA",
    "fullname": "bokeh.models.glyphs.ImageRGBA",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": " Render images given as RGBA data.\n\n    ",
    "props": [
      {
        "name": "image",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The arrays of RGBA data for the images.\n    ",
        "default": {
          "field": "image"
        }
      },
      {
        "name": "global_alpha",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    An overall opacity that each image is rendered with (in addition\n    to any inherent alpha values in the image itself).\n    ",
        "default": 1.0
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "dw_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to locate the image anchors.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to locate the image anchors.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "dw",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The widths of the plot regions that the images will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is wide.\n        That number is fixed by the image itself.\n    ",
        "default": {
          "field": "dw"
        }
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "\n    Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.\n    ",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "dh_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "dh",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The height of the plot region that the image will occupy.\n\n    .. note::\n        This is not the number of pixels that an image is tall.\n        That number is fixed by the image itself.\n    ",
        "default": {
          "field": "dh"
        }
      }
    ]
  },
  {
    "name": "ImageURL",
    "fullname": "bokeh.models.glyphs.ImageURL",
    "bases": [
      "bokeh.models.glyph.XYGlyph"
    ],
    "desc": " Render images loaded from given URLs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/ImageURL.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "global_alpha",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    An overall opacity that each image is rendered with (in addition\n    to any inherent alpha values in the image itself).\n    ",
        "default": 1.0
      },
      {
        "name": "w_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "w",
        "type": "NullDistanceSpec(units_default='data')",
        "desc": "\n    The width of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).\n    ",
        "default": null
      },
      {
        "name": "h_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to rotate the images, as measured from the horizontal.\n    ",
        "default": 0
      },
      {
        "name": "retry_attempts",
        "type": "Int",
        "desc": "\n    Number of attempts to retry loading the images from the specified URL.\n    Default is zero.\n    ",
        "default": 0
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "\n    The URLs to retrieve images from.\n\n    .. note::\n        The actual retrieving and loading of the images happens on\n        the client.\n    ",
        "default": {
          "field": "url"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "h",
        "type": "NullDistanceSpec(units_default='data')",
        "desc": "\n    The height of the plot region that the image will occupy in data space.\n\n    The default value is ``None``, in which case the image will be displayed\n    at its actual image size (regardless of the units specified here).\n    ",
        "default": null
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to locate the image anchors.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to locate the image anchors.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "\n    Whether to always round fractional pixel locations in such a way\n    as to make the images bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    images to have a gap between them, when they should appear flush.\n    ",
        "default": false
      },
      {
        "name": "retry_timeout",
        "type": "Int",
        "desc": "\n    Timeout (in ms) between retry attempts to load the image from the\n    specified URL. Default is zero ms.\n    ",
        "default": 0
      },
      {
        "name": "anchor",
        "type": "Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom')",
        "desc": "\n    What position of the image should be anchored at the `x`, `y`\n    coordinates.\n    ",
        "default": "top_left"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "ImageURLTexture",
    "fullname": "bokeh.models.textures.ImageURLTexture",
    "bases": [
      "bokeh.models.textures.Texture"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "repetition",
        "type": "Enum('repeat', 'repeat_x', 'repeat_y', 'no_repeat')",
        "desc": "\n\n    ",
        "default": "repeat"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "NonNullable(String)",
        "desc": "\n    A URL to a drawable resource like image, video, etc.\n\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "IndexFilter",
    "fullname": "bokeh.models.filters.IndexFilter",
    "bases": [
      "bokeh.models.filters.Filter"
    ],
    "desc": " An ``IndexFilter`` filters data by returning the subset of data at a given set of indices.\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "indices",
        "type": "Nullable(Seq(Int))",
        "desc": "\n    A list of integer indices representing the subset of data to select.\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "InputWidget",
    "fullname": "bokeh.models.widgets.inputs.InputWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": " Abstract base class for input widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "InspectTool",
    "fullname": "bokeh.models.tools.InspectTool",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": " A base class for tools that perform \"inspections\", e.g. ``HoverTool``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "toggleable",
        "type": "Bool",
        "desc": "\n    Whether an on/off toggle button should appear in the toolbar for this\n    inspection tool. If ``False``, the viewers of a plot will not be able to\n    toggle the inspector on or off using the toolbar.\n    ",
        "default": true
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "IntEditor",
    "fullname": "bokeh.models.widgets.tables.IntEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Spinner-based integer cell editor.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "step",
        "type": "Int",
        "desc": "\n    The major step value.\n    ",
        "default": 1
      }
    ]
  },
  {
    "name": "Interpolator",
    "fullname": "bokeh.models.transforms.Interpolator",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": " Base class for interpolator transforms.\n\n    Interpolators return the value of a function which has been evaluated\n    between specified (x, y) pairs of data.  As an example, if two control\n    point pairs were provided to the interpolator, a linear interpolaction\n    at a specific value of 'x' would result in the value of 'y' which existed\n    on the line connecting the two control points.\n\n    The control point pairs for the interpolators can be specified through either\n\n    * A literal sequence of values:\n\n    .. code-block:: python\n\n        interp = Interpolator(x=[1, 2, 3, 4, 5], y=[2, 5, 10, 12, 16])\n\n    * or a pair of columns defined in a ``ColumnDataSource`` object:\n\n    .. code-block:: python\n\n        interp = Interpolator(x=\"year\", y=\"earnings\", data=jewlery_prices))\n\n\n    This is the base class and is not intended to end use.  Please see the\n    documentation for the final derived classes (``Jitter``, ``LineraInterpolator``,\n    ``StepInterpolator``) for more information on their specific methods of\n    interpolation.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "data",
        "type": "Nullable(Instance(ColumnarDataSource))",
        "desc": "\n    Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "clip",
        "type": "Bool",
        "desc": "\n    Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.\n    ",
        "default": true
      },
      {
        "name": "y",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "\n    Dependant coordinate denoting the value of a point at a location.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "x",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "\n    Independent coordinate denoting the location of a point.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "IntersectRenderers",
    "fullname": "bokeh.models.selections.IntersectRenderers",
    "bases": [
      "bokeh.models.selections.SelectionPolicy"
    ],
    "desc": "\n    When a data source is shared between multiple renderers, a row in the data\n    source will only be selected if that point for each renderer is selected. The\n    selection is made from the intersection of hit test results from all renderers.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Jitter",
    "fullname": "bokeh.models.transforms.Jitter",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": " Apply either a uniform or normally sampled random jitter to data.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mean",
        "type": "Float",
        "desc": "\n    The central value for the random sample\n    ",
        "default": 0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "width",
        "type": "Float",
        "desc": "\n    The width (absolute for uniform distribution and sigma for the normal\n    distribution) of the random sample.\n    ",
        "default": 1
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "distribution",
        "type": "Enum('uniform', 'normal')",
        "desc": "\n    The random distribution upon which to pull the random scatter\n    ",
        "default": "uniform"
      },
      {
        "name": "range",
        "type": "Nullable(Instance(Range))",
        "desc": "\n    When applying Jitter to Categorical data values, the corresponding\n    ``FactorRange`` must be supplied as the ``range`` property.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Label",
    "fullname": "bokeh.models.annotations.Label",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "desc": " Render a single text label as an annotation.\n\n    ``Label`` will render a single text label at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties.\n\n    Additionally, the label can be rotated with the ``angle`` property.\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.\n\n    See :ref:`userguide_annotations_labels` for information on plotting labels.\n\n    ",
    "props": [
      {
        "name": "text_font",
        "type": "String",
        "desc": "\n    The text font values for the text.\n    ",
        "default": "helvetica"
      },
      {
        "name": "text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline values for the text.\n    ",
        "default": "bottom"
      },
      {
        "name": "text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size values for the text.\n    ",
        "default": "16px"
      },
      {
        "name": "angle",
        "type": "Angle",
        "desc": "\n    The angle to rotate the text, as measured from the horizontal.\n    ",
        "default": 0
      },
      {
        "name": "text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha values for the text.\n    ",
        "default": 1.0
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the text bounding box.\n    ",
        "default": null
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the text bounding box.\n    ",
        "default": 1.0
      },
      {
        "name": "y_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the y attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color values for the text.\n    ",
        "default": "#444444"
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the text bounding box.\n    ",
        "default": 1.0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "String",
        "desc": "\n    The text value to render.\n    ",
        "default": ""
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n    Acceptable values for units are ``\"rad\"`` and ``\"deg\"``\n    ",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NonNullable(Float)",
        "desc": "\n    The y-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style values for the text.\n    ",
        "default": "normal"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the text bounding box.\n    ",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the text bounding box.\n    ",
        "default": "bevel"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the text bounding box.\n    ",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "\n    The line width values for the text bounding box.\n    ",
        "default": 1
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align values for the text.\n    ",
        "default": "left"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "x_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the x attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the text bounding box.\n    ",
        "default": []
      },
      {
        "name": "x",
        "type": "NonNullable(Float)",
        "desc": "\n    The x-coordinate in screen coordinates to locate the text anchors.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "text_line_height",
        "type": "Float",
        "desc": "\n    The text line height values for the text.\n    ",
        "default": 1.2
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the text bounding box.\n    ",
        "default": null
      },
      {
        "name": "x_offset",
        "type": "Float",
        "desc": "\n    Offset value to apply to the x-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in |screen units| from a given data position.\n    ",
        "default": 0
      },
      {
        "name": "y_offset",
        "type": "Float",
        "desc": "\n    Offset value to apply to the y-coordinate.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in |screen units| from a given data position.\n    ",
        "default": 0
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "\n    Specifies whether the contents are rendered to a canvas or as a\n    HTML element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    .. note::\n        The HTML labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.\n\n    ",
        "default": "canvas"
      }
    ]
  },
  {
    "name": "LabelSet",
    "fullname": "bokeh.models.annotations.LabelSet",
    "bases": [
      "bokeh.models.annotations.DataAnnotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": " Render multiple text labels as annotations.\n\n    ``LabelSet`` will render multiple text labels at given ``x`` and ``y``\n    coordinates, which can be in either screen (pixel) space, or data (axis\n    range) space. In this case (as opposed to the single ``Label`` model),\n    ``x`` and ``y`` can also be the name of a column from a\n    :class:`~bokeh.models.sources.ColumnDataSource`, in which case the labels\n    will be \"vectorized\" using coordinate values from the specified columns.\n\n    The label can also be configured with a screen space offset from ``x`` and\n    ``y``, by using the ``x_offset`` and ``y_offset`` properties. These offsets\n    may be vectorized by giving the name of a data source column.\n\n    Additionally, the label can be rotated with the ``angle`` property (which\n    may also be a column name.)\n\n    There are also standard text, fill, and line properties to control the\n    appearance of the text, its background, as well as the rectangular bounding\n    box border.\n\n    The data source is provided by setting the ``source`` property.\n\n    ",
    "props": [
      {
        "name": "text_font",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "\n    The text font values for the text.\n    ",
        "default": {
          "value": "helvetica"
        }
      },
      {
        "name": "text_baseline",
        "type": "TextBaselineSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))",
        "desc": "\n    The text baseline values for the text.\n    ",
        "default": "bottom"
      },
      {
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)",
        "desc": "\n    The text font size values for the text.\n    ",
        "default": {
          "value": "16px"
        }
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to rotate the text, as measured from the horizontal.\n    ",
        "default": 0
      },
      {
        "name": "text_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The text alpha values for the text.\n    ",
        "default": 1.0
      },
      {
        "name": "border_line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the text bounding box.\n    ",
        "default": null
      },
      {
        "name": "background_fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the text bounding box.\n    ",
        "default": 1.0
      },
      {
        "name": "y_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the ``ys`` attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The text color values for the text.\n    ",
        "default": "#444444"
      },
      {
        "name": "border_line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the text bounding box.\n    ",
        "default": 1.0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "\n    The text values to render.\n    ",
        "default": {
          "field": "text"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to locate the text anchors.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "text_font_style",
        "type": "FontStyleSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('normal', 'italic', 'bold', 'bold italic'))), Enum('normal', 'italic', 'bold', 'bold italic'))",
        "desc": "\n    The text font style values for the text.\n    ",
        "default": "normal"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "border_line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the text bounding box.\n    ",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the text bounding box.\n    ",
        "default": "bevel"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "border_line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the text bounding box.\n    ",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the text bounding box.\n    ",
        "default": 1
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    Local data source to use when rendering annotations on the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "text_align",
        "type": "TextAlignSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('left', 'right', 'center'))), Enum('left', 'right', 'center'))",
        "desc": "\n    The text align values for the text.\n    ",
        "default": "left"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "x_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the ``xs`` attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "border_line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the text bounding box.\n    ",
        "default": []
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to locate the text anchors.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "text_line_height",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The text line height values for the text.\n    ",
        "default": 1.2
      },
      {
        "name": "background_fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the text bounding box.\n    ",
        "default": null
      },
      {
        "name": "x_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in |screen units| from a given data position.\n    ",
        "default": 0
      },
      {
        "name": "y_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in |screen units| from a given data position.\n    ",
        "default": 0
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "\n    Specifies whether the contents are rendered to a canvas or as a\n    HTML element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    .. note::\n        The HTML labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.\n\n    ",
        "default": "canvas"
      }
    ]
  },
  {
    "name": "LabelingPolicy",
    "fullname": "bokeh.models.labeling.LabelingPolicy",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for labeling policies. \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "LassoSelectTool",
    "fullname": "bokeh.models.tools.LassoSelectTool",
    "bases": [
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": " *toolbar icon*: |lasso_select_icon|\n\n    The lasso selection tool allows users to make selections on a Plot by\n    indicating a free-drawn \"lasso\" region by dragging the mouse or a finger\n    over the plot region. The end of the drag event indicates the selection\n    region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those made by\n        different selection tools. Hold down the <<shift>> key while making a\n        selection to append the new selection to any previous selection that\n        might exist.\n\n    .. |lasso_select_icon| image:: /_images/icons/LassoSelect.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "\n    Defines what should happen when a new selection is made. The default\n    is to replace the existing selection. Other options are to append to\n    the selection, intersect with it or subtract from it.\n    ",
        "default": "replace"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "overlay",
        "type": "Instance(PolyAnnotation)",
        "desc": "\n    A shaded annotation drawn to indicate the selection region.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.PolyAnnotation\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"syncable\": false, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "\n    An explicit list of renderers to hit test against. If unset, defaults to\n    all renderers on a plot.\n    ",
        "default": "auto"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that have a matching\n    value for their ``name`` attribute will be used.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      },
      {
        "name": "select_every_mousemove",
        "type": "Bool",
        "desc": "\n    Whether a selection computation should happen on every mouse event, or only\n    once, when the selection region is completed.\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "LayoutDOM",
    "fullname": "bokeh.models.layouts.LayoutDOM",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " The base class for layoutable components.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "LayoutProvider",
    "fullname": "bokeh.models.graphs.LayoutProvider",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Legend",
    "fullname": "bokeh.models.annotations.Legend",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": " Render informational legends for a plot.\n\n    See :ref:`userguide_annotations_legends` for information on plotting legends.\n\n    ",
    "props": [
      {
        "name": "title_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height values for the title text.\n    ",
        "default": 1.2
      },
      {
        "name": "title_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha values for the title text.\n    ",
        "default": 1.0
      },
      {
        "name": "label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size for the legend labels.\n    ",
        "default": "13px"
      },
      {
        "name": "inactive_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the legend item style when inactive. These control an overlay\n    on the item that can be used to obscure it when the corresponding glyph\n    is inactive (e.g. by making it semi-transparent).\n    ",
        "default": 0.7
      },
      {
        "name": "title_standoff",
        "type": "Int",
        "desc": "\n    The distance (in pixels) to separate the title from the legend.\n    ",
        "default": 5
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color for the legend border outline.\n    ",
        "default": "#e5e5e5"
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the legend background style.\n    ",
        "default": 0.95
      },
      {
        "name": "label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height for the legend labels.\n    ",
        "default": 1.2
      },
      {
        "name": "title_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align values for the title text.\n    ",
        "default": "left"
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha for the legend border outline.\n    ",
        "default": 0.5
      },
      {
        "name": "label_text_font",
        "type": "String",
        "desc": "\n    The text font for the legend labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "label_height",
        "type": "Int",
        "desc": "\n    The minimum height (in pixels) of the area that legend labels should occupy.\n    ",
        "default": 20
      },
      {
        "name": "label_width",
        "type": "Int",
        "desc": "\n    The minimum width (in pixels) of the area that legend labels should occupy.\n    ",
        "default": 20
      },
      {
        "name": "glyph_width",
        "type": "Int",
        "desc": "\n    The width (in pixels) that the rendered legend glyph should occupy.\n    ",
        "default": 20
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha for the legend labels.\n    ",
        "default": 1.0
      },
      {
        "name": "title_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style values for the title text.\n    ",
        "default": "italic"
      },
      {
        "name": "label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline for the legend labels.\n    ",
        "default": "middle"
      },
      {
        "name": "title_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline values for the title text.\n    ",
        "default": "bottom"
      },
      {
        "name": "label_standoff",
        "type": "Int",
        "desc": "\n    The distance (in pixels) to separate the label from its associated glyph.\n    ",
        "default": 5
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color for the legend labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align for the legend labels.\n    ",
        "default": "left"
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "\n    Amount of spacing (in pixels) between legend entries.\n    ",
        "default": 3
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap for the legend border outline.\n    ",
        "default": "butt"
      },
      {
        "name": "click_policy",
        "type": "Enum('none', 'hide', 'mute')",
        "desc": "\n    Defines what happens when a lengend's item is clicked.\n    ",
        "default": "none"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join for the legend border outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Int",
        "desc": "\n    Amount of margin around the legend.\n    ",
        "default": 10
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset for the legend border outline.\n    ",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "\n    The line width for the legend border outline.\n    ",
        "default": 1
      },
      {
        "name": "title_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size values for the title text.\n    ",
        "default": "13px"
      },
      {
        "name": "padding",
        "type": "Int",
        "desc": "\n    Amount of padding around the contents of the legend. Only applicable when\n    border is visible, otherwise collapses to 0.\n    ",
        "default": 10
      },
      {
        "name": "items",
        "type": "List(Instance(LegendItem))",
        "desc": "\n    A list of :class:`~bokeh.model.annotations.LegendItem` instances to be\n    rendered in the legend.\n\n    This can be specified explicitly, for instance:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            LegendItem(label=\"sin(x)\"   , renderers=[r0, r1]),\n            LegendItem(label=\"2*sin(x)\" , renderers=[r2]),\n            LegendItem(label=\"3*sin(x)\" , renderers=[r3, r4])\n        ])\n\n    But as a convenience, can also be given more compactly as a list of tuples:\n\n    .. code-block:: python\n\n        legend = Legend(items=[\n            (\"sin(x)\"   , [r0, r1]),\n            (\"2*sin(x)\" , [r2]),\n            (\"3*sin(x)\" , [r3, r4])\n        ])\n\n    where each tuple is of the form: *(label, renderers)*.\n\n    ",
        "default": []
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    The title text to render.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "glyph_height",
        "type": "Int",
        "desc": "\n    The height (in pixels) that the rendered legend glyph should occupy.\n    ",
        "default": 20
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "location",
        "type": "Either(Enum('top_left', 'top_center', 'top_right', 'center_left', 'center_center', 'center_right', 'bottom_left', 'bottom_center', 'bottom_right', 'top', 'left', 'center', 'right', 'bottom'), Tuple(Float, Float))",
        "desc": "\n    The location where the legend should draw itself. It's either one of\n    ``bokeh.core.enums.LegendLocation``'s enumerated values, or a ``(x, y)``\n    tuple indicating an absolute location absolute location in screen\n    coordinates (pixels from the bottom-left corner).\n    ",
        "default": "top_right"
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Whether the legend entries should be placed vertically or horizontally\n    when they are drawn.\n    ",
        "default": "vertical"
      },
      {
        "name": "title_text_font",
        "type": "String",
        "desc": "\n    The text font values for the title text.\n    ",
        "default": "helvetica"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash for the legend border outline.\n    ",
        "default": []
      },
      {
        "name": "title_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color values for the title text.\n    ",
        "default": "#444444"
      },
      {
        "name": "label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style for the legend labels.\n    ",
        "default": "normal"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the legend background style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "inactive_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the legend item style when inactive. These control an overlay\n    on the item that can be used to obscure it when the corresponding glyph\n    is inactive (e.g. by making it semi-transparent).\n    ",
        "default": "white"
      }
    ]
  },
  {
    "name": "LegendItem",
    "fullname": "bokeh.models.annotations.LegendItem",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the legend item should be displayed. See\n    :ref:`userguide_annotations_legends_item_visibility` in the user guide.\n    ",
        "default": true
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "label",
        "type": "NullStringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(List(String)))), Nullable(List(String)))",
        "desc": "\n    A label for this legend. Can be a string, or a column of a\n    ColumnDataSource. If ``label`` is a field, then it must\n    be in the renderers' data_source.\n    ",
        "default": null
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    A list of the glyph renderers to draw in the legend. If ``label`` is a field,\n    then all data_sources of renderers must be the same.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "index",
        "type": "Nullable(Int)",
        "desc": "\n    The column data index to use for drawing the representative items.\n\n    If None (the default), then Bokeh will automatically choose an index to\n    use. If the label does not refer to a data column name, this is typically\n    the first data point in the data source. Otherwise, if the label does\n    refer to a column name, the legend will have \"groupby\" behavior, and will\n    choose and display representative points from every \"group\" in the column.\n\n    If set to a number, Bokeh will use that number as the index in all cases.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Line",
    "fullname": "bokeh.models.glyphs.Line",
    "bases": [
      "bokeh.models.glyph.ConnectedXYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render a single line.\n\n    The ``Line`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    .. note::\n        Due to limitations in the underlying HTML canvas, it is possible that a\n        line is not drawn when one or more of its coordinates is very far outside\n        the viewport. This behavior is different for different browsers. See\n        :bokeh-issue:`11498` for more information.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Line.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the line.\n    ",
        "default": "black"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the line.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the line.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for the points of the line.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for the points of the line.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the line.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the line.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the line.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the line.\n    ",
        "default": "bevel"
      }
    ]
  },
  {
    "name": "LineEditTool",
    "fullname": "bokeh.models.tools.LineEditTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": " *toolbar icon*: |line_edit_icon|\n\n    The LineEditTool allows editing the intersection points of one or more ``Line`` glyphs.\n    Glyphs to be edited are defined via the ``renderers``\n    property and a renderer for the intersections is set via the ``intersection_renderer``\n    property (must render a point-like Glyph (a subclass of ``XYGlyph``).\n\n    The tool will modify the columns on the data source corresponding to the\n    ``x`` and ``y`` values of the glyph. Any additional columns in the data\n    source will be padded with the declared``empty_value``, when adding a new\n    point.\n\n    The supported actions include:\n\n    * Show intersections: Double tap an existing line\n\n    * Move point: Drag an existing point and let go of the mouse button to\n      release it.\n\n    .. |line_edit_icon| image:: /_images/icons/LineEdit.png\n        :height: 24px\n     ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions this edit tool is constrained to act in. By default\n    the line edit tool allows moving points in any dimension, but can be\n    configured to only allow horizontal movement across the width of the\n    plot, or vertical across the height of the plot.\n    ",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "intersection_renderer",
        "type": "Instance(GlyphRenderer)",
        "desc": "\n    The renderer used to render the intersections of a selected line\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "LineGlyph",
    "fullname": "bokeh.models.glyph.LineGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": " Glyphs with line properties\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "LinearAxis",
    "fullname": "bokeh.models.axes.LinearAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "desc": " An axis that picks nice numbers for tick locations on a\n    linear scale. Configured with a ``BasicTickFormatter`` by default.\n\n    ",
    "props": [
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "alphabetic"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the major tick labels should be\n    offset from the associated ticks.\n    ",
        "default": 5
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the axis line.\n    ",
        "default": []
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the axis label.\n    ",
        "default": "italic"
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "\n    A text or LaTeX notation label for the axis, displayed parallel to the axis rule.\n    ",
        "default": null
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the axis label.\n    ",
        "default": 1.0
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "\n    Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.\n    ",
        "default": "auto"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the axis labels should be offset\n    from the tick labels.\n    ",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the axis label.\n    ",
        "default": "bottom"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the axis line.\n    ",
        "default": "butt"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance\n    of ticks.\n    ",
        "default": "{\"__type__\": \"bokeh.models.formatters.BasicTickFormatter\"}"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": "black"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the axis line.\n    ",
        "default": "bevel"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the axis label.\n    ",
        "default": "13px"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 4
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "\n    What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.\n    ",
        "default": "horizontal"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the axis label.\n    ",
        "default": "helvetica"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the axis label.\n    ",
        "default": "#444444"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])\n\n    ",
        "default": "{\"__type__\": \"bokeh.models.tickers.BasicTicker\"}"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 6
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the axis line.\n    ",
        "default": 1.0
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the axis line.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "center"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the axis line.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "\n    The line width of the axis line.\n    ",
        "default": 1
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "\n    Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area.\n    ",
        "default": null
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the axis label.\n    ",
        "default": "left"
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the axis label.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend into the\n    main plot area.\n    ",
        "default": 2
      }
    ]
  },
  {
    "name": "LinearColorMapper",
    "fullname": "bokeh.models.mappers.LinearColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "desc": " Map numbers in a range [*low*, *high*] linearly into a sequence of\n    colors (a palette).\n\n    For example, if the range is [0, 99] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n             x < 0  : 'red'     # values < low are clamped\n        0 <= x < 33 : 'red'\n       33 <= x < 66 : 'green'\n       66 <= x < 99 : 'blue'\n       99 <= x      : 'blue'    # values > high are clamped\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "\n    A collection of glyph renderers to pool data from for establishing data metrics.\n    If empty, mapped data will be used instead.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.\n    ",
        "default": null
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette.\n    ",
        "default": null
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "\n    Color to be used if data is NaN or otherwise not mappable.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "gray"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "\n    A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "\n    The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "\n    The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "LinearInterpolator",
    "fullname": "bokeh.models.transforms.LinearInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "desc": " Compute a linear interpolation between the control points provided through\n    the ``x``, ``y``, and ``data`` parameters.\n\n    ",
    "props": [
      {
        "name": "data",
        "type": "Nullable(Instance(ColumnarDataSource))",
        "desc": "\n    Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "clip",
        "type": "Bool",
        "desc": "\n    Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.\n    ",
        "default": true
      },
      {
        "name": "y",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "\n    Dependant coordinate denoting the value of a point at a location.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "x",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "\n    Independent coordinate denoting the location of a point.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "LinearScale",
    "fullname": "bokeh.models.scales.LinearScale",
    "bases": [
      "bokeh.models.scales.ContinuousScale"
    ],
    "desc": " Represent a linear scale transformation between continuous ranges.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "LogAxis",
    "fullname": "bokeh.models.axes.LogAxis",
    "bases": [
      "bokeh.models.axes.ContinuousAxis"
    ],
    "desc": " An axis that picks nice numbers for tick locations on a\n    log scale. Configured with a ``LogTickFormatter`` by default.\n\n    ",
    "props": [
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "alphabetic"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the major tick labels should be\n    offset from the associated ticks.\n    ",
        "default": 5
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the axis line.\n    ",
        "default": []
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the axis label.\n    ",
        "default": "italic"
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "\n    A text or LaTeX notation label for the axis, displayed parallel to the axis rule.\n    ",
        "default": null
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the axis label.\n    ",
        "default": 1.0
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "\n    Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.\n    ",
        "default": "auto"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the axis labels should be offset\n    from the tick labels.\n    ",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the axis label.\n    ",
        "default": "bottom"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the axis line.\n    ",
        "default": "butt"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance\n    of ticks.\n    ",
        "default": "{\"__type__\": \"bokeh.models.formatters.LogTickFormatter\"}"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": "black"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the axis line.\n    ",
        "default": "bevel"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the axis label.\n    ",
        "default": "13px"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 4
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "\n    What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.\n    ",
        "default": "horizontal"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the axis label.\n    ",
        "default": "helvetica"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the axis label.\n    ",
        "default": "#444444"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])\n\n    ",
        "default": "{\"__type__\": \"bokeh.models.tickers.LogTicker\"}"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 6
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the axis line.\n    ",
        "default": 1.0
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the axis line.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "center"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the axis line.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "\n    The line width of the axis line.\n    ",
        "default": 1
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "\n    Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area.\n    ",
        "default": null
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the axis label.\n    ",
        "default": "left"
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the axis label.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend into the\n    main plot area.\n    ",
        "default": 2
      }
    ]
  },
  {
    "name": "LogColorMapper",
    "fullname": "bokeh.models.mappers.LogColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "desc": " Map numbers in a range [*low*, *high*] into a sequence of colors\n    (a palette) on a natural logarithm scale.\n\n    For example, if the range is [0, 25] and the palette is\n    ``['red', 'green', 'blue']``, the values would be mapped as follows::\n\n                x < 0     : 'red'     # values < low are clamped\n       0     <= x < 2.72  : 'red'     # math.e ** 1\n       2.72  <= x < 7.39  : 'green'   # math.e ** 2\n       7.39  <= x < 20.09 : 'blue'    # math.e ** 3\n       20.09 <= x         : 'blue'    # values > high are clamped\n\n    .. warning::\n        The ``LogColorMapper`` only works for images with scalar values that are\n        non-negative.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "\n    A collection of glyph renderers to pool data from for establishing data metrics.\n    If empty, mapped data will be used instead.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.\n    ",
        "default": null
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette.\n    ",
        "default": null
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "\n    Color to be used if data is NaN or otherwise not mappable.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "gray"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "\n    A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "\n    The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "\n    The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "LogScale",
    "fullname": "bokeh.models.scales.LogScale",
    "bases": [
      "bokeh.models.scales.ContinuousScale"
    ],
    "desc": " Represent a log scale transformation between continuous ranges.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "LogTickFormatter",
    "fullname": "bokeh.models.formatters.LogTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": " Display tick values from continuous ranges as powers\n    of some base.\n\n    Most often useful in conjunction with a ``LogTicker``.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "min_exponent",
        "type": "Int",
        "desc": "\n    Minimum exponent to format in scientific notation. If not zero\n    all ticks in range from base^-min_expont to base^min_exponent\n    are displayed without exponential notation.\n    ",
        "default": 0
      },
      {
        "name": "ticker",
        "type": "Nullable(Instance(Ticker))",
        "desc": "\n    The corresponding ``LogTicker``, used to determine the correct\n    base to use. If unset, the formatter will use base 10 as a default.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "LogTicker",
    "fullname": "bokeh.models.tickers.LogTicker",
    "bases": [
      "bokeh.models.tickers.AdaptiveTicker"
    ],
    "desc": " Generate ticks on a log scale.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "base",
        "type": "Float",
        "desc": "\n    The multiplier to use for scaling mantissas.\n    ",
        "default": 10.0
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "\n    The smallest allowable interval between two adjacent ticks.\n    ",
        "default": 0.0
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "\n    The acceptable list numbers to generate multiples of.\n    ",
        "default": [
          1,
          5
        ]
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "\n    The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "MapOptions",
    "fullname": "bokeh.models.map_plots.MapOptions",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Abstract base class for map options' models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "lat",
        "type": "NonNullable(Float)",
        "desc": "\n    The latitude where the map should be centered.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "lng",
        "type": "NonNullable(Float)",
        "desc": "\n    The longitude where the map should be centered.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "zoom",
        "type": "Int",
        "desc": "\n    The initial zoom level to use when displaying the map.\n    ",
        "default": 12
      }
    ]
  },
  {
    "name": "MapPlot",
    "fullname": "bokeh.models.map_plots.MapPlot",
    "bases": [
      "bokeh.models.plots.Plot"
    ],
    "desc": " Abstract base class for map plot models.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "\n    Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\n    the ratio of width over height. This property controls whether Bokeh should\n    attempt to match the (width/height) of *data space* to the (width/height)\n    in pixels of *screen space*.\n\n    Default is ``False`` which indicates that the *data* aspect ratio and the\n    *screen* aspect ratio vary independently. ``True`` indicates that the plot\n    aspect ratio of the axes will match the aspect ratio of the pixel extent\n    the axes. The end result is that a 1x1 area in data space is a square in\n    pixels, and conversely that a 1x1 pixel is a square in data units.\n\n    .. note::\n        This setting only takes effect when there are two dataranges. This\n        setting only sets the initial plot draw and subsequent resets. It is\n        possible for tools (single axis zoom, unconstrained box zoom) to\n        change the aspect ratio.\n\n    .. warning::\n        This setting is incompatible with linking dataranges across multiple\n        plots. Doing so may result in undefined behavior.\n    ",
        "default": false
      },
      {
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.\n    ",
        "default": []
      },
      {
        "name": "min_border_top",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the plot background style.\n    ",
        "default": 1.0
      },
      {
        "name": "inner_width",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "\n    Where the title will be located. Titles on the left or right side\n    will be rotated.\n    ",
        "default": "above"
      },
      {
        "name": "min_border_bottom",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "min_border",
        "type": "Nullable(Int)",
        "desc": "\n    A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.\n    ",
        "default": 5
      },
      {
        "name": "outer_width",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join for the plot border outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "outline_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset for the plot border outline.\n    ",
        "default": 0
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "\n    Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.\n    ",
        "default": "canvas"
      },
      {
        "name": "y_range",
        "type": "Instance(Range)",
        "desc": "\n    The (default) data range of the vertical dimension of the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "\n    A value to be given for increased aspect ratio control. This value is added\n    multiplicatively to the calculated value required for ``match_aspect``.\n    ``aspect_scale`` is defined as the ratio of width over height of the figure.\n\n    For example, a plot with ``aspect_scale`` value of 2 will result in a\n    square in *data units* to be drawn on the screen as a rectangle with a\n    pixel width twice as long as its pixel height.\n\n    .. note::\n        This setting only takes effect if ``match_aspect`` is set to ``True``.\n    ",
        "default": 1
      },
      {
        "name": "below",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area below of the plot.\n    ",
        "default": []
      },
      {
        "name": "left",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area to the left of the plot.\n    ",
        "default": []
      },
      {
        "name": "outer_height",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "outline_line_width",
        "type": "Float",
        "desc": "\n    The line width for the plot border outline.\n    ",
        "default": 1
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": "\n    What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.\n    ",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "title",
        "type": "Either(Null, Instance(Title))",
        "desc": "\n    A title for the plot. Can be a text string or a Title annotation.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.Title\"}"
      },
      {
        "name": "lod_threshold",
        "type": "Nullable(Int)",
        "desc": "\n    A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.\n    ",
        "default": 2000
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "border_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the plot border style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "min_border_left",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "toolbar_sticky",
        "type": "Bool",
        "desc": "\n    Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.\n    ",
        "default": true
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the plot background style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "min_border_right",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "\n    The toolbar associated with this plot which holds all the tools. It is\n    automatically created with the plot if necessary.\n    ",
        "default": "{\"__type__\": \"bokeh.models.tools.Toolbar\"}"
      },
      {
        "name": "frame_height",
        "type": "Nullable(Int)",
        "desc": "\n    The height of a plot frame or the inner height of a plot, excluding any\n    axes, titles, border padding, etc.\n    ",
        "default": null
      },
      {
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap for the plot border outline.\n    ",
        "default": "butt"
      },
      {
        "name": "inner_height",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "outline_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha for the plot border outline.\n    ",
        "default": 1.0
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "extra_x_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "\n    Additional named scales to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.\n\n    .. note:: This feature is experimental and may change in the short term.\n    ",
        "default": {}
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "center",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the center area (frame) of the plot.\n    ",
        "default": []
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "outline_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color for the plot border outline.\n    ",
        "default": "#e5e5e5"
      },
      {
        "name": "border_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the plot border style.\n    ",
        "default": 1.0
      },
      {
        "name": "right",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area to the right of the plot.\n    ",
        "default": []
      },
      {
        "name": "toolbar_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "\n    Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.\n    ",
        "default": "right"
      },
      {
        "name": "lod_interval",
        "type": "Int",
        "desc": "\n    Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.\n    ",
        "default": 300
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "hidpi",
        "type": "Bool",
        "desc": "\n    Whether to use HiDPI mode when available.\n    ",
        "default": true
      },
      {
        "name": "reset_policy",
        "type": "Enum('standard', 'event_only')",
        "desc": "\n    How a plot should respond to being reset. By deafult, the standard actions\n    are to clear any tool state history, return plot ranges to their original\n    values, undo all selections, and emit a ``Reset`` event. If customization\n    is desired, this property may be set to ``\"event_only\"``, which will\n    suppress all of the actions except the Reset event.\n    ",
        "default": "standard"
      },
      {
        "name": "outline_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash for the plot border outline.\n    ",
        "default": []
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "x_range",
        "type": "Instance(Range)",
        "desc": "\n    The (default) data range of the horizontal dimension of the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "above",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area above of the plot.\n    ",
        "default": []
      },
      {
        "name": "lod_timeout",
        "type": "Int",
        "desc": "\n    Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.\n    ",
        "default": 500
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "\n    Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.\n    ",
        "default": {}
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": "\n    What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.\n    ",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "\n    Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.\n    ",
        "default": {}
      },
      {
        "name": "extra_y_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "\n    Additional named scales to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.\n\n    .. note:: This feature is experimental and may change in the short term.\n    ",
        "default": {}
      },
      {
        "name": "frame_width",
        "type": "Nullable(Int)",
        "desc": "\n    The width of a plot frame or the inner width of a plot, excluding any\n    axes, titles, border padding, etc.\n    ",
        "default": null
      },
      {
        "name": "lod_factor",
        "type": "Int",
        "desc": "\n    Decimation factor to use when applying level-of-detail decimation.\n    ",
        "default": 10
      }
    ]
  },
  {
    "name": "Mapper",
    "fullname": "bokeh.models.mappers.Mapper",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": " Base class for mappers.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Marker",
    "fullname": "bokeh.models.glyphs.Marker",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Base class for glyphs that are simple markers with line and\n    fill properties, located at an (x, y) location with a specified\n    size.\n\n    .. note::\n        For simplicity, all markers have both line and fill properties\n        declared, however some marker types (`asterisk`, `cross`, `x`)\n        only draw lines. For these markers, the fill values are simply\n        ignored.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "hit_dilation",
        "type": "Size",
        "desc": "\n    The factor by which to dilate the hit radius\n    which is responsible for defining the range in which a\n    marker responds to interactions with the Hover and Tap\n    tools.\n    ",
        "default": 1.0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the markers.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the markers.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to rotate the markers.\n    ",
        "default": 0.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the markers.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the markers.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the markers.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the markers.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the markers.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the markers.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-axis coordinates for the center of the markers.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-axis coordinates for the center of the markers.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the markers.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the markers.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "SizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size (diameter) values for the markers in screen space units.\n    ",
        "default": 4
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the markers.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "Markup",
    "fullname": "bokeh.models.widgets.markups.Markup",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": " Base class for Bokeh models that represent HTML markup elements.\n\n    Markups include e.g., ``<div>``, ``<p>``, and ``<pre>``.\n\n    Content can be interpreted as `TeX and LaTeX input`_ when rendering as HTML.\n    TeX/LaTeX processing can be disabled by setting ``disable_math`` to True.\n\n    .. _`TeX and LaTeX input`: https://docs.mathjax.org/en/latest/basic/mathematics.html#tex-and-latex-input\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "text",
        "type": "String",
        "desc": "\n    The text or HTML contents of the widget.\n\n    .. note::\n        If the HTML content contains elements which size depends on\n        on external, asynchronously loaded resources, the size of\n        the widget may be computed incorrectly. This is in particular\n        an issue with images (``<img>``). To remedy this problem, one\n        either has to set explicit dimensions using CSS properties,\n        HTML attributes or model's ``width`` and ``height`` properties,\n        or inline images' contents using data URIs.\n    ",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "\n    Raw CSS style declaration. Note this may be web browser dependent.\n    ",
        "default": {}
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "\n    Whether the contents should not be processed as TeX/LaTeX input.\n    ",
        "default": false
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "MathML",
    "fullname": "bokeh.models.text.MathML",
    "bases": [
      "bokeh.models.text.MathText"
    ],
    "desc": "\n    Render mathematical content using `MathML <https://www.w3.org/Math/>`_\n    notation. See :ref:`userguide_styling_math` in the |user guide| for more\n    information.\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "\n    The text value to render.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "MathText",
    "fullname": "bokeh.models.text.MathText",
    "bases": [
      "bokeh.models.text.BaseText"
    ],
    "desc": "\n    Base class for renderers of mathematical content.\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "\n    The text value to render.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "MaxAggregator",
    "fullname": "bokeh.models.widgets.tables.MaxAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": " Largest value across multiple rows.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "\n    Refers to the table column being aggregated\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "Maximum",
    "fullname": "bokeh.models.expressions.Maximum",
    "bases": [
      "bokeh.models.expressions.ScalarExpression"
    ],
    "desc": " Computes maximum value of a data source's column. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "initial",
        "type": "Nullable(Float)",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "MercatorAxis",
    "fullname": "bokeh.models.axes.MercatorAxis",
    "bases": [
      "bokeh.models.axes.LinearAxis"
    ],
    "desc": " An axis that picks nice numbers for tick locations on a\n    Mercator scale. Configured with a ``MercatorTickFormatter`` by default.\n\n    Args:\n        dimension ('lat' or 'lon', optional) :\n            Whether this axis will display latitude or longitude values.\n            (default: 'lat')\n\n    ",
    "props": [
      {
        "name": "minor_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the minor ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "minor_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the minor ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "major_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the major tick labels.\n    ",
        "default": "alphabetic"
      },
      {
        "name": "major_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the major tick labels should be\n    offset from the associated ticks.\n    ",
        "default": 5
      },
      {
        "name": "major_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the major ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the axis line.\n    ",
        "default": []
      },
      {
        "name": "major_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the major tick labels.\n    ",
        "default": "11px"
      },
      {
        "name": "axis_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the axis label.\n    ",
        "default": "italic"
      },
      {
        "name": "axis_label",
        "type": "Nullable(Either(MathString, Instance(BaseText)))",
        "desc": "\n    A text or LaTeX notation label for the axis, displayed parallel to the axis rule.\n    ",
        "default": null
      },
      {
        "name": "minor_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the minor ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "major_label_text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    The text font style of the major tick labels.\n    ",
        "default": "normal"
      },
      {
        "name": "axis_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the axis label.\n    ",
        "default": 1.0
      },
      {
        "name": "bounds",
        "type": "Either(Auto, Tuple(Float, Float), Tuple(Datetime, Datetime))",
        "desc": "\n    Bounds for the rendered axis. If unset, the axis will span the\n    entire plot in the given dimension.\n    ",
        "default": "auto"
      },
      {
        "name": "major_tick_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the major ticks.\n    ",
        "default": "butt"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "guide"
      },
      {
        "name": "major_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the major tick labels.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "axis_label_standoff",
        "type": "Int",
        "desc": "\n    The distance in pixels that the axis labels should be offset\n    from the tick labels.\n    ",
        "default": 5
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "minor_tick_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the minor ticks.\n    ",
        "default": 0
      },
      {
        "name": "axis_label_text_baseline",
        "type": "Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic')",
        "desc": "\n    The text baseline of the axis label.\n    ",
        "default": "bottom"
      },
      {
        "name": "minor_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the minor ticks.\n    ",
        "default": 1
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap of the axis line.\n    ",
        "default": "butt"
      },
      {
        "name": "formatter",
        "type": "Instance(TickFormatter)",
        "desc": "\n    A ``TickFormatter`` to use for formatting the visual appearance\n    of ticks.\n    ",
        "default": "{\"__type__\": \"bokeh.models.formatters.MercatorTickFormatter\"}"
      },
      {
        "name": "minor_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the minor ticks.\n    ",
        "default": "black"
      },
      {
        "name": "axis_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the axis line.\n    ",
        "default": "bevel"
      },
      {
        "name": "axis_label_text_font_size",
        "type": "FontSize",
        "desc": "\n    The text font size of the axis label.\n    ",
        "default": "13px"
      },
      {
        "name": "minor_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 4
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "major_label_orientation",
        "type": "Either(Enum('horizontal', 'vertical'), Float)",
        "desc": "\n    What direction the major label text should be oriented. If a\n    number is supplied, the angle of the text is measured from horizontal.\n    ",
        "default": "horizontal"
      },
      {
        "name": "major_label_overrides",
        "type": "Dict(Either(Float, String), Either(MathString, Instance(BaseText)))",
        "desc": "\n    Provide explicit tick label values for specific tick locations that\n    override normal formatting.\n    ",
        "default": {}
      },
      {
        "name": "axis_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the axis label.\n    ",
        "default": "helvetica"
      },
      {
        "name": "minor_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that minor ticks should extend into the\n    main plot area.\n    ",
        "default": 0
      },
      {
        "name": "major_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the major tick labels.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join of the major ticks.\n    ",
        "default": "bevel"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "axis_label_text_color",
        "type": "Nullable(Color)",
        "desc": "\n    The text color of the axis label.\n    ",
        "default": "#444444"
      },
      {
        "name": "major_label_text_alpha",
        "type": "Alpha",
        "desc": "\n    The text alpha of the major tick labels.\n    ",
        "default": 1.0
      },
      {
        "name": "major_tick_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the major ticks.\n    ",
        "default": 1.0
      },
      {
        "name": "ticker",
        "type": "Instance(Ticker)",
        "desc": "\n    A Ticker to use for computing locations of axis components.\n\n    The property may also be passed a sequence of floating point numbers as\n    a shorthand for creating and configuring a ``FixedTicker``, e.g. the\n    following code\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n\n        p = figure()\n        p.xaxis.ticker = [10, 20, 37.4]\n\n    is equivalent to:\n\n    .. code-block:: python\n\n        from bokeh.plotting import figure\n        from bokeh.models import FixedTicker\n\n        p = figure()\n        p.xaxis.ticker = FixedTicker(ticks=[10, 20, 37.4])\n\n    ",
        "default": "{\"__type__\": \"bokeh.models.tickers.MercatorTicker\"}"
      },
      {
        "name": "major_label_policy",
        "type": "Instance(LabelingPolicy)",
        "desc": "\n    Allows to filter out labels, e.g. declutter labels to avoid overlap.\n    ",
        "default": "{\"__type__\": \"bokeh.models.labeling.AllLabels\"}"
      },
      {
        "name": "major_tick_out",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend out of the\n    main plot area.\n    ",
        "default": 6
      },
      {
        "name": "major_tick_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the major ticks.\n    ",
        "default": "black"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "axis_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha of the axis line.\n    ",
        "default": 1.0
      },
      {
        "name": "axis_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color of the axis line.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "major_tick_line_width",
        "type": "Float",
        "desc": "\n    The line width of the major ticks.\n    ",
        "default": 1
      },
      {
        "name": "major_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the major tick labels.\n    ",
        "default": "center"
      },
      {
        "name": "major_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the major ticks.\n    ",
        "default": []
      },
      {
        "name": "axis_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset of the axis line.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "axis_line_width",
        "type": "Float",
        "desc": "\n    The line width of the axis line.\n    ",
        "default": 1
      },
      {
        "name": "fixed_location",
        "type": "Either(Null, Float, Factor(Either(String, Tuple(String, String), Tuple(String, String, String))))",
        "desc": "\n    Set to specify a fixed coordinate location to draw the axis. The direction\n    of ticks and major labels is determined by the side panel that the axis\n    belongs to.\n\n    .. note::\n        Axes labels are suppressed when axes are positioned at fixed locations\n        inside the central plot area.\n    ",
        "default": null
      },
      {
        "name": "major_label_text_font",
        "type": "String",
        "desc": "\n    The text font of the major tick labels.\n    ",
        "default": "helvetica"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "minor_tick_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash of the minor ticks.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "axis_label_text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    The text align of the axis label.\n    ",
        "default": "left"
      },
      {
        "name": "axis_label_text_line_height",
        "type": "Float",
        "desc": "\n    The text line height of the axis label.\n    ",
        "default": 1.2
      },
      {
        "name": "major_tick_in",
        "type": "Int",
        "desc": "\n    The distance in pixels that major ticks should extend into the\n    main plot area.\n    ",
        "default": 2
      }
    ]
  },
  {
    "name": "MercatorTickFormatter",
    "fullname": "bokeh.models.formatters.MercatorTickFormatter",
    "bases": [
      "bokeh.models.formatters.BasicTickFormatter"
    ],
    "desc": " A ``TickFormatter`` for values in WebMercator units.\n\n    Some map plot types internally use WebMercator to describe coordinates,\n    plot bounds, etc. These units are not very human-friendly. This tick\n    formatter will convert WebMercator units into Latitude and Longitude\n    for display on axes.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "use_scientific",
        "type": "Bool",
        "desc": "\n    Whether to ever display scientific notation. If ``True``, then\n    when to use scientific notation is controlled by ``power_limit_low``\n    and ``power_limit_high``.\n    ",
        "default": true
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "dimension",
        "type": "Nullable(Enum('lat', 'lon'))",
        "desc": "\n    Specify whether to format ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick labels from Web Mercator requires considering coordinates from both\n    dimensions together. Use this property to specify which result should be\n    used for display.\n\n    Typically, if the formatter is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the formatter is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured ``MercatorTickFormatter`` will result in\n    a validation error and a JavaScript console error.\n    ",
        "default": null
      },
      {
        "name": "precision",
        "type": "Either(Auto, Int)",
        "desc": "\n    How many digits of precision to display in tick labels.\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "power_limit_low",
        "type": "Int",
        "desc": "\n    Limit the use of scientific notation to when::\n\n        log(x) <= power_limit_low\n\n    ",
        "default": -3
      },
      {
        "name": "power_limit_high",
        "type": "Int",
        "desc": "\n    Limit the use of scientific notation to when::\n\n        log(x) >= power_limit_high\n\n    ",
        "default": 5
      }
    ]
  },
  {
    "name": "MercatorTicker",
    "fullname": "bokeh.models.tickers.MercatorTicker",
    "bases": [
      "bokeh.models.tickers.BasicTicker"
    ],
    "desc": " Generate nice lat/lon ticks form underlying WebMercator coordinates.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "base",
        "type": "Float",
        "desc": "\n    The multiplier to use for scaling mantissas.\n    ",
        "default": 10.0
      },
      {
        "name": "min_interval",
        "type": "Float",
        "desc": "\n    The smallest allowable interval between two adjacent ticks.\n    ",
        "default": 0.0
      },
      {
        "name": "dimension",
        "type": "Nullable(Enum('lat', 'lon'))",
        "desc": "\n    Specify whether to generate ticks for Latitude or Longitude.\n\n    Projected coordinates are not separable, computing Latitude and Longitude\n    tick locations from Web Mercator requires considering coordinates from\n    both dimensions together. Use this property to specify which result should\n    be returned.\n\n    Typically, if the ticker is for an x-axis, then dimension should be\n    ``\"lon\"`` and if the ticker is for a y-axis, then the dimension\n    should be `\"lat\"``.\n\n    In order to prevent hard to debug errors, there is no default value for\n    dimension. Using an un-configured ``MercatorTicker`` will result in a\n    validation error and a JavaScript console error.\n    ",
        "default": null
      },
      {
        "name": "mantissas",
        "type": "Seq(Float)",
        "desc": "\n    The acceptable list numbers to generate multiples of.\n    ",
        "default": [
          1,
          2,
          5
        ]
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "max_interval",
        "type": "Nullable(Float)",
        "desc": "\n    The largest allowable interval between two adjacent ticks.\n\n    .. note::\n        To specify an unbounded interval, set to ``None``.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "MercatorTileSource",
    "fullname": "bokeh.models.tiles.MercatorTileSource",
    "bases": [
      "bokeh.models.tiles.TileSource"
    ],
    "desc": " A base class for Mercator tile services (e.g. ``WMTSTileSource``).\n\n    ",
    "props": [
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    A y-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "\n    Tile size in pixels (e.g. 256)\n    ",
        "default": 256
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "\n    Data provider attribution content. This can include HTML content.\n    ",
        "default": ""
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "\n    A minimum zoom level for the tile layer. This is the most zoomed-out level.\n    ",
        "default": 0
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "\n    Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.\n    ",
        "default": 156543.03392804097
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "String",
        "desc": "\n    Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png\n    ",
        "default": ""
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "\n    Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.\n\n    ",
        "default": true
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "\n    A maximum zoom level for the tile layer. This is the most zoomed-in level.\n    ",
        "default": 30
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "\n    Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    An x-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "\n    A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).\n    ",
        "default": {}
      }
    ]
  },
  {
    "name": "MinAggregator",
    "fullname": "bokeh.models.widgets.tables.MinAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": " Smallest value across multiple rows.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "\n    Refers to the table column being aggregated\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "Minimum",
    "fullname": "bokeh.models.expressions.Minimum",
    "bases": [
      "bokeh.models.expressions.ScalarExpression"
    ],
    "desc": " Computes minimum value of a data source's column. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "initial",
        "type": "Nullable(Float)",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "Model",
    "fullname": "bokeh.model.model.Model",
    "bases": [],
    "desc": " Base class for all objects stored in Bokeh  |Document| instances.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "MonthsTicker",
    "fullname": "bokeh.models.tickers.MonthsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "desc": " Generate ticks spaced apart by specific, even multiples of months.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "\n    The interval between adjacent ticks.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "months",
        "type": "Seq(Int)",
        "desc": "\n    The intervals of months to use.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "MultiChoice",
    "fullname": "bokeh.models.widgets.inputs.MultiChoice",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": " MultiChoice widget.\n\n    ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "delete_button",
        "type": "Bool",
        "desc": "\n    Whether to add a button to remove a selected option.\n    ",
        "default": true
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "solid",
        "type": "Bool",
        "desc": "\n    Specify whether the choices should be solidly filled.",
        "default": true
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "options",
        "type": "List(Either(String, Tuple(String, String)))",
        "desc": "\n    Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.\n    ",
        "default": []
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "option_limit",
        "type": "Nullable(Int)",
        "desc": "\n    The number of choices that will be rendered in the dropdown.\n    ",
        "default": null
      },
      {
        "name": "max_items",
        "type": "Nullable(Int)",
        "desc": "\n    The maximum number of items that can be selected.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "placeholder",
        "type": "Nullable(String)",
        "desc": "\n    A string that is displayed if not item is added.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "search_option_limit",
        "type": "Nullable(Int)",
        "desc": "\n    The number of choices that will be rendered in the dropdown\n    when search string is entered.\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "List(String)",
        "desc": "\n    Initial or selected values.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "MultiLine",
    "fullname": "bokeh.models.glyphs.MultiLine",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render several lines.\n\n    The data for the ``MultiLine`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/MultiLine.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the lines.\n    ",
        "default": "black"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the lines.\n    ",
        "default": "butt"
      },
      {
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for all the lines, given as a \"list of lists\".\n    ",
        "default": {
          "field": "xs"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the lines.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the lines.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the lines.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the lines.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for all the lines, given as a \"list of lists\".\n    ",
        "default": {
          "field": "ys"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the lines.\n    ",
        "default": "bevel"
      }
    ]
  },
  {
    "name": "MultiPolygons",
    "fullname": "bokeh.models.glyphs.MultiPolygons",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render several MultiPolygon.\n\n    Modeled on geoJSON - the data for the ``MultiPolygons`` glyph is\n    different in that the vector of values is not a vector of scalars.\n    Rather, it is a \"list of lists of lists of lists\".\n\n    During box selection only multi-polygons entirely contained in the\n    selection box will be included.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/MultiPolygons.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the multipolygons.\n    ",
        "default": "butt"
      },
      {
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for all the patches, given as a nested list.\n\n    .. note::\n        Each item in ``MultiPolygons`` represents one MultiPolygon and each\n        MultiPolygon is comprised of ``n`` Polygons. Each Polygon is made of\n        one exterior ring optionally followed by ``m`` interior rings (holes).\n    ",
        "default": {
          "field": "xs"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the multipolygons.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the multipolygons.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the multipolygons.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the multipolygons.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the multipolygons.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the multipolygons.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the multipolygons.\n    ",
        "default": "black"
      },
      {
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Each item in ``MultiPolygons`` represents one MultiPolygon and each\n        MultiPolygon is comprised of ``n`` Polygons. Each Polygon is made of\n        one exterior ring optionally followed by ``m`` interior rings (holes).\n    ",
        "default": {
          "field": "ys"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the multipolygons.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the multipolygons.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the multipolygons.\n    ",
        "default": null
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the multipolygons.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the multipolygons.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the multipolygons.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the multipolygons.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "MultiSelect",
    "fullname": "bokeh.models.widgets.inputs.MultiSelect",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": " Multi-select widget.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "List(String)",
        "desc": "\n    Initial or selected values.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "Int",
        "desc": "\n    The number of visible options in the dropdown list. (This uses the\n    ``select`` HTML element's ``size`` attribute. Some browsers might not\n    show less than 3 options.)\n    ",
        "default": 4
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "options",
        "type": "List(Either(String, Tuple(String, String)))",
        "desc": "\n    Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label.\n    ",
        "default": []
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "NoOverlap",
    "fullname": "bokeh.models.labeling.NoOverlap",
    "bases": [
      "bokeh.models.labeling.LabelingPolicy"
    ],
    "desc": " Basic labeling policy avoiding label overlap. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "min_distance",
        "type": "Int",
        "desc": "\n    Minimum distance between labels in pixels.\n    ",
        "default": 5
      }
    ]
  },
  {
    "name": "NodeCoordinates",
    "fullname": "bokeh.models.graphs.NodeCoordinates",
    "bases": [
      "bokeh.models.graphs.GraphCoordinates"
    ],
    "desc": "\n    Node coordinate expression obtained from ``LayoutProvider``\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "layout",
        "type": "Instance(LayoutProvider)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "NodesAndLinkedEdges",
    "fullname": "bokeh.models.graphs.NodesAndLinkedEdges",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "\n    With the ``NodesAndLinkedEdges`` policy, inspection or selection of graph\n    nodes will result in the inspection or selection of the node and of the\n    linked graph edges. There is no direct selection or inspection of graph\n    edges.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "NodesOnly",
    "fullname": "bokeh.models.graphs.NodesOnly",
    "bases": [
      "bokeh.models.graphs.GraphHitTestPolicy"
    ],
    "desc": "\n    With the ``NodesOnly`` policy, only graph nodes are able to be selected and\n    inspected. There is no selection or inspection of graph edges.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "NormalHead",
    "fullname": "bokeh.models.arrow_heads.NormalHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": " Render a closed-body arrow head.\n\n    ",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the arrow head outline.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the arrow head outline.\n    ",
        "default": []
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the arrow head interior.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the arrow head interior.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the arrow head outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the arrow head outline.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the arrow head outline.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the arrow head outline.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the arrow head outline.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size, in pixels, of the arrow head.\n    ",
        "default": 25
      }
    ]
  },
  {
    "name": "NumberEditor",
    "fullname": "bokeh.models.widgets.tables.NumberEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Spinner-based number cell editor.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "step",
        "type": "Float",
        "desc": "\n    The major step value.\n    ",
        "default": 0.01
      }
    ]
  },
  {
    "name": "NumberFormatter",
    "fullname": "bokeh.models.widgets.tables.NumberFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "desc": " Number cell formatter.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    An optional text font style, e.g. bold, italic.\n    ",
        "default": "normal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "nan_format",
        "type": "Nullable(String)",
        "desc": "\n    Formatting to apply to NaN and None values (falls back to Numbro formatting if not set).\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "format",
        "type": "String",
        "desc": "\n    The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html\n    ",
        "default": "0,0"
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    An optional text align, i.e. left, center or right.\n    ",
        "default": "left"
      },
      {
        "name": "rounding",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "desc": "\n    Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).\n    ",
        "default": "round"
      },
      {
        "name": "language",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "desc": "\n    The language to use for formatting language-specific features (e.g. thousands separator).\n    ",
        "default": "en"
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "\n    An optional text color.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "NumeralTickFormatter",
    "fullname": "bokeh.models.formatters.NumeralTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": " Tick formatter based on a human-readable format string. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "format",
        "type": "String",
        "desc": "\n    The number format, as defined in the following tables:\n\n    **NUMBERS**:\n\n    ============ ============== ===============\n    Number       Format         String\n    ============ ============== ===============\n    10000        '0,0.0000'     10,000.0000\n    10000.23     '0,0'          10,000\n    10000.23     '+0,0'         +10,000\n    -10000       '0,0.0'        -10,000.0\n    10000.1234   '0.000'        10000.123\n    10000.1234   '0[.]00000'    10000.12340\n    -10000       '(0,0.0000)'   (10,000.0000)\n    -0.23        '.00'          -.23\n    -0.23        '(.00)'        (.23)\n    0.23         '0.00000'      0.23000\n    0.23         '0.0[0000]'    0.23\n    1230974      '0.0a'         1.2m\n    1460         '0 a'          1 k\n    -104000      '0a'           -104k\n    1            '0o'           1st\n    52           '0o'           52nd\n    23           '0o'           23rd\n    100          '0o'           100th\n    ============ ============== ===============\n\n    **CURRENCY**:\n\n    =========== =============== =============\n    Number      Format          String\n    =========== =============== =============\n    1000.234    '$0,0.00'       $1,000.23\n    1000.2      '0,0[.]00 $'    1,000.20 $\n    1001        '$ 0,0[.]00'    $ 1,001\n    -1000.234   '($0,0)'        ($1,000)\n    -1000.234   '$0.00'         -$1000.23\n    1230974     '($ 0.00 a)'    $ 1.23 m\n    =========== =============== =============\n\n    **BYTES**:\n\n    =============== =========== ============\n    Number          Format      String\n    =============== =========== ============\n    100             '0b'        100B\n    2048            '0 b'       2 KB\n    7884486213      '0.0b'      7.3GB\n    3467479682787   '0.000 b'   3.154 TB\n    =============== =========== ============\n\n    **PERCENTAGES**:\n\n    ============= ============= ===========\n    Number        Format        String\n    ============= ============= ===========\n    1             '0%'          100%\n    0.974878234   '0.000%'      97.488%\n    -0.43         '0 %'         -43 %\n    0.43          '(0.000 %)'   43.000 %\n    ============= ============= ===========\n\n    **TIME**:\n\n    ============ ============== ============\n    Number       Format         String\n    ============ ============== ============\n    25           '00:00:00'     0:00:25\n    238          '00:00:00'     0:03:58\n    63846        '00:00:00'     17:44:06\n    ============ ============== ============\n\n    For the complete specification, see http://numbrojs.com/format.html\n    ",
        "default": "0,0"
      },
      {
        "name": "rounding",
        "type": "Enum('round', 'nearest', 'floor', 'rounddown', 'ceil', 'roundup')",
        "desc": "\n    Rounding functions (round, floor, ceil) and their synonyms (nearest, rounddown, roundup).\n    ",
        "default": "round"
      },
      {
        "name": "language",
        "type": "Enum('be-nl', 'chs', 'cs', 'da-dk', 'de-ch', 'de', 'en', 'en-gb', 'es-ES', 'es', 'et', 'fi', 'fr-CA', 'fr-ch', 'fr', 'hu', 'it', 'ja', 'nl-nl', 'pl', 'pt-br', 'pt-pt', 'ru', 'ru-UA', 'sk', 'th', 'tr', 'uk-UA')",
        "desc": "\n    The language to use for formatting language-specific features (e.g. thousands separator).\n    ",
        "default": "en"
      }
    ]
  },
  {
    "name": "NumericInput",
    "fullname": "bokeh.models.widgets.inputs.NumericInput",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": " Numeric input widget.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(Null, String, Instance(TickFormatter))",
        "desc": "\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "\n    Placeholder for empty input field.\n    ",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "mode",
        "type": "Enum('int', 'float')",
        "desc": "\n    Define the type of number which can be enter in the input\n\n    example\n    mode int: 1, -1, 156\n    mode float: 1, -1.2, 1.1e-25\n    ",
        "default": "int"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "Either(Null, Float, Int)",
        "desc": "\n    Initial or entered value.\n\n    Change events are triggered whenever <enter> is pressed.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "low",
        "type": "Either(Null, Float, Int)",
        "desc": "\n    Optional lowest allowable value.\n    ",
        "default": null
      },
      {
        "name": "high",
        "type": "Either(Null, Float, Int)",
        "desc": "\n    Optional highest allowable value.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "OpenHead",
    "fullname": "bokeh.models.arrow_heads.OpenHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": " Render an open-body arrow head.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n\n    The line color values for the arrow head outline.\n    ",
        "default": "black"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n\n    The line cap values for the arrow head outline.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n\n    The line dash values for the arrow head outline.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n\n    The line width values for the arrow head outline.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n\n    The line alpha values for the arrow head outline.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n\n    The line dash offset values for the arrow head outline.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size, in pixels, of the arrow head.\n    ",
        "default": 25
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n\n    The line join values for the arrow head outline.\n    ",
        "default": "bevel"
      }
    ]
  },
  {
    "name": "OpenURL",
    "fullname": "bokeh.models.callbacks.OpenURL",
    "bases": [
      "bokeh.models.callbacks.Callback"
    ],
    "desc": " Open a URL in a new or current tab or window.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "String",
        "desc": "\n    The URL to direct the web browser to. This can be a template string,\n    which will be formatted with data from the data source.\n    ",
        "default": "http://"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "same_tab",
        "type": "Bool",
        "desc": "\n    Open URL in a new (`False`, default) or current (`True`) tab or window.\n    For `same_tab=False`, whether tab or window will be opened is browser\n    dependent.\n    ",
        "default": false
      }
    ]
  },
  {
    "name": "Oval",
    "fullname": "bokeh.models.glyphs.Oval",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render ovals.\n\n    This glyph renders ovals using Bezier curves, which are similar,\n    but not identical to ellipses. In particular, widths equal to heights\n    will not render circles. Use the ``Ellipse`` glyph for that.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Oval.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The overall height of each oval.\n    ",
        "default": {
          "field": "height"
        }
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the ovals.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the ovals.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the ovals.\n    ",
        "default": 1.0
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angle the ovals are rotated from horizontal. [rad]\n    ",
        "default": 0.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the ovals.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the ovals.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the ovals.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the ovals.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the ovals.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the ovals.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the ovals.\n    ",
        "default": "black"
      },
      {
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The overall widths of each oval.\n    ",
        "default": {
          "field": "width"
        }
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the ovals.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the centers of the ovals.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the centers of the ovals.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the ovals.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the ovals.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the ovals.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the ovals.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "PanTool",
    "fullname": "bokeh.models.tools.PanTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "desc": " *toolbar icon*: |pan_icon|\n\n    The pan tool allows the user to pan a Plot by left-dragging a mouse, or on\n    touch devices by dragging a finger or stylus, across the plot region.\n\n    The pan tool also activates the border regions of a Plot for \"single axis\"\n    panning. For instance, dragging in the vertical border or axis will effect\n    a pan in the vertical direction only, with horizontal dimension kept fixed.\n\n    .. |pan_icon| image:: /_images/icons/Pan.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the pan tool is constrained to act in. By default\n    the pan tool will pan in any dimension, but can be configured to only\n    pan horizontally across the width of the plot, or vertically across the\n    height of the plot.\n    ",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Panel",
    "fullname": "bokeh.models.layouts.Panel",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A single-widget container with title bar and controls.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget is responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "closable",
        "type": "Bool",
        "desc": "\n    Whether this panel is closable or not. If True, an \"x\" button will appear.\n\n    Closing a panel is equivalent to removing it from its parent container (e.g. tabs).\n    ",
        "default": false
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "child",
        "type": "Instance(LayoutDOM)",
        "desc": "\n    The child widget. If you need more children, use a layout widget, e.g. a ``Column``.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    The text title of the panel.\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "Paragraph",
    "fullname": "bokeh.models.widgets.markups.Paragraph",
    "bases": [
      "bokeh.models.widgets.markups.Markup"
    ],
    "desc": " A block (paragraph) of text.\n\n    This Bokeh model corresponds to an HTML ``<p>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_paragraph.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "text",
        "type": "String",
        "desc": "\n    The text or HTML contents of the widget.\n\n    .. note::\n        If the HTML content contains elements which size depends on\n        on external, asynchronously loaded resources, the size of\n        the widget may be computed incorrectly. This is in particular\n        an issue with images (``<img>``). To remedy this problem, one\n        either has to set explicit dimensions using CSS properties,\n        HTML attributes or model's ``width`` and ``height`` properties,\n        or inline images' contents using data URIs.\n    ",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "\n    Raw CSS style declaration. Note this may be web browser dependent.\n    ",
        "default": {}
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "\n    Whether the contents should not be processed as TeX/LaTeX input.\n    ",
        "default": false
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "PasswordInput",
    "fullname": "bokeh.models.widgets.inputs.PasswordInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextInput"
    ],
    "desc": " Single-line password input widget.\n\n    This widget hides the input value so that it is not visible in the browser.\n\n    .. warning::\n        Secure transmission of the password to Bokeh server application code\n        requires configuring the server for SSL (i.e. HTTPS) termination.\n\n    ",
    "props": [
      {
        "name": "value_input",
        "type": "String",
        "desc": "\n    Initial or current value.\n\n    Change events are triggered whenever any update happens, i.e. on every\n    keypress.\n    ",
        "default": ""
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "\n    Max count of characters in field\n    ",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "\n    Placeholder for empty input field.\n    ",
        "default": ""
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "\n    Initial or entered text value.\n\n    Change events are triggered whenever <enter> is pressed.\n    ",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Patch",
    "fullname": "bokeh.models.glyphs.Patch",
    "bases": [
      "bokeh.models.glyph.ConnectedXYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render a single patch.\n\n    The ``Patch`` glyph is different from most other glyphs in that the vector\n    of values only produces one glyph on the Plot.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Patch.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the patch.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the patch.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "Alpha",
        "desc": "\n    The hatch alpha values for the patch.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "Size",
        "desc": "\n    The hatch weight values for the patch.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the patch.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the patch.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the patch.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "Nullable(Color)",
        "desc": "\n    The hatch color values for the patch.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the patch.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the patch.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "Nullable(String)",
        "desc": "\n    The hatch pattern values for the patch.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        y-coordinates for each polygon should be separated by NaN\n        values in the sequence.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for the points of the patch.\n\n    .. note::\n        A patch may comprise multiple polygons. In this case the\n        x-coordinates for each polygon should be separated by NaN\n        values in the sequence.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the patch.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the patch.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the patch.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "Size",
        "desc": "\n    The hatch scale values for the patch.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "Patches",
    "fullname": "bokeh.models.glyphs.Patches",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render several patches.\n\n    The data for the ``Patches`` glyph is different in that the vector of\n    values is not a vector of scalars. Rather, it is a \"list of lists\".\n\n    During box selection only patches entirely contained in the\n    selection box will be included.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Patches.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the patches.\n    ",
        "default": "butt"
      },
      {
        "name": "xs",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the x-coordinates for each polygon should be separated by NaN\n        values in the sublists.\n    ",
        "default": {
          "field": "xs"
        }
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the patches.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the patches.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the patches.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the patches.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the patches.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the patches.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the patches.\n    ",
        "default": "black"
      },
      {
        "name": "ys",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for all the patches, given as a \"list of lists\".\n\n    .. note::\n        Individual patches may comprise multiple polygons. In this case\n        the y-coordinates for each polygon should be separated by NaN\n        values in the sublists.\n    ",
        "default": {
          "field": "ys"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the patches.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the patches.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the patches.\n    ",
        "default": null
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the patches.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the patches.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the patches.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the patches.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "PercentEditor",
    "fullname": "bokeh.models.widgets.tables.PercentEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " ``IntEditor`` optimized for editing percentages.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "PlainText",
    "fullname": "bokeh.models.text.PlainText",
    "bases": [
      "bokeh.models.text.BaseText"
    ],
    "desc": "\n    Represents plain text in contexts where text parsing is allowed.\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "\n    The text value to render.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Plot",
    "fullname": "bokeh.models.plots.Plot",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": " Model representing a plot, containing glyphs, guides, annotations.\n\n    ",
    "props": [
      {
        "name": "match_aspect",
        "type": "Bool",
        "desc": "\n    Specify the aspect ratio behavior of the plot. Aspect ratio is defined as\n    the ratio of width over height. This property controls whether Bokeh should\n    attempt to match the (width/height) of *data space* to the (width/height)\n    in pixels of *screen space*.\n\n    Default is ``False`` which indicates that the *data* aspect ratio and the\n    *screen* aspect ratio vary independently. ``True`` indicates that the plot\n    aspect ratio of the axes will match the aspect ratio of the pixel extent\n    the axes. The end result is that a 1x1 area in data space is a square in\n    pixels, and conversely that a 1x1 pixel is a square in data units.\n\n    .. note::\n        This setting only takes effect when there are two dataranges. This\n        setting only sets the initial plot draw and subsequent resets. It is\n        possible for tools (single axis zoom, unconstrained box zoom) to\n        change the aspect ratio.\n\n    .. warning::\n        This setting is incompatible with linking dataranges across multiple\n        plots. Doing so may result in undefined behavior.\n    ",
        "default": false
      },
      {
        "name": "renderers",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of all renderers for this plot, including guides and annotations\n    in addition to glyphs.\n\n    This property can be manipulated by hand, but the ``add_glyph`` and\n    ``add_layout`` methods are recommended to help make sure all necessary\n    setup is performed.\n    ",
        "default": []
      },
      {
        "name": "min_border_top",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region above the top of the\n    central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the plot background style.\n    ",
        "default": 1.0
      },
      {
        "name": "inner_width",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact width of the plotting canvas, i.e. the width of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "\n    Where the title will be located. Titles on the left or right side\n    will be rotated.\n    ",
        "default": "above"
      },
      {
        "name": "min_border_bottom",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region below the bottom of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "min_border",
        "type": "Nullable(Int)",
        "desc": "\n    A convenience property to set all all the ``min_border_X`` properties\n    to the same value. If an individual border property is explicitly set,\n    it will override ``min_border``.\n    ",
        "default": 5
      },
      {
        "name": "outer_width",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact width of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "outline_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join for the plot border outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "outline_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset for the plot border outline.\n    ",
        "default": 0
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "output_backend",
        "type": "Enum('canvas', 'svg', 'webgl')",
        "desc": "\n    Specify the output backend for the plot area. Default is HTML5 Canvas.\n\n    .. note::\n        When set to ``webgl``, glyphs without a WebGL rendering implementation\n        will fall back to rendering onto 2D canvas.\n    ",
        "default": "canvas"
      },
      {
        "name": "y_range",
        "type": "Instance(Range)",
        "desc": "\n    The (default) data range of the vertical dimension of the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "aspect_scale",
        "type": "Float",
        "desc": "\n    A value to be given for increased aspect ratio control. This value is added\n    multiplicatively to the calculated value required for ``match_aspect``.\n    ``aspect_scale`` is defined as the ratio of width over height of the figure.\n\n    For example, a plot with ``aspect_scale`` value of 2 will result in a\n    square in *data units* to be drawn on the screen as a rectangle with a\n    pixel width twice as long as its pixel height.\n\n    .. note::\n        This setting only takes effect if ``match_aspect`` is set to ``True``.\n    ",
        "default": 1
      },
      {
        "name": "below",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area below of the plot.\n    ",
        "default": []
      },
      {
        "name": "left",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area to the left of the plot.\n    ",
        "default": []
      },
      {
        "name": "outer_height",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact height of the layout, i.e. the height of\n    the actual plot, with toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "outline_line_width",
        "type": "Float",
        "desc": "\n    The line width for the plot border outline.\n    ",
        "default": 1
      },
      {
        "name": "y_scale",
        "type": "Instance(Scale)",
        "desc": "\n    What kind of scale to use to convert y-coordinates in data space\n    into y-coordinates in screen space.\n    ",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "title",
        "type": "Either(Null, Instance(Title))",
        "desc": "\n    A title for the plot. Can be a text string or a Title annotation.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.Title\"}"
      },
      {
        "name": "lod_threshold",
        "type": "Nullable(Int)",
        "desc": "\n    A number of data points, above which level-of-detail downsampling may\n    be performed by glyph renderers. Set to ``None`` to disable any\n    level-of-detail downsampling.\n    ",
        "default": 2000
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "border_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the plot border style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "min_border_left",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region to the left of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "toolbar_sticky",
        "type": "Bool",
        "desc": "\n    Stick the toolbar to the edge of the plot. Default: True. If False,\n    the toolbar will be outside of the axes, titles etc.\n    ",
        "default": true
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color for the plot background style.\n    ",
        "default": "#ffffff"
      },
      {
        "name": "min_border_right",
        "type": "Nullable(Int)",
        "desc": "\n    Minimum size in pixels of the padding region to the right of\n    the central plot region.\n\n    .. note::\n        This is a *minimum*. The padding region may expand as needed to\n        accommodate titles or axes, etc.\n\n    ",
        "default": null
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "\n    The toolbar associated with this plot which holds all the tools. It is\n    automatically created with the plot if necessary.\n    ",
        "default": "{\"__type__\": \"bokeh.models.tools.Toolbar\"}"
      },
      {
        "name": "frame_height",
        "type": "Nullable(Int)",
        "desc": "\n    The height of a plot frame or the inner height of a plot, excluding any\n    axes, titles, border padding, etc.\n    ",
        "default": null
      },
      {
        "name": "outline_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap for the plot border outline.\n    ",
        "default": "butt"
      },
      {
        "name": "inner_height",
        "type": "Readonly(Int)",
        "desc": "\n    This is the exact height of the plotting canvas, i.e. the height of\n    the actual plot, without toolbars etc. Note this is computed in a\n    web browser, so this property will work only in backends capable of\n    bidirectional communication (server, notebook).\n\n    .. note::\n        This is an experimental feature and the API may change in near future.\n\n    ",
        "default": 0
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "outline_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha for the plot border outline.\n    ",
        "default": 1.0
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "extra_x_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "\n    Additional named scales to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.\n\n    .. note:: This feature is experimental and may change in the short term.\n    ",
        "default": {}
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "center",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the center area (frame) of the plot.\n    ",
        "default": []
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "outline_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color for the plot border outline.\n    ",
        "default": "#e5e5e5"
      },
      {
        "name": "border_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha for the plot border style.\n    ",
        "default": 1.0
      },
      {
        "name": "right",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area to the right of the plot.\n    ",
        "default": []
      },
      {
        "name": "toolbar_location",
        "type": "Nullable(Enum('above', 'below', 'left', 'right'))",
        "desc": "\n    Where the toolbar will be located. If set to None, no toolbar\n    will be attached to the plot.\n    ",
        "default": "right"
      },
      {
        "name": "lod_interval",
        "type": "Int",
        "desc": "\n    Interval (in ms) during which an interactive tool event will enable\n    level-of-detail downsampling.\n    ",
        "default": 300
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "hidpi",
        "type": "Bool",
        "desc": "\n    Whether to use HiDPI mode when available.\n    ",
        "default": true
      },
      {
        "name": "reset_policy",
        "type": "Enum('standard', 'event_only')",
        "desc": "\n    How a plot should respond to being reset. By deafult, the standard actions\n    are to clear any tool state history, return plot ranges to their original\n    values, undo all selections, and emit a ``Reset`` event. If customization\n    is desired, this property may be set to ``\"event_only\"``, which will\n    suppress all of the actions except the Reset event.\n    ",
        "default": "standard"
      },
      {
        "name": "outline_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash for the plot border outline.\n    ",
        "default": []
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "x_range",
        "type": "Instance(Range)",
        "desc": "\n    The (default) data range of the horizontal dimension of the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.ranges.DataRange1d\"}"
      },
      {
        "name": "above",
        "type": "List(Instance(Renderer))",
        "desc": "\n    A list of renderers to occupy the area above of the plot.\n    ",
        "default": []
      },
      {
        "name": "lod_timeout",
        "type": "Int",
        "desc": "\n    Timeout (in ms) for checking whether interactive tool events are still\n    occurring. Once level-of-detail mode is enabled, a check is made every\n    ``lod_timeout`` ms. If no interactive tool events have happened,\n    level-of-detail mode is disabled.\n    ",
        "default": 500
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": 600
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "extra_x_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "\n    Additional named ranges to make available for mapping x-coordinates.\n\n    This is useful for adding additional axes.\n    ",
        "default": {}
      },
      {
        "name": "x_scale",
        "type": "Instance(Scale)",
        "desc": "\n    What kind of scale to use to convert x-coordinates in data space\n    into x-coordinates in screen space.\n    ",
        "default": "{\"__type__\": \"bokeh.models.scales.LinearScale\"}"
      },
      {
        "name": "extra_y_ranges",
        "type": "Dict(String, Instance(Range))",
        "desc": "\n    Additional named ranges to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.\n    ",
        "default": {}
      },
      {
        "name": "extra_y_scales",
        "type": "Dict(String, Instance(Scale))",
        "desc": "\n    Additional named scales to make available for mapping y-coordinates.\n\n    This is useful for adding additional axes.\n\n    .. note:: This feature is experimental and may change in the short term.\n    ",
        "default": {}
      },
      {
        "name": "frame_width",
        "type": "Nullable(Int)",
        "desc": "\n    The width of a plot frame or the inner width of a plot, excluding any\n    axes, titles, border padding, etc.\n    ",
        "default": null
      },
      {
        "name": "lod_factor",
        "type": "Int",
        "desc": "\n    Decimation factor to use when applying level-of-detail decimation.\n    ",
        "default": 10
      }
    ]
  },
  {
    "name": "PointDrawTool",
    "fullname": "bokeh.models.tools.PointDrawTool",
    "bases": [
      "bokeh.models.tools.EditTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": " *toolbar icon*: |point_draw_icon|\n\n    The PointDrawTool allows adding, dragging and deleting point-like glyphs\n    (i.e subclasses of``XYGlyph``) on one or more renderers by editing the\n    underlying ``ColumnDataSource`` data. Like other drawing tools, the\n    renderers that are to be edited must be supplied explicitly as a list. Any\n    newly added points will be inserted on the ``ColumnDataSource`` of the\n    first supplied renderer.\n\n    The tool will modify the columns on the data source corresponding to the\n    ``x`` and ``y`` values of the glyph. Any additional columns in the data\n    source will be padded with the given ``empty_value`` when adding a new\n    point.\n\n    .. note::\n        The data source updates will trigger data change events continuously\n        throughout the edit operations on the BokehJS side. In Bokeh server\n        apps, the data source will only be synced once, when the edit operation\n        finishes.\n\n    The supported actions include:\n\n    * Add point: Tap anywhere on the plot\n\n    * Move point: Tap and drag an existing point, the point will be\n      dropped once you let go of the mouse button.\n\n    * Delete point: Tap a point to select it then press <<backspace>>\n      key while the mouse is within the plot area.\n\n    .. |point_draw_icon| image:: /_images/icons/PointDraw.png\n        :height: 24px\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "drag",
        "type": "Bool",
        "desc": "\n    Enables dragging of existing points on pan events.\n    ",
        "default": true
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "\n    Defines a limit on the number of points that can be drawn. By default there\n    is no limit on the number of objects, but if enabled the oldest drawn point\n    will be dropped to make space for the new point.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "add",
        "type": "Bool",
        "desc": "\n    Enables adding of new points on tap events.\n    ",
        "default": true
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "PolarTransform",
    "fullname": "bokeh.models.expressions.PolarTransform",
    "bases": [
      "bokeh.models.expressions.CoordinateTransform"
    ],
    "desc": " Transform from polar to cartesian coordinates. ",
    "props": [
      {
        "name": "radius",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The radial coordinate (i.e. the distance from the origin).\n\n    Negative radius is allowed, which is equivalent to using positive radius\n    and changing ``direction`` to the opposite value.\n    ",
        "default": {
          "field": "radius"
        }
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "\n    Whether ``angle`` measures clockwise or anti-clockwise from the reference axis.\n    ",
        "default": "anticlock"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angular coordinate (i.e. the angle from the reference axis).\n    ",
        "default": {
          "field": "angle"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "PolyAnnotation",
    "fullname": "bokeh.models.annotations.PolyAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": " Render a shaded polygonal region as an annotation.\n\n    See :ref:`userguide_annotations_polygon_annotations` for information on\n    plotting polygon annotations.\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the polygon.\n    ",
        "default": "butt"
      },
      {
        "name": "xs",
        "type": "Seq(Float)",
        "desc": "\n    The x-coordinates of the region to draw.\n    ",
        "default": []
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the polygon.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "Alpha",
        "desc": "\n    The hatch alpha values for the polygon.\n    ",
        "default": 1.0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "ys_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the ``ys`` attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "hatch_weight",
        "type": "Size",
        "desc": "\n    The hatch weight values for the polygon.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the polygon.\n    ",
        "default": 0.4
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the polygon.\n    ",
        "default": "#fff9ba"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the polygon.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "Nullable(Color)",
        "desc": "\n    The hatch color values for the polygon.\n    ",
        "default": "black"
      },
      {
        "name": "xs_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the ``xs`` attribute. Interpreted as |data units| by\n    default.\n    ",
        "default": "data"
      },
      {
        "name": "ys",
        "type": "Seq(Float)",
        "desc": "\n    The y-coordinates of the region to draw.\n    ",
        "default": []
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the polygon.\n    ",
        "default": "bevel"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the polygon.\n    ",
        "default": "#cccccc"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "Nullable(String)",
        "desc": "\n    The hatch pattern values for the polygon.\n    ",
        "default": null
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the polygon.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the polygon.\n    ",
        "default": 0.3
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the polygon.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "Size",
        "desc": "\n    The hatch scale values for the polygon.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "PolyDrawTool",
    "fullname": "bokeh.models.tools.PolyDrawTool",
    "bases": [
      "bokeh.models.tools.PolyTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": " *toolbar icon*: |poly_draw_icon|\n\n    The PolyDrawTool allows drawing, selecting and deleting ``Patches`` and\n    ``MultiLine`` glyphs on one or more renderers by editing the underlying\n    ``ColumnDataSource`` data. Like other drawing tools, the renderers that\n    are to be edited must be supplied explicitly.\n\n    The tool will modify the columns on the data source corresponding to the\n    ``xs`` and ``ys`` values of the glyph. Any additional columns in the data\n    source will be padded with the declared ``empty_value``, when adding a new\n    point.\n\n    If a ``vertex_renderer`` with an point-like glyph is supplied then the\n    ``PolyDrawTool`` will use it to display the vertices of the multi-lines or\n    patches on all supplied renderers. This also enables the ability to snap\n    to existing vertices while drawing.\n\n    The supported actions include:\n\n    * Add patch or multi-line: Double tap to add the first vertex, then use tap\n      to add each subsequent vertex, to finalize the draw action double tap to\n      insert the final vertex or press the <<esc> key.\n\n    * Move patch or ulti-line: Tap and drag an existing patch/multi-line, the\n      point will be dropped once you let go of the mouse button.\n\n    * Delete patch or multi-line: Tap a patch/multi-line to select it then\n      press <<backspace>> key while the mouse is within the plot area.\n\n    .. |poly_draw_icon| image:: /_images/icons/PolyDraw.png\n        :height: 24px\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "drag",
        "type": "Bool",
        "desc": "\n    Enables dragging of existing patches and multi-lines on pan events.\n    ",
        "default": true
      },
      {
        "name": "num_objects",
        "type": "Int",
        "desc": "\n    Defines a limit on the number of patches or multi-lines that can be drawn.\n    By default there is no limit on the number of objects, but if enabled the\n    oldest drawn patch or multi-line will be dropped to make space for the new\n    patch or multi-line.\n    ",
        "default": 0
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "vertex_renderer",
        "type": "Nullable(Instance(GlyphRenderer))",
        "desc": "\n    The renderer used to render the vertices of a selected line or polygon.\n    ",
        "default": null
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "PolyEditTool",
    "fullname": "bokeh.models.tools.PolyEditTool",
    "bases": [
      "bokeh.models.tools.PolyTool",
      "bokeh.models.tools.Drag",
      "bokeh.models.tools.Tap"
    ],
    "desc": " *toolbar icon*: |poly_edit_icon|\n\n    The PolyEditTool allows editing the vertices of one or more ``Patches`` or\n    ``MultiLine`` glyphs. Glyphs to be edited are defined via the ``renderers``\n    property and a renderer for the vertices is set via the ``vertex_renderer``\n    property (must render a point-like Glyph (a subclass of ``XYGlyph``).\n\n    The tool will modify the columns on the data source corresponding to the\n    ``xs`` and ``ys`` values of the glyph. Any additional columns in the data\n    source will be padded with the declared``empty_value``, when adding a new\n    point.\n\n    The supported actions include:\n\n    * Show vertices: Double tap an existing patch or multi-line\n\n    * Add vertex: Double tap an existing vertex to select it, the tool will\n      draw the next point, to add it tap in a new location. To finish editing\n      and add a point double tap otherwise press the <<esc> key to cancel.\n\n    * Move vertex: Drag an existing vertex and let go of the mouse button to\n      release it.\n\n    * Delete vertex: After selecting one or more vertices press <<backspace>>\n      while the mouse cursor is within the plot area.\n\n    .. |poly_edit_icon| image:: /_images/icons/PolyEdit.png\n        :height: 24px\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "vertex_renderer",
        "type": "Nullable(Instance(GlyphRenderer))",
        "desc": "\n    The renderer used to render the vertices of a selected line or polygon.\n    ",
        "default": null
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "PolySelectTool",
    "fullname": "bokeh.models.tools.PolySelectTool",
    "bases": [
      "bokeh.models.tools.Tap",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": " *toolbar icon*: |poly_select_icon|\n\n    The polygon selection tool allows users to make selections on a\n    Plot by indicating a polygonal region with mouse clicks. single\n    clicks (or taps) add successive points to the definition of the\n    polygon, and a double click (or tap) indicates the selection\n    region is ready.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    .. |poly_select_icon| image:: /_images/icons/PolygonSelect.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "\n    Defines what should happen when a new selection is made. The default\n    is to replace the existing selection. Other options are to append to\n    the selection, intersect with it or subtract from it.\n    ",
        "default": "replace"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "overlay",
        "type": "Instance(PolyAnnotation)",
        "desc": "\n    A shaded annotation drawn to indicate the selection region.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.PolyAnnotation\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [4, 4], \"line_width\": 2, \"syncable\": false, \"xs_units\": \"screen\", \"ys_units\": \"screen\"}"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "\n    An explicit list of renderers to hit test against. If unset, defaults to\n    all renderers on a plot.\n    ",
        "default": "auto"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that have a matching\n    value for their ``name`` attribute will be used.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "PolyTool",
    "fullname": "bokeh.models.tools.PolyTool",
    "bases": [
      "bokeh.models.tools.EditTool"
    ],
    "desc": " A base class for polygon draw/edit tools. \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "List(Instance(GlyphRenderer))",
        "desc": "\n    An explicit list of renderers corresponding to scatter glyphs that may\n    be edited.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "vertex_renderer",
        "type": "Nullable(Instance(GlyphRenderer))",
        "desc": "\n    The renderer used to render the vertices of a selected line or polygon.\n    ",
        "default": null
      },
      {
        "name": "custom_icon",
        "type": "Nullable(Image)",
        "desc": "\n    An icon to display in the toolbar.\n\n    The icon can provided as a string filename for an image, a PIL ``Image``\n    object, or an RGB(A) NumPy array.\n    ",
        "default": null
      },
      {
        "name": "empty_value",
        "type": "NonNullable(Either(Bool, Int, Float, Date, Datetime, Color, String))",
        "desc": "\n    Defines the value to insert on non-coordinate columns when a new\n    glyph is inserted into the ``ColumnDataSource`` columns, e.g. when a\n    circle glyph defines 'x', 'y' and 'color' columns, adding a new\n    point will add the x and y-coordinates to 'x' and 'y' columns and\n    the color column will be filled with the defined empty value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "PreText",
    "fullname": "bokeh.models.widgets.markups.PreText",
    "bases": [
      "bokeh.models.widgets.markups.Paragraph"
    ],
    "desc": " A block (paragraph) of pre-formatted text.\n\n    This Bokeh model corresponds to an HTML ``<pre>`` element.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_pretext.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "text",
        "type": "String",
        "desc": "\n    The text or HTML contents of the widget.\n\n    .. note::\n        If the HTML content contains elements which size depends on\n        on external, asynchronously loaded resources, the size of\n        the widget may be computed incorrectly. This is in particular\n        an issue with images (``<img>``). To remedy this problem, one\n        either has to set explicit dimensions using CSS properties,\n        HTML attributes or model's ``width`` and ``height`` properties,\n        or inline images' contents using data URIs.\n    ",
        "default": ""
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "style",
        "type": "Dict(String, Any)",
        "desc": "\n    Raw CSS style declaration. Note this may be web browser dependent.\n    ",
        "default": {}
      },
      {
        "name": "disable_math",
        "type": "Bool",
        "desc": "\n    Whether the contents should not be processed as TeX/LaTeX input.\n    ",
        "default": false
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "PrintfTickFormatter",
    "fullname": "bokeh.models.formatters.PrintfTickFormatter",
    "bases": [
      "bokeh.models.formatters.TickFormatter"
    ],
    "desc": " Tick formatter based on a printf-style format string. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "String",
        "desc": "\n    The number format, as defined as follows: the placeholder in the format\n    string is marked by % and is followed by one or more of these elements,\n    in this order:\n\n    * An optional ``+`` sign\n        Causes the result to be preceded with a plus or minus sign on numeric\n        values. By default, only the ``-`` sign is used on negative numbers.\n\n    * An optional padding specifier\n        Specifies what (if any) character to use for padding. Possible values\n        are 0 or any other character preceded by a ``'`` (single quote). The\n        default is to pad with spaces.\n\n    * An optional ``-`` sign\n        Causes sprintf to left-align the result of this placeholder. The default\n        is to right-align the result.\n\n    * An optional number\n        Specifies how many characters the result should have. If the value to be\n        returned is shorter than this number, the result will be padded.\n\n    * An optional precision modifier\n        Consists of a ``.`` (dot) followed by a number, specifies how many digits\n        should be displayed for floating point numbers. When used on a string, it\n        causes the result to be truncated.\n\n    * A type specifier\n        Can be any of:\n\n        - ``%`` --- yields a literal ``%`` character\n        - ``b`` --- yields an integer as a binary number\n        - ``c`` --- yields an integer as the character with that ASCII value\n        - ``d`` or ``i`` --- yields an integer as a signed decimal number\n        - ``e`` --- yields a float using scientific notation\n        - ``u`` --- yields an integer as an unsigned decimal number\n        - ``f`` --- yields a float as is\n        - ``o`` --- yields an integer as an octal number\n        - ``s`` --- yields a string as is\n        - ``x`` --- yields an integer as a hexadecimal number (lower-case)\n        - ``X`` --- yields an integer as a hexadecimal number (upper-case)\n\n    ",
        "default": "%s"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "ProxyToolbar",
    "fullname": "bokeh.models.tools.ProxyToolbar",
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ],
    "desc": " A toolbar that allow to merge and proxy tools of toolbars in multiple\n    plots.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "toolbars",
        "type": "List(Instance(Toolbar))",
        "desc": "\n    ",
        "default": []
      },
      {
        "name": "logo",
        "type": "Nullable(Enum('normal', 'grey'))",
        "desc": "\n    What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.\n    ",
        "default": "normal"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "tools",
        "type": "List(Instance(Tool))",
        "desc": "\n    A list of tools to add to the plot.\n    ",
        "default": []
      },
      {
        "name": "autohide",
        "type": "Bool",
        "desc": "\n    Whether the toolbar will be hidden by default. Default: False.\n    If True, hides toolbar when cursor is not in canvas.\n    ",
        "default": false
      }
    ]
  },
  {
    "name": "QUADKEYTileSource",
    "fullname": "bokeh.models.tiles.QUADKEYTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": " Has the same tile origin as the ``WMTSTileSource`` but requests tiles using\n    a `quadkey` argument instead of X, Y, Z e.g.\n    ``http://your.quadkey.tile.host/{Q}.png``\n\n    ",
    "props": [
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    A y-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "\n    Tile size in pixels (e.g. 256)\n    ",
        "default": 256
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "\n    Data provider attribution content. This can include HTML content.\n    ",
        "default": ""
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "\n    A minimum zoom level for the tile layer. This is the most zoomed-out level.\n    ",
        "default": 0
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "\n    Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.\n    ",
        "default": 156543.03392804097
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "String",
        "desc": "\n    Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png\n    ",
        "default": ""
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "\n    Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.\n\n    ",
        "default": true
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "\n    A maximum zoom level for the tile layer. This is the most zoomed-in level.\n    ",
        "default": 30
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "\n    Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    An x-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "\n    A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).\n    ",
        "default": {}
      }
    ]
  },
  {
    "name": "Quad",
    "fullname": "bokeh.models.glyphs.Quad",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render axis-aligned quads.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Quad.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the quads.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the quads.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the quads.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the quads.\n    ",
        "default": 1.0
      },
      {
        "name": "left",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the left edges.\n    ",
        "default": {
          "field": "left"
        }
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the quads.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the quads.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the quads.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the quads.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the quads.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the quads.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "top",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the top edges.\n    ",
        "default": {
          "field": "top"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the quads.\n    ",
        "default": null
      },
      {
        "name": "bottom",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the bottom edges.\n    ",
        "default": {
          "field": "bottom"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the quads.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the quads.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the quads.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the quads.\n    ",
        "default": 12.0
      },
      {
        "name": "right",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the right edges.\n    ",
        "default": {
          "field": "right"
        }
      }
    ]
  },
  {
    "name": "Quadratic",
    "fullname": "bokeh.models.glyphs.Quadratic",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render parabolas.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Quadratic.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the parabolas.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the parabolas.\n    ",
        "default": []
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the ending points.\n    ",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the parabolas.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the starting points.\n    ",
        "default": {
          "field": "x0"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the parabolas.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "cx",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the control points.\n    ",
        "default": {
          "field": "cx"
        }
      },
      {
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the starting points.\n    ",
        "default": {
          "field": "y0"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the parabolas.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the parabolas.\n    ",
        "default": 1.0
      },
      {
        "name": "cy",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the control points.\n    ",
        "default": {
          "field": "cy"
        }
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the parabolas.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the ending points.\n    ",
        "default": {
          "field": "x1"
        }
      }
    ]
  },
  {
    "name": "RadioButtonGroup",
    "fullname": "bokeh.models.widgets.groups.RadioButtonGroup",
    "bases": [
      "bokeh.models.widgets.groups.ButtonGroup"
    ],
    "desc": " A group of radio boxes rendered as toggle buttons.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "\n    A style for the button, signifying it's role.\n    ",
        "default": "default"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "\n    List of text labels contained in this group.\n    ",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the button group either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "active",
        "type": "Nullable(Int)",
        "desc": "\n    The index of the selected radio box, or ``None`` if nothing is\n    selected.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "RadioGroup",
    "fullname": "bokeh.models.widgets.groups.RadioGroup",
    "bases": [
      "bokeh.models.widgets.groups.Group"
    ],
    "desc": " A group of radio boxes.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "labels",
        "type": "List(String)",
        "desc": "\n    List of text labels contained in this group.\n    ",
        "default": []
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "\n    Should items be arrange vertically (``False``) or horizontally\n    in-line (``True``).\n    ",
        "default": false
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "active",
        "type": "Nullable(Int)",
        "desc": "\n    The index of the selected radio box, or ``None`` if nothing is selected.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Range",
    "fullname": "bokeh.models.ranges.Range",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A base class for all range types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Range1d",
    "fullname": "bokeh.models.ranges.Range1d",
    "bases": [
      "bokeh.models.ranges.Range"
    ],
    "desc": " A fixed, closed range [start, end] in a continuous scalar\n    dimension.\n\n    In addition to supplying ``start`` and ``end`` keyword arguments\n    to the ``Range1d`` initializer, you can also instantiate with\n    the convenience syntax::\n\n        Range(0, 10) # equivalent to Range(start=0, end=10)\n\n    ",
    "props": [
      {
        "name": "reset_start",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "\n    The start of the range to apply after reset. If set to ``None`` defaults\n    to the ``start`` value during initialization.\n    ",
        "default": null
      },
      {
        "name": "reset_end",
        "type": "Either(Null, Float, Datetime, TimeDelta)",
        "desc": "\n    The end of the range to apply when resetting. If set to ``None`` defaults\n    to the ``end`` value during initialization.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "end",
        "type": "Either(Float, Datetime, TimeDelta)",
        "desc": "\n    The end of the range.\n    ",
        "default": 1
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "min_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "\n    The level that the range is allowed to zoom in, expressed as the\n    minimum visible interval. If set to ``None`` (default), the minimum\n    interval is not bound. Can be a ``TimeDelta``. ",
        "default": null
      },
      {
        "name": "start",
        "type": "Either(Float, Datetime, TimeDelta)",
        "desc": "\n    The start of the range.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "max_interval",
        "type": "Either(Null, Float, TimeDelta)",
        "desc": "\n    The level that the range is allowed to zoom out, expressed as the\n    maximum visible interval. Can be a ``TimeDelta``. Note that ``bounds`` can\n    impose an implicit constraint on the maximum interval as well. ",
        "default": null
      },
      {
        "name": "bounds",
        "type": "Nullable(MinMaxBounds(Auto, Tuple(Float, Float), Tuple(Nullable(Float), Float), Tuple(Float, Nullable(Float)), Tuple(TimeDelta, TimeDelta), Tuple(Nullable(TimeDelta), TimeDelta), Tuple(TimeDelta, Nullable(TimeDelta)), Tuple(Datetime, Datetime), Tuple(Nullable(Datetime), Datetime), Tuple(Datetime, Nullable(Datetime))))",
        "desc": "\n    The bounds that the range is allowed to go to. Typically used to prevent\n    the user from panning/zooming/etc away from the data.\n\n    If set to ``'auto'``, the bounds will be computed to the start and end of the Range.\n\n    Bounds are provided as a tuple of ``(min, max)`` so regardless of whether your range is\n    increasing or decreasing, the first item should be the minimum value of the range and the\n    second item should be the maximum. Setting min > max will result in a ``ValueError``.\n\n    By default, bounds are ``None`` and your plot to pan/zoom as far as you want. If you only\n    want to constrain one end of the plot, you can set min or max to None.\n\n    Examples:\n\n    .. code-block:: python\n\n        Range1d(0, 1, bounds='auto')  # Auto-bounded to 0 and 1 (Default behavior)\n        Range1d(start=0, end=1, bounds=(0, None))  # Maximum is unbounded, minimum bounded to 0\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "RangeSlider",
    "fullname": "bokeh.models.widgets.sliders.RangeSlider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": " Range-slider based number range selection widget. ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "\n    Whether or not show slider's value.\n    ",
        "default": true
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "\n    ",
        "default": "ltr"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Tuple(Float, Float)))",
        "desc": "\n    Initial or selected value, throttled according to report only on mouseup.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "#e6e6e6"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "step",
        "type": "Float",
        "desc": "\n    The step between consecutive values.\n    ",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "\n    ",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Float)",
        "desc": "\n    The maximum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "start",
        "type": "NonNullable(Float)",
        "desc": "\n    The minimum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "\n    ",
        "default": "0[.]00"
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    Slider's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the slider either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "NonNullable(Tuple(Float, Float))",
        "desc": "\n    Initial or selected range.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "RangeTool",
    "fullname": "bokeh.models.tools.RangeTool",
    "bases": [
      "bokeh.models.tools.Drag"
    ],
    "desc": " *toolbar icon*: |range_icon|\n\n    The range tool allows the user to update range objects for either or both\n    of the x- or y-dimensions by dragging a corresponding shaded annotation to\n    move it or change its boundaries.\n\n    A common use case is to add this tool to a plot with a large fixed range,\n    but to configure the tool range from a different plot. When the user\n    manipulates the overlay, the range of the second plot will be updated\n    automatically.\n\n    .. |range_icon| image:: /_images/icons/Range.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "overlay",
        "type": "Instance(BoxAnnotation)",
        "desc": "\n    A shaded annotation drawn to indicate the configured ranges.\n    ",
        "default": "{\"__type__\": \"bokeh.models.annotations.BoxAnnotation\", \"fill_alpha\": 0.5, \"fill_color\": \"lightgrey\", \"level\": \"overlay\", \"line_alpha\": 1.0, \"line_color\": \"black\", \"line_dash\": [2, 2], \"line_width\": 0.5, \"syncable\": false}"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "y_range",
        "type": "Nullable(Instance(Range1d))",
        "desc": "\n    A range synchronized to the y-dimension of the overlay. If None, the overlay\n    will span the entire y-dimension.\n    ",
        "default": null
      },
      {
        "name": "y_interaction",
        "type": "Bool",
        "desc": "\n    Whether to respond to vertical pan motions when a ``y_range`` is present.\n\n    By default, when a ``y_range`` is specified, it is possible to adjust the\n    vertical position of the range box by panning vertically inside the box, or\n    along the top or bottom edge of the box. To disable this, and fix the range\n    box in place vertically, set to False. (The box will still update if the\n    ``y_range`` is updated programmatically.)\n    ",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x_range",
        "type": "Nullable(Instance(Range1d))",
        "desc": "\n    A range synchronized to the x-dimension of the overlay. If None, the overlay\n    will span the entire x-dimension.\n    ",
        "default": null
      },
      {
        "name": "x_interaction",
        "type": "Bool",
        "desc": "\n    Whether to respond to horizontal pan motions when an ``x_range`` is present.\n\n    By default, when an ``x_range`` is specified, it is possible to adjust the\n    horizontal position of the range box by panning horizontally inside the\n    box, or along the top or bottom edge of the box. To disable this, and fix\n    the  range box in place horizontally, set to False. (The box will still\n    update if the ``x_range`` is updated programmatically.)\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Ray",
    "fullname": "bokeh.models.glyphs.Ray",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render rays.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Ray.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "length_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the rays.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the rays.\n    ",
        "default": []
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles in radians to extend the rays, as measured from the horizontal.\n    ",
        "default": 0
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the rays.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the rays.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to start the rays.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to start the rays.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "length",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The length to extend the ray. Note that this ``length`` defaults\n    to |data units| (measured in the x-direction).\n    ",
        "default": 0
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the rays.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the rays.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the rays.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Rect",
    "fullname": "bokeh.models.glyphs.Rect",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render rectangles.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Rect.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "height_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "height",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The overall heights of the rectangles.\n    ",
        "default": {
          "field": "height"
        }
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the rectangles.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the rectangles.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the rectangles.\n    ",
        "default": 1.0
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to rotate the rectangles, as measured from the horizontal.\n    ",
        "default": 0.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the rectangles.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the rectangles.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the rectangles.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the rectangles.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the rectangles.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the rectangles.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the rectangles.\n    ",
        "default": "black"
      },
      {
        "name": "width",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    The overall widths of the rectangles.\n    ",
        "default": {
          "field": "width"
        }
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "width_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the rectangles.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the centers of the rectangles.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the centers of the rectangles.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the rectangles.\n    ",
        "default": 1
      },
      {
        "name": "dilate",
        "type": "Bool",
        "desc": "\n    Whether to always round fractional pixel locations in such a way\n    as to make the rectangles bigger.\n\n    This setting may be useful if pixel rounding errors are causing\n    rectangles to have a gap between them, when they should appear\n    flush.\n    ",
        "default": false
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the rectangles.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the rectangles.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the rectangles.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "RedoTool",
    "fullname": "bokeh.models.tools.RedoTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " *toolbar icon*: |redo_icon|\n\n    Redo tool reverses the last action performed by undo tool.\n\n    .. |redo_icon| image:: /_images/icons/Redo.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Renderer",
    "fullname": "bokeh.models.renderers.Renderer",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "An abstract base class for renderer types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "image"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "RendererGroup",
    "fullname": "bokeh.models.renderers.RendererGroup",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "A collection of renderers.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Makes all groupped renderers visible or not.\n    ",
        "default": true
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "ResetTool",
    "fullname": "bokeh.models.tools.ResetTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " *toolbar icon*: |reset_icon|\n\n    The reset tool is an action. When activated in the toolbar, the tool resets\n    the data bounds of the plot to their values when the plot was initially\n    created.\n\n    .. |reset_icon| image:: /_images/icons/Reset.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Row",
    "fullname": "bokeh.models.layouts.Row",
    "bases": [
      "bokeh.models.layouts.Box"
    ],
    "desc": " Lay out child components in a single horizontal row.\n\n    Children can be specified as positional arguments, as a single argument\n    that is a sequence, or using the ``children`` keyword argument.\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "cols",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), width=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "\n    Describes how the component should maintain its columns' widths.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion.\n\n    ",
        "default": "auto"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "\n    The list of children, which can be other components including plots, rows, columns, and widgets.\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "\n    The gap between children (in pixels).\n    ",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "RowAggregator",
    "fullname": "bokeh.models.widgets.tables.RowAggregator",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Abstract base class for data cube's row formatters.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "\n    Refers to the table column being aggregated\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "SaveTool",
    "fullname": "bokeh.models.tools.SaveTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " *toolbar icon*: |save_icon|\n\n    The save tool is an action. When activated, the tool opens a download dialog\n    which allows to save an image reproduction of the plot in PNG format. If\n    automatic download is not support by a web browser, the tool falls back to\n    opening the generated image in a new tab or window. User then can manually\n    save it by right clicking on the image and choosing \"Save As\" (or similar)\n    menu item.\n\n    .. |save_icon| image:: /_images/icons/Save.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "ScalarExpression",
    "fullname": "bokeh.models.expressions.ScalarExpression",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for for scalar expressions. \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Scale",
    "fullname": "bokeh.models.scales.Scale",
    "bases": [
      "bokeh.models.transforms.Transform"
    ],
    "desc": " Base class for ``Scale`` models that represent an invertible\n    computation to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block\n\n        compute(x: number): number {\n            # compute and return the transform of a single value\n        }\n\n        v_compute(xs: Arrayable<number>): Arrayable<number> {\n            # compute and return the transform of an array of values\n        }\n\n        invert(sx: number): number {\n            # compute and return the inverse transform of a single value\n        }\n\n        v_invert(sxs: Arrayable<number>): Arrayable<number> {\n            # compute and return the inverse transform of an array of values\n        }\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "ScanningColorMapper",
    "fullname": "bokeh.models.mappers.ScanningColorMapper",
    "bases": [
      "bokeh.models.mappers.ContinuousColorMapper"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "domain",
        "type": "List(Tuple(Instance(GlyphRenderer), Either(String, List(String))))",
        "desc": "\n    A collection of glyph renderers to pool data from for establishing data metrics.\n    If empty, mapped data will be used instead.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "low_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is lower than ``low`` value. If None,\n    values lower than ``low`` are mapped to the first color in the palette.\n    ",
        "default": null
      },
      {
        "name": "high_color",
        "type": "Nullable(Color)",
        "desc": "\n    Color to be used if data is higher than ``high`` value. If None,\n    values higher than ``high`` are mapped to the last color in the palette.\n    ",
        "default": null
      },
      {
        "name": "nan_color",
        "type": "Color",
        "desc": "\n    Color to be used if data is NaN or otherwise not mappable.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "gray"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "palette",
        "type": "Seq(Color)",
        "desc": "\n    A sequence of colors to use as the target palette for mapping.\n\n    This property can also be set as a ``String``, to the name of any of the\n    palettes shown in :ref:`bokeh.palettes`.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "low",
        "type": "Nullable(Float)",
        "desc": "\n    The minimum value of the range to map into the palette. Values below\n    this are clamped to ``low``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      },
      {
        "name": "high",
        "type": "Nullable(Float)",
        "desc": "\n    The maximum value of the range to map into the palette. Values above\n    this are clamped to ``high``. If ``None``, the value is inferred from data.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Scatter",
    "fullname": "bokeh.models.glyphs.Scatter",
    "bases": [
      "bokeh.models.glyphs.Marker"
    ],
    "desc": " Render scatter markers selected from a predefined list of designs.\n\n    Use ``Scatter`` to draw any of Bokeh's built-in marker types:\n    ``asterisk``, ``circle``, ``circle_cross``, ``circle_dot``, ``circle_x``,\n    ``circle_y``, ``cross``, ``dash``, ``diamond``, ``diamond_cross``,\n    ``diamond_dot``, ``dot``, ``hex``, ``hex_dot``, ``inverted_triangle``,\n    ``plus``, ``square``, ``square_cross``, ``square_dot``, ``square_pin``,\n    ``square_x``, ``star``, ``star_dot``, ``triangle``, ``triangle_dot``,\n    ``triangle_pin``, ``x``, or ``y``. This collection is available in\n    :class:`~bokeh.core.enums.MarkerType`.\n\n    Bokeh's built-in markers consist of a set of base markers, most of which can\n    be combined with different kinds of additional visual features:\n\n    .. bokeh-plot:: docs/user_guide/examples/plotting_markertypes.py\n        :source-position: none\n\n    You can select marker types in two ways:\n\n    * To draw the **same marker for all values**, use the ``marker`` attribute\n      to specify the name of a specific marker. For example:\n\n      .. code-block:: python\n\n          glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"square\")\n          plot.add_glyph(source, glyph)\n\n      This will render square markers for all points.\n\n    * Alternatively, to use **marker types specified in a data source column**,\n      assign the column name to the ``marker`` attribute. For example:\n\n      .. code-block:: python\n\n          # source.data['markers'] = [\"circle\", \"square\", \"circle\", ... ]\n\n          glyph = Scatter(x=\"x\", y=\"y\", size=\"sizes\", marker=\"markers\")\n          plot.add_glyph(source, glyph)\n\n    .. note::\n        When you draw ``circle`` markers with ``Scatter``, you can only assign a\n        size in |screen units| (by passing a number of pixels to the ``size``\n        property). In case you want to define the radius of circles in\n        |data units|, use the :class:`~bokeh.models.glyphs.Circle` glyph instead\n        of the ``Scatter`` glyph.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Scatter.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "hit_dilation",
        "type": "Size",
        "desc": "\n    The factor by which to dilate the hit radius\n    which is responsible for defining the range in which a\n    marker responds to interactions with the Hover and Tap\n    tools.\n    ",
        "default": 1.0
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the markers.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the markers.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to rotate the markers.\n    ",
        "default": 0.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the markers.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the markers.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the markers.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the markers.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the markers.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the markers.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-axis coordinates for the center of the markers.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-axis coordinates for the center of the markers.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the markers.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the markers.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the markers.\n    ",
        "default": 0
      },
      {
        "name": "marker",
        "type": "MarkerSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'))), MarkerType('asterisk', 'circle', 'circle_cross', 'circle_dot', 'circle_x', 'circle_y', 'cross', 'dash', 'diamond', 'diamond_cross', 'diamond_dot', 'dot', 'hex', 'hex_dot', 'inverted_triangle', 'plus', 'square', 'square_cross', 'square_dot', 'square_pin', 'square_x', 'star', 'star_dot', 'triangle', 'triangle_dot', 'triangle_pin', 'x', 'y'))",
        "desc": "\n    Which marker to render. This can be the name of any built in marker,\n    e.g. \"circle\", or a reference to a data column containing such names.\n    ",
        "default": "circle"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "SizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size (diameter) values for the markers in screen space units.\n    ",
        "default": 4
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the markers.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "ScientificFormatter",
    "fullname": "bokeh.models.widgets.tables.ScientificFormatter",
    "bases": [
      "bokeh.models.widgets.tables.StringFormatter"
    ],
    "desc": " Display numeric values from continuous ranges as \"basic numbers\",\n    using scientific notation when appropriate by default.\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    An optional text font style, e.g. bold, italic.\n    ",
        "default": "normal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "precision",
        "type": "Int",
        "desc": "\n    How many digits of precision to display.\n    ",
        "default": 10
      },
      {
        "name": "nan_format",
        "type": "Nullable(String)",
        "desc": "\n    Formatting to apply to NaN and None values (falls back to scientific formatting if not set).\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    An optional text align, i.e. left, center or right.\n    ",
        "default": "left"
      },
      {
        "name": "power_limit_low",
        "type": "Int",
        "desc": "\n    Limit the use of scientific notation to when::\n        log(x) <= power_limit_low\n    ",
        "default": -3
      },
      {
        "name": "power_limit_high",
        "type": "Int",
        "desc": "\n    Limit the use of scientific notation to when::\n        log(x) >= power_limit_high\n    ",
        "default": 5
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "\n    An optional text color.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Scroll",
    "fullname": "bokeh.models.tools.Scroll",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": " A base class for tools that respond to scroll events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Segment",
    "fullname": "bokeh.models.glyphs.Segment",
    "bases": [
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render segments.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Segment.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the segments.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the segments.\n    ",
        "default": []
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the ending points.\n    ",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the segments.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "x0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the starting points.\n    ",
        "default": {
          "field": "x0"
        }
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the segments.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y0",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the starting points.\n    ",
        "default": {
          "field": "y0"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the segments.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the segments.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the segments.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the ending points.\n    ",
        "default": {
          "field": "x1"
        }
      }
    ]
  },
  {
    "name": "Select",
    "fullname": "bokeh.models.widgets.inputs.Select",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": " Single-select widget.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "\n    Initial or selected value.\n    ",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "options",
        "type": "Either(List(Either(String, Tuple(String, String))), Dict(String, List(Either(String, Tuple(String, String)))))",
        "desc": "\n    Available selection options. Options may be provided either as a list of\n    possible string values, or as a list of tuples, each of the form\n    ``(value, label)``. In the latter case, the visible widget text for each\n    value will be corresponding given label. Option groupings can be provided\n    by supplying a dictionary object whose values are in the aforementioned\n    list format\n    ",
        "default": []
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "SelectEditor",
    "fullname": "bokeh.models.widgets.tables.SelectEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Select cell editor.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "options",
        "type": "List(String)",
        "desc": "\n    The list of options to select from.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "SelectTool",
    "fullname": "bokeh.models.tools.SelectTool",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": " A base class for tools that perfrom \"selections\", e.g. ``BoxSelectTool``.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "\n    Defines what should happen when a new selection is made. The default\n    is to replace the existing selection. Other options are to append to\n    the selection, intersect with it or subtract from it.\n    ",
        "default": "replace"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "\n    An explicit list of renderers to hit test against. If unset, defaults to\n    all renderers on a plot.\n    ",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that have a matching\n    value for their ``name`` attribute will be used.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Selection",
    "fullname": "bokeh.models.selections.Selection",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "\n    A Selection represents a portion of the data in a ``DataSource``, which\n    can be visually manipulated in a plot.\n\n    Selections are typically created by selecting points in a plot with\n    a ``SelectTool``, but can also be programmatically specified.\n\n    For most glyphs, the ``indices`` property is the relevant value to use.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "indices",
        "type": "Seq(Int)",
        "desc": "\n    The \"scatter\" level indices included in a selection. For example, for a\n    selection on a ``Circle`` glyph, this list records the indices of which\n    individual circles are selected.\n\n    For \"multi\" glyphs such as ``Patches``, ``MultiLine``, ``MultiPolygons``,\n    etc, this list records the indices of which entire sub-items are selected.\n    For example, which indidual polygons of a ``MultiPolygon`` are selected.\n    ",
        "default": []
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_indices",
        "type": "Seq(Int)",
        "desc": "\n    The point indices included in a selection on a ``Line`` glyph.\n\n    This value records the indices of the individual points on a ``Line`` that\n    were selected by a selection tool.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "multiline_indices",
        "type": "Dict(String, Seq(Int))",
        "desc": "\n    The detailed point indices included in a selection on a ``MultiLine``.\n\n    This value records which points, on which lines, are part of a seletion on\n    a ``MulitLine``. The keys are the top level indices (i.e., which line)\n    which map to lists of indices (i.e. which points on that line).\n\n    If you only need to know which lines are selected, without knowing what\n    individual points on those lines are selected, then you can look at the\n    keys of this dictionary (converted to ints).\n    ",
        "default": {}
      }
    ]
  },
  {
    "name": "SelectionPolicy",
    "fullname": "bokeh.models.selections.SelectionPolicy",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": "\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "ServerSentDataSource",
    "fullname": "bokeh.models.sources.ServerSentDataSource",
    "bases": [
      "bokeh.models.sources.WebDataSource"
    ],
    "desc": " A data source that can populate columns by receiving server sent\n    events endpoints.\n\n    ",
    "props": [
      {
        "name": "data_url",
        "type": "NonNullable(String)",
        "desc": "\n    A URL to to fetch data from.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "\n    Mapping of column names to sequences of data. The columns can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.\n\n    The .data attribute can also be set from Pandas DataFrames or GroupBy\n    objects. In these cases, the behaviour is identical to passing the objects\n    to the ``ColumnDataSource`` initializer.\n    ",
        "default": {}
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append')",
        "desc": "\n    Whether to append new data to existing data (up to ``max_size``), or to\n    replace existing data entirely.\n    ",
        "default": "replace"
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "\n    An instance of a ``SelectionPolicy`` that determines how selections are set.\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "adapter",
        "type": "Nullable(Instance(CustomJS))",
        "desc": "\n    A JavaScript callback to adapt raw JSON responses to Bokeh ``ColumnDataSource``\n    format.\n\n    If provided, this callback is executes immediately after the JSON data is\n    received, but before appending or replacing data in the data source. The\n    ``CustomJS`` callback will receive the ``AjaxDataSource`` as ``cb_obj`` and\n    will receive the raw JSON response as ``cb_data.response``. The callback\n    code should return a ``data`` object suitable for a Bokeh ``ColumnDataSource``\n    (i.e.  a mapping of string column names to arrays of data).\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "\n    An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\n    This is a read-only property. You may only change the attributes of this object\n    to change the selection (e.g., ``selected.indices``).\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "max_size",
        "type": "Nullable(Int)",
        "desc": "\n    Maximum size of the data columns. If a new fetch would result in columns\n    larger than ``max_size``, then earlier data is dropped to make room.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "SingleIntervalTicker",
    "fullname": "bokeh.models.tickers.SingleIntervalTicker",
    "bases": [
      "bokeh.models.tickers.ContinuousTicker"
    ],
    "desc": " Generate evenly spaced ticks at a fixed interval regardless of\n    scale.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "\n    The interval between adjacent ticks.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Slider",
    "fullname": "bokeh.models.widgets.sliders.Slider",
    "bases": [
      "bokeh.models.widgets.sliders.AbstractSlider"
    ],
    "desc": " Slider-based number selection widget. ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "show_value",
        "type": "Bool",
        "desc": "\n    Whether or not show slider's value.\n    ",
        "default": true
      },
      {
        "name": "direction",
        "type": "Enum('ltr', 'rtl')",
        "desc": "\n    ",
        "default": "ltr"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "value_throttled",
        "type": "Readonly(NonNullable(Float))",
        "desc": "\n    Initial or selected value, throttled according to report only on mouseup.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "bar_color",
        "type": "Color",
        "desc": "\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "#e6e6e6"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "step",
        "type": "Float",
        "desc": "\n    The step between consecutive values.\n    ",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "tooltips",
        "type": "Bool",
        "desc": "\n    ",
        "default": true
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "end",
        "type": "NonNullable(Float)",
        "desc": "\n    The maximum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "start",
        "type": "NonNullable(Float)",
        "desc": "\n    The minimum allowable value.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(String, Instance(TickFormatter))",
        "desc": "\n    ",
        "default": "0[.]00"
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    Slider's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "orientation",
        "type": "Enum('horizontal', 'vertical')",
        "desc": "\n    Orient the slider either horizontally (default) or vertically.\n    ",
        "default": "horizontal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "NonNullable(Float)",
        "desc": "\n    Initial or selected value.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "Slope",
    "fullname": "bokeh.models.annotations.Slope",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": " Render a sloped line as an annotation.\n\n    See :ref:`userguide_annotations_slope` for information on plotting slopes.\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the line.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the line.\n    ",
        "default": []
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "gradient",
        "type": "Nullable(Float)",
        "desc": "\n    The gradient of the line, in |data units|\n    ",
        "default": null
      },
      {
        "name": "y_intercept",
        "type": "Nullable(Float)",
        "desc": "\n    The y intercept of the line, in |data units|\n    ",
        "default": null
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the line.\n    ",
        "default": "bevel"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the line.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the line.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the line.\n    ",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the line.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Spacer",
    "fullname": "bokeh.models.layouts.Spacer",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": " A container for space used to fill an empty spot in a row or column.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Span",
    "fullname": "bokeh.models.annotations.Span",
    "bases": [
      "bokeh.models.annotations.Annotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": " Render a horizontal or vertical line span.\n\n    See :ref:`userguide_annotations_spans` for information on plotting spans.\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the span.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the span.\n    ",
        "default": []
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "location_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n    The unit type for the location attribute. Interpreted as \"data space\"\n    units by default.\n    ",
        "default": "data"
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the span.\n    ",
        "default": "bevel"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the span.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "location",
        "type": "Nullable(Float)",
        "desc": "\n    The location of the span, along ``dimension``.\n\n    Datetime values are also accepted, but note that they are immediately\n    converted to milliseconds-since-epoch.\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the span.\n    ",
        "default": 1
      },
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "\n    The direction of the span can be specified by setting this property\n    to \"height\" (``y`` direction) or \"width\" (``x`` direction).\n    ",
        "default": "width"
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the span.\n    ",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the span.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "\n    Specifies whether the contents are rendered to a canvas or as a\n    HTML element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    .. note::\n        The HTML labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.\n\n    ",
        "default": "canvas"
      }
    ]
  },
  {
    "name": "Spinner",
    "fullname": "bokeh.models.widgets.inputs.Spinner",
    "bases": [
      "bokeh.models.widgets.inputs.NumericInput"
    ],
    "desc": " Numeric Spinner input widget.\n\n    ",
    "props": [
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "value_throttled",
        "type": "Readonly(Either(Null, Float, Int))",
        "desc": "\n    value reported at the end of interactions\n    ",
        "default": null
      },
      {
        "name": "page_step_multiplier",
        "type": "Interval(Float, 0, inf)",
        "desc": "\n    Defines the multiplication factor applied to step when the page up and page\n    down keys are pressed\n    ",
        "default": 10
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "step",
        "type": "Interval(Float, 1e-16, inf)",
        "desc": "\n    The step added or subtracted to the current value\n    ",
        "default": 1
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('int', 'float')",
        "desc": "\n    Define the type of number which can be enter in the input\n\n    example\n    mode int: 1, -1, 156\n    mode float: 1, -1.2, 1.1e-25\n    ",
        "default": "float"
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "wheel_wait",
        "type": "Either(Int, Float)",
        "desc": "\n    Defines the debounce time in ms before updating `value_throttled` when the\n    mouse wheel is used to change the input\n    ",
        "default": 100
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "high",
        "type": "Either(Null, Float, Int)",
        "desc": "\n    Optional highest allowable value.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "format",
        "type": "Either(Null, String, Instance(TickFormatter))",
        "desc": "\n    ",
        "default": null
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "\n    Placeholder for empty input field.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "value",
        "type": "Either(Null, Float, Int)",
        "desc": "\n    Initial or entered value.\n\n    Change events are triggered whenever <enter> is pressed.\n    ",
        "default": null
      },
      {
        "name": "low",
        "type": "Either(Null, Float, Int)",
        "desc": "\n    Optional lowest allowable value.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Stack",
    "fullname": "bokeh.models.expressions.Stack",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": " An expression for generating arrays by summing different columns from\n    a ``ColumnDataSource``.\n\n    This expression is useful for implementing stacked bar charts at a low\n    level.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "fields",
        "type": "Seq(String)",
        "desc": "\n    A sequence of fields from a ``ColumnDataSource`` to sum (elementwise). For\n    example:\n\n    .. code-block:: python\n\n        Stack(fields=['sales', 'marketing'])\n\n    Will compute an array of values (in the browser) by adding the elements\n    of the ``'sales'`` and ``'marketing'`` columns of a data source.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "StaticLayoutProvider",
    "fullname": "bokeh.models.graphs.StaticLayoutProvider",
    "bases": [
      "bokeh.models.graphs.LayoutProvider"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "graph_layout",
        "type": "Dict(Either(String, Int), Seq(Any))",
        "desc": "\n    The coordinates of the graph nodes in cartesian space. The dictionary\n    keys correspond to a node index and the values are a two element sequence\n    containing the x and y coordinates of the node.\n\n    .. code-block:: python\n\n        {\n            0 : [0.5, 0.5],\n            1 : [1.0, 0.86],\n            2 : [0.86, 1],\n        }\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Step",
    "fullname": "bokeh.models.glyphs.Step",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph"
    ],
    "desc": " Render step lines.\n\n    Step levels can be draw before, after, or centered on each point, according\n    to the value of the ``mode`` property.\n\n    The x-coordinates are assumed to be (and must be) sorted in ascending order\n    for steps to be properly rendered.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Step.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the steps.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the steps.\n    ",
        "default": []
      },
      {
        "name": "line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the steps.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('before', 'after', 'center')",
        "desc": "\n    Where the step \"level\" should be drawn in relation to the x and y\n    coordinates. The parameter can assume one of three values:\n\n    * ``before``: (default) Draw step levels before each x-coordinate (no step before the first point)\n    * ``after``:  Draw step levels after each x-coordinate (no step after the last point)\n    * ``center``: Draw step levels centered on each x-coordinate\n    ",
        "default": "before"
      },
      {
        "name": "line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the steps.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for the steps.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for the steps.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "Float",
        "desc": "\n    The line width values for the steps.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the steps.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the steps.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "StepInterpolator",
    "fullname": "bokeh.models.transforms.StepInterpolator",
    "bases": [
      "bokeh.models.transforms.Interpolator"
    ],
    "desc": " Compute a step-wise interpolation between the points provided through\n    the ``x``, ``y``, and ``data`` parameters.\n\n    ",
    "props": [
      {
        "name": "data",
        "type": "Nullable(Instance(ColumnarDataSource))",
        "desc": "\n    Data which defines the source for the named columns if a string is passed to either the ``x`` or ``y`` parameters.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('before', 'after', 'center')",
        "desc": "\n    Adjust the behavior of the returned value in relation to the control points.  The parameter can assume one of three values:\n\n    * ``after`` (default): Assume the y-value associated with the nearest x-value which is less than or equal to the point to transform.\n    * ``before``: Assume the y-value associated with the nearest x-value which is greater than the point to transform.\n    * ``center``: Assume the y-value associated with the nearest x-value to the point to transform.\n    ",
        "default": "after"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "clip",
        "type": "Bool",
        "desc": "\n    Determine if the interpolation should clip the result to include only values inside its predefined range.\n    If this is set to False, it will return the most value of the closest point.\n    ",
        "default": true
      },
      {
        "name": "y",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "\n    Dependant coordinate denoting the value of a point at a location.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "x",
        "type": "NonNullable(Either(String, Seq(Float)))",
        "desc": "\n    Independent coordinate denoting the location of a point.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "StringEditor",
    "fullname": "bokeh.models.widgets.tables.StringEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Basic string cell editor with auto-completion.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "completions",
        "type": "List(String)",
        "desc": "\n    An optional list of completion strings.\n    ",
        "default": []
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "StringFormatter",
    "fullname": "bokeh.models.widgets.tables.StringFormatter",
    "bases": [
      "bokeh.models.widgets.tables.CellFormatter"
    ],
    "desc": " Basic string cell formatter.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    An optional text font style, e.g. bold, italic.\n    ",
        "default": "normal"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "text_align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    An optional text align, i.e. left, center or right.\n    ",
        "default": "left"
      },
      {
        "name": "text_color",
        "type": "Nullable(Color)",
        "desc": "\n    An optional text color.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "SumAggregator",
    "fullname": "bokeh.models.widgets.tables.SumAggregator",
    "bases": [
      "bokeh.models.widgets.tables.RowAggregator"
    ],
    "desc": " Simple sum across multiple rows.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field_",
        "type": "String",
        "desc": "\n    Refers to the table column being aggregated\n    ",
        "default": ""
      }
    ]
  },
  {
    "name": "TMSTileSource",
    "fullname": "bokeh.models.tiles.TMSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": " Contains tile config info and provides urls for tiles based on a\n    templated url e.g. ``http://your.tms.server.host/{Z}/{X}/{Y}.png``. The\n    defining feature of TMS is the tile-origin in located at the bottom-left.\n\n    ``TMSTileSource`` can also be helpful in implementing tile renderers for\n    custom tile sets, including non-spatial datasets.\n\n    ",
    "props": [
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    A y-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "\n    Tile size in pixels (e.g. 256)\n    ",
        "default": 256
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "\n    Data provider attribution content. This can include HTML content.\n    ",
        "default": ""
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "\n    A minimum zoom level for the tile layer. This is the most zoomed-out level.\n    ",
        "default": 0
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "\n    Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.\n    ",
        "default": 156543.03392804097
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "String",
        "desc": "\n    Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png\n    ",
        "default": ""
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "\n    Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.\n\n    ",
        "default": true
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "\n    A maximum zoom level for the tile layer. This is the most zoomed-in level.\n    ",
        "default": 30
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "\n    Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    An x-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "\n    A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).\n    ",
        "default": {}
      }
    ]
  },
  {
    "name": "TableColumn",
    "fullname": "bokeh.models.widgets.tables.TableColumn",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Table column widget.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether this column shold be displayed or not.\n    ",
        "default": true
      },
      {
        "name": "sortable",
        "type": "Bool",
        "desc": "\n    Whether this column is sortable or not. Note that data table has\n    to have sorting enabled to allow sorting in general.\n    ",
        "default": true
      },
      {
        "name": "width",
        "type": "Int",
        "desc": "\n    The width or maximum width (depending on data table's configuration)\n    in pixels of this column.\n    ",
        "default": 300
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": "\n    The name of the field mapping to a column in the data source.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "editor",
        "type": "Instance(CellEditor)",
        "desc": "\n    The cell editor for this column. By default, a simple string editor\n    is used.\n    ",
        "default": "{\"__type__\": \"bokeh.models.widgets.tables.StringEditor\"}"
      },
      {
        "name": "default_sort",
        "type": "Enum('ascending', 'descending')",
        "desc": "\n    The default sorting order. By default ``ascending`` order is used.\n    ",
        "default": "ascending"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "formatter",
        "type": "Instance(CellFormatter)",
        "desc": "\n    The cell formatter for this column. By default, a simple string\n    formatter is used.\n    ",
        "default": "{\"__type__\": \"bokeh.models.widgets.tables.StringFormatter\"}"
      },
      {
        "name": "title",
        "type": "Nullable(String)",
        "desc": "\n    The title of this column. If not set, column's data field is\n    used instead.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "TableWidget",
    "fullname": "bokeh.models.widgets.tables.TableWidget",
    "bases": [
      "bokeh.models.widgets.widget.Widget"
    ],
    "desc": " Abstract base class for data table (data grid) widgets.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "view",
        "type": "Instance(CDSView)",
        "desc": "\n    A view into the data source to use when rendering table rows. A default view\n    of the entire data source is created if a view is not passed in during\n    initialization.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    The source of data for the widget.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Tabs",
    "fullname": "bokeh.models.layouts.Tabs",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": " A panel widget with navigation tabs.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../sphinx/source/docs/user_guide/examples/interaction_tab_panes.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tabs_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": "\n    The location of the buttons that activate tabs.\n    ",
        "default": "above"
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tabs",
        "type": "List(Instance(Panel))",
        "desc": "\n    The list of child panel widgets.\n    ",
        "default": []
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "active",
        "type": "Int",
        "desc": "\n    The index of the active tab.\n    ",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Tap",
    "fullname": "bokeh.models.tools.Tap",
    "bases": [
      "bokeh.models.tools.GestureTool"
    ],
    "desc": " A base class for tools that respond to tap/click events.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "TapTool",
    "fullname": "bokeh.models.tools.TapTool",
    "bases": [
      "bokeh.models.tools.Tap",
      "bokeh.models.tools.SelectTool"
    ],
    "desc": " *toolbar icon*: |tap_icon|\n\n    The tap selection tool allows the user to select at single points by\n    left-clicking a mouse, or tapping with a finger.\n\n    See :ref:`userguide_styling_selected_unselected_glyphs` for information\n    on styling selected and unselected glyphs.\n\n    .. |tap_icon| image:: /_images/icons/Tap.png\n        :height: 24px\n\n    .. note::\n        Selections can be comprised of multiple regions, even those\n        made by different selection tools. Hold down the <<shift>> key\n        while making a selection to append the new selection to any\n        previous selection that might exist.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append', 'intersect', 'subtract')",
        "desc": "\n    Defines what should happen when a new selection is made. The default\n    is to replace the existing selection. Other options are to append to\n    the selection, intersect with it or subtract from it.\n    ",
        "default": "replace"
      },
      {
        "name": "behavior",
        "type": "Enum('select', 'inspect')",
        "desc": "\n    This tool can be configured to either make selections or inspections\n    on associated data sources. The difference is that selection changes\n    propagate across bokeh and other components (e.g. selection glyph)\n    will be notified. Inspections don't act like this, so it's useful to\n    configure `callback` when setting `behavior='inspect'`.\n    ",
        "default": "select"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "renderers",
        "type": "Either(Auto, List(Instance(DataRenderer)))",
        "desc": "\n    An explicit list of renderers to hit test against. If unset, defaults to\n    all renderers on a plot.\n    ",
        "default": "auto"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "callback",
        "type": "Nullable(Instance(Callback))",
        "desc": "\n    A callback to execute *whenever a glyph is \"hit\"* by a mouse click\n    or tap.\n\n    This is often useful with the  :class:`~bokeh.models.callbacks.OpenURL`\n    model to open URLs based on a user clicking or tapping a specific glyph.\n\n    However, it may also be a :class:`~bokeh.models.callbacks.CustomJS`\n    which can execute arbitrary JavaScript code in response to clicking or\n    tapping glyphs. The callback will be executed for each individual glyph\n    that is it hit by a click or tap, and will receive the ``TapTool`` model\n    as  ``cb_obj``. The optional ``cb_data`` will have the data source as\n    its ``.source`` attribute and the selection geometry as its\n    ``.geometries`` attribute.\n\n    The ``.geometries`` attribute has 5 members.\n    ``.type`` is the geometry type, which always a ``.point`` for a tap event.\n    ``.sx`` and ``.sy`` are the screen X and Y coordinates where the tap occurred.\n    ``.x`` and ``.y`` are the converted data coordinates for the item that has\n    been selected. The ``.x`` and ``.y`` values are based on the axis assigned\n    to that glyph.\n\n    .. note::\n        This callback does *not* execute on every tap, only when a glyph is\n        \"hit\". If you would like to execute a callback on every mouse tap,\n        please see :ref:`userguide_interaction_jscallbacks_customjs_interactions`.\n\n    ",
        "default": null
      },
      {
        "name": "gesture",
        "type": "Enum('tap', 'doubletap')",
        "desc": "\n    Specifies which kind of gesture will be used to trigger the tool,\n    either a single or double tap.\n    ",
        "default": "tap"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "names",
        "type": "List(String)",
        "desc": "\n    A list of names to query for. If set, only renderers that have a matching\n    value for their ``name`` attribute will be used.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "TeX",
    "fullname": "bokeh.models.text.TeX",
    "bases": [
      "bokeh.models.text.MathText"
    ],
    "desc": "\n    Render mathematical content using `LaTeX <https://www.latex-project.org/>`_\n    notation. See :ref:`userguide_styling_math` in the |user guide| for more\n    information.\n\n    .. note::\n        Bokeh uses `MathJax <https://www.mathjax.org>`_ to render text\n        containing mathematical notation.\n\n        MathJax only supports math-mode macros (no text-mode macros). You\n        can see more about differences between standard TeX/LaTeX and MathJax\n        here: https://docs.mathjax.org/en/latest/input/tex/differences.html\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "NonNullable(String)",
        "desc": "\n    The text value to render.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "macros",
        "type": "Dict(String, Either(String, Tuple(String, Int)))",
        "desc": "\n    User defined TeX macros.\n\n    This is a mapping from control sequence names (without leading backslash) to\n    either replacement strings or tuples of a replacement string and a number\n    of arguments.\n\n    Example:\n\n    .. code-block:: python\n\n        TeX(text=r\"\\R \\rightarrow \\R^2\", macros={\"RR\": r\"{\\bf R}\"})\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "inline",
        "type": "Bool",
        "desc": "\n    Whether the math text is inline display or not (for TeX input). Default is False.\n    ",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "TeeHead",
    "fullname": "bokeh.models.arrow_heads.TeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": " Render a tee-style arrow head.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the arrow head outline.\n    ",
        "default": "black"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the arrow head outline.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the arrow head outline.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the arrow head outline.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the arrow head outline.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the arrow head outline.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size, in pixels, of the arrow head.\n    ",
        "default": 25
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the arrow head outline.\n    ",
        "default": "bevel"
      }
    ]
  },
  {
    "name": "Text",
    "fullname": "bokeh.models.glyphs.Text",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.TextGlyph"
    ],
    "desc": " Render text.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Text.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "text_font",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "\n    The text font values for the text.\n    ",
        "default": {
          "value": "helvetica"
        }
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "text_baseline",
        "type": "TextBaselineSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))), Enum('top', 'middle', 'bottom', 'alphabetic', 'hanging', 'ideographic'))",
        "desc": "\n    The text baseline values for the text.\n    ",
        "default": "bottom"
      },
      {
        "name": "text_font_size",
        "type": "FontSizeSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), FontSize)), FontSize)",
        "desc": "\n    The text font size values for the text.\n    ",
        "default": {
          "value": "16px"
        }
      },
      {
        "name": "angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to rotate the text, as measured from the horizontal.\n    ",
        "default": 0
      },
      {
        "name": "text_align",
        "type": "TextAlignSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('left', 'right', 'center'))), Enum('left', 'right', 'center'))",
        "desc": "\n    The text align values for the text.\n    ",
        "default": "left"
      },
      {
        "name": "text_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The text alpha values for the text.\n    ",
        "default": 1.0
      },
      {
        "name": "text_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The text color values for the text.\n    ",
        "default": "#444444"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "StringSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), List(String))), List(String))",
        "desc": "\n    The text values to render.\n    ",
        "default": "text"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates to locate the text anchors.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates to locate the text anchors.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "text_font_style",
        "type": "FontStyleSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('normal', 'italic', 'bold', 'bold italic'))), Enum('normal', 'italic', 'bold', 'bold italic'))",
        "desc": "\n    The text font style values for the text.\n    ",
        "default": "normal"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "text_line_height",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The text line height values for the text.\n    ",
        "default": 1.2
      },
      {
        "name": "x_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    Offset values to apply to the x-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in |screen units| from a given data position.\n    ",
        "default": 0
      },
      {
        "name": "y_offset",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    Offset values to apply to the y-coordinates.\n\n    This is useful, for instance, if it is desired to \"float\" text a fixed\n    distance in |screen units| from a given data position.\n    ",
        "default": 0
      }
    ]
  },
  {
    "name": "TextAnnotation",
    "fullname": "bokeh.models.annotations.TextAnnotation",
    "bases": [
      "bokeh.models.annotations.Annotation",
      "bokeh.models.annotations._HasRenderMode"
    ],
    "desc": " Base class for text annotation models such as labels and titles.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "\n    Specifies whether the contents are rendered to a canvas or as a\n    HTML element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    .. note::\n        The HTML labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.\n\n    ",
        "default": "canvas"
      }
    ]
  },
  {
    "name": "TextAreaInput",
    "fullname": "bokeh.models.widgets.inputs.TextAreaInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextLikeInput"
    ],
    "desc": " Multi-line input widget.\n\n    ",
    "props": [
      {
        "name": "value_input",
        "type": "String",
        "desc": "\n    Initial or current value.\n\n    Change events are triggered whenever any update happens, i.e. on every\n    keypress.\n    ",
        "default": ""
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "cols",
        "type": "Int",
        "desc": "\n    Specifies the width of the text area (in average character width). Default: 20\n    ",
        "default": 20
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "\n    Max count of characters in field\n    ",
        "default": 500
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "\n    Placeholder for empty input field.\n    ",
        "default": ""
      },
      {
        "name": "rows",
        "type": "Int",
        "desc": "\n    Specifies the height of the text area (in lines). Default: 2\n    ",
        "default": 2
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "\n    Initial or entered text value.\n\n    Change events are triggered whenever <enter> is pressed.\n    ",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "TextEditor",
    "fullname": "bokeh.models.widgets.tables.TextEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Multi-line string cell editor.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "TextGlyph",
    "fullname": "bokeh.models.glyph.TextGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": " Glyphs with text properties\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "TextInput",
    "fullname": "bokeh.models.widgets.inputs.TextInput",
    "bases": [
      "bokeh.models.widgets.inputs.TextLikeInput"
    ],
    "desc": " Single-line input widget.\n\n    ",
    "props": [
      {
        "name": "value_input",
        "type": "String",
        "desc": "\n    Initial or current value.\n\n    Change events are triggered whenever any update happens, i.e. on every\n    keypress.\n    ",
        "default": ""
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "\n    Max count of characters in field\n    ",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "\n    Placeholder for empty input field.\n    ",
        "default": ""
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "\n    Initial or entered text value.\n\n    Change events are triggered whenever <enter> is pressed.\n    ",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "TextLikeInput",
    "fullname": "bokeh.models.widgets.inputs.TextLikeInput",
    "bases": [
      "bokeh.models.widgets.inputs.InputWidget"
    ],
    "desc": " Base class for text-like input widgets.\n\n    ",
    "props": [
      {
        "name": "value_input",
        "type": "String",
        "desc": "\n    Initial or current value.\n\n    Change events are triggered whenever any update happens, i.e. on every\n    keypress.\n    ",
        "default": ""
      },
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_length",
        "type": "Nullable(Int)",
        "desc": "\n    Max count of characters in field\n    ",
        "default": null
      },
      {
        "name": "placeholder",
        "type": "String",
        "desc": "\n    Placeholder for empty input field.\n    ",
        "default": ""
      },
      {
        "name": "title",
        "type": "String",
        "desc": "\n    Widget's label.\n    ",
        "default": ""
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "value",
        "type": "String",
        "desc": "\n    Initial or entered text value.\n\n    Change events are triggered whenever <enter> is pressed.\n    ",
        "default": ""
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Texture",
    "fullname": "bokeh.models.textures.Texture",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for ``Texture`` models that represent fill patterns.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "repetition",
        "type": "Enum('repeat', 'repeat_x', 'repeat_y', 'no_repeat')",
        "desc": "\n\n    ",
        "default": "repeat"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "TickFormatter",
    "fullname": "bokeh.models.formatters.TickFormatter",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A base class for all tick formatter types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Ticker",
    "fullname": "bokeh.models.tickers.Ticker",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A base class for all ticker types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "TileRenderer",
    "fullname": "bokeh.models.renderers.TileRenderer",
    "bases": [
      "bokeh.models.renderers.Renderer"
    ],
    "desc": "\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "alpha",
        "type": "Float",
        "desc": "\n    tile opacity 0.0 - 1.0\n    ",
        "default": 1.0
      },
      {
        "name": "smoothing",
        "type": "Bool",
        "desc": "\n    Enable image smoothing for the rendered tiles.\n    ",
        "default": true
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "image"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tile_source",
        "type": "Instance(TileSource)",
        "desc": "\n    Local data source to use when rendering glyphs on the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.tiles.WMTSTileSource\"}"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "render_parents",
        "type": "Bool",
        "desc": "\n    Flag enable/disable drawing of parent tiles while waiting for new tiles to arrive. Default value is True.\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "TileSource",
    "fullname": "bokeh.models.tiles.TileSource",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A base class for all tile source types.\n\n    In general, tile sources are used as a required input for ``TileRenderer``.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "\n    Data provider attribution content. This can include HTML content.\n    ",
        "default": ""
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "\n    A minimum zoom level for the tile layer. This is the most zoomed-out level.\n    ",
        "default": 0
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "\n    Tile size in pixels (e.g. 256)\n    ",
        "default": 256
      },
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    A y-offset in plot coordinates\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "\n    Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "url",
        "type": "String",
        "desc": "\n    Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png\n    ",
        "default": ""
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "\n    A maximum zoom level for the tile layer. This is the most zoomed-in level.\n    ",
        "default": 30
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    An x-offset in plot coordinates\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "\n    A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).\n    ",
        "default": {}
      }
    ]
  },
  {
    "name": "TimeEditor",
    "fullname": "bokeh.models.widgets.tables.TimeEditor",
    "bases": [
      "bokeh.models.widgets.tables.CellEditor"
    ],
    "desc": " Spinner-based time cell editor.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Title",
    "fullname": "bokeh.models.annotations.Title",
    "bases": [
      "bokeh.models.annotations.TextAnnotation"
    ],
    "desc": " Render a single title box as an annotation.\n\n    See :ref:`userguide_annotations_titles` for information on plotting titles.\n\n    ",
    "props": [
      {
        "name": "text_font",
        "type": "String",
        "desc": "\n    Name of a font to use for rendering text, e.g., ``'times'``,\n    ``'helvetica'``.\n\n    ",
        "default": "helvetica"
      },
      {
        "name": "text_font_size",
        "type": "String",
        "desc": null,
        "default": "13px"
      },
      {
        "name": "border_line_color",
        "type": "Nullable(Color)",
        "desc": "\n    The line color values for the text bounding box.\n    ",
        "default": null
      },
      {
        "name": "background_fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the text bounding box.\n    ",
        "default": 1.0
      },
      {
        "name": "text_color",
        "type": "Color",
        "desc": "\n    A color to use to fill text with.\n    \n    Acceptable values are:\n\n    - any of the |named CSS colors|, e.g ``'green'``, ``'indigo'``\n    - RGB(A) hex strings, e.g., ``'#FF0000'``, ``'#44444444'``\n    - CSS4 color strings, e.g., ``'rgba(255, 0, 127, 0.6)'``,\n      ``'rgb(0 127 0 / 1.0)'``, or ``'hsl(60deg 100% 50% / 1.0)'``\n    - a 3-tuple of integers (r, g, b) between 0 and 255\n    - a 4-tuple of (r, g, b, a) where r, g, b are integers between 0 and 255,\n      and a is between 0 and 1\n    - a 32-bit unsigned integer using the 0xRRGGBBAA byte order pattern\n\n    ",
        "default": "#444444"
      },
      {
        "name": "border_line_alpha",
        "type": "Alpha",
        "desc": "\n    The line alpha values for the text bounding box.\n    ",
        "default": 1.0
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "text",
        "type": "String",
        "desc": "\n    The text value to render.\n    ",
        "default": ""
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "text_font_style",
        "type": "Enum('normal', 'italic', 'bold', 'bold italic')",
        "desc": "\n    A style to use for rendering text.\n\n    Acceptable values are:\n\n    - ``'normal'`` normal text\n    - ``'italic'`` *italic text*\n    - ``'bold'`` **bold text**\n\n    ",
        "default": "bold"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "border_line_cap",
        "type": "Enum('butt', 'round', 'square')",
        "desc": "\n    The line cap values for the text bounding box.\n    ",
        "default": "butt"
      },
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "border_line_join",
        "type": "Enum('miter', 'round', 'bevel')",
        "desc": "\n    The line join values for the text bounding box.\n    ",
        "default": "bevel"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "background_fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the text bounding box.\n    ",
        "default": null
      },
      {
        "name": "border_line_dash_offset",
        "type": "Int",
        "desc": "\n    The line dash offset values for the text bounding box.\n    ",
        "default": 0
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "vertical_align",
        "type": "Enum('top', 'middle', 'bottom')",
        "desc": "\n    Alignment of the text in its enclosing space, *across* the direction of the text.\n    ",
        "default": "bottom"
      },
      {
        "name": "border_line_width",
        "type": "Float",
        "desc": "\n    The line width values for the text bounding box.\n    ",
        "default": 1
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "standoff",
        "type": "Float",
        "desc": "\n    ",
        "default": 10
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "border_line_dash",
        "type": "DashPattern",
        "desc": "\n    The line dash values for the text bounding box.\n    ",
        "default": []
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "align",
        "type": "Enum('left', 'right', 'center')",
        "desc": "\n    Alignment of the text in its enclosing space, *along* the direction of the text.\n    ",
        "default": "left"
      },
      {
        "name": "text_line_height",
        "type": "Float",
        "desc": "\n    How much additional space should be allocated for the title. The value is provided\n    as a number, but should be treated as a percentage of font size. The default is\n    100%, which means no additional space will be used.\n    ",
        "default": 1.0
      },
      {
        "name": "offset",
        "type": "Float",
        "desc": "\n    Offset the text by a number of pixels (can be positive or negative). Shifts the text in\n    different directions based on the location of the title:\n\n        * above: shifts title right\n        * right: shifts title down\n        * below: shifts title right\n        * left: shifts title up\n\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "text_alpha",
        "type": "Alpha",
        "desc": "\n    An alpha value to use to fill text with.\n    \n    Acceptable values are floating-point numbers between 0 and 1 (0 being\n    transparent and 1 being opaque).\n    ",
        "default": 1.0
      },
      {
        "name": "render_mode",
        "type": "Enum('canvas', 'css')",
        "desc": "\n    Specifies whether the contents are rendered to a canvas or as a\n    HTML element overlaid on the canvas. The default mode is \"canvas\".\n\n    .. note::\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    .. note::\n        The HTML labels won't be present in the output using the \"save\" tool.\n\n    .. warning::\n        Not all visual styling properties are supported if the render_mode is\n        set to \"css\". The border_line_dash property isn't fully supported and\n        border_line_dash_offset isn't supported at all. Setting text_alpha will\n        modify the opacity of the entire background box and border in addition\n        to the text. Finally, clipping Label annotations inside of the plot\n        area isn't supported in \"css\" mode.\n\n    ",
        "default": "canvas"
      }
    ]
  },
  {
    "name": "Toggle",
    "fullname": "bokeh.models.widgets.buttons.Toggle",
    "bases": [
      "bokeh.models.widgets.buttons.AbstractButton"
    ],
    "desc": " A two-state toggle button.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "button_type",
        "type": "Enum('default', 'primary', 'success', 'warning', 'danger', 'light')",
        "desc": "\n    A style for the button, signifying it's role.\n    ",
        "default": "default"
      },
      {
        "name": "label",
        "type": "String",
        "desc": "\n    The text label for the button to display.\n    ",
        "default": "Toggle"
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "icon",
        "type": "Nullable(Instance(AbstractIcon))",
        "desc": "\n    An optional image appearing to the left of button's text.\n    ",
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "active",
        "type": "Bool",
        "desc": "\n    The initial state of a button. Also used to trigger ``on_click`` event\n    handler.\n    ",
        "default": false
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Tool",
    "fullname": "bokeh.models.tools.Tool",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A base class for all interactive tool types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "Toolbar",
    "fullname": "bokeh.models.tools.Toolbar",
    "bases": [
      "bokeh.models.tools.ToolbarBase"
    ],
    "desc": " Collect tools to display for a single plot.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "active_multi",
        "type": "Either(Null, Auto, Instance(GestureTool))",
        "desc": "\n    Specify an active multi-gesture tool, for instance an edit tool or a range\n    tool.\n\n    Note that activating a multi-gesture tool will deactivate any other gesture\n    tools as appropriate. For example, if a pan tool is set as the active drag,\n    and this property is set to a ``BoxEditTool`` instance, the pan tool will\n    be deactivated (i.e. the multi-gesture tool will take precedence).\n    ",
        "default": "auto"
      },
      {
        "name": "active_tap",
        "type": "Either(Null, Auto, Instance(Tap))",
        "desc": "\n    Specify a tap/click tool to be active when the plot is displayed.\n    ",
        "default": "auto"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "active_inspect",
        "type": "Either(Null, Auto, Instance(InspectTool), Seq(Instance(InspectTool)))",
        "desc": "\n    Specify an inspection tool or sequence of inspection tools to be active when\n    the plot is displayed.\n    ",
        "default": "auto"
      },
      {
        "name": "logo",
        "type": "Nullable(Enum('normal', 'grey'))",
        "desc": "\n    What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.\n    ",
        "default": "normal"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "active_scroll",
        "type": "Either(Null, Auto, Instance(Scroll))",
        "desc": "\n    Specify a scroll/pinch tool to be active when the plot is displayed.\n    ",
        "default": "auto"
      },
      {
        "name": "autohide",
        "type": "Bool",
        "desc": "\n    Whether the toolbar will be hidden by default. Default: False.\n    If True, hides toolbar when cursor is not in canvas.\n    ",
        "default": false
      },
      {
        "name": "active_drag",
        "type": "Either(Null, Auto, Instance(Drag))",
        "desc": "\n    Specify a drag tool to be active when the plot is displayed.\n    ",
        "default": "auto"
      },
      {
        "name": "tools",
        "type": "List(Instance(Tool))",
        "desc": "\n    A list of tools to add to the plot.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "ToolbarBase",
    "fullname": "bokeh.models.tools.ToolbarBase",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " A base class for different toolbars.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "logo",
        "type": "Nullable(Enum('normal', 'grey'))",
        "desc": "\n    What version of the Bokeh logo to display on the toolbar. If\n    set to None, no logo will be displayed.\n    ",
        "default": "normal"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "tools",
        "type": "List(Instance(Tool))",
        "desc": "\n    A list of tools to add to the plot.\n    ",
        "default": []
      },
      {
        "name": "autohide",
        "type": "Bool",
        "desc": "\n    Whether the toolbar will be hidden by default. Default: False.\n    If True, hides toolbar when cursor is not in canvas.\n    ",
        "default": false
      }
    ]
  },
  {
    "name": "ToolbarBox",
    "fullname": "bokeh.models.tools.ToolbarBox",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": " A layoutable toolbar that can accept the tools of multiple plots, and\n    can merge the tools into a single button for convenience.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "toolbar_location",
        "type": "Enum('above', 'below', 'left', 'right')",
        "desc": null,
        "default": "right"
      },
      {
        "name": "toolbar",
        "type": "Instance(ToolbarBase)",
        "desc": "\n    A toolbar associated with a plot which holds all its tools.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "ToolbarPanel",
    "fullname": "bokeh.models.annotations.ToolbarPanel",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": null,
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "annotation"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "toolbar",
        "type": "Instance(Toolbar)",
        "desc": "\n    A toolbar to display.\n    ",
        "default": "<Undefined>"
      }
    ]
  },
  {
    "name": "Tooltip",
    "fullname": "bokeh.models.annotations.Tooltip",
    "bases": [
      "bokeh.models.annotations.Annotation"
    ],
    "desc": " Render a tooltip.\n\n    .. note::\n        This model is currently managed by BokehJS and is not useful\n        directly from python.\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "overlay"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "show_arrow",
        "type": "Bool",
        "desc": "\n    Whether tooltip's arrow should be shown.\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "attachment",
        "type": "Enum('horizontal', 'vertical', 'left', 'right', 'above', 'below')",
        "desc": "\n    Whether the tooltip should be displayed to the left or right of the cursor\n    position or above or below it, or if it should be automatically placed\n    in the horizontal or vertical dimension.\n    ",
        "default": "horizontal"
      },
      {
        "name": "inner_only",
        "type": "Bool",
        "desc": "\n    Whether to display outside a central plot frame area.\n\n    .. note:\n        This property is deprecated and will be removed in bokeh 3.0.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Transform",
    "fullname": "bokeh.models.transforms.Transform",
    "bases": [
      "bokeh.model.model.Model"
    ],
    "desc": " Base class for ``Transform`` models that represent a computation\n    to be carried out on the client-side.\n\n    JavaScript implementations should implement the following methods:\n\n    .. code-block\n\n        compute(x: number): number {\n            # compute and return the transform of a single value\n        }\n\n        v_compute(xs: Arrayable<number>): Arrayable<number> {\n            # compute and return the transform of an array of values\n        }\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "UndoTool",
    "fullname": "bokeh.models.tools.UndoTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " *toolbar icon*: |undo_icon|\n\n    Undo tool allows to restore previous state of the plot.\n\n    .. |undo_icon| image:: /_images/icons/Undo.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "UnionRenderers",
    "fullname": "bokeh.models.selections.UnionRenderers",
    "bases": [
      "bokeh.models.selections.SelectionPolicy"
    ],
    "desc": "\n    When a data source is shared between multiple renderers, selecting a point on\n    from any renderer will cause that row in the data source to be selected. The\n    selection is made from the union of hit test results from all renderers.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "VArea",
    "fullname": "bokeh.models.glyphs.VArea",
    "bases": [
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render a vertically directed area between two equal length sequences\n    of y-coordinates with the same x-coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/VArea.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the vertical directed area.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the vertical directed area.\n    ",
        "default": 1.0
      },
      {
        "name": "y1",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for the points of one side of the area.\n    ",
        "default": {
          "field": "y1"
        }
      },
      {
        "name": "fill_alpha",
        "type": "Alpha",
        "desc": "\n    The fill alpha values for the vertical directed area.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "Nullable(Color)",
        "desc": "\n    The fill color values for the vertical directed area.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the vertical directed area.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the vertical directed area.\n    ",
        "default": "black"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "y2",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates for the points of the other side of the area.\n    ",
        "default": {
          "field": "y2"
        }
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the vertical directed area.\n    ",
        "default": null
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates for the points of the area.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the vertical directed area.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "VBar",
    "fullname": "bokeh.models.glyphs.VBar",
    "bases": [
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render vertical bars, given a center coordinate, width and (top, bottom) coordinates.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/VBar.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the vertical bars.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the vertical bars.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the vertical bars.\n    ",
        "default": 1.0
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the vertical bars.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the vertical bars.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the vertical bars.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the vertical bars.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the vertical bars.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the vertical bars.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the vertical bars.\n    ",
        "default": "black"
      },
      {
        "name": "width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The widths of the vertical bars.\n    ",
        "default": 1
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "top",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the top edges.\n    ",
        "default": {
          "field": "top"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the vertical bars.\n    ",
        "default": null
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the centers of the vertical bars.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "bottom",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the bottom edges.\n    ",
        "default": 0
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the vertical bars.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the vertical bars.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the vertical bars.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the vertical bars.\n    ",
        "default": 12.0
      }
    ]
  },
  {
    "name": "VeeHead",
    "fullname": "bokeh.models.arrow_heads.VeeHead",
    "bases": [
      "bokeh.models.arrow_heads.ArrowHead"
    ],
    "desc": " Render a vee-style arrow head.\n\n    ",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the arrow head outline.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the arrow head outline.\n    ",
        "default": []
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the arrow head interior.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the arrow head interior.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the arrow head outline.\n    ",
        "default": "bevel"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the arrow head outline.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the arrow head outline.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the arrow head outline.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the arrow head outline.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "size",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The size, in pixels, of the arrow head.\n    ",
        "default": 25
      }
    ]
  },
  {
    "name": "WMTSTileSource",
    "fullname": "bokeh.models.tiles.WMTSTileSource",
    "bases": [
      "bokeh.models.tiles.MercatorTileSource"
    ],
    "desc": " Behaves much like ``TMSTileSource`` but has its tile-origin in the\n    top-left.\n\n    This is the most common used tile source for web mapping applications.\n    Such companies as Google, MapQuest, Stamen, Esri, and OpenStreetMap provide\n    service which use the WMTS specification e.g. ``http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png``.\n\n    ",
    "props": [
      {
        "name": "y_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    A y-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "tile_size",
        "type": "Int",
        "desc": "\n    Tile size in pixels (e.g. 256)\n    ",
        "default": 256
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "attribution",
        "type": "String",
        "desc": "\n    Data provider attribution content. This can include HTML content.\n    ",
        "default": ""
      },
      {
        "name": "min_zoom",
        "type": "Int",
        "desc": "\n    A minimum zoom level for the tile layer. This is the most zoomed-out level.\n    ",
        "default": 0
      },
      {
        "name": "initial_resolution",
        "type": "Nullable(Float)",
        "desc": "\n    Resolution (plot_units / pixels) of minimum zoom level of tileset\n    projection. None to auto-compute.\n    ",
        "default": 156543.03392804097
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "url",
        "type": "String",
        "desc": "\n    Tile service url e.g., http://c.tile.openstreetmap.org/{Z}/{X}/{Y}.png\n    ",
        "default": ""
      },
      {
        "name": "wrap_around",
        "type": "Bool",
        "desc": "\n    Enables continuous horizontal panning by wrapping the x-axis based on\n    bounds of map.\n\n    ..note::\n        Axis coordinates are not wrapped. To toggle axis label visibility,\n        use ``plot.axis.visible = False``.\n\n    ",
        "default": true
      },
      {
        "name": "max_zoom",
        "type": "Int",
        "desc": "\n    A maximum zoom level for the tile layer. This is the most zoomed-in level.\n    ",
        "default": 30
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "snap_to_zoom",
        "type": "Bool",
        "desc": "\n    Forces initial extents to snap to the closest larger zoom level.",
        "default": false
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "x_origin_offset",
        "type": "NonNullable(Float)",
        "desc": "\n    An x-offset in plot coordinates\n    ",
        "default": 20037508.34
      },
      {
        "name": "extra_url_vars",
        "type": "Dict(String, Any)",
        "desc": "\n    A dictionary that maps url variable template keys to values.\n\n    These variables are useful for parts of tile urls which do not change from\n    tile to tile (e.g. server host name, or layer name).\n    ",
        "default": {}
      }
    ]
  },
  {
    "name": "WebDataSource",
    "fullname": "bokeh.models.sources.WebDataSource",
    "bases": [
      "bokeh.models.sources.ColumnDataSource"
    ],
    "desc": " Base class for web column data sources that can update from data\n    URLs.\n\n    .. note::\n        This base class is typically not useful to instantiate on its own.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "data_url",
        "type": "NonNullable(String)",
        "desc": "\n    A URL to to fetch data from.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "data",
        "type": "ColumnData(String, Seq(Any))",
        "desc": "\n    Mapping of column names to sequences of data. The columns can be, e.g,\n    Python lists or tuples, NumPy arrays, etc.\n\n    The .data attribute can also be set from Pandas DataFrames or GroupBy\n    objects. In these cases, the behaviour is identical to passing the objects\n    to the ``ColumnDataSource`` initializer.\n    ",
        "default": {}
      },
      {
        "name": "mode",
        "type": "Enum('replace', 'append')",
        "desc": "\n    Whether to append new data to existing data (up to ``max_size``), or to\n    replace existing data entirely.\n    ",
        "default": "replace"
      },
      {
        "name": "selection_policy",
        "type": "Instance(SelectionPolicy)",
        "desc": "\n    An instance of a ``SelectionPolicy`` that determines how selections are set.\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.UnionRenderers\"}"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "adapter",
        "type": "Nullable(Instance(CustomJS))",
        "desc": "\n    A JavaScript callback to adapt raw JSON responses to Bokeh ``ColumnDataSource``\n    format.\n\n    If provided, this callback is executes immediately after the JSON data is\n    received, but before appending or replacing data in the data source. The\n    ``CustomJS`` callback will receive the ``AjaxDataSource`` as ``cb_obj`` and\n    will receive the raw JSON response as ``cb_data.response``. The callback\n    code should return a ``data`` object suitable for a Bokeh ``ColumnDataSource``\n    (i.e.  a mapping of string column names to arrays of data).\n    ",
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "selected",
        "type": "Readonly(Instance(Selection))",
        "desc": "\n    An instance of a ``Selection`` that indicates selected indices on this ``DataSource``.\n    This is a read-only property. You may only change the attributes of this object\n    to change the selection (e.g., ``selected.indices``).\n    ",
        "default": "{\"__type__\": \"bokeh.models.selections.Selection\"}"
      },
      {
        "name": "max_size",
        "type": "Nullable(Int)",
        "desc": "\n    Maximum size of the data columns. If a new fetch would result in columns\n    larger than ``max_size``, then earlier data is dropped to make room.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "Wedge",
    "fullname": "bokeh.models.glyphs.Wedge",
    "bases": [
      "bokeh.models.glyph.XYGlyph",
      "bokeh.models.glyph.LineGlyph",
      "bokeh.models.glyph.FillGlyph",
      "bokeh.models.glyph.HatchGlyph"
    ],
    "desc": " Render wedges.\n\n    \n\n    Example\n    -------\n\n    .. bokeh-plot:: ../../examples/reference/models/Wedge.py\n        :source-position: below\n\n",
    "props": [
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the wedges.\n    ",
        "default": "butt"
      },
      {
        "name": "direction",
        "type": "Enum('clock', 'anticlock')",
        "desc": "\n    Which direction to stroke between the start and end angles.\n    ",
        "default": "anticlock"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the wedges.\n    ",
        "default": []
      },
      {
        "name": "hatch_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch alpha values for the wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "radius_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "hatch_weight",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch weight values for the wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The fill alpha values for the wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "fill_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The fill color values for the wedges.\n    ",
        "default": "gray"
      },
      {
        "name": "hatch_extra",
        "type": "Dict(String, Instance(Texture))",
        "desc": "\n    The hatch extra values for the wedges.\n    ",
        "default": {}
      },
      {
        "name": "hatch_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The hatch color values for the wedges.\n    ",
        "default": "black"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the wedges.\n    ",
        "default": "bevel"
      },
      {
        "name": "radius",
        "type": "DistanceSpec(units_default='data')",
        "desc": "\n    Radii of the wedges.\n    ",
        "default": {
          "field": "radius"
        }
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the wedges.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "start_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to start the wedges, as measured from the horizontal.\n    ",
        "default": {
          "field": "start_angle"
        }
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "end_angle",
        "type": "AngleSpec(units_default='rad')",
        "desc": "\n    The angles to end the wedges, as measured from the horizontal.\n    ",
        "default": {
          "field": "end_angle"
        }
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "hatch_pattern",
        "type": "HatchPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(HatchPatternType))), Nullable(HatchPatternType))",
        "desc": "\n    The hatch pattern values for the wedges.\n    ",
        "default": null
      },
      {
        "name": "y",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The y-coordinates of the points of the wedges.\n    ",
        "default": {
          "field": "y"
        }
      },
      {
        "name": "x",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The x-coordinates of the points of the wedges.\n    ",
        "default": {
          "field": "x"
        }
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the wedges.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the wedges.\n    ",
        "default": 1.0
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the wedges.\n    ",
        "default": 0
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "hatch_scale",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The hatch scale values for the wedges.\n    ",
        "default": 12.0
      },
      {
        "name": "end_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      },
      {
        "name": "start_angle_units",
        "type": "Enum('deg', 'rad', 'grad', 'turn')",
        "desc": "\n        Units to use for the associated property: deg, rad, grad or turn\n        ",
        "default": "rad"
      }
    ]
  },
  {
    "name": "WheelPanTool",
    "fullname": "bokeh.models.tools.WheelPanTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "desc": " *toolbar icon*: |wheel_pan_icon|\n\n    The wheel pan tool allows the user to pan the plot along the configured\n    dimension using the scroll wheel.\n\n    .. |wheel_pan_icon| image:: /_images/icons/WheelPan.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "\n    Which dimension the wheel pan tool is constrained to act in. By default the\n    wheel pan tool will pan the plot along the x-axis.\n    ",
        "default": "width"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "WheelZoomTool",
    "fullname": "bokeh.models.tools.WheelZoomTool",
    "bases": [
      "bokeh.models.tools.Scroll"
    ],
    "desc": " *toolbar icon*: |wheel_zoom_icon|\n\n    The wheel zoom tool will zoom the plot in and out, centered on the\n    current mouse location.\n\n    The wheel zoom tool also activates the border regions of a Plot for\n    \"single axis\" zooming. For instance, zooming in the vertical border or\n    axis will effect a zoom in the vertical direction only, with the\n    horizontal dimension kept fixed.\n\n    .. |wheel_zoom_icon| image:: /_images/icons/WheelZoom.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the wheel zoom tool is constrained to act in. By default\n    the wheel zoom tool will zoom in any dimension, but can be configured to\n    only zoom horizontally across the width of the plot, or vertically across\n    the height of the plot.\n    ",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "speed",
        "type": "Float",
        "desc": "\n    Speed at which the wheel zooms. Default is 1/600. Optimal range is between\n    0.001 and 0.09. High values will be clipped. Speed may very between browsers.\n    ",
        "default": 0.0016666666666666668
      },
      {
        "name": "zoom_on_axis",
        "type": "Bool",
        "desc": "\n    Whether scrolling on an axis (outside the central plot area) should zoom\n    that dimension.\n    ",
        "default": true
      },
      {
        "name": "maintain_focus",
        "type": "Bool",
        "desc": "\n    If True, then hitting a range bound in any one dimension will prevent all\n    further zooming all dimensions. If False, zooming can continue\n    independently in any dimension that has not yet reached its bounds, even if\n    that causes overall focus or aspect ratio to change.\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "Whisker",
    "fullname": "bokeh.models.annotations.Whisker",
    "bases": [
      "bokeh.models.annotations.DataAnnotation"
    ],
    "desc": " Render a whisker along a dimension.\n\n    See :ref:`userguide_annotations_whiskers` for information on plotting whiskers.\n\n    ",
    "props": [
      {
        "name": "coordinates",
        "type": "Nullable(Instance(CoordinateMapping))",
        "desc": null,
        "default": null
      },
      {
        "name": "upper_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "line_cap",
        "type": "LineCapSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('butt', 'round', 'square'))), Enum('butt', 'round', 'square'))",
        "desc": "\n    The line cap values for the whisker body.\n    ",
        "default": "butt"
      },
      {
        "name": "line_dash",
        "type": "DashPatternSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), DashPattern)), DashPattern)",
        "desc": "\n    The line dash values for the whisker body.\n    ",
        "default": []
      },
      {
        "name": "upper_head",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "\n    Instance of ``ArrowHead``.\n    ",
        "default": "{\"__type__\": \"bokeh.models.arrow_heads.TeeHead\", \"size\": {\"value\": 10}}"
      },
      {
        "name": "y_range_name",
        "type": "String",
        "desc": "\n    A particular (named) y-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default y-range.\n    ",
        "default": "default"
      },
      {
        "name": "source",
        "type": "Instance(DataSource)",
        "desc": "\n    Local data source to use when rendering annotations on the plot.\n    ",
        "default": "{\"__type__\": \"bokeh.models.sources.ColumnDataSource\", \"data\": {}}"
      },
      {
        "name": "lower_head",
        "type": "Nullable(Instance(ArrowHead))",
        "desc": "\n    Instance of ``ArrowHead``.\n    ",
        "default": "{\"__type__\": \"bokeh.models.arrow_heads.TeeHead\", \"size\": {\"value\": 10}}"
      },
      {
        "name": "lower_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "base_units",
        "type": "Enum('screen', 'data')",
        "desc": "\n        Units to use for the associated property: screen or data\n        ",
        "default": "data"
      },
      {
        "name": "line_join",
        "type": "LineJoinSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Enum('miter', 'round', 'bevel'))), Enum('miter', 'round', 'bevel'))",
        "desc": "\n    The line join values for the whisker body.\n    ",
        "default": "bevel"
      },
      {
        "name": "level",
        "type": "Enum('image', 'underlay', 'glyph', 'guide', 'annotation', 'overlay')",
        "desc": "\n    Specifies the level in which to paint this renderer.\n    ",
        "default": "underlay"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Is the renderer visible.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "line_color",
        "type": "ColorSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Nullable(Color))), Nullable(Color))",
        "desc": "\n    The line color values for the whisker body.\n    ",
        "default": "black"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "lower",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "\n    The coordinates of the lower end of the whiskers.\n    ",
        "default": {
          "field": "lower"
        }
      },
      {
        "name": "base",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "\n    The orthogonal coordinates of the upper and lower values.\n    ",
        "default": {
          "field": "base"
        }
      },
      {
        "name": "dimension",
        "type": "Enum('width', 'height')",
        "desc": "\n    The direction of the whisker can be specified by setting this property\n    to \"height\" (``y`` direction) or \"width\" (``x`` direction).\n    ",
        "default": "height"
      },
      {
        "name": "line_width",
        "type": "NumberSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line width values for the whisker body.\n    ",
        "default": 1
      },
      {
        "name": "line_alpha",
        "type": "AlphaSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Float)), Float)",
        "desc": "\n    The line alpha values for the whisker body.\n    ",
        "default": 1.0
      },
      {
        "name": "x_range_name",
        "type": "String",
        "desc": "\n    A particular (named) x-range to use for computing screen locations when\n    rendering glyphs on the plot. If unset, use the default x-range.\n    ",
        "default": "default"
      },
      {
        "name": "line_dash_offset",
        "type": "IntSpec(String, Dict(Enum('expr', 'field', 'value', 'transform'), Either(String, Instance(Transform), Instance(Expression), Int)), Int)",
        "desc": "\n    The line dash offset values for the whisker body.\n    ",
        "default": 0
      },
      {
        "name": "group",
        "type": "Nullable(Instance(RendererGroup))",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "upper",
        "type": "PropertyUnitsSpec(units_default='data')",
        "desc": "\n    The coordinates of the upper end of the whiskers.\n    ",
        "default": {
          "field": "upper"
        }
      }
    ]
  },
  {
    "name": "Widget",
    "fullname": "bokeh.models.widgets.widget.Widget",
    "bases": [
      "bokeh.models.layouts.LayoutDOM"
    ],
    "desc": " A base class for all interactive widget types.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          5,
          5,
          5,
          5
        ]
      },
      {
        "name": "default_size",
        "type": "Int",
        "desc": "\n    The default size (width or height) in the dominating dimension.\n\n    The dominating dimension is determined by widget orientation.\n    ",
        "default": 300
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "WidgetBox",
    "fullname": "bokeh.models.layouts.WidgetBox",
    "bases": [
      "bokeh.models.layouts.Column"
    ],
    "desc": " Create a column of bokeh widgets with predefined styling.\n\n    WidgetBox is DEPRECATED and will beremoved in Bokeh 3.0, use 'Column' instead.\n\n    ",
    "props": [
      {
        "name": "disabled",
        "type": "Bool",
        "desc": "\n    Whether the widget will be disabled when rendered.\n\n    If ``True``, the widget will be greyed-out and not responsive to UI events.\n    ",
        "default": false
      },
      {
        "name": "height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The height of the component (in pixels).\n\n    This can be either fixed or preferred height, depending on height sizing policy.\n    ",
        "default": null
      },
      {
        "name": "css_classes",
        "type": "List(String)",
        "desc": "\n    A list of CSS class names to add to this DOM element. Note: the class names are\n    simply added as-is, no other guarantees are provided.\n\n    It is also permissible to assign from tuples, however these are adapted -- the\n    property will always contain a list.\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "margin",
        "type": "Nullable(Tuple(Int, Int, Int, Int))",
        "desc": "\n    Allows to create additional space around the component.\n    The values in the tuple are ordered as follows - Margin-Top, Margin-Right, Margin-Bottom and Margin-Left,\n    similar to CSS standards.\n    Negative margin values may be used to shrink the space from any direction.\n    ",
        "default": [
          0,
          0,
          0,
          0
        ]
      },
      {
        "name": "width_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its width.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``width`` pixels. Component will overflow if it can't fit in the\n        available horizontal space.\n\n    ``\"fit\"``\n        Use component's preferred width (if set) and allow it to fit into the available\n        horizontal space within the minimum and maximum width bounds (if set). Component's\n        width neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little horizontal space as possible, not less than the minimum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much horizontal space as possible, not more than the maximum width (if set).\n        The starting point is the preferred width (if set). The width of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "min_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "sizing_mode",
        "type": "Nullable(Enum('stretch_width', 'stretch_height', 'stretch_both', 'scale_width', 'scale_height', 'scale_both', 'fixed'))",
        "desc": "\n    How the component should size itself.\n\n    This is a high-level setting for maintaining width and height of the component. To\n    gain more fine grained control over sizing, use ``width_policy``, ``height_policy``\n    and ``aspect_ratio`` instead (those take precedence over ``sizing_mode``).\n\n    Possible scenarios:\n\n    ``\"fixed\"``\n        Component is not responsive. It will retain its original width and height\n        regardless of any subsequent browser window resize events.\n\n    ``\"stretch_width\"``\n        Component will responsively resize to stretch to the available width, without\n        maintaining any aspect ratio. The height of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_height\"``\n        Component will responsively resize to stretch to the available height, without\n        maintaining any aspect ratio. The width of the component depends on the type\n        of the component and may be fixed or fit to component's contents.\n\n    ``\"stretch_both\"``\n        Component is completely responsive, independently in width and height, and\n        will occupy all the available horizontal and vertical space, even if this\n        changes the aspect ratio of the component.\n\n    ``\"scale_width\"``\n        Component will responsively resize to stretch to the available width, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_height\"``\n        Component will responsively resize to stretch to the available height, while\n        maintaining the original or provided aspect ratio.\n\n    ``\"scale_both\"``\n        Component will responsively resize to both the available width and height, while\n        maintaining the original or provided aspect ratio.\n\n    ",
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Maximal width of the component (in pixels) if width is adjustable.\n    ",
        "default": null
      },
      {
        "name": "rows",
        "type": "Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Dict(Either(Int, String), Either(Either(Enum('auto', 'min', 'fit', 'max'), Int), Struct(policy=Enum('auto', 'min'), align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fixed'), height=Int, align=Either(Auto, Enum('start', 'center', 'end'))), Struct(policy=Enum('fit', 'max'), flex=Float, align=Either(Auto, Enum('start', 'center', 'end'))))))",
        "desc": "\n    Describes how the component should maintain its rows' heights.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion.\n\n    ",
        "default": "auto"
      },
      {
        "name": "visible",
        "type": "Bool",
        "desc": "\n    Whether the component will be visible and a part of a layout.\n    ",
        "default": true
      },
      {
        "name": "min_height",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    Minimal height of the component (in pixels) if height is adjustable.\n    ",
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "width",
        "type": "Nullable(NonNegativeInt)",
        "desc": "\n    The width of the component (in pixels).\n\n    This can be either fixed or preferred width, depending on width sizing policy.\n    ",
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Instance(LayoutDOM))",
        "desc": "\n    The list of children, which can be other components including plots, rows, columns, and widgets.\n    ",
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "align",
        "type": "Either(Enum('start', 'center', 'end'), Tuple(Enum('start', 'center', 'end'), Enum('start', 'center', 'end')))",
        "desc": "\n    The alignment point within the parent container.\n\n    This property is useful only if this component is a child element of a layout\n    (e.g. a grid). Self alignment can be overridden by the parent container (e.g.\n    grid track align).\n    ",
        "default": "start"
      },
      {
        "name": "height_policy",
        "type": "Either(Auto, Enum('fixed', 'fit', 'min', 'max'))",
        "desc": "\n    Describes how the component should maintain its height.\n\n    ``\"auto\"``\n        Use component's preferred sizing policy.\n\n    ``\"fixed\"``\n        Use exactly ``height`` pixels. Component will overflow if it can't fit in the\n        available vertical space.\n\n    ``\"fit\"``\n        Use component's preferred height (if set) and allow to fit into the available\n        vertical space within the minimum and maximum height bounds (if set). Component's\n        height neither will be aggressively minimized nor maximized.\n\n    ``\"min\"``\n        Use as little vertical space as possible, not less than the minimum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    ``\"max\"``\n        Use as much vertical space as possible, not more than the maximum height (if set).\n        The starting point is the preferred height (if set). The height of the component may\n        shrink or grow depending on the parent layout, aspect management and other factors.\n\n    .. note::\n        This is an experimental feature and may change in future. Use it at your\n        own discretion. Prefer using ``sizing_mode`` if this level of control isn't\n        strictly necessary.\n\n    ",
        "default": "auto"
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "background",
        "type": "Nullable(Color)",
        "desc": "\n    Background color of the component.\n    ",
        "default": null
      },
      {
        "name": "spacing",
        "type": "Int",
        "desc": "\n    The gap between children (in pixels).\n    ",
        "default": 0
      },
      {
        "name": "aspect_ratio",
        "type": "Either(Null, Auto, Float)",
        "desc": "\n    Describes the proportional relationship between component's width and height.\n\n    This works if any of component's dimensions are flexible in size. If set to\n    a number, ``width / height = aspect_ratio`` relationship will be maintained.\n    Otherwise, if set to ``\"auto\"``, component's preferred width and height will\n    be used to determine the aspect (if not set, no aspect will be preserved).\n\n    ",
        "default": null
      }
    ]
  },
  {
    "name": "XComponent",
    "fullname": "bokeh.models.expressions.XComponent",
    "bases": [
      "bokeh.models.expressions.XYComponent"
    ],
    "desc": " X-component of a coordinate system transform to cartesian coordinates. ",
    "props": [
      {
        "name": "transform",
        "type": "Instance(CoordinateTransform)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "XYComponent",
    "fullname": "bokeh.models.expressions.XYComponent",
    "bases": [
      "bokeh.models.expressions.Expression"
    ],
    "desc": " Base class for bi-variate expressions. \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "transform",
        "type": "Instance(CoordinateTransform)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "XYGlyph",
    "fullname": "bokeh.models.glyph.XYGlyph",
    "bases": [
      "bokeh.models.glyph.Glyph"
    ],
    "desc": " Base class of glyphs with `x` and `y` coordinate attributes.\n\n    \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "YComponent",
    "fullname": "bokeh.models.expressions.YComponent",
    "bases": [
      "bokeh.models.expressions.XYComponent"
    ],
    "desc": " Y-component of a coordinate system transform to cartesian coordinates. ",
    "props": [
      {
        "name": "transform",
        "type": "Instance(CoordinateTransform)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "YearsTicker",
    "fullname": "bokeh.models.tickers.YearsTicker",
    "bases": [
      "bokeh.models.tickers.SingleIntervalTicker"
    ],
    "desc": " Generate ticks spaced apart even numbers of years.\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "num_minor_ticks",
        "type": "Int",
        "desc": "\n    The number of minor tick positions to generate between\n    adjacent major tick values.\n    ",
        "default": 5
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "interval",
        "type": "NonNullable(Float)",
        "desc": "\n    The interval between adjacent ticks.\n    ",
        "default": "<Undefined>"
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "desired_num_ticks",
        "type": "Int",
        "desc": "\n    A desired target number of major tick positions to generate across\n    the plot range.\n\n    .. note:\n        This value is a suggestion, and ticker subclasses may ignore\n        it entirely, or use it only as an ideal goal to approach as well\n        as can be, in the context of a specific ticking strategy.\n    ",
        "default": 6
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "ZoomInTool",
    "fullname": "bokeh.models.tools.ZoomInTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " *toolbar icon*: |zoom_in_icon|\n\n    The zoom-in tool allows users to click a button to zoom in\n    by a fixed amount.\n\n    .. |zoom_in_icon| image:: /_images/icons/ZoomIn.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the zoom-in tool is constrained to act in. By default the\n    zoom-in zoom tool will zoom in any dimension, but can be configured to only\n    zoom horizontally across the width of the plot, or vertically across the\n    height of the plot.\n    ",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "factor",
        "type": "Percent",
        "desc": "\n    Percentage to zoom for each click of the zoom-in tool.\n    ",
        "default": 0.1
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      }
    ]
  },
  {
    "name": "ZoomOutTool",
    "fullname": "bokeh.models.tools.ZoomOutTool",
    "bases": [
      "bokeh.models.tools.ActionTool"
    ],
    "desc": " *toolbar icon*: |zoom_out_icon|\n\n    The zoom-out tool allows users to click a button to zoom out\n    by a fixed amount.\n\n    .. |zoom_out_icon| image:: /_images/icons/ZoomOut.png\n        :height: 24px\n\n    ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "dimensions",
        "type": "Enum('width', 'height', 'both')",
        "desc": "\n    Which dimensions the zoom-out tool is constrained to act in. By default the\n    zoom-out tool will zoom in any dimension, but can be configured to only\n    zoom horizontally across the width of the plot, or vertically across the\n    height of the plot.\n    ",
        "default": "both"
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "description",
        "type": "Nullable(String)",
        "desc": "\n    A string describing the purpose of this tool. If not defined, an auto-generated\n    description will be used. This description will be typically presented in the\n    user interface as a tooltip.\n    ",
        "default": null
      },
      {
        "name": "factor",
        "type": "Percent",
        "desc": "\n    Percentage to zoom for each click of the zoom-in tool.\n    ",
        "default": 0.1
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "maintain_focus",
        "type": "Bool",
        "desc": "\n    If True, then hitting a range bound in any one dimension will prevent all\n    further zooming all dimensions. If False, zooming can continue\n    independently in any dimension that has not yet reached its bounds, even if\n    that causes overall focus or aspect ratio to change.\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.css.Styles",
    "fullname": "bokeh.models.css.Styles",
    "bases": [
      "bokeh.model.model.Model",
      "bokeh.model.util.Qualified"
    ],
    "desc": " Allows to configure style attribute of DOM elements. ",
    "props": [
      {
        "name": "stroke_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_bottom",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "alignment_baseline",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overscroll_behavior",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_rule_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "mask_repeat",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_rule_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "rotate",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "mask_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "z_index",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "place_self",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "caret_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding_block_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_justify",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_top",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_family",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "css_float",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_top_right_radius",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "counter_increment",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "opacity",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "break_before",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding_bottom",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_variant_east_asian",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "height",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_right_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_template_columns",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "fill_rule",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_block_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_align",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_variant_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "all",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_column",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overscroll_behavior_inline",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "backface_visibility",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_top_left_radius",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "justify_self",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_row_gap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "clear",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_shadow",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_right",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "outline",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transform_box",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transition_delay",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "padding_inline_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "glyph_orientation_vertical",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transform_origin",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_position_y",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overscroll_behavior_x",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_start_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_auto_rows",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "visibility",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_indent",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_row_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_image",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding_block_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "display",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stroke_linecap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_transform",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding_right",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_start_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "dominant_baseline",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_image_slice",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "right",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "word_spacing",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_decoration_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_end_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "caption_side",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_image",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_orientation",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_decoration",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "vertical_align",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "max_height",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "color_interpolation_filters",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stroke_linejoin",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transform_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_inline_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_emphasis_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_origin",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation_play_state",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_feature_settings",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "outline_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overflow",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "max_inline_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stroke_miterlimit",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_variant_numeric",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "user_select",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "break_after",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stop_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_synthesis",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stroke_dasharray",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "page_break_before",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation_iteration_count",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_overflow",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overflow_anchor",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "align_self",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "clip_rule",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "top",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_left_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "image_rendering",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_bottom_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_anchor",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flex_basis",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_end_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "clip",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "list_style_type",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_template_rows",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "left",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "mask_type",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overscroll_behavior_y",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation_direction",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_column_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation_duration",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flex_flow",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "word_wrap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_image_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "baseline_shift",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "white_space",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_align_last",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "place_content",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "clip_path",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_right_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_template",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "min_height",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "align_content",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_underline_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transition_property",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "list_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_emphasis",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "fill_opacity",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_radius",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_left_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "float",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "filter",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_image_source",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_image_repeat",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_emphasis_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "lighting_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_span",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_kerning",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_combine_upright",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_decoration_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stop_opacity",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_attachment",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_inline_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_clip",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_top_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "perspective",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "font_size_adjust",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation_delay",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_start_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_left",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "direction",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "row_gap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transform",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "mask_composite",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_image_outset",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "box_shadow",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_block_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "block_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "unicode_bidi",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "marker_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_end_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flex",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_bottom_left_radius",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "order",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "justify_content",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "outline_offset",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "paint_order",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "shape_rendering",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "align_items",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_right",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_bottom_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_fill",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "letter_spacing",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_gap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "max_block_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "quotes",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_left_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_auto_flow",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "ruby_align",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overflow_x",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "cursor",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overflow_y",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_row_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "min_inline_size",
        "type": "Nullable(String)",
        "desc": "\n    The `min-inline-size`_ CSS property defines the horizontal or vertical\n    minimal size of an element's block, depending on its writing mode. It\n    corresponds to either the ``min-width`` or the ``min-height`` property,\n    depending on the value of ``writing-mode``.\n\n    .. _min-inline-size: https://developer.mozilla.org/en-US/docs/Web/CSS/min-inline-size\n    ",
        "default": null
      },
      {
        "name": "animation_fill_mode",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_weight",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "gap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "page_break_after",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "widows",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "box_sizing",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_column_gap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_template_areas",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "perspective_origin",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "line_height",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "bottom",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_position_x",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "marker",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_column_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transition_duration",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "writing_mode",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "object_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "place_items",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "scale",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "empty_cells",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "resize",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_row",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "marker_end",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "pointer_events",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "columns",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_collapse",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_rule_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding_inline_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding_left",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_top",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_area",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "scroll_behavior",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "min_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "word_break",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "mask_image",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "justify_items",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flex_shrink",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stroke",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "max_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "touch_action",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_start_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_top_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flood_opacity",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "css_text",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overscroll_behavior_block",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "page_break_inside",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stroke_opacity",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_emphasis_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_stretch",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_rendering",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation_timing_function",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transition_timing_function",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "will_change",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "font_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "list_style_image",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flex_direction",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "overflow_wrap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "break_inside",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin_bottom",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "padding_top",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_spacing",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "marker_mid",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "tab_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "mask",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_repeat",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_start_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "grid_auto_columns",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "translate",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "color_interpolation",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_bottom_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "hyphens",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "content",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "transition",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_end_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flood_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "outline_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "image_orientation",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_gap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_rule",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "counter_reset",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "animation_name",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_right_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "outline_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "fill",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "text_decoration_line",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_bottom_right_radius",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "line_break",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "object_fit",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_variant_ligatures",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_end_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_top_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "margin",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flex_grow",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_start_width",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_left",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "table_layout",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "min_block_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "mask_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_variant_caps",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "background_color",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "stroke_dashoffset",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_block_end_style",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "orphans",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "border_inline_start",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "list_style_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "column_count",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "inline_size",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "font_variant",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "ruby_position",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      },
      {
        "name": "flex_wrap",
        "type": "Nullable(String)",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Action",
    "fullname": "bokeh.models.dom.Action",
    "bases": [
      "bokeh.model.model.Model",
      "bokeh.model.util.Qualified"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.dom.ColorRef",
    "fullname": "bokeh.models.dom.ColorRef",
    "bases": [
      "bokeh.models.dom.ValueRef"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": null,
        "default": "<Undefined>"
      },
      {
        "name": "hex",
        "type": "Bool",
        "desc": null,
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "swatch",
        "type": "Bool",
        "desc": null,
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.dom.DOMElement",
    "fullname": "bokeh.models.dom.DOMElement",
    "bases": [
      "bokeh.models.dom.DOMNode"
    ],
    "desc": " Base class for DOM elements. \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": null,
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.DOMNode",
    "fullname": "bokeh.models.dom.DOMNode",
    "bases": [
      "bokeh.model.model.Model",
      "bokeh.model.util.Qualified"
    ],
    "desc": " Base class for DOM nodes. \n    .. note::\n        This is an abstract base class used to help organize the hierarchy of Bokeh\n        model types. **It is not useful to instantiate on its own.**\n\n",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Div",
    "fullname": "bokeh.models.dom.Div",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": null,
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Index",
    "fullname": "bokeh.models.dom.Index",
    "bases": [
      "bokeh.models.dom.Placeholder"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Placeholder",
    "fullname": "bokeh.models.dom.Placeholder",
    "bases": [
      "bokeh.models.dom.DOMNode"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Span",
    "fullname": "bokeh.models.dom.Span",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": null,
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Table",
    "fullname": "bokeh.models.dom.Table",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": null,
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.TableRow",
    "fullname": "bokeh.models.dom.TableRow",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": null,
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Template",
    "fullname": "bokeh.models.dom.Template",
    "bases": [
      "bokeh.models.dom.DOMElement"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "actions",
        "type": "List(Instance(Action))",
        "desc": null,
        "default": []
      },
      {
        "name": "children",
        "type": "List(Either(String, Instance(DOMNode), Instance(LayoutDOM)))",
        "desc": null,
        "default": []
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "style",
        "type": "Nullable(Either(Instance(Styles), Dict(String, String)))",
        "desc": null,
        "default": null
      }
    ]
  },
  {
    "name": "bokeh.models.dom.Text",
    "fullname": "bokeh.models.dom.Text",
    "bases": [
      "bokeh.models.dom.DOMNode"
    ],
    "desc": " DOM text node. ",
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "content",
        "type": "String",
        "desc": null,
        "default": ""
      }
    ]
  },
  {
    "name": "bokeh.models.dom.ToggleGroup",
    "fullname": "bokeh.models.dom.ToggleGroup",
    "bases": [
      "bokeh.models.dom.Action"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "groups",
        "type": "List(Instance(RendererGroup))",
        "desc": null,
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      }
    ]
  },
  {
    "name": "bokeh.models.dom.ValueRef",
    "fullname": "bokeh.models.dom.ValueRef",
    "bases": [
      "bokeh.models.dom.Placeholder"
    ],
    "desc": null,
    "props": [
      {
        "name": "tags",
        "type": "List(AnyRef)",
        "desc": "\n    An optional list of arbitrary, user-supplied values to attach to this\n    model.\n\n    This data can be useful when querying the document to retrieve specific\n    Bokeh models:\n\n    .. code:: python\n\n        >>> r = plot.circle([1,2,3], [4,5,6])\n        >>> r.tags = [\"foo\", 10]\n        >>> plot.select(tags=['foo', 10])\n        [GlyphRenderer(id='1de4c3df-a83d-480a-899b-fb263d3d5dd9', ...)]\n\n    Or simply a convenient way to attach any necessary metadata to a model\n    that can be accessed by ``CustomJS`` callbacks, etc.\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any tags\n        that are provided, nor are the tags used directly by Bokeh for any\n        reason.\n\n    ",
        "default": []
      },
      {
        "name": "js_property_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of attribute names to lists of ``CustomJS`` callbacks, to be set up on\n    BokehJS side when the document is created.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_change`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('stuff')\")\n        plot.x_range.js_on_change('start', callback)\n\n    ",
        "default": {}
      },
      {
        "name": "subscribed_events",
        "type": "List(String)",
        "desc": "\n    List of events that are subscribed to by Python callbacks. This is\n    the set of events that will be communicated from BokehJS back to\n    Python for this model.\n    ",
        "default": []
      },
      {
        "name": "name",
        "type": "Nullable(String)",
        "desc": "\n    An arbitrary, user-supplied name for this model.\n\n    This name can be useful when querying the document to retrieve specific\n    Bokeh models.\n\n    .. code:: python\n\n        >>> plot.circle([1,2,3], [4,5,6], name=\"temp\")\n        >>> plot.select(name=\"temp\")\n        [GlyphRenderer(id='399d53f5-73e9-44d9-9527-544b761c7705', ...)]\n\n    .. note::\n        No uniqueness guarantees or other conditions are enforced on any names\n        that are provided, nor is the name used directly by Bokeh for any\n        reason.\n\n    ",
        "default": null
      },
      {
        "name": "js_event_callbacks",
        "type": "Dict(String, List(Instance(CustomJS)))",
        "desc": "\n    A mapping of event names to lists of ``CustomJS`` callbacks.\n\n    Typically, rather then modifying this property directly, callbacks should be\n    added using the ``Model.js_on_event`` method:\n\n    .. code:: python\n\n        callback = CustomJS(code=\"console.log('tap event occurred')\")\n        plot.js_on_event('tap', callback)\n    ",
        "default": {}
      },
      {
        "name": "syncable",
        "type": "Bool",
        "desc": "\n    Indicates whether this model should be synchronized back to a Bokeh server when\n    updated in a web browser. Setting to ``False`` may be useful to reduce network\n    traffic when dealing with frequently updated objects whose updated values we\n    don't need.\n\n    .. note::\n        Setting this property to ``False`` will prevent any ``on_change()`` callbacks\n        on this object from triggering. However, any JS-side callbacks will still\n        work.\n\n    ",
        "default": true
      },
      {
        "name": "field",
        "type": "NonNullable(String)",
        "desc": null,
        "default": "<Undefined>"
      }
    ]
  }
]